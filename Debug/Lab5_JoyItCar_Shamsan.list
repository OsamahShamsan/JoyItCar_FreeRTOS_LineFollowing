
Lab5_JoyItCar_Shamsan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102c8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  080104a8  080104a8  000114a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b20  08010b20  00012214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010b20  08010b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b28  08010b28  00012214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b28  08010b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b2c  08010b2c  00011b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08010b30  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ce4  20000214  08010d44  00012214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ef8  08010d44  00012ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027022  00000000  00000000  00012244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aa1  00000000  00000000  00039266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  0003ed08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001800  00000000  00000000  00040be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a4d4  00000000  00000000  000423e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cd5c  00000000  00000000  0004c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b2c  00000000  00000000  00079618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d144  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009148  00000000  00000000  0015d188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001662d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000214 	.word	0x20000214
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010490 	.word	0x08010490

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000218 	.word	0x20000218
 800021c:	08010490 	.word	0x08010490

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b988 	b.w	8001000 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	468e      	mov	lr, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	4688      	mov	r8, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d962      	bls.n	8000de4 <__udivmoddi4+0xdc>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	b14e      	cbz	r6, 8000d38 <__udivmoddi4+0x30>
 8000d24:	f1c6 0320 	rsb	r3, r6, #32
 8000d28:	fa01 f806 	lsl.w	r8, r1, r6
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	ea43 0808 	orr.w	r8, r3, r8
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d5c:	f080 80ea 	bcs.w	8000f34 <__udivmoddi4+0x22c>
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f240 80e7 	bls.w	8000f34 <__udivmoddi4+0x22c>
 8000d66:	3902      	subs	r1, #2
 8000d68:	443b      	add	r3, r7
 8000d6a:	1a9a      	subs	r2, r3, r2
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7e:	459c      	cmp	ip, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x8e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	f080 80d6 	bcs.w	8000f38 <__udivmoddi4+0x230>
 8000d8c:	459c      	cmp	ip, r3
 8000d8e:	f240 80d3 	bls.w	8000f38 <__udivmoddi4+0x230>
 8000d92:	443b      	add	r3, r7
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9a:	eba3 030c 	sub.w	r3, r3, ip
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11d      	cbz	r5, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40f3      	lsrs	r3, r6
 8000da4:	2200      	movs	r2, #0
 8000da6:	e9c5 3200 	strd	r3, r2, [r5]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d905      	bls.n	8000dbe <__udivmoddi4+0xb6>
 8000db2:	b10d      	cbz	r5, 8000db8 <__udivmoddi4+0xb0>
 8000db4:	e9c5 0100 	strd	r0, r1, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e7f5      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dbe:	fab3 f183 	clz	r1, r3
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d146      	bne.n	8000e54 <__udivmoddi4+0x14c>
 8000dc6:	4573      	cmp	r3, lr
 8000dc8:	d302      	bcc.n	8000dd0 <__udivmoddi4+0xc8>
 8000dca:	4282      	cmp	r2, r0
 8000dcc:	f200 8105 	bhi.w	8000fda <__udivmoddi4+0x2d2>
 8000dd0:	1a84      	subs	r4, r0, r2
 8000dd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4690      	mov	r8, r2
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e5      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000dde:	e9c5 4800 	strd	r4, r8, [r5]
 8000de2:	e7e2      	b.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 8090 	beq.w	8000f0a <__udivmoddi4+0x202>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f040 80a4 	bne.w	8000f3c <__udivmoddi4+0x234>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x11e>
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x11c>
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f200 80e0 	bhi.w	8000fe4 <__udivmoddi4+0x2dc>
 8000e24:	46c4      	mov	ip, r8
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e34:	fb02 f404 	mul.w	r4, r2, r4
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x144>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x142>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2d6>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e52:	e7a5      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e54:	f1c1 0620 	rsb	r6, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	fa0e f401 	lsl.w	r4, lr, r1
 8000e64:	fa20 f306 	lsr.w	r3, r0, r6
 8000e68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e70:	4323      	orrs	r3, r4
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	fa1f fc87 	uxth.w	ip, r7
 8000e7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7e:	0c1c      	lsrs	r4, r3, #16
 8000e80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__udivmoddi4+0x1a0>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e9a:	f080 809c 	bcs.w	8000fd6 <__udivmoddi4+0x2ce>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f240 8099 	bls.w	8000fd6 <__udivmoddi4+0x2ce>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	fa1f fe83 	uxth.w	lr, r3
 8000eb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec0:	45a4      	cmp	ip, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1ce>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eca:	f080 8082 	bcs.w	8000fd2 <__udivmoddi4+0x2ca>
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d97f      	bls.n	8000fd2 <__udivmoddi4+0x2ca>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eda:	eba4 040c 	sub.w	r4, r4, ip
 8000ede:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee2:	4564      	cmp	r4, ip
 8000ee4:	4673      	mov	r3, lr
 8000ee6:	46e1      	mov	r9, ip
 8000ee8:	d362      	bcc.n	8000fb0 <__udivmoddi4+0x2a8>
 8000eea:	d05f      	beq.n	8000fac <__udivmoddi4+0x2a4>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x1fe>
 8000eee:	ebb8 0203 	subs.w	r2, r8, r3
 8000ef2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef6:	fa04 f606 	lsl.w	r6, r4, r6
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c5 6400 	strd	r6, r4, [r5]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e74f      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0e:	0c01      	lsrs	r1, r0, #16
 8000f10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f14:	b280      	uxth	r0, r0
 8000f16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	463c      	mov	r4, r7
 8000f20:	46b8      	mov	r8, r7
 8000f22:	46be      	mov	lr, r7
 8000f24:	2620      	movs	r6, #32
 8000f26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f2a:	eba2 0208 	sub.w	r2, r2, r8
 8000f2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f32:	e766      	b.n	8000e02 <__udivmoddi4+0xfa>
 8000f34:	4601      	mov	r1, r0
 8000f36:	e718      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e72c      	b.n	8000d96 <__udivmoddi4+0x8e>
 8000f3c:	f1c6 0220 	rsb	r2, r6, #32
 8000f40:	fa2e f302 	lsr.w	r3, lr, r2
 8000f44:	40b7      	lsls	r7, r6
 8000f46:	40b1      	lsls	r1, r6
 8000f48:	fa20 f202 	lsr.w	r2, r0, r2
 8000f4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f56:	b2bc      	uxth	r4, r7
 8000f58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb08 f904 	mul.w	r9, r8, r4
 8000f66:	40b0      	lsls	r0, r6
 8000f68:	4589      	cmp	r9, r1
 8000f6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	d93e      	bls.n	8000ff0 <__udivmoddi4+0x2e8>
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f78:	d201      	bcs.n	8000f7e <__udivmoddi4+0x276>
 8000f7a:	4589      	cmp	r9, r1
 8000f7c:	d81f      	bhi.n	8000fbe <__udivmoddi4+0x2b6>
 8000f7e:	eba1 0109 	sub.w	r1, r1, r9
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d229      	bcs.n	8000fec <__udivmoddi4+0x2e4>
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9e:	d2c4      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d2c2      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa8:	443a      	add	r2, r7
 8000faa:	e7be      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fac:	45f0      	cmp	r8, lr
 8000fae:	d29d      	bcs.n	8000eec <__udivmoddi4+0x1e4>
 8000fb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb8:	3801      	subs	r0, #1
 8000fba:	46e1      	mov	r9, ip
 8000fbc:	e796      	b.n	8000eec <__udivmoddi4+0x1e4>
 8000fbe:	eba7 0909 	sub.w	r9, r7, r9
 8000fc2:	4449      	add	r1, r9
 8000fc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fcc:	fb09 f804 	mul.w	r8, r9, r4
 8000fd0:	e7db      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fd2:	4673      	mov	r3, lr
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1ce>
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	e766      	b.n	8000ea8 <__udivmoddi4+0x1a0>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e6fd      	b.n	8000dda <__udivmoddi4+0xd2>
 8000fde:	443b      	add	r3, r7
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x144>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	443b      	add	r3, r7
 8000fea:	e71c      	b.n	8000e26 <__udivmoddi4+0x11e>
 8000fec:	4649      	mov	r1, r9
 8000fee:	e79c      	b.n	8000f2a <__udivmoddi4+0x222>
 8000ff0:	eba1 0109 	sub.w	r1, r1, r9
 8000ff4:	46c4      	mov	ip, r8
 8000ff6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ffa:	fb09 f804 	mul.w	r8, r9, r4
 8000ffe:	e7c4      	b.n	8000f8a <__udivmoddi4+0x282>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <xTraceDiagnosticsAdd+0x34>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <xTraceDiagnosticsAdd+0x34>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	4401      	add	r1, r0
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TRC_SUCCESS;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000230 	.word	0x20000230

0800103c <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	return xTraceDiagnosticsAdd(xType, 1);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2101      	movs	r1, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffda 	bl	8001004 <xTraceDiagnosticsAdd>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <xTraceDiagnosticsSetIfHigher+0x38>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd05      	ble.n	8001084 <xTraceDiagnosticsSetIfHigher+0x28>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <xTraceDiagnosticsSetIfHigher+0x38>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return TRC_SUCCESS;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000230 	.word	0x20000230

08001098 <xTraceEntryCreate>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 80010a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <xTraceEntryCreate+0xb8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <xTraceEntryCreate+0x18>
	{
		return TRC_FAIL;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e04b      	b.n	8001148 <xTraceEntryCreate+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010b0:	f3ef 8310 	mrs	r3, PRIMASK
 80010b4:	617b      	str	r3, [r7, #20]
  return(result);
 80010b6:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 80010b8:	623b      	str	r3, [r7, #32]
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f383 8810 	msr	PRIMASK, r3
}
 80010c4:	bf00      	nop

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 80010c6:	f107 030b 	add.w	r3, r7, #11
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f89a 	bl	8001204 <prvEntryIndexTake>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <xTraceEntryCreate+0x54>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff ffb0 	bl	800103c <xTraceDiagnosticsIncrease>
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f383 8810 	msr	PRIMASK, r3
}
 80010e6:	bf00      	nop

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e02d      	b.n	8001148 <xTraceEntryCreate+0xb0>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <xTraceEntryCreate+0xbc>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	4619      	mov	r1, r3
 80010f4:	460b      	mov	r3, r1
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	440b      	add	r3, r1
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	3308      	adds	r3, #8
 80010fe:	4413      	add	r3, r2
 8001100:	3304      	adds	r3, #4
 8001102:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
 800110e:	e008      	b.n	8001122 <xTraceEntryCreate+0x8a>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	3301      	adds	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	2b02      	cmp	r3, #2
 8001126:	d9f3      	bls.n	8001110 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	2200      	movs	r2, #0
 8001132:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f383 8810 	msr	PRIMASK, r3
}
 8001144:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000024c 	.word	0x2000024c
 8001154:	20000234 	.word	0x20000234

08001158 <xTraceEntryFind>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e017      	b.n	8001198 <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <xTraceEntryFind+0x54>)
 800116a:	6819      	ldr	r1, [r3, #0]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	3308      	adds	r3, #8
 8001178:	440b      	add	r3, r1
 800117a:	3304      	adds	r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d104      	bne.n	8001192 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 800118e:	2300      	movs	r3, #0
 8001190:	e006      	b.n	80011a0 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b37      	cmp	r3, #55	@ 0x37
 800119c:	d9e4      	bls.n	8001168 <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000234 	.word	0x20000234

080011b0 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <xTraceEntrySetSymbol+0x50>)
 80011c4:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4619      	mov	r1, r3
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff ff44 	bl	800105c <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b1b      	cmp	r3, #27
 80011d8:	d902      	bls.n	80011e0 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80011da:	231c      	movs	r3, #28
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e002      	b.n	80011e6 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3301      	adds	r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3314      	adds	r3, #20
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00c fa23 	bl	800d63a <memcpy>

	return TRC_SUCCESS;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	080104a8 	.word	0x080104a8

08001204 <prvEntryIndexTake>:

	return TRC_SUCCESS;
}

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <prvEntryIndexTake+0x5c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 8001216:	2301      	movs	r3, #1
 8001218:	e01c      	b.n	8001254 <prvEntryIndexTake+0x50>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <prvEntryIndexTake+0x5c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	73fb      	strb	r3, [r7, #15]
	pxIndexTable->uiFreeIndexCount--;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <prvEntryIndexTake+0x5c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001228:	3a01      	subs	r2, #1
 800122a:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <prvEntryIndexTake+0x5c>)
 800122e:	6819      	ldr	r1, [r3, #0]
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <prvEntryIndexTake+0x5c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <prvEntryIndexTake+0x5c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	5c8a      	ldrb	r2, [r1, r2]
 800123c:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <prvEntryIndexTake+0x5c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <prvEntryIndexTake+0x5c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001248:	21ff      	movs	r1, #255	@ 0xff
 800124a:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000238 	.word	0x20000238

08001264 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
	int32_t iBytesCommitted = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8001276:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <xTraceEventCreate1+0xdc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <xTraceEventCreate1+0x28>
 8001282:	4b30      	ldr	r3, [pc, #192]	@ (8001344 <xTraceEventCreate1+0xe0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <xTraceEventCreate1+0x2c>
 800128c:	2301      	movs	r3, #1
 800128e:	e053      	b.n	8001338 <xTraceEventCreate1+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001290:	f3ef 8310 	mrs	r3, PRIMASK
 8001294:	61fb      	str	r3, [r7, #28]
  return(result);
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	f383 8810 	msr	PRIMASK, r3
}
 80012a4:	bf00      	nop
 80012a6:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <xTraceEventCreate1+0xe4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	3201      	adds	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	200c      	movs	r0, #12
 80012b8:	f000 fc38 	bl	8001b2c <xTraceInternalEventBufferAlloc>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <xTraceEventCreate1+0x6e>
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f383 8810 	msr	PRIMASK, r3
}
 80012cc:	bf00      	nop
 80012ce:	2301      	movs	r3, #1
 80012d0:	e032      	b.n	8001338 <xTraceEventCreate1+0xd4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80012dc:	b292      	uxth	r2, r2
 80012de:	801a      	strh	r2, [r3, #0]
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <xTraceEventCreate1+0xe4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	b292      	uxth	r2, r2
 80012ea:	805a      	strh	r2, [r3, #2]
 80012ec:	4a17      	ldr	r2, [pc, #92]	@ (800134c <xTraceEventCreate1+0xe8>)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <xTraceEventCreate1+0xec>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d204      	bcs.n	800130c <xTraceEventCreate1+0xa8>
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <xTraceEventCreate1+0xec>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	3201      	adds	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <xTraceEventCreate1+0xec>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6852      	ldr	r2, [r2, #4]
 8001314:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f107 020c 	add.w	r2, r7, #12
 8001322:	210c      	movs	r1, #12
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fc15 	bl	8001b54 <xTraceInternalEventBufferAllocCommit>
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f383 8810 	msr	PRIMASK, r3
}
 8001334:	bf00      	nop

	return TRC_SUCCESS;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000024c 	.word	0x2000024c
 8001344:	20000248 	.word	0x20000248
 8001348:	2000023c 	.word	0x2000023c
 800134c:	e0001004 	.word	0xe0001004
 8001350:	20000254 	.word	0x20000254

08001354 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8001368:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <xTraceEventCreate2+0xe4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <xTraceEventCreate2+0x2a>
 8001374:	4b31      	ldr	r3, [pc, #196]	@ (800143c <xTraceEventCreate2+0xe8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <xTraceEventCreate2+0x2e>
 800137e:	2301      	movs	r3, #1
 8001380:	e056      	b.n	8001430 <xTraceEventCreate2+0xdc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001382:	f3ef 8310 	mrs	r3, PRIMASK
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800138c:	2301      	movs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001392:	f383 8810 	msr	PRIMASK, r3
}
 8001396:	bf00      	nop
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <xTraceEventCreate2+0xec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	3201      	adds	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	f107 0318 	add.w	r3, r7, #24
 80013a6:	4619      	mov	r1, r3
 80013a8:	2010      	movs	r0, #16
 80013aa:	f000 fbbf 	bl	8001b2c <xTraceInternalEventBufferAlloc>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <xTraceEventCreate2+0x70>
 80013b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	f383 8810 	msr	PRIMASK, r3
}
 80013be:	bf00      	nop
 80013c0:	2301      	movs	r3, #1
 80013c2:	e035      	b.n	8001430 <xTraceEventCreate2+0xdc>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013ce:	b292      	uxth	r2, r2
 80013d0:	801a      	strh	r2, [r3, #0]
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <xTraceEventCreate2+0xec>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	b292      	uxth	r2, r2
 80013dc:	805a      	strh	r2, [r3, #2]
 80013de:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <xTraceEventCreate2+0xf0>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <xTraceEventCreate2+0xf4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d204      	bcs.n	80013fe <xTraceEventCreate2+0xaa>
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <xTraceEventCreate2+0xf4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	3201      	adds	r2, #1
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <xTraceEventCreate2+0xf4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6852      	ldr	r2, [r2, #4]
 8001406:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f107 0214 	add.w	r2, r7, #20
 800141a:	2110      	movs	r1, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fb99 	bl	8001b54 <xTraceInternalEventBufferAllocCommit>
 8001422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001424:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f383 8810 	msr	PRIMASK, r3
}
 800142c:	bf00      	nop

	return TRC_SUCCESS;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3730      	adds	r7, #48	@ 0x30
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000024c 	.word	0x2000024c
 800143c:	20000248 	.word	0x20000248
 8001440:	2000023c 	.word	0x2000023c
 8001444:	e0001004 	.word	0xe0001004
 8001448:	20000254 	.word	0x20000254

0800144c <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 8001462:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <xTraceEventCreate3+0xec>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <xTraceEventCreate3+0x2c>
 800146e:	4b33      	ldr	r3, [pc, #204]	@ (800153c <xTraceEventCreate3+0xf0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <xTraceEventCreate3+0x30>
 8001478:	2301      	movs	r3, #1
 800147a:	e059      	b.n	8001530 <xTraceEventCreate3+0xe4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800147c:	f3ef 8310 	mrs	r3, PRIMASK
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	f383 8810 	msr	PRIMASK, r3
}
 8001490:	bf00      	nop
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <xTraceEventCreate3+0xf4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	3201      	adds	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4619      	mov	r1, r3
 80014a2:	2014      	movs	r0, #20
 80014a4:	f000 fb42 	bl	8001b2c <xTraceInternalEventBufferAlloc>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <xTraceEventCreate3+0x72>
 80014ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f383 8810 	msr	PRIMASK, r3
}
 80014b8:	bf00      	nop
 80014ba:	2301      	movs	r3, #1
 80014bc:	e038      	b.n	8001530 <xTraceEventCreate3+0xe4>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 80014c8:	b292      	uxth	r2, r2
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <xTraceEventCreate3+0xf4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	b292      	uxth	r2, r2
 80014d6:	805a      	strh	r2, [r3, #2]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001544 <xTraceEventCreate3+0xf8>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <xTraceEventCreate3+0xfc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d204      	bcs.n	80014f8 <xTraceEventCreate3+0xac>
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <xTraceEventCreate3+0xfc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	3201      	adds	r2, #1
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <xTraceEventCreate3+0xfc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6852      	ldr	r2, [r2, #4]
 8001500:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f107 0214 	add.w	r2, r7, #20
 800151a:	2114      	movs	r1, #20
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fb19 	bl	8001b54 <xTraceInternalEventBufferAllocCommit>
 8001522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001524:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f383 8810 	msr	PRIMASK, r3
}
 800152c:	bf00      	nop

	return TRC_SUCCESS;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3730      	adds	r7, #48	@ 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000024c 	.word	0x2000024c
 800153c:	20000248 	.word	0x20000248
 8001540:	2000023c 	.word	0x2000023c
 8001544:	e0001004 	.word	0xe0001004
 8001548:	20000254 	.word	0x20000254

0800154c <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	@ 0x30
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 8001562:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <xTraceEventCreate4+0xf4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <xTraceEventCreate4+0x2c>
 800156e:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <xTraceEventCreate4+0xf8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <xTraceEventCreate4+0x30>
 8001578:	2301      	movs	r3, #1
 800157a:	e05c      	b.n	8001636 <xTraceEventCreate4+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800157c:	f3ef 8310 	mrs	r3, PRIMASK
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	f383 8810 	msr	PRIMASK, r3
}
 8001590:	bf00      	nop
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <xTraceEventCreate4+0xfc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	3201      	adds	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	4619      	mov	r1, r3
 80015a2:	2018      	movs	r0, #24
 80015a4:	f000 fac2 	bl	8001b2c <xTraceInternalEventBufferAlloc>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <xTraceEventCreate4+0x72>
 80015ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f383 8810 	msr	PRIMASK, r3
}
 80015b8:	bf00      	nop
 80015ba:	2301      	movs	r3, #1
 80015bc:	e03b      	b.n	8001636 <xTraceEventCreate4+0xea>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015c8:	b292      	uxth	r2, r2
 80015ca:	801a      	strh	r2, [r3, #0]
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <xTraceEventCreate4+0xfc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	b292      	uxth	r2, r2
 80015d6:	805a      	strh	r2, [r3, #2]
 80015d8:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <xTraceEventCreate4+0x100>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <xTraceEventCreate4+0x104>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d204      	bcs.n	80015f8 <xTraceEventCreate4+0xac>
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <xTraceEventCreate4+0x104>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	3201      	adds	r2, #1
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <xTraceEventCreate4+0x104>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6852      	ldr	r2, [r2, #4]
 8001600:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001618:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	f107 0214 	add.w	r2, r7, #20
 8001620:	2118      	movs	r1, #24
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fa96 	bl	8001b54 <xTraceInternalEventBufferAllocCommit>
 8001628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f383 8810 	msr	PRIMASK, r3
}
 8001632:	bf00      	nop

	return TRC_SUCCESS;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3730      	adds	r7, #48	@ 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000024c 	.word	0x2000024c
 8001644:	20000248 	.word	0x20000248
 8001648:	2000023c 	.word	0x2000023c
 800164c:	e0001004 	.word	0xe0001004
 8001650:	20000254 	.word	0x20000254

08001654 <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	@ 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3303      	adds	r3, #3
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	330c      	adds	r3, #12
 8001678:	2b40      	cmp	r3, #64	@ 0x40
 800167a:	d901      	bls.n	8001680 <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 800167c:	2334      	movs	r3, #52	@ 0x34
 800167e:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8001680:	4b3a      	ldr	r3, [pc, #232]	@ (800176c <xTraceEventCreateData1+0x118>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <xTraceEventCreateData1+0x42>
 800168c:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <xTraceEventCreateData1+0x11c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <xTraceEventCreateData1+0x46>
 8001696:	2301      	movs	r3, #1
 8001698:	e063      	b.n	8001762 <xTraceEventCreateData1+0x10e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800169a:	f3ef 8310 	mrs	r3, PRIMASK
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a4:	2301      	movs	r3, #1
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016aa:	f383 8810 	msr	PRIMASK, r3
}
 80016ae:	bf00      	nop
 80016b0:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <xTraceEventCreateData1+0x120>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	3201      	adds	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	330c      	adds	r3, #12
 80016be:	f107 0218 	add.w	r2, r7, #24
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fa31 	bl	8001b2c <xTraceInternalEventBufferAlloc>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <xTraceEventCreateData1+0x8c>
 80016d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	f383 8810 	msr	PRIMASK, r3
}
 80016da:	bf00      	nop
 80016dc:	2301      	movs	r3, #1
 80016de:	e040      	b.n	8001762 <xTraceEventCreateData1+0x10e>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3304      	adds	r3, #4
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	031b      	lsls	r3, r3, #12
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	b292      	uxth	r2, r2
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <xTraceEventCreateData1+0x120>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	b292      	uxth	r2, r2
 8001704:	805a      	strh	r2, [r3, #2]
 8001706:	4a1c      	ldr	r2, [pc, #112]	@ (8001778 <xTraceEventCreateData1+0x124>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <xTraceEventCreateData1+0x128>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	d204      	bcs.n	8001726 <xTraceEventCreateData1+0xd2>
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <xTraceEventCreateData1+0x128>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	3201      	adds	r2, #1
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <xTraceEventCreateData1+0x128>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6852      	ldr	r2, [r2, #4]
 800172e:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	330c      	adds	r3, #12
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	f00b ff7b 	bl	800d63a <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 8001744:	69b8      	ldr	r0, [r7, #24]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	330c      	adds	r3, #12
 800174a:	f107 0214 	add.w	r2, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	f000 fa00 	bl	8001b54 <xTraceInternalEventBufferAllocCommit>
 8001754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f383 8810 	msr	PRIMASK, r3
}
 800175e:	bf00      	nop

	return TRC_SUCCESS;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3730      	adds	r7, #48	@ 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000024c 	.word	0x2000024c
 8001770:	20000248 	.word	0x20000248
 8001774:	2000023c 	.word	0x2000023c
 8001778:	e0001004 	.word	0xe0001004
 800177c:	20000254 	.word	0x20000254

08001780 <xTraceEventGetSize>:

	return TRC_SUCCESS;
}

traceResult xTraceEventGetSize(const void* const pvAddress, uint32_t* puiSize)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(puiSize != (void*)0);

	/* This should never fail */
	TRC_ASSERT((sizeof(TraceEvent0_t) + ((uint32_t)(uint16_t)(TRC_EVENT_GET_PARAM_COUNT(((const TraceEvent0_t*)pvAddress)->EventID)) * sizeof(TraceUnsignedBaseType_t))) <= (uint32_t)(TRC_MAX_BLOB_SIZE)); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
	
	return TRC_EVENT_GET_SIZE(pvAddress, puiSize);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	0b1b      	lsrs	r3, r3, #12
 8001790:	b29b      	uxth	r3, r3
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3302      	adds	r3, #2
 8001798:	009a      	lsls	r2, r3, #2
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <prvTraceEventBufferAllocPop>:

	return TRC_SUCCESS;
}

static traceResult prvTraceEventBufferAllocPop(TraceEventBuffer_t *pxTraceEventBuffer)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	uint32_t uiFreeSize = 0u;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]

	/* Check if tail is in, or at the start of the slack area. We do not want to call
	 * a free when in the slack area since it would read garbage data and free would
	 * become undefined.
	 */
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	1acb      	subs	r3, r1, r3
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d303      	bcc.n	80017d2 <prvTraceEventBufferAllocPop+0x26>
	{
		/* Tail was in the slack area, wrap back to the start of the buffer. */
		pxTraceEventBuffer->uiTail = 0u;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	e017      	b.n	8001802 <prvTraceEventBufferAllocPop+0x56>
	}
	else
	{
		/* Get size of event we are freeing (this should never fail) */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	f107 020c 	add.w	r2, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffcc 	bl	8001780 <xTraceEventGetSize>

		/* Update tail to point to the new last event */
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6892      	ldr	r2, [r2, #8]
 80017f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80017f8:	fb01 f202 	mul.w	r2, r1, r2
 80017fc:	1a9a      	subs	r2, r3, r2
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	605a      	str	r2, [r3, #4]
	}

	return TRC_SUCCESS;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <xTraceEventBufferAlloc>:

traceResult xTraceEventBufferAlloc(TraceEventBuffer_t *pxTraceEventBuffer, uint32_t uiSize, void **ppvData)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);
	
	/* This should never fail */
	TRC_ASSERT(ppvData != (void*)0);

	uiBufferSize = pxTraceEventBuffer->uiSize;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	61fb      	str	r3, [r7, #28]

	/* Handle overwrite buffer allocation, since this kind of allocation modifies
	 * both head and tail it should only be used for internal buffers without any
	 * flushing calls (Streaming Ringbuffer)
	 */
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	f040 8093 	bne.w	800194e <xTraceEventBufferAlloc+0x142>
	{
		if (pxTraceEventBuffer->uiHead >= pxTraceEventBuffer->uiTail)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	d341      	bcc.n	80018b8 <xTraceEventBufferAlloc+0xac>
		{
			/* Do we have enough space to directly allocate from the buffer? */
			if ((uiBufferSize - pxTraceEventBuffer->uiHead) > uiSize)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	429a      	cmp	r2, r3
 8001840:	d214      	bcs.n	800186c <xTraceEventBufferAlloc+0x60>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	441a      	add	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	601a      	str	r2, [r3, #0]
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	fbb3 f2f2 	udiv	r2, r3, r2
 800185e:	69f9      	ldr	r1, [r7, #28]
 8001860:	fb01 f202 	mul.w	r2, r1, r2
 8001864:	1a9a      	subs	r2, r3, r2
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	61da      	str	r2, [r3, #28]
 800186a:	e0e2      	b.n	8001a32 <xTraceEventBufferAlloc+0x226>
			{
				/* Free space until there is enough space for a contiguous
				 * allocation */
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff ff9d 	bl	80017ac <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - sizeof(uint32_t);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	3b04      	subs	r3, #4
 8001878:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	429a      	cmp	r2, r3
 8001880:	d3f4      	bcc.n	800186c <xTraceEventBufferAlloc+0x60>

				/* Calculate slack from the wrapping */
				pxTraceEventBuffer->uiSlack = uiBufferSize - pxTraceEventBuffer->uiHead;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	1ad2      	subs	r2, r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	619a      	str	r2, [r3, #24]

				/* Wrap head */
				pxTraceEventBuffer->uiHead = 0u;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

				/* Allocate data */
				*ppvData = pxTraceEventBuffer->puiBuffer;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80018aa:	69f9      	ldr	r1, [r7, #28]
 80018ac:	fb01 f202 	mul.w	r2, r1, r2
 80018b0:	1a9a      	subs	r2, r3, r2
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	61da      	str	r2, [r3, #28]
 80018b6:	e0bc      	b.n	8001a32 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	3b04      	subs	r3, #4
 80018c4:	613b      	str	r3, [r7, #16]

			/* Check if we have to free space */
			if (uiFreeSpace < uiSize)
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d231      	bcs.n	8001932 <xTraceEventBufferAlloc+0x126>
			{
				/* Check if this is a wrapping alloc */
				if ((pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead) < uiSize)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d910      	bls.n	8001900 <xTraceEventBufferAlloc+0xf4>
					/* To avoid uiHead and uiTail from becoming the same we want to
					 * pop any events that would make uiTail equal uiHead before
					 * wrapping the head. */
					do
					{
						(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7ff ff64 	bl	80017ac <prvTraceEventBufferAllocPop>
					} while (pxTraceEventBuffer->uiTail == 0u);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f8      	beq.n	80018de <xTraceEventBufferAlloc+0xd2>

					pxTraceEventBuffer->uiSlack = pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	1ad2      	subs	r2, r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	619a      	str	r2, [r3, #24]
					pxTraceEventBuffer->uiHead = 0u;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
				}
				
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff ff53 	bl	80017ac <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	3b04      	subs	r3, #4
 8001912:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3f1      	bcc.n	8001900 <xTraceEventBufferAlloc+0xf4>

				if (pxTraceEventBuffer->uiTail == 0u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d106      	bne.n	8001932 <xTraceEventBufferAlloc+0x126>
				{
					*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	441a      	add	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
				}
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	441a      	add	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead + uiSize);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	441a      	add	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	61da      	str	r2, [r3, #28]
 800194c:	e071      	b.n	8001a32 <xTraceEventBufferAlloc+0x226>
	else
	{
		/* Since a consumer could potentially update tail (free) during the procedure
		 * we have to save it here to avoid problems with it changing during this call.
		 */
		uiHead = pxTraceEventBuffer->uiHead;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]
		uiTail = pxTraceEventBuffer->uiTail;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	617b      	str	r3, [r7, #20]

		if (uiHead >= uiTail)
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	429a      	cmp	r2, r3
 8001960:	d34d      	bcc.n	80019fe <xTraceEventBufferAlloc+0x1f2>
		{
			uiFreeSpace = (uiBufferSize - uiHead - sizeof(uint32_t)) + uiTail;
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4413      	add	r3, r2
 800196c:	3b04      	subs	r3, #4
 800196e:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	429a      	cmp	r2, r3
 8001976:	d204      	bcs.n	8001982 <xTraceEventBufferAlloc+0x176>
			{
				*ppvData = 0;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 800197e:	2301      	movs	r3, #1
 8001980:	e058      	b.n	8001a34 <xTraceEventBufferAlloc+0x228>
			}

			/* Copy data */
			if ((uiBufferSize - uiHead) > uiSize)
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	429a      	cmp	r2, r3
 800198c:	d213      	bcs.n	80019b6 <xTraceEventBufferAlloc+0x1aa>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	441a      	add	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80019a8:	69f9      	ldr	r1, [r7, #28]
 80019aa:	fb01 f202 	mul.w	r2, r1, r2
 80019ae:	1a9a      	subs	r2, r3, r2
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	61da      	str	r2, [r3, #28]
 80019b4:	e03d      	b.n	8001a32 <xTraceEventBufferAlloc+0x226>
			}
			else
			{
				uiFreeSpace = uiTail;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	613b      	str	r3, [r7, #16]

				if (uiFreeSpace < uiSize)
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d204      	bcs.n	80019cc <xTraceEventBufferAlloc+0x1c0>
				{
					*ppvData = 0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

					return TRC_FAIL;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e033      	b.n	8001a34 <xTraceEventBufferAlloc+0x228>
				}

				/* Calculate slack */
				pxTraceEventBuffer->uiSlack = uiBufferSize - uiHead;
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad2      	subs	r2, r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	619a      	str	r2, [r3, #24]

				*ppvData = pxTraceEventBuffer->puiBuffer;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	441a      	add	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80019f0:	69f9      	ldr	r1, [r7, #28]
 80019f2:	fb01 f202 	mul.w	r2, r1, r2
 80019f6:	1a9a      	subs	r2, r3, r2
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	61da      	str	r2, [r3, #28]
 80019fc:	e019      	b.n	8001a32 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = uiTail - uiHead - sizeof(uint32_t);
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	3b04      	subs	r3, #4
 8001a06:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d204      	bcs.n	8001a1a <xTraceEventBufferAlloc+0x20e>
			{
				*ppvData = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00c      	b.n	8001a34 <xTraceEventBufferAlloc+0x228>
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	441a      	add	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (uiHead + uiSize);
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	441a      	add	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	61da      	str	r2, [r3, #28]
		}
	}

	return TRC_SUCCESS;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <xTraceEventBufferAllocCommit>:

traceResult xTraceEventBufferAllocCommit(TraceEventBuffer_t *pxTraceEventBuffer, const void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <xTraceEventBufferAllocCommit+0x34>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	621a      	str	r2, [r3, #32]

	/* Advance head location */
	pxTraceEventBuffer->uiHead = pxTraceEventBuffer->uiNextHead;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	601a      	str	r2, [r3, #0]

	/* Update bytes written */
	*piBytesWritten = (int32_t)uiSize;
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000254 	.word	0x20000254

08001a74 <xTraceHeapAlloc>:

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
}

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e024      	b.n	8001ad4 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d015      	beq.n	8001abc <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d904      	bls.n	8001ab6 <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <xTraceHeapAlloc+0x52>
 8001ac2:	2338      	movs	r3, #56	@ 0x38
 8001ac4:	e000      	b.n	8001ac8 <xTraceHeapAlloc+0x54>
 8001ac6:	23e9      	movs	r3, #233	@ 0xe9
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fc41 	bl	8001354 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <xTraceHeapFree>:

traceResult xTraceHeapFree(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent;

	if (xHeapHandle == 0)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <xTraceHeapFree+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e018      	b.n	8001b24 <xTraceHeapFree+0x48>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <xTraceHeapFree+0x30>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	617b      	str	r3, [r7, #20]

		uxCurrent -= uxSize;
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <xTraceHeapFree+0x3a>
 8001b12:	2339      	movs	r3, #57	@ 0x39
 8001b14:	e000      	b.n	8001b18 <xTraceHeapFree+0x3c>
 8001b16:	23ea      	movs	r3, #234	@ 0xea
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc19 	bl	8001354 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <xTraceInternalEventBufferAlloc>:

	return TRC_SUCCESS;
}

traceResult xTraceInternalEventBufferAlloc(uint32_t uiSize, void **ppvData)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));

	return xTraceMultiCoreEventBufferAlloc(pxInternalEventBuffer, uiSize, ppvData);
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <xTraceInternalEventBufferAlloc+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fe63 	bl	800180c <xTraceEventBufferAlloc>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000240 	.word	0x20000240

08001b54 <xTraceInternalEventBufferAllocCommit>:

traceResult xTraceInternalEventBufferAllocCommit(void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));

	return xTraceMultiCoreEventBufferAllocCommit(pxInternalEventBuffer, pvData, uiSize, piBytesWritten);
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <xTraceInternalEventBufferAllocCommit+0x28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	68f9      	ldr	r1, [r7, #12]
 8001b6c:	f7ff ff66 	bl	8001a3c <xTraceEventBufferAllocCommit>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000240 	.word	0x20000240

08001b80 <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <xTraceKernelPortGetSystemHeapHandle+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000244 	.word	0x20000244

08001b98 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b090      	sub	sp, #64	@ 0x40
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8001bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8001bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb6:	f383 8810 	msr	PRIMASK, r3
}
 8001bba:	bf00      	nop

	if (pvObject != (void*)0)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01a      	beq.n	8001bf8 <xTraceObjectRegisterInternal+0x60>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fa66 	bl	8001098 <xTraceEntryCreate>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d104      	bne.n	8001bdc <xTraceObjectRegisterInternal+0x44>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <xTraceObjectRegisterInternal+0x46>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <xTraceObjectRegisterInternal+0x5a>
 8001be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	f383 8810 	msr	PRIMASK, r3
}
 8001bec:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e080      	b.n	8001cf4 <xTraceObjectRegisterInternal+0x15c>
		}
		
		pvAddress = pvObject;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e012      	b.n	8001c1e <xTraceObjectRegisterInternal+0x86>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fa4b 	bl	8001098 <xTraceEntryCreate>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <xTraceObjectRegisterInternal+0x80>
 8001c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f383 8810 	msr	PRIMASK, r3
}
 8001c12:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e06d      	b.n	8001cf4 <xTraceObjectRegisterInternal+0x15c>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c22:	e00c      	b.n	8001c3e <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 8001c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c2a:	4413      	add	r3, r2
 8001c2c:	69b9      	ldr	r1, [r7, #24]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < uxStateCount; i++)
 8001c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3ee      	bcc.n	8001c24 <xTraceObjectRegisterInternal+0x8c>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f383 8810 	msr	PRIMASK, r3
}
 8001c62:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <xTraceObjectRegisterInternal+0xe4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <xTraceObjectRegisterInternal+0xe4>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f840 	bl	8001cfc <xTraceObjectSetName>
	}

	switch (uxStateCount)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d835      	bhi.n	8001cee <xTraceObjectRegisterInternal+0x156>
 8001c82:	a201      	add	r2, pc, #4	@ (adr r2, 8001c88 <xTraceObjectRegisterInternal+0xf0>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001c99 	.word	0x08001c99
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb7 	.word	0x08001cb7
 8001c94:	08001ccd 	.word	0x08001ccd
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff fae1 	bl	8001264 <xTraceEventCreate1>
			break;
 8001ca2:	e026      	b.n	8001cf2 <xTraceObjectRegisterInternal+0x15a>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff fb50 	bl	8001354 <xTraceEventCreate2>
			break;
 8001cb4:	e01d      	b.n	8001cf2 <xTraceObjectRegisterInternal+0x15a>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fbc1 	bl	800144c <xTraceEventCreate3>
			break;
 8001cca:	e012      	b.n	8001cf2 <xTraceObjectRegisterInternal+0x15a>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cdc:	3308      	adds	r3, #8
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff fc30 	bl	800154c <xTraceEventCreate4>
			break;
 8001cec:	e001      	b.n	8001cf2 <xTraceObjectRegisterInternal+0x15a>
		default:
			return TRC_FAIL;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <xTraceObjectRegisterInternal+0x15c>
			break;
	}

	return TRC_SUCCESS;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3738      	adds	r7, #56	@ 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <xTraceObjectSetName>:
	return xTraceEntryDelete(xObjectHandle);
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <xTraceObjectSetName+0x64>)
 8001d12:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e002      	b.n	8001d26 <xTraceObjectSetName+0x2a>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <xTraceObjectSetName+0x3c>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d36:	d9f3      	bls.n	8001d20 <xTraceObjectSetName+0x24>

	uiLength = i;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	3301      	adds	r3, #1
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	2003      	movs	r0, #3
 8001d48:	f7ff fc84 	bl	8001654 <xTraceEventCreateData1>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fa2d 	bl	80011b0 <xTraceEntrySetSymbol>
 8001d56:	4603      	mov	r3, r0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	080104ac 	.word	0x080104ac

08001d64 <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2301      	movs	r3, #1
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff ff06 	bl	8001b98 <xTraceObjectRegisterInternal>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <xTraceObjectSetNameWithoutHandle>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b08a      	sub	sp, #40	@ 0x28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001da0:	f3ef 8310 	mrs	r3, PRIMASK
 8001da4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001da6:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f383 8810 	msr	PRIMASK, r3
}
 8001db4:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff f9cb 	bl	8001158 <xTraceEntryFind>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d117      	bne.n	8001df8 <xTraceObjectSetNameWithoutHandle+0x62>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f963 	bl	8001098 <xTraceEntryCreate>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d104      	bne.n	8001de2 <xTraceObjectSetNameWithoutHandle+0x4c>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <xTraceObjectSetNameWithoutHandle+0x4e>
 8001de2:	2301      	movs	r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <xTraceObjectSetNameWithoutHandle+0x62>
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f383 8810 	msr	PRIMASK, r3
}
 8001df2:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e00c      	b.n	8001e12 <xTraceObjectSetNameWithoutHandle+0x7c>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff7d 	bl	8001cfc <xTraceObjectSetName>
 8001e02:	6238      	str	r0, [r7, #32]
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f383 8810 	msr	PRIMASK, r3
}
 8001e0e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3728      	adds	r7, #40	@ 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8001e2a:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <xTraceTaskSwitch+0x94>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <xTraceTaskSwitch+0x1e>
	{
		return xResult;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	e035      	b.n	8001ea6 <xTraceTaskSwitch+0x8a>
	}

	if (!xTraceIsRecorderEnabled())
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <xTraceTaskSwitch+0x94>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <xTraceTaskSwitch+0x34>
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <xTraceTaskSwitch+0x98>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <xTraceTaskSwitch+0x40>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		(void)xTraceTaskSetCurrent(pvTask);
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <xTraceTaskSwitch+0x9c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	601a      	str	r2, [r3, #0]

		return xResult;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	e024      	b.n	8001ea6 <xTraceTaskSwitch+0x8a>
	}

	(void)xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8001e5c:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <xTraceTaskSwitch+0x98>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e64:	f3ef 8310 	mrs	r3, PRIMASK
 8001e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e6a:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f383 8810 	msr	PRIMASK, r3
}
 8001e78:	bf00      	nop
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	(void)xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		(void)xTraceTaskSetCurrent(pvTask);
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <xTraceTaskSwitch+0x9c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	2037      	movs	r0, #55	@ 0x37
 8001e8a:	f7ff fa63 	bl	8001354 <xTraceEventCreate2>
 8001e8e:	61f8      	str	r0, [r7, #28]
	}

	(void)xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <xTraceTaskSwitch+0x98>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f383 8810 	msr	PRIMASK, r3
}
 8001ea2:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000024c 	.word	0x2000024c
 8001eb4:	20000248 	.word	0x20000248
 8001eb8:	20000250 	.word	0x20000250

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec0:	f002 f977 	bl	80041b2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec4:	f000 f874 	bl	8001fb0 <SystemClock_Config>
  //xTraceInitialize();
  //xTraceEnable(TRC_START);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec8:	f000 fca8 	bl	800281c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ecc:	f000 fc6c 	bl	80027a8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001ed0:	f000 f93c 	bl	800214c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001ed4:	f000 fa32 	bl	800233c <MX_TIM8_Init>
  MX_TIM4_Init();
 8001ed8:	f000 f9ba 	bl	8002250 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001edc:	f000 f8b4 	bl	8002048 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001ee0:	f000 fb22 	bl	8002528 <MX_TIM16_Init>
  MX_USART3_UART_Init();
 8001ee4:	f000 fc14 	bl	8002710 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 8001ee8:	f000 fb98 	bl	800261c <MX_TIM17_Init>
  MX_TIM15_Init();
 8001eec:	f000 fa9c 	bl	8002428 <MX_TIM15_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ef0:	f007 fc6a 	bl	80097c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LineFollower_Ta */
  LineFollower_TaHandle = osThreadNew(vLineFollowerTask, NULL, &LineFollower_Ta_attributes);
 8001ef4:	4a25      	ldr	r2, [pc, #148]	@ (8001f8c <main+0xd0>)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4825      	ldr	r0, [pc, #148]	@ (8001f90 <main+0xd4>)
 8001efa:	f007 fcaf 	bl	800985c <osThreadNew>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <main+0xd8>)
 8001f02:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(vRGBLightTask, NULL, &RGB_Task_attributes);
 8001f04:	4a24      	ldr	r2, [pc, #144]	@ (8001f98 <main+0xdc>)
 8001f06:	2100      	movs	r1, #0
 8001f08:	4824      	ldr	r0, [pc, #144]	@ (8001f9c <main+0xe0>)
 8001f0a:	f007 fca7 	bl	800985c <osThreadNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a23      	ldr	r2, [pc, #140]	@ (8001fa0 <main+0xe4>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* creation of StatsPrint_Task */
  StatsPrint_TaskHandle = osThreadNew(vStatusPrintTask, NULL, &StatsPrint_Task_attributes);
 8001f14:	4a23      	ldr	r2, [pc, #140]	@ (8001fa4 <main+0xe8>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4823      	ldr	r0, [pc, #140]	@ (8001fa8 <main+0xec>)
 8001f1a:	f007 fc9f 	bl	800985c <osThreadNew>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a22      	ldr	r2, [pc, #136]	@ (8001fac <main+0xf0>)
 8001f22:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  	Set_LED(0, 255, 0, 0);
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	21ff      	movs	r1, #255	@ 0xff
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f001 fff8 	bl	8003f20 <Set_LED>
	Set_LED(1, 0, 255, 0);
 8001f30:	2300      	movs	r3, #0
 8001f32:	22ff      	movs	r2, #255	@ 0xff
 8001f34:	2100      	movs	r1, #0
 8001f36:	2001      	movs	r0, #1
 8001f38:	f001 fff2 	bl	8003f20 <Set_LED>

	Set_LED(2, 0, 0, 255);
 8001f3c:	23ff      	movs	r3, #255	@ 0xff
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2002      	movs	r0, #2
 8001f44:	f001 ffec 	bl	8003f20 <Set_LED>
	Set_LED(3, 46, 89, 128);
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	2259      	movs	r2, #89	@ 0x59
 8001f4c:	212e      	movs	r1, #46	@ 0x2e
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f001 ffe6 	bl	8003f20 <Set_LED>

	Set_LED(4, 156, 233, 100);
 8001f54:	2364      	movs	r3, #100	@ 0x64
 8001f56:	22e9      	movs	r2, #233	@ 0xe9
 8001f58:	219c      	movs	r1, #156	@ 0x9c
 8001f5a:	2004      	movs	r0, #4
 8001f5c:	f001 ffe0 	bl	8003f20 <Set_LED>
	Set_LED(5, 102, 0, 235);
 8001f60:	23eb      	movs	r3, #235	@ 0xeb
 8001f62:	2200      	movs	r2, #0
 8001f64:	2166      	movs	r1, #102	@ 0x66
 8001f66:	2005      	movs	r0, #5
 8001f68:	f001 ffda 	bl	8003f20 <Set_LED>

	Set_LED(6, 47, 38, 77);
 8001f6c:	234d      	movs	r3, #77	@ 0x4d
 8001f6e:	2226      	movs	r2, #38	@ 0x26
 8001f70:	212f      	movs	r1, #47	@ 0x2f
 8001f72:	2006      	movs	r0, #6
 8001f74:	f001 ffd4 	bl	8003f20 <Set_LED>
	Set_LED(7, 255, 200, 0);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	22c8      	movs	r2, #200	@ 0xc8
 8001f7c:	21ff      	movs	r1, #255	@ 0xff
 8001f7e:	2007      	movs	r0, #7
 8001f80:	f001 ffce 	bl	8003f20 <Set_LED>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f84:	f007 fc44 	bl	8009810 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <main+0xcc>
 8001f8c:	08010520 	.word	0x08010520
 8001f90:	08002b11 	.word	0x08002b11
 8001f94:	20000620 	.word	0x20000620
 8001f98:	08010544 	.word	0x08010544
 8001f9c:	08002cbd 	.word	0x08002cbd
 8001fa0:	20000624 	.word	0x20000624
 8001fa4:	08010568 	.word	0x08010568
 8001fa8:	08002d25 	.word	0x08002d25
 8001fac:	20000628 	.word	0x20000628

08001fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b094      	sub	sp, #80	@ 0x50
 8001fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 0318 	add.w	r3, r7, #24
 8001fba:	2238      	movs	r2, #56	@ 0x38
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00b fabb 	bl	800d53a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f002 fee8 	bl	8004da8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe2:	2340      	movs	r3, #64	@ 0x40
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fea:	2302      	movs	r3, #2
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ff2:	2355      	movs	r3, #85	@ 0x55
 8001ff4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f107 0318 	add.w	r3, r7, #24
 8002006:	4618      	mov	r0, r3
 8002008:	f002 ff82 	bl	8004f10 <HAL_RCC_OscConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002012:	f000 feb9 	bl	8002d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
 8002018:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2303      	movs	r3, #3
 800201c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2104      	movs	r1, #4
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fa80 	bl	8005534 <HAL_RCC_ClockConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800203a:	f000 fea5 	bl	8002d88 <Error_Handler>
  }
}
 800203e:	bf00      	nop
 8002040:	3750      	adds	r7, #80	@ 0x50
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08e      	sub	sp, #56	@ 0x38
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800207a:	4b33      	ldr	r3, [pc, #204]	@ (8002148 <MX_TIM2_Init+0x100>)
 800207c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17;
 8002082:	4b31      	ldr	r3, [pc, #196]	@ (8002148 <MX_TIM2_Init+0x100>)
 8002084:	2211      	movs	r2, #17
 8002086:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b2f      	ldr	r3, [pc, #188]	@ (8002148 <MX_TIM2_Init+0x100>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800208e:	4b2e      	ldr	r3, [pc, #184]	@ (8002148 <MX_TIM2_Init+0x100>)
 8002090:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <MX_TIM2_Init+0x100>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <MX_TIM2_Init+0x100>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a2:	4829      	ldr	r0, [pc, #164]	@ (8002148 <MX_TIM2_Init+0x100>)
 80020a4:	f003 fe84 	bl	8005db0 <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020ae:	f000 fe6b 	bl	8002d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020bc:	4619      	mov	r1, r3
 80020be:	4822      	ldr	r0, [pc, #136]	@ (8002148 <MX_TIM2_Init+0x100>)
 80020c0:	f005 f84e 	bl	8007160 <HAL_TIM_ConfigClockSource>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020ca:	f000 fe5d 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020ce:	481e      	ldr	r0, [pc, #120]	@ (8002148 <MX_TIM2_Init+0x100>)
 80020d0:	f003 ff30 	bl	8005f34 <HAL_TIM_PWM_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020da:	f000 fe55 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	4816      	ldr	r0, [pc, #88]	@ (8002148 <MX_TIM2_Init+0x100>)
 80020ee:	f005 ffe1 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80020f8:	f000 fe46 	bl	8002d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fc:	2360      	movs	r3, #96	@ 0x60
 80020fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	2200      	movs	r2, #0
 8002110:	4619      	mov	r1, r3
 8002112:	480d      	ldr	r0, [pc, #52]	@ (8002148 <MX_TIM2_Init+0x100>)
 8002114:	f004 ff10 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800211e:	f000 fe33 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002122:	463b      	mov	r3, r7
 8002124:	2204      	movs	r2, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4807      	ldr	r0, [pc, #28]	@ (8002148 <MX_TIM2_Init+0x100>)
 800212a:	f004 ff05 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002134:	f000 fe28 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002138:	4803      	ldr	r0, [pc, #12]	@ (8002148 <MX_TIM2_Init+0x100>)
 800213a:	f000 ff73 	bl	8003024 <HAL_TIM_MspPostInit>

}
 800213e:	bf00      	nop
 8002140:	3738      	adds	r7, #56	@ 0x38
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000258 	.word	0x20000258

0800214c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08e      	sub	sp, #56	@ 0x38
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216c:	463b      	mov	r3, r7
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]
 800217a:	615a      	str	r2, [r3, #20]
 800217c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800217e:	4b32      	ldr	r3, [pc, #200]	@ (8002248 <MX_TIM3_Init+0xfc>)
 8002180:	4a32      	ldr	r2, [pc, #200]	@ (800224c <MX_TIM3_Init+0x100>)
 8002182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17;
 8002184:	4b30      	ldr	r3, [pc, #192]	@ (8002248 <MX_TIM3_Init+0xfc>)
 8002186:	2211      	movs	r2, #17
 8002188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <MX_TIM3_Init+0xfc>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002190:	4b2d      	ldr	r3, [pc, #180]	@ (8002248 <MX_TIM3_Init+0xfc>)
 8002192:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <MX_TIM3_Init+0xfc>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <MX_TIM3_Init+0xfc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021a4:	4828      	ldr	r0, [pc, #160]	@ (8002248 <MX_TIM3_Init+0xfc>)
 80021a6:	f003 fe03 	bl	8005db0 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80021b0:	f000 fdea 	bl	8002d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021be:	4619      	mov	r1, r3
 80021c0:	4821      	ldr	r0, [pc, #132]	@ (8002248 <MX_TIM3_Init+0xfc>)
 80021c2:	f004 ffcd 	bl	8007160 <HAL_TIM_ConfigClockSource>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80021cc:	f000 fddc 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021d0:	481d      	ldr	r0, [pc, #116]	@ (8002248 <MX_TIM3_Init+0xfc>)
 80021d2:	f003 feaf 	bl	8005f34 <HAL_TIM_PWM_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80021dc:	f000 fdd4 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4816      	ldr	r0, [pc, #88]	@ (8002248 <MX_TIM3_Init+0xfc>)
 80021f0:	f005 ff60 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021fa:	f000 fdc5 	bl	8002d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fe:	2360      	movs	r3, #96	@ 0x60
 8002200:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <MX_TIM3_Init+0xfc>)
 8002216:	f004 fe8f 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002220:	f000 fdb2 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	2204      	movs	r2, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4807      	ldr	r0, [pc, #28]	@ (8002248 <MX_TIM3_Init+0xfc>)
 800222c:	f004 fe84 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002236:	f000 fda7 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800223a:	4803      	ldr	r0, [pc, #12]	@ (8002248 <MX_TIM3_Init+0xfc>)
 800223c:	f000 fef2 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8002240:	bf00      	nop
 8002242:	3738      	adds	r7, #56	@ 0x38
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200002a4 	.word	0x200002a4
 800224c:	40000400 	.word	0x40000400

08002250 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08e      	sub	sp, #56	@ 0x38
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	615a      	str	r2, [r3, #20]
 8002280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002282:	4b2c      	ldr	r3, [pc, #176]	@ (8002334 <MX_TIM4_Init+0xe4>)
 8002284:	4a2c      	ldr	r2, [pc, #176]	@ (8002338 <MX_TIM4_Init+0xe8>)
 8002286:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002288:	4b2a      	ldr	r3, [pc, #168]	@ (8002334 <MX_TIM4_Init+0xe4>)
 800228a:	2200      	movs	r2, #0
 800228c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228e:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <MX_TIM4_Init+0xe4>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 211;
 8002294:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <MX_TIM4_Init+0xe4>)
 8002296:	22d3      	movs	r2, #211	@ 0xd3
 8002298:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229a:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <MX_TIM4_Init+0xe4>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a0:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <MX_TIM4_Init+0xe4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022a6:	4823      	ldr	r0, [pc, #140]	@ (8002334 <MX_TIM4_Init+0xe4>)
 80022a8:	f003 fd82 	bl	8005db0 <HAL_TIM_Base_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80022b2:	f000 fd69 	bl	8002d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022c0:	4619      	mov	r1, r3
 80022c2:	481c      	ldr	r0, [pc, #112]	@ (8002334 <MX_TIM4_Init+0xe4>)
 80022c4:	f004 ff4c 	bl	8007160 <HAL_TIM_ConfigClockSource>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80022ce:	f000 fd5b 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022d2:	4818      	ldr	r0, [pc, #96]	@ (8002334 <MX_TIM4_Init+0xe4>)
 80022d4:	f003 fe2e 	bl	8005f34 <HAL_TIM_PWM_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80022de:	f000 fd53 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	4810      	ldr	r0, [pc, #64]	@ (8002334 <MX_TIM4_Init+0xe4>)
 80022f2:	f005 fedf 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80022fc:	f000 fd44 	bl	8002d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002300:	2360      	movs	r3, #96	@ 0x60
 8002302:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 70;
 8002304:	2346      	movs	r3, #70	@ 0x46
 8002306:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002310:	463b      	mov	r3, r7
 8002312:	220c      	movs	r2, #12
 8002314:	4619      	mov	r1, r3
 8002316:	4807      	ldr	r0, [pc, #28]	@ (8002334 <MX_TIM4_Init+0xe4>)
 8002318:	f004 fe0e 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002322:	f000 fd31 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002326:	4803      	ldr	r0, [pc, #12]	@ (8002334 <MX_TIM4_Init+0xe4>)
 8002328:	f000 fe7c 	bl	8003024 <HAL_TIM_MspPostInit>

}
 800232c:	bf00      	nop
 800232e:	3738      	adds	r7, #56	@ 0x38
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200002f0 	.word	0x200002f0
 8002338:	40000800 	.word	0x40000800

0800233c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002342:	f107 0320 	add.w	r3, r7, #32
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <MX_TIM8_Init+0xe4>)
 800236a:	4a2e      	ldr	r2, [pc, #184]	@ (8002424 <MX_TIM8_Init+0xe8>)
 800236c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 800236e:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <MX_TIM8_Init+0xe4>)
 8002370:	2210      	movs	r2, #16
 8002372:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <MX_TIM8_Init+0xe4>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <MX_TIM8_Init+0xe4>)
 800237c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002380:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <MX_TIM8_Init+0xe4>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <MX_TIM8_Init+0xe4>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <MX_TIM8_Init+0xe4>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002394:	4822      	ldr	r0, [pc, #136]	@ (8002420 <MX_TIM8_Init+0xe4>)
 8002396:	f003 fd0b 	bl	8005db0 <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80023a0:	f000 fcf2 	bl	8002d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0320 	add.w	r3, r7, #32
 80023ae:	4619      	mov	r1, r3
 80023b0:	481b      	ldr	r0, [pc, #108]	@ (8002420 <MX_TIM8_Init+0xe4>)
 80023b2:	f004 fed5 	bl	8007160 <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80023bc:	f000 fce4 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80023c0:	4817      	ldr	r0, [pc, #92]	@ (8002420 <MX_TIM8_Init+0xe4>)
 80023c2:	f004 fa29 	bl	8006818 <HAL_TIM_IC_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80023cc:	f000 fcdc 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	480f      	ldr	r0, [pc, #60]	@ (8002420 <MX_TIM8_Init+0xe4>)
 80023e4:	f005 fe66 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80023ee:	f000 fccb 	bl	8002d88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023f6:	2301      	movs	r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 7;
 80023fe:	2307      	movs	r3, #7
 8002400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	@ (8002420 <MX_TIM8_Init+0xe4>)
 800240a:	f004 fcf8 	bl	8006dfe <HAL_TIM_IC_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002414:	f000 fcb8 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	3730      	adds	r7, #48	@ 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2000033c 	.word	0x2000033c
 8002424:	40013400 	.word	0x40013400

08002428 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	@ 0x30
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	f107 0320 	add.w	r3, r7, #32
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002454:	4b32      	ldr	r3, [pc, #200]	@ (8002520 <MX_TIM15_Init+0xf8>)
 8002456:	4a33      	ldr	r2, [pc, #204]	@ (8002524 <MX_TIM15_Init+0xfc>)
 8002458:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 800245a:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <MX_TIM15_Init+0xf8>)
 800245c:	22a9      	movs	r2, #169	@ 0xa9
 800245e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b2f      	ldr	r3, [pc, #188]	@ (8002520 <MX_TIM15_Init+0xf8>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002466:	4b2e      	ldr	r3, [pc, #184]	@ (8002520 <MX_TIM15_Init+0xf8>)
 8002468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800246c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <MX_TIM15_Init+0xf8>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002474:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <MX_TIM15_Init+0xf8>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247a:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <MX_TIM15_Init+0xf8>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002480:	4827      	ldr	r0, [pc, #156]	@ (8002520 <MX_TIM15_Init+0xf8>)
 8002482:	f003 fc95 	bl	8005db0 <HAL_TIM_Base_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 800248c:	f000 fc7c 	bl	8002d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002494:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	4619      	mov	r1, r3
 800249c:	4820      	ldr	r0, [pc, #128]	@ (8002520 <MX_TIM15_Init+0xf8>)
 800249e:	f004 fe5f 	bl	8007160 <HAL_TIM_ConfigClockSource>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 80024a8:	f000 fc6e 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80024ac:	481c      	ldr	r0, [pc, #112]	@ (8002520 <MX_TIM15_Init+0xf8>)
 80024ae:	f004 f9b3 	bl	8006818 <HAL_TIM_IC_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80024b8:	f000 fc66 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4815      	ldr	r0, [pc, #84]	@ (8002520 <MX_TIM15_Init+0xf8>)
 80024cc:	f005 fdf2 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 80024d6:	f000 fc57 	bl	8002d88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024de:	2301      	movs	r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 8;
 80024e6:	2308      	movs	r3, #8
 80024e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	4619      	mov	r1, r3
 80024f0:	480b      	ldr	r0, [pc, #44]	@ (8002520 <MX_TIM15_Init+0xf8>)
 80024f2:	f004 fc84 	bl	8006dfe <HAL_TIM_IC_ConfigChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80024fc:	f000 fc44 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2204      	movs	r2, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4806      	ldr	r0, [pc, #24]	@ (8002520 <MX_TIM15_Init+0xf8>)
 8002508:	f004 fc79 	bl	8006dfe <HAL_TIM_IC_ConfigChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 8002512:	f000 fc39 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	3730      	adds	r7, #48	@ 0x30
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000388 	.word	0x20000388
 8002524:	40014000 	.word	0x40014000

08002528 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b094      	sub	sp, #80	@ 0x50
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800252e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	611a      	str	r2, [r3, #16]
 800253e:	615a      	str	r2, [r3, #20]
 8002540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002542:	463b      	mov	r3, r7
 8002544:	2234      	movs	r2, #52	@ 0x34
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f00a fff6 	bl	800d53a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800254e:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <MX_TIM16_Init+0xec>)
 8002550:	4a31      	ldr	r2, [pc, #196]	@ (8002618 <MX_TIM16_Init+0xf0>)
 8002552:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8002554:	4b2f      	ldr	r3, [pc, #188]	@ (8002614 <MX_TIM16_Init+0xec>)
 8002556:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800255a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255c:	4b2d      	ldr	r3, [pc, #180]	@ (8002614 <MX_TIM16_Init+0xec>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1999;
 8002562:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <MX_TIM16_Init+0xec>)
 8002564:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002568:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256a:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <MX_TIM16_Init+0xec>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002570:	4b28      	ldr	r3, [pc, #160]	@ (8002614 <MX_TIM16_Init+0xec>)
 8002572:	2200      	movs	r2, #0
 8002574:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002576:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <MX_TIM16_Init+0xec>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800257c:	4825      	ldr	r0, [pc, #148]	@ (8002614 <MX_TIM16_Init+0xec>)
 800257e:	f003 fc17 	bl	8005db0 <HAL_TIM_Base_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8002588:	f000 fbfe 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800258c:	4821      	ldr	r0, [pc, #132]	@ (8002614 <MX_TIM16_Init+0xec>)
 800258e:	f003 fcd1 	bl	8005f34 <HAL_TIM_PWM_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8002598:	f000 fbf6 	bl	8002d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259c:	2360      	movs	r3, #96	@ 0x60
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 150;
 80025a0:	2396      	movs	r3, #150	@ 0x96
 80025a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025a8:	2300      	movs	r3, #0
 80025aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025bc:	2200      	movs	r2, #0
 80025be:	4619      	mov	r1, r3
 80025c0:	4814      	ldr	r0, [pc, #80]	@ (8002614 <MX_TIM16_Init+0xec>)
 80025c2:	f004 fcb9 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80025cc:	f000 fbdc 	bl	8002d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	4619      	mov	r1, r3
 80025f6:	4807      	ldr	r0, [pc, #28]	@ (8002614 <MX_TIM16_Init+0xec>)
 80025f8:	f005 fdde 	bl	80081b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002602:	f000 fbc1 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002606:	4803      	ldr	r0, [pc, #12]	@ (8002614 <MX_TIM16_Init+0xec>)
 8002608:	f000 fd0c 	bl	8003024 <HAL_TIM_MspPostInit>

}
 800260c:	bf00      	nop
 800260e:	3750      	adds	r7, #80	@ 0x50
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200003d4 	.word	0x200003d4
 8002618:	40014400 	.word	0x40014400

0800261c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b094      	sub	sp, #80	@ 0x50
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002622:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]
 8002632:	615a      	str	r2, [r3, #20]
 8002634:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002636:	463b      	mov	r3, r7
 8002638:	2234      	movs	r2, #52	@ 0x34
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f00a ff7c 	bl	800d53a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002642:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <MX_TIM17_Init+0xec>)
 8002644:	4a31      	ldr	r2, [pc, #196]	@ (800270c <MX_TIM17_Init+0xf0>)
 8002646:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1699;
 8002648:	4b2f      	ldr	r3, [pc, #188]	@ (8002708 <MX_TIM17_Init+0xec>)
 800264a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800264e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <MX_TIM17_Init+0xec>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 7499;
 8002656:	4b2c      	ldr	r3, [pc, #176]	@ (8002708 <MX_TIM17_Init+0xec>)
 8002658:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 800265c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265e:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <MX_TIM17_Init+0xec>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002664:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <MX_TIM17_Init+0xec>)
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266a:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <MX_TIM17_Init+0xec>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002670:	4825      	ldr	r0, [pc, #148]	@ (8002708 <MX_TIM17_Init+0xec>)
 8002672:	f003 fb9d 	bl	8005db0 <HAL_TIM_Base_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800267c:	f000 fb84 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002680:	4821      	ldr	r0, [pc, #132]	@ (8002708 <MX_TIM17_Init+0xec>)
 8002682:	f003 fc57 	bl	8005f34 <HAL_TIM_PWM_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800268c:	f000 fb7c 	bl	8002d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002690:	2360      	movs	r3, #96	@ 0x60
 8002692:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1;
 8002694:	2301      	movs	r3, #1
 8002696:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002698:	2300      	movs	r3, #0
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800269c:	2300      	movs	r3, #0
 800269e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026b0:	2200      	movs	r2, #0
 80026b2:	4619      	mov	r1, r3
 80026b4:	4814      	ldr	r0, [pc, #80]	@ (8002708 <MX_TIM17_Init+0xec>)
 80026b6:	f004 fc3f 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80026c0:	f000 fb62 	bl	8002d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4807      	ldr	r0, [pc, #28]	@ (8002708 <MX_TIM17_Init+0xec>)
 80026ec:	f005 fd64 	bl	80081b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 80026f6:	f000 fb47 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80026fa:	4803      	ldr	r0, [pc, #12]	@ (8002708 <MX_TIM17_Init+0xec>)
 80026fc:	f000 fc92 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8002700:	bf00      	nop
 8002702:	3750      	adds	r7, #80	@ 0x50
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000420 	.word	0x20000420
 800270c:	40014800 	.word	0x40014800

08002710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002714:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 8002716:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <MX_USART3_UART_Init+0x94>)
 8002718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800271a:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800272e:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002746:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800274c:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800274e:	2200      	movs	r2, #0
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002752:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002758:	4811      	ldr	r0, [pc, #68]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800275a:	f005 fdff 	bl	800835c <HAL_UART_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002764:	f000 fb10 	bl	8002d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002768:	2100      	movs	r1, #0
 800276a:	480d      	ldr	r0, [pc, #52]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800276c:	f006 ff1d 	bl	80095aa <HAL_UARTEx_SetTxFifoThreshold>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002776:	f000 fb07 	bl	8002d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800277a:	2100      	movs	r1, #0
 800277c:	4808      	ldr	r0, [pc, #32]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800277e:	f006 ff52 	bl	8009626 <HAL_UARTEx_SetRxFifoThreshold>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002788:	f000 fafe 	bl	8002d88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <MX_USART3_UART_Init+0x90>)
 800278e:	f006 fed3 	bl	8009538 <HAL_UARTEx_DisableFifoMode>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002798:	f000 faf6 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200004cc 	.word	0x200004cc
 80027a4:	40004800 	.word	0x40004800

080027a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <MX_DMA_Init+0x70>)
 80027b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b2:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <MX_DMA_Init+0x70>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80027ba:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <MX_DMA_Init+0x70>)
 80027bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027c6:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <MX_DMA_Init+0x70>)
 80027c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ca:	4a13      	ldr	r2, [pc, #76]	@ (8002818 <MX_DMA_Init+0x70>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <MX_DMA_Init+0x70>)
 80027d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2105      	movs	r1, #5
 80027e2:	200b      	movs	r0, #11
 80027e4:	f001 fdd4 	bl	8004390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027e8:	200b      	movs	r0, #11
 80027ea:	f001 fdeb 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2105      	movs	r1, #5
 80027f2:	200c      	movs	r0, #12
 80027f4:	f001 fdcc 	bl	8004390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027f8:	200c      	movs	r0, #12
 80027fa:	f001 fde3 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2105      	movs	r1, #5
 8002802:	200d      	movs	r0, #13
 8002804:	f001 fdc4 	bl	8004390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002808:	200d      	movs	r0, #13
 800280a:	f001 fddb 	bl	80043c4 <HAL_NVIC_EnableIRQ>

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002836:	4a2e      	ldr	r2, [pc, #184]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800283e:	4b2c      	ldr	r3, [pc, #176]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b29      	ldr	r3, [pc, #164]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	4a28      	ldr	r2, [pc, #160]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002856:	4b26      	ldr	r3, [pc, #152]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	4a22      	ldr	r2, [pc, #136]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <MX_GPIO_Init+0xd4>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMot_right_ENB_GPO_GPIO_Port, DCMot_right_ENB_GPO_Pin, GPIO_PIN_RESET);
 800287a:	2200      	movs	r2, #0
 800287c:	2102      	movs	r1, #2
 800287e:	481d      	ldr	r0, [pc, #116]	@ (80028f4 <MX_GPIO_Init+0xd8>)
 8002880:	f002 fa7a 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMot_left_ENA_GPO_GPIO_Port, DCMot_left_ENA_GPO_Pin, GPIO_PIN_RESET);
 8002884:	2200      	movs	r2, #0
 8002886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800288a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800288e:	f002 fa73 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DCMot_right_ENB_GPO_Pin */
  GPIO_InitStruct.Pin = DCMot_right_ENB_GPO_Pin;
 8002892:	2302      	movs	r3, #2
 8002894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCMot_right_ENB_GPO_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4619      	mov	r1, r3
 80028a8:	4812      	ldr	r0, [pc, #72]	@ (80028f4 <MX_GPIO_Init+0xd8>)
 80028aa:	f002 f8cb 	bl	8004a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : IPS_right_GPI_Pin IPS_left_GPI_Pin LTS_left_GPI_Pin LTS_right_GPI_Pin
                           LTS_middle_GPI_Pin */
  GPIO_InitStruct.Pin = IPS_right_GPI_Pin|IPS_left_GPI_Pin|LTS_left_GPI_Pin|LTS_right_GPI_Pin
 80028ae:	f641 430c 	movw	r3, #7180	@ 0x1c0c
 80028b2:	60fb      	str	r3, [r7, #12]
                          |LTS_middle_GPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	4619      	mov	r1, r3
 80028c2:	480c      	ldr	r0, [pc, #48]	@ (80028f4 <MX_GPIO_Init+0xd8>)
 80028c4:	f002 f8be 	bl	8004a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMot_left_ENA_GPO_Pin */
  GPIO_InitStruct.Pin = DCMot_left_ENA_GPO_Pin;
 80028c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCMot_left_ENA_GPO_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4619      	mov	r1, r3
 80028e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e4:	f002 f8ae 	bl	8004a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	48000800 	.word	0x48000800

080028f8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	static uint32_t last_cap_right = 0, last_cap_left = 0;
	static uint32_t last_ovf_right = 0, last_ovf_left = 0;

	static uint32_t echo_start = 0, echo_end = 0, edge_state = 0;

	if (htim->Instance == TIM15) {
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a55      	ldr	r2, [pc, #340]	@ (8002a5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d14d      	bne.n	80029a6 <HAL_TIM_IC_CaptureCallback+0xae>

	        // Snapshot overflow counter first (prevents races)
	        uint32_t overflow_snapshot = tim15_overflow_count;
 800290a:	4b55      	ldr	r3, [pc, #340]	@ (8002a60 <HAL_TIM_IC_CaptureCallback+0x168>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	61fb      	str	r3, [r7, #28]

	        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {      // PA2 => Right
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7f1b      	ldrb	r3, [r3, #28]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d121      	bne.n	800295c <HAL_TIM_IC_CaptureCallback+0x64>
	            uint32_t capture_now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002918:	2100      	movs	r1, #0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f004 fd1a 	bl	8007354 <HAL_TIM_ReadCapturedValue>
 8002920:	6138      	str	r0, [r7, #16]
	            uint32_t ticks_since_last = (overflow_snapshot - last_ovf_right) * 65536u + (uint16_t)(capture_now - last_cap_right);
 8002922:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	b291      	uxth	r1, r2
 8002930:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_TIM_IC_CaptureCallback+0x170>)
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	b292      	uxth	r2, r2
 8002936:	1a8a      	subs	r2, r1, r2
 8002938:	b292      	uxth	r2, r2
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

	            last_cap_right   = capture_now;
 800293e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a68 <HAL_TIM_IC_CaptureCallback+0x170>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6013      	str	r3, [r2, #0]
	            last_ovf_right   = overflow_snapshot;
 8002944:	4a47      	ldr	r2, [pc, #284]	@ (8002a64 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	6013      	str	r3, [r2, #0]
	            period_right_ticks = ticks_since_last;
 800294a:	4a48      	ldr	r2, [pc, #288]	@ (8002a6c <HAL_TIM_IC_CaptureCallback+0x174>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6013      	str	r3, [r2, #0]
	            last_right_ms    = xTaskGetTickCountFromISR();
 8002950:	f008 fbba 	bl	800b0c8 <xTaskGetTickCountFromISR>
 8002954:	4603      	mov	r3, r0
 8002956:	4a46      	ldr	r2, [pc, #280]	@ (8002a70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e024      	b.n	80029a6 <HAL_TIM_IC_CaptureCallback+0xae>
	        }
	        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {  // PA3 => Left
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7f1b      	ldrb	r3, [r3, #28]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d120      	bne.n	80029a6 <HAL_TIM_IC_CaptureCallback+0xae>
	            uint32_t capture_now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002964:	2104      	movs	r1, #4
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f004 fcf4 	bl	8007354 <HAL_TIM_ReadCapturedValue>
 800296c:	61b8      	str	r0, [r7, #24]
	            uint32_t ticks_since_last =
	                (overflow_snapshot - last_ovf_left) * 65536u +
 800296e:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	041b      	lsls	r3, r3, #16
	                (uint16_t)(capture_now - last_cap_left);
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	b291      	uxth	r1, r2
 800297c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a78 <HAL_TIM_IC_CaptureCallback+0x180>)
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	b292      	uxth	r2, r2
 8002982:	1a8a      	subs	r2, r1, r2
 8002984:	b292      	uxth	r2, r2
	            uint32_t ticks_since_last =
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

	            last_cap_left    = capture_now;
 800298a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a78 <HAL_TIM_IC_CaptureCallback+0x180>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6013      	str	r3, [r2, #0]
	            last_ovf_left    = overflow_snapshot;
 8002990:	4a38      	ldr	r2, [pc, #224]	@ (8002a74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	6013      	str	r3, [r2, #0]
	            period_left_ticks = ticks_since_last;
 8002996:	4a39      	ldr	r2, [pc, #228]	@ (8002a7c <HAL_TIM_IC_CaptureCallback+0x184>)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	6013      	str	r3, [r2, #0]
	            last_left_ms     = xTaskGetTickCountFromISR();
 800299c:	f008 fb94 	bl	800b0c8 <xTaskGetTickCountFromISR>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a37      	ldr	r2, [pc, #220]	@ (8002a80 <HAL_TIM_IC_CaptureCallback+0x188>)
 80029a4:	6013      	str	r3, [r2, #0]
	        }
	}


    if(htim->Instance == TIM8 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a36      	ldr	r2, [pc, #216]	@ (8002a84 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d151      	bne.n	8002a54 <HAL_TIM_IC_CaptureCallback+0x15c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7f1b      	ldrb	r3, [r3, #28]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d14d      	bne.n	8002a54 <HAL_TIM_IC_CaptureCallback+0x15c>

        if(edge_state == 0)  { // Rising edge
 80029b8:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <HAL_TIM_IC_CaptureCallback+0x190>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11a      	bne.n	80029f6 <HAL_TIM_IC_CaptureCallback+0xfe>

            echo_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80029c0:	2100      	movs	r1, #0
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f004 fcc6 	bl	8007354 <HAL_TIM_ReadCapturedValue>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a30      	ldr	r2, [pc, #192]	@ (8002a8c <HAL_TIM_IC_CaptureCallback+0x194>)
 80029cc:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 020a 	bic.w	r2, r2, #10
 80029dc:	621a      	str	r2, [r3, #32]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a1a      	ldr	r2, [r3, #32]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0202 	orr.w	r2, r2, #2
 80029ec:	621a      	str	r2, [r3, #32]
            edge_state = 1;
 80029ee:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_TIM_IC_CaptureCallback+0x190>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
            } else {
            	pulse_ticks = (65536 - echo_start + echo_end);
            }
        }
    }
}
 80029f4:	e02e      	b.n	8002a54 <HAL_TIM_IC_CaptureCallback+0x15c>
            echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80029f6:	2100      	movs	r1, #0
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f004 fcab 	bl	8007354 <HAL_TIM_ReadCapturedValue>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a23      	ldr	r2, [pc, #140]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002a02:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 020a 	bic.w	r2, r2, #10
 8002a12:	621a      	str	r2, [r3, #32]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a12      	ldr	r2, [r2, #32]
 8002a1e:	621a      	str	r2, [r3, #32]
            edge_state = 0;
 8002a20:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
            if (echo_end >= echo_start) {
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b18      	ldr	r3, [pc, #96]	@ (8002a8c <HAL_TIM_IC_CaptureCallback+0x194>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d307      	bcc.n	8002a42 <HAL_TIM_IC_CaptureCallback+0x14a>
            	pulse_ticks = (echo_end - echo_start);
 8002a32:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <HAL_TIM_IC_CaptureCallback+0x194>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a15      	ldr	r2, [pc, #84]	@ (8002a94 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	e008      	b.n	8002a54 <HAL_TIM_IC_CaptureCallback+0x15c>
            	pulse_ticks = (65536 - echo_start + echo_end);
 8002a42:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_TIM_IC_CaptureCallback+0x194>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002a50:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	2000064c 	.word	0x2000064c
 8002a64:	20000654 	.word	0x20000654
 8002a68:	20000658 	.word	0x20000658
 8002a6c:	2000063c 	.word	0x2000063c
 8002a70:	20000644 	.word	0x20000644
 8002a74:	2000065c 	.word	0x2000065c
 8002a78:	20000660 	.word	0x20000660
 8002a7c:	20000640 	.word	0x20000640
 8002a80:	20000648 	.word	0x20000648
 8002a84:	40013400 	.word	0x40013400
 8002a88:	20000664 	.word	0x20000664
 8002a8c:	20000668 	.word	0x20000668
 8002a90:	2000066c 	.word	0x2000066c
 8002a94:	20000630 	.word	0x20000630

08002a98 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_4);
 8002aa0:	210c      	movs	r1, #12
 8002aa2:	4805      	ldr	r0, [pc, #20]	@ (8002ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002aa4:	f003 fdc0 	bl	8006628 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200002f0 	.word	0x200002f0
 8002abc:	200008e4 	.word	0x200008e4

08002ac0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b04 <HAL_UART_TxCpltCallback+0x44>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d114      	bne.n	8002afc <HAL_UART_TxCpltCallback+0x3c>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
        vTaskNotifyGiveFromISR(StatsPrint_TaskHandle, &xHigherPriorityTaskWoken);
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <HAL_UART_TxCpltCallback+0x48>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f107 020c 	add.w	r2, r7, #12
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f008 feff 	bl	800b8e4 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_UART_TxCpltCallback+0x3c>
 8002aec:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_UART_TxCpltCallback+0x4c>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
    }
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40004800 	.word	0x40004800
 8002b08:	20000628 	.word	0x20000628
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <vLineFollowerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vLineFollowerTask */
void vLineFollowerTask(void *argument)
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b090      	sub	sp, #64	@ 0x40
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//const TickType_t xPeriod_ramp = pdMS_TO_TICKS(1);
	const TickType_t xPeriod = pdMS_TO_TICKS(1);
 8002b18:	2301      	movs	r3, #1
 8002b1a:	637b      	str	r3, [r7, #52]	@ 0x34
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8002b1c:	f008 fac4 	bl	800b0a8 <xTaskGetTickCount>
 8002b20:	4603      	mov	r3, r0
 8002b22:	633b      	str	r3, [r7, #48]	@ 0x30

	Motors_Init(&Mot_right, &Mot_left);
 8002b24:	4958      	ldr	r1, [pc, #352]	@ (8002c88 <vLineFollowerTask+0x178>)
 8002b26:	4859      	ldr	r0, [pc, #356]	@ (8002c8c <vLineFollowerTask+0x17c>)
 8002b28:	f000 fdb6 	bl	8003698 <Motors_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	*/

    USS_Init(&htim17, TIM_CHANNEL_1, &htim8, TIM_CHANNEL_1);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4a58      	ldr	r2, [pc, #352]	@ (8002c90 <vLineFollowerTask+0x180>)
 8002b30:	2100      	movs	r1, #0
 8002b32:	4858      	ldr	r0, [pc, #352]	@ (8002c94 <vLineFollowerTask+0x184>)
 8002b34:	f001 f938 	bl	8003da8 <USS_Init>
    LTS_Config cfg = {GPIOC, LTS_left_GPI_Pin, GPIOC, LTS_middle_GPI_Pin, GPIOC, LTS_right_GPI_Pin};
 8002b38:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <vLineFollowerTask+0x188>)
 8002b3a:	f107 0418 	add.w	r4, r7, #24
 8002b3e:	461d      	mov	r5, r3
 8002b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b48:	e884 0003 	stmia.w	r4, {r0, r1}
    IPS_Config ips_cfg = {GPIOC, IPS_left_GPI_Pin,  GPIOC, IPS_right_GPI_Pin};
 8002b4c:	4b53      	ldr	r3, [pc, #332]	@ (8002c9c <vLineFollowerTask+0x18c>)
 8002b4e:	f107 0408 	add.w	r4, r7, #8
 8002b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    TickType_t noLineStartTime = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    //bool noStartActive = false;
    bool noLineActive = false;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(1000));
 8002b62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b66:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f008 f8ba 	bl	800ace4 <vTaskDelayUntil>
  /* Infinite loop */
	for(;;) {
	  distance_cm = (uint32_t)USS_get_value(pulse_ticks);
 8002b70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca0 <vLineFollowerTask+0x190>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 f92b 	bl	8003dd0 <USS_get_value>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4a49      	ldr	r2, [pc, #292]	@ (8002ca4 <vLineFollowerTask+0x194>)
 8002b7e:	6013      	str	r3, [r2, #0]
	  sensor = get_LTS_value(&cfg);
 8002b80:	f107 0318 	add.w	r3, r7, #24
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 f941 	bl	8003e0c <get_LTS_value>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4a46      	ldr	r2, [pc, #280]	@ (8002ca8 <vLineFollowerTask+0x198>)
 8002b8e:	6013      	str	r3, [r2, #0]
	  ips = get_IPS_value(&ips_cfg);
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f993 	bl	8003ec0 <get_IPS_value>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a43      	ldr	r2, [pc, #268]	@ (8002cac <vLineFollowerTask+0x19c>)
 8002b9e:	8013      	strh	r3, [r2, #0]
	  if (distance_cm <= min_dist){
		  stop_robot();
		  continue;
	  }
	  */
	  if (sensor.current_state == NO_LINE ) {
 8002ba0:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <vLineFollowerTask+0x198>)
 8002ba2:	78db      	ldrb	r3, [r3, #3]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11b      	bne.n	8002be0 <vLineFollowerTask+0xd0>
		  if (!noLineActive){
 8002ba8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <vLineFollowerTask+0xb4>
			  noLineStartTime = xTaskGetTickCount();
 8002bb6:	f008 fa77 	bl	800b0a8 <xTaskGetTickCount>
 8002bba:	63f8      	str	r0, [r7, #60]	@ 0x3c
			  noLineActive = true;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002bc2:	e010      	b.n	8002be6 <vLineFollowerTask+0xd6>
		  } else {
			  if((xTaskGetTickCount() - noLineStartTime) >= pdMS_TO_TICKS(1000)){
 8002bc4:	f008 fa70 	bl	800b0a8 <xTaskGetTickCount>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bd2:	d308      	bcc.n	8002be6 <vLineFollowerTask+0xd6>
				  stop_robot();
 8002bd4:	f001 f800 	bl	8003bd8 <stop_robot>
				  vTaskDelay(pdMS_TO_TICKS(10));
 8002bd8:	200a      	movs	r0, #10
 8002bda:	f008 f907 	bl	800adec <vTaskDelay>
				  continue;
 8002bde:	e051      	b.n	8002c84 <vLineFollowerTask+0x174>
			  }
		  }
	  } else {
		  noLineActive = false;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	  }

	  switch(sensor.current_state){
 8002be6:	4b30      	ldr	r3, [pc, #192]	@ (8002ca8 <vLineFollowerTask+0x198>)
 8002be8:	78db      	ldrb	r3, [r3, #3]
 8002bea:	2b07      	cmp	r3, #7
 8002bec:	d844      	bhi.n	8002c78 <vLineFollowerTask+0x168>
 8002bee:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf4 <vLineFollowerTask+0xe4>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c41 	.word	0x08002c41
 8002bfc:	08002c2b 	.word	0x08002c2b
 8002c00:	08002c79 	.word	0x08002c79
 8002c04:	08002c57 	.word	0x08002c57
 8002c08:	08002c6d 	.word	0x08002c6d
 8002c0c:	08002c79 	.word	0x08002c79
 8002c10:	08002c73 	.word	0x08002c73
	  case NO_LINE: 	move_robot(ForwardSpeed, ForwardSpeed); break;
 8002c14:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <vLineFollowerTask+0x1a0>)
 8002c16:	f993 3000 	ldrsb.w	r3, [r3]
 8002c1a:	4a25      	ldr	r2, [pc, #148]	@ (8002cb0 <vLineFollowerTask+0x1a0>)
 8002c1c:	f992 2000 	ldrsb.w	r2, [r2]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fd94 	bl	8003750 <move_robot>
 8002c28:	e026      	b.n	8002c78 <vLineFollowerTask+0x168>
	  case MIDDLE:		move_robot(ForwardSpeed, ForwardSpeed); break;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <vLineFollowerTask+0x1a0>)
 8002c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <vLineFollowerTask+0x1a0>)
 8002c32:	f992 2000 	ldrsb.w	r2, [r2]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd89 	bl	8003750 <move_robot>
 8002c3e:	e01b      	b.n	8002c78 <vLineFollowerTask+0x168>

	  case RIGHT:		move_robot(ForwardCurveSpeed,stop); break;
 8002c40:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb4 <vLineFollowerTask+0x1a4>)
 8002c42:	f993 3000 	ldrsb.w	r3, [r3]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <vLineFollowerTask+0x1a8>)
 8002c48:	f992 2000 	ldrsb.w	r2, [r2]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fd7e 	bl	8003750 <move_robot>
 8002c54:	e010      	b.n	8002c78 <vLineFollowerTask+0x168>
	  //case RIGHT_CURVE:	move_robot(ForwardSpeed,curveSpeed ); break;

	  case LEFT:		move_robot(stop, ForwardCurveSpeed); break;
 8002c56:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <vLineFollowerTask+0x1a8>)
 8002c58:	f993 3000 	ldrsb.w	r3, [r3]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <vLineFollowerTask+0x1a4>)
 8002c5e:	f992 2000 	ldrsb.w	r2, [r2]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fd73 	bl	8003750 <move_robot>
 8002c6a:	e005      	b.n	8002c78 <vLineFollowerTask+0x168>
	  //case LEFT_CURVE:	move_robot(curveSpeed,ForwardSpeed); break;

	  case U_TURN:		stop_robot(); 	break;
 8002c6c:	f000 ffb4 	bl	8003bd8 <stop_robot>
 8002c70:	e002      	b.n	8002c78 <vLineFollowerTask+0x168>
	  case JUNCTION:	stop_robot(); 	break;
 8002c72:	f000 ffb1 	bl	8003bd8 <stop_robot>
 8002c76:	bf00      	nop
	  }


	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8002c78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f008 f830 	bl	800ace4 <vTaskDelayUntil>
	  distance_cm = (uint32_t)USS_get_value(pulse_ticks);
 8002c84:	e774      	b.n	8002b70 <vLineFollowerTask+0x60>
 8002c86:	bf00      	nop
 8002c88:	2000001c 	.word	0x2000001c
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	2000033c 	.word	0x2000033c
 8002c94:	20000420 	.word	0x20000420
 8002c98:	080104dc 	.word	0x080104dc
 8002c9c:	080104f4 	.word	0x080104f4
 8002ca0:	20000630 	.word	0x20000630
 8002ca4:	2000062c 	.word	0x2000062c
 8002ca8:	20000638 	.word	0x20000638
 8002cac:	20000634 	.word	0x20000634
 8002cb0:	20000038 	.word	0x20000038
 8002cb4:	20000039 	.word	0x20000039
 8002cb8:	20000650 	.word	0x20000650

08002cbc <vRGBLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vRGBLightTask */
void vRGBLightTask(void *argument)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vRGBLightTask */
	const TickType_t xPeriod = pdMS_TO_TICKS(500);
 8002cc4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cc8:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8002cca:	f008 f9ed 	bl	800b0a8 <xTaskGetTickCount>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  for (int i=0; i<46; i++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e00d      	b.n	8002cf4 <vRGBLightTask+0x38>
	  {
		  Set_Brightness(i);
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f001 f951 	bl	8003f80 <Set_Brightness>
		  WS2812_Send();
 8002cde:	f001 f9d1 	bl	8004084 <WS2812_Send>
		  vTaskDelayUntil( &xLastWakeTime, xPeriod);
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f007 fffb 	bl	800ace4 <vTaskDelayUntil>
	  for (int i=0; i<46; i++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b2d      	cmp	r3, #45	@ 0x2d
 8002cf8:	ddee      	ble.n	8002cd8 <vRGBLightTask+0x1c>
	  }

	  for (int i=45; i>=0; i--)
 8002cfa:	232d      	movs	r3, #45	@ 0x2d
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e00d      	b.n	8002d1c <vRGBLightTask+0x60>
	  {
		  Set_Brightness(i);
 8002d00:	6938      	ldr	r0, [r7, #16]
 8002d02:	f001 f93d 	bl	8003f80 <Set_Brightness>
		  WS2812_Send();
 8002d06:	f001 f9bd 	bl	8004084 <WS2812_Send>
		  vTaskDelayUntil( &xLastWakeTime, xPeriod);
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f007 ffe7 	bl	800ace4 <vTaskDelayUntil>
	  for (int i=45; i>=0; i--)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	daee      	bge.n	8002d00 <vRGBLightTask+0x44>
	  for (int i=0; i<46; i++)
 8002d22:	e7d6      	b.n	8002cd2 <vRGBLightTask+0x16>

08002d24 <vStatusPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStatusPrintTask */
void vStatusPrintTask(void *argument)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStatusPrintTask */
	//static char txBuffer[90];
	//static char binObstacles[3 + 1]; // 2 bits + null terminator
	//static char binLines[4 + 1];     // 3 bits + null terminator
	const TickType_t xPeriod = pdMS_TO_TICKS(5000);
 8002d2c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d30:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8002d32:	f008 f9b9 	bl	800b0a8 <xTaskGetTickCount>
 8002d36:	4603      	mov	r3, r0
 8002d38:	60bb      	str	r3, [r7, #8]
		  distance_cm, binObstacles, binLines,  angle, 	  rpmL,   rpmR 		) + 4;
		*/
	  //HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, len);

	  // Block until DMA finishes
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f007 ffcf 	bl	800ace4 <vTaskDelayUntil>
 8002d46:	e7f8      	b.n	8002d3a <vStatusPrintTask+0x16>

08002d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a09      	ldr	r2, [pc, #36]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002d5a:	f001 fa43 	bl	80041e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM15)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a07      	ldr	r2, [pc, #28]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  tim15_overflow_count++;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a05      	ldr	r2, [pc, #20]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002d70:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40001400 	.word	0x40001400
 8002d80:	40014000 	.word	0x40014000
 8002d84:	2000064c 	.word	0x2000064c

08002d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d8c:	b672      	cpsid	i
}
 8002d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <Error_Handler+0x8>

08002d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <HAL_MspInit+0x50>)
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	4a11      	ldr	r2, [pc, #68]	@ (8002de4 <HAL_MspInit+0x50>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002da6:	4b0f      	ldr	r3, [pc, #60]	@ (8002de4 <HAL_MspInit+0x50>)
 8002da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <HAL_MspInit+0x50>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	4a0b      	ldr	r2, [pc, #44]	@ (8002de4 <HAL_MspInit+0x50>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_MspInit+0x50>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	210f      	movs	r1, #15
 8002dce:	f06f 0001 	mvn.w	r0, #1
 8002dd2:	f001 fadd 	bl	8004390 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002dd6:	f002 f88b 	bl	8004ef0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b090      	sub	sp, #64	@ 0x40
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d10c      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e16:	4b79      	ldr	r3, [pc, #484]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002e22:	e0e6      	b.n	8002ff2 <HAL_TIM_Base_MspInit+0x20a>
  else if(htim_base->Instance==TIM3)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a75      	ldr	r2, [pc, #468]	@ (8003000 <HAL_TIM_Base_MspInit+0x218>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10c      	bne.n	8002e48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e2e:	4b73      	ldr	r3, [pc, #460]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	4a72      	ldr	r2, [pc, #456]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3a:	4b70      	ldr	r3, [pc, #448]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002e46:	e0d4      	b.n	8002ff2 <HAL_TIM_Base_MspInit+0x20a>
  else if(htim_base->Instance==TIM4)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6d      	ldr	r2, [pc, #436]	@ (8003004 <HAL_TIM_Base_MspInit+0x21c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d13f      	bne.n	8002ed2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e52:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	4a69      	ldr	r2, [pc, #420]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e5e:	4b67      	ldr	r3, [pc, #412]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	6a3b      	ldr	r3, [r7, #32]
    hdma_tim4_ch4.Instance = DMA1_Channel1;
 8002e6a:	4b67      	ldr	r3, [pc, #412]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e6c:	4a67      	ldr	r2, [pc, #412]	@ (800300c <HAL_TIM_Base_MspInit+0x224>)
 8002e6e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch4.Init.Request = DMA_REQUEST_TIM4_CH4;
 8002e70:	4b65      	ldr	r3, [pc, #404]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e72:	2246      	movs	r2, #70	@ 0x46
 8002e74:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e76:	4b64      	ldr	r3, [pc, #400]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e78:	2210      	movs	r2, #16
 8002e7a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7c:	4b62      	ldr	r3, [pc, #392]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002e82:	4b61      	ldr	r3, [pc, #388]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e84:	2280      	movs	r2, #128	@ 0x80
 8002e86:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e88:	4b5f      	ldr	r3, [pc, #380]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e8e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e90:	4b5d      	ldr	r3, [pc, #372]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e96:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch4.Init.Mode = DMA_NORMAL;
 8002e98:	4b5b      	ldr	r3, [pc, #364]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002e9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch4) != HAL_OK)
 8002ea4:	4858      	ldr	r0, [pc, #352]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002ea6:	f001 fa9b 	bl	80043e0 <HAL_DMA_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Base_MspInit+0xcc>
      Error_Handler();
 8002eb0:	f7ff ff6a 	bl	8002d88 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim4_ch4);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a54      	ldr	r2, [pc, #336]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eba:	4a53      	ldr	r2, [pc, #332]	@ (8003008 <HAL_TIM_Base_MspInit+0x220>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2105      	movs	r1, #5
 8002ec4:	201e      	movs	r0, #30
 8002ec6:	f001 fa63 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002eca:	201e      	movs	r0, #30
 8002ecc:	f001 fa7a 	bl	80043c4 <HAL_NVIC_EnableIRQ>
}
 8002ed0:	e08f      	b.n	8002ff2 <HAL_TIM_Base_MspInit+0x20a>
  else if(htim_base->Instance==TIM8)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a4e      	ldr	r2, [pc, #312]	@ (8003010 <HAL_TIM_Base_MspInit+0x228>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d130      	bne.n	8002f3e <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002edc:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee0:	4a46      	ldr	r2, [pc, #280]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002ee2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ee6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ee8:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef4:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef8:	4a40      	ldr	r2, [pc, #256]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f00:	4b3e      	ldr	r3, [pc, #248]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USS_ECHO_T8C1_ICDM_Pin;
 8002f0c:	2340      	movs	r3, #64	@ 0x40
 8002f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(USS_ECHO_T8C1_ICDM_GPIO_Port, &GPIO_InitStruct);
 8002f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f24:	4619      	mov	r1, r3
 8002f26:	483b      	ldr	r0, [pc, #236]	@ (8003014 <HAL_TIM_Base_MspInit+0x22c>)
 8002f28:	f001 fd8c 	bl	8004a44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2105      	movs	r1, #5
 8002f30:	202e      	movs	r0, #46	@ 0x2e
 8002f32:	f001 fa2d 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002f36:	202e      	movs	r0, #46	@ 0x2e
 8002f38:	f001 fa44 	bl	80043c4 <HAL_NVIC_EnableIRQ>
}
 8002f3c:	e059      	b.n	8002ff2 <HAL_TIM_Base_MspInit+0x20a>
  else if(htim_base->Instance==TIM15)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a35      	ldr	r2, [pc, #212]	@ (8003018 <HAL_TIM_Base_MspInit+0x230>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d131      	bne.n	8002fac <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f48:	4b2c      	ldr	r3, [pc, #176]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f52:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f54:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	4b26      	ldr	r3, [pc, #152]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f6c:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SS_right_T15C1_ICDM_Pin|SS_left_T15C2_ICDM_Pin;
 8002f78:	230c      	movs	r3, #12
 8002f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002f88:	2309      	movs	r3, #9
 8002f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f90:	4619      	mov	r1, r3
 8002f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f96:	f001 fd55 	bl	8004a44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2105      	movs	r1, #5
 8002f9e:	2018      	movs	r0, #24
 8002fa0:	f001 f9f6 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002fa4:	2018      	movs	r0, #24
 8002fa6:	f001 fa0d 	bl	80043c4 <HAL_NVIC_EnableIRQ>
}
 8002faa:	e022      	b.n	8002ff2 <HAL_TIM_Base_MspInit+0x20a>
  else if(htim_base->Instance==TIM16)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800301c <HAL_TIM_Base_MspInit+0x234>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	4a10      	ldr	r2, [pc, #64]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
}
 8002fce:	e010      	b.n	8002ff2 <HAL_TIM_Base_MspInit+0x20a>
  else if(htim_base->Instance==TIM17)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <HAL_TIM_Base_MspInit+0x238>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_TIM_Base_MspInit+0x20a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fde:	4a07      	ldr	r2, [pc, #28]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_TIM_Base_MspInit+0x214>)
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	3740      	adds	r7, #64	@ 0x40
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800
 8003008:	2000046c 	.word	0x2000046c
 800300c:	40020008 	.word	0x40020008
 8003010:	40013400 	.word	0x40013400
 8003014:	48000400 	.word	0x48000400
 8003018:	40014000 	.word	0x40014000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800

08003024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	@ 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003044:	d11d      	bne.n	8003082 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	4b56      	ldr	r3, [pc, #344]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304a:	4a55      	ldr	r2, [pc, #340]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003052:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DCMotor_right_IN1B_T2C1_PWM_Pin|DCMotor_right_IN2B_T2C2_PWM_Pin;
 800305e:	2303      	movs	r3, #3
 8003060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	2300      	movs	r3, #0
 800306c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800306e:	2301      	movs	r3, #1
 8003070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	4619      	mov	r1, r3
 8003078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800307c:	f001 fce2 	bl	8004a44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003080:	e089      	b.n	8003196 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a47      	ldr	r2, [pc, #284]	@ (80031a4 <HAL_TIM_MspPostInit+0x180>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d11c      	bne.n	80030c6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308c:	4b44      	ldr	r3, [pc, #272]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800308e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003090:	4a43      	ldr	r2, [pc, #268]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003098:	4b41      	ldr	r3, [pc, #260]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800309a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DCMotor_left_IN1A_T3C1_PWM_Pin|DCMotor_left_IN2A_T3C2_PWM_Pin;
 80030a4:	2330      	movs	r3, #48	@ 0x30
 80030a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030b4:	2302      	movs	r3, #2
 80030b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	4619      	mov	r1, r3
 80030be:	483a      	ldr	r0, [pc, #232]	@ (80031a8 <HAL_TIM_MspPostInit+0x184>)
 80030c0:	f001 fcc0 	bl	8004a44 <HAL_GPIO_Init>
}
 80030c4:	e067      	b.n	8003196 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a38      	ldr	r2, [pc, #224]	@ (80031ac <HAL_TIM_MspPostInit+0x188>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d11d      	bne.n	800310c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d0:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 80030d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d4:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030dc:	4b30      	ldr	r3, [pc, #192]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RGB_Lights_T4C4_PWM_Pin;
 80030e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030fa:	2302      	movs	r3, #2
 80030fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RGB_Lights_T4C4_PWM_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	4828      	ldr	r0, [pc, #160]	@ (80031a8 <HAL_TIM_MspPostInit+0x184>)
 8003106:	f001 fc9d 	bl	8004a44 <HAL_GPIO_Init>
}
 800310a:	e044      	b.n	8003196 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM16)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_TIM_MspPostInit+0x18c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d11d      	bne.n	8003152 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003116:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	4a21      	ldr	r2, [pc, #132]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003122:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = uServo_T16C1_PWM_Pin;
 800312e:	2340      	movs	r3, #64	@ 0x40
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800313e:	2301      	movs	r3, #1
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(uServo_T16C1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800314c:	f001 fc7a 	bl	8004a44 <HAL_GPIO_Init>
}
 8003150:	e021      	b.n	8003196 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM17)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <HAL_TIM_MspPostInit+0x190>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d11c      	bne.n	8003196 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800315e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003160:	4a0f      	ldr	r2, [pc, #60]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003168:	4b0d      	ldr	r3, [pc, #52]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800316a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USS_TRIG_T17C1_PWM_Pin;
 8003174:	2380      	movs	r3, #128	@ 0x80
 8003176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003184:	2301      	movs	r3, #1
 8003186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(USS_TRIG_T17C1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	4619      	mov	r1, r3
 800318e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003192:	f001 fc57 	bl	8004a44 <HAL_GPIO_Init>
}
 8003196:	bf00      	nop
 8003198:	3730      	adds	r7, #48	@ 0x30
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	48000400 	.word	0x48000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40014400 	.word	0x40014400
 80031b4:	40014800 	.word	0x40014800

080031b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b09a      	sub	sp, #104	@ 0x68
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	2244      	movs	r2, #68	@ 0x44
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f00a f9ae 	bl	800d53a <memset>
  if(huart->Instance==USART3)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a4e      	ldr	r2, [pc, #312]	@ (800331c <HAL_UART_MspInit+0x164>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	f040 8094 	bne.w	8003312 <HAL_UART_MspInit+0x15a>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031ea:	2304      	movs	r3, #4
 80031ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fbea 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003202:	f7ff fdc1 	bl	8002d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003206:	4b46      	ldr	r3, [pc, #280]	@ (8003320 <HAL_UART_MspInit+0x168>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320a:	4a45      	ldr	r2, [pc, #276]	@ (8003320 <HAL_UART_MspInit+0x168>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003210:	6593      	str	r3, [r2, #88]	@ 0x58
 8003212:	4b43      	ldr	r3, [pc, #268]	@ (8003320 <HAL_UART_MspInit+0x168>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321e:	4b40      	ldr	r3, [pc, #256]	@ (8003320 <HAL_UART_MspInit+0x168>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003222:	4a3f      	ldr	r2, [pc, #252]	@ (8003320 <HAL_UART_MspInit+0x168>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800322a:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <HAL_UART_MspInit+0x168>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003236:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800323a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003248:	2307      	movs	r3, #7
 800324a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003250:	4619      	mov	r1, r3
 8003252:	4834      	ldr	r0, [pc, #208]	@ (8003324 <HAL_UART_MspInit+0x16c>)
 8003254:	f001 fbf6 	bl	8004a44 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003258:	4b33      	ldr	r3, [pc, #204]	@ (8003328 <HAL_UART_MspInit+0x170>)
 800325a:	4a34      	ldr	r2, [pc, #208]	@ (800332c <HAL_UART_MspInit+0x174>)
 800325c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800325e:	4b32      	ldr	r3, [pc, #200]	@ (8003328 <HAL_UART_MspInit+0x170>)
 8003260:	221d      	movs	r2, #29
 8003262:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003264:	4b30      	ldr	r3, [pc, #192]	@ (8003328 <HAL_UART_MspInit+0x170>)
 8003266:	2210      	movs	r2, #16
 8003268:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800326a:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <HAL_UART_MspInit+0x170>)
 800326c:	2200      	movs	r2, #0
 800326e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003270:	4b2d      	ldr	r3, [pc, #180]	@ (8003328 <HAL_UART_MspInit+0x170>)
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003276:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <HAL_UART_MspInit+0x170>)
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <HAL_UART_MspInit+0x170>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8003282:	4b29      	ldr	r3, [pc, #164]	@ (8003328 <HAL_UART_MspInit+0x170>)
 8003284:	2220      	movs	r2, #32
 8003286:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003288:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <HAL_UART_MspInit+0x170>)
 800328a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800328e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003290:	4825      	ldr	r0, [pc, #148]	@ (8003328 <HAL_UART_MspInit+0x170>)
 8003292:	f001 f8a5 	bl	80043e0 <HAL_DMA_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800329c:	f7ff fd74 	bl	8002d88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a21      	ldr	r2, [pc, #132]	@ (8003328 <HAL_UART_MspInit+0x170>)
 80032a4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80032a6:	4a20      	ldr	r2, [pc, #128]	@ (8003328 <HAL_UART_MspInit+0x170>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032ae:	4a21      	ldr	r2, [pc, #132]	@ (8003334 <HAL_UART_MspInit+0x17c>)
 80032b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80032b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032b4:	221c      	movs	r2, #28
 80032b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032be:	4b1c      	ldr	r3, [pc, #112]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032c6:	2280      	movs	r2, #128	@ 0x80
 80032c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d0:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80032d6:	4b16      	ldr	r3, [pc, #88]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032d8:	2220      	movs	r2, #32
 80032da:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80032dc:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80032e4:	4812      	ldr	r0, [pc, #72]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032e6:	f001 f87b 	bl	80043e0 <HAL_DMA_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80032f0:	f7ff fd4a 	bl	8002d88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80032fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003330 <HAL_UART_MspInit+0x178>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2105      	movs	r1, #5
 8003306:	2027      	movs	r0, #39	@ 0x27
 8003308:	f001 f842 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800330c:	2027      	movs	r0, #39	@ 0x27
 800330e:	f001 f859 	bl	80043c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003312:	bf00      	nop
 8003314:	3768      	adds	r7, #104	@ 0x68
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40004800 	.word	0x40004800
 8003320:	40021000 	.word	0x40021000
 8003324:	48000400 	.word	0x48000400
 8003328:	20000560 	.word	0x20000560
 800332c:	4002001c 	.word	0x4002001c
 8003330:	200005c0 	.word	0x200005c0
 8003334:	40020030 	.word	0x40020030

08003338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	@ 0x30
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003348:	4b2c      	ldr	r3, [pc, #176]	@ (80033fc <HAL_InitTick+0xc4>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	4a2b      	ldr	r2, [pc, #172]	@ (80033fc <HAL_InitTick+0xc4>)
 800334e:	f043 0320 	orr.w	r3, r3, #32
 8003352:	6593      	str	r3, [r2, #88]	@ 0x58
 8003354:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <HAL_InitTick+0xc4>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003360:	f107 020c 	add.w	r2, r7, #12
 8003364:	f107 0310 	add.w	r3, r7, #16
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f002 fab8 	bl	80058e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003370:	f002 fa8a 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8003374:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003378:	4a21      	ldr	r2, [pc, #132]	@ (8003400 <HAL_InitTick+0xc8>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0c9b      	lsrs	r3, r3, #18
 8003380:	3b01      	subs	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003384:	4b1f      	ldr	r3, [pc, #124]	@ (8003404 <HAL_InitTick+0xcc>)
 8003386:	4a20      	ldr	r2, [pc, #128]	@ (8003408 <HAL_InitTick+0xd0>)
 8003388:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800338a:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <HAL_InitTick+0xcc>)
 800338c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003390:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003392:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_InitTick+0xcc>)
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003398:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <HAL_InitTick+0xcc>)
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339e:	4b19      	ldr	r3, [pc, #100]	@ (8003404 <HAL_InitTick+0xcc>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80033a4:	4817      	ldr	r0, [pc, #92]	@ (8003404 <HAL_InitTick+0xcc>)
 80033a6:	f002 fd03 	bl	8005db0 <HAL_TIM_Base_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80033b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11b      	bne.n	80033f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80033b8:	4812      	ldr	r0, [pc, #72]	@ (8003404 <HAL_InitTick+0xcc>)
 80033ba:	f002 fd51 	bl	8005e60 <HAL_TIM_Base_Start_IT>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80033c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033cc:	2037      	movs	r0, #55	@ 0x37
 80033ce:	f000 fff9 	bl	80043c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d808      	bhi.n	80033ea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80033d8:	2200      	movs	r2, #0
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	2037      	movs	r0, #55	@ 0x37
 80033de:	f000 ffd7 	bl	8004390 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <HAL_InitTick+0xd4>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e002      	b.n	80033f0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80033f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3730      	adds	r7, #48	@ 0x30
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	431bde83 	.word	0x431bde83
 8003404:	20000670 	.word	0x20000670
 8003408:	40001400 	.word	0x40001400
 800340c:	20000040 	.word	0x20000040

08003410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <NMI_Handler+0x4>

08003418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <HardFault_Handler+0x4>

08003420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <MemManage_Handler+0x4>

08003428 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <BusFault_Handler+0x4>

08003430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <UsageFault_Handler+0x4>

08003438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch4);
 800344c:	4802      	ldr	r0, [pc, #8]	@ (8003458 <DMA1_Channel1_IRQHandler+0x10>)
 800344e:	f001 f9aa 	bl	80047a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000046c 	.word	0x2000046c

0800345c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <DMA1_Channel2_IRQHandler+0x10>)
 8003462:	f001 f9a0 	bl	80047a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000560 	.word	0x20000560

08003470 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <DMA1_Channel3_IRQHandler+0x10>)
 8003476:	f001 f996 	bl	80047a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200005c0 	.word	0x200005c0

08003484 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800348a:	f003 fb69 	bl	8006b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000388 	.word	0x20000388

08003498 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800349c:	4802      	ldr	r0, [pc, #8]	@ (80034a8 <TIM4_IRQHandler+0x10>)
 800349e:	f003 fb5f 	bl	8006b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200002f0 	.word	0x200002f0

080034ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034b0:	4802      	ldr	r0, [pc, #8]	@ (80034bc <USART3_IRQHandler+0x10>)
 80034b2:	f004 ffa3 	bl	80083fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200004cc 	.word	0x200004cc

080034c0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80034c4:	4802      	ldr	r0, [pc, #8]	@ (80034d0 <TIM8_CC_IRQHandler+0x10>)
 80034c6:	f003 fb4b 	bl	8006b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000033c 	.word	0x2000033c

080034d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034d8:	4802      	ldr	r0, [pc, #8]	@ (80034e4 <TIM7_IRQHandler+0x10>)
 80034da:	f003 fb41 	bl	8006b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000670 	.word	0x20000670

080034e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return 1;
 80034ec:	2301      	movs	r3, #1
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_kill>:

int _kill(int pid, int sig)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003502:	f00a f86d 	bl	800d5e0 <__errno>
 8003506:	4603      	mov	r3, r0
 8003508:	2216      	movs	r2, #22
 800350a:	601a      	str	r2, [r3, #0]
  return -1;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_exit>:

void _exit (int status)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003520:	f04f 31ff 	mov.w	r1, #4294967295
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ffe7 	bl	80034f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800352a:	bf00      	nop
 800352c:	e7fd      	b.n	800352a <_exit+0x12>

0800352e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e00a      	b.n	8003556 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003540:	f3af 8000 	nop.w
 8003544:	4601      	mov	r1, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	60ba      	str	r2, [r7, #8]
 800354c:	b2ca      	uxtb	r2, r1
 800354e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	3301      	adds	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	dbf0      	blt.n	8003540 <_read+0x12>
  }

  return len;
 800355e:	687b      	ldr	r3, [r7, #4]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e009      	b.n	800358e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	60ba      	str	r2, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	dbf1      	blt.n	800357a <_write+0x12>
  }
  return len;
 8003596:	687b      	ldr	r3, [r7, #4]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_close>:

int _close(int file)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c8:	605a      	str	r2, [r3, #4]
  return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_isatty>:

int _isatty(int file)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035e0:	2301      	movs	r3, #1
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003610:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <_sbrk+0x5c>)
 8003612:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <_sbrk+0x60>)
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <_sbrk+0x64>)
 8003626:	4a12      	ldr	r2, [pc, #72]	@ (8003670 <_sbrk+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362a:	4b10      	ldr	r3, [pc, #64]	@ (800366c <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d207      	bcs.n	8003648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003638:	f009 ffd2 	bl	800d5e0 <__errno>
 800363c:	4603      	mov	r3, r0
 800363e:	220c      	movs	r2, #12
 8003640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e009      	b.n	800365c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	4a05      	ldr	r2, [pc, #20]	@ (800366c <_sbrk+0x64>)
 8003658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20008000 	.word	0x20008000
 8003668:	00000400 	.word	0x00000400
 800366c:	200006bc 	.word	0x200006bc
 8003670:	20002ef8 	.word	0x20002ef8

08003674 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <SystemInit+0x20>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <SystemInit+0x20>)
 8003680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <Motors_Init>:
     {SPEED_STRAIGHT, SPEED_STRAIGHT},  // treat like straight for this use-case	JUNCTION     111
};
*/

void Motors_Init(MotorHandle *motor_right, MotorHandle *motor_left)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  	HAL_GPIO_WritePin(motor_right->ena_port, motor_right->ena_pin, GPIO_PIN_SET);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68d8      	ldr	r0, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8a1b      	ldrh	r3, [r3, #16]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4619      	mov	r1, r3
 80036ae:	f001 fb63 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_left->ena_port, motor_left->ena_pin, GPIO_PIN_SET);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68d8      	ldr	r0, [r3, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	8a1b      	ldrh	r3, [r3, #16]
 80036ba:	2201      	movs	r2, #1
 80036bc:	4619      	mov	r1, r3
 80036be:	f001 fb5b 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(motor_right->htim, motor_right->channel_in1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f002 fc93 	bl	8005ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor_right->htim, motor_right->channel_in2);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f002 fc8b 	bl	8005ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor_left->htim, motor_left->channel_in1);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f002 fc83 	bl	8005ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor_left->htim, motor_left->channel_in2);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f002 fc7b 	bl	8005ff8 <HAL_TIM_PWM_Start>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <clamp_int>:


int8_t clamp_int(int8_t value, int8_t min, int8_t max)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	4603      	mov	r3, r0
 8003712:	71fb      	strb	r3, [r7, #7]
 8003714:	460b      	mov	r3, r1
 8003716:	71bb      	strb	r3, [r7, #6]
 8003718:	4613      	mov	r3, r2
 800371a:	717b      	strb	r3, [r7, #5]
    if (value < min) return min;
 800371c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003720:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003724:	429a      	cmp	r2, r3
 8003726:	da02      	bge.n	800372e <clamp_int+0x24>
 8003728:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800372c:	e00a      	b.n	8003744 <clamp_int+0x3a>
    if (value > max) return max;
 800372e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003732:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003736:	429a      	cmp	r2, r3
 8003738:	dd02      	ble.n	8003740 <clamp_int+0x36>
 800373a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800373e:	e001      	b.n	8003744 <clamp_int+0x3a>
    return value;
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <move_robot>:


void move_robot(int8_t left_speed, int8_t right_speed)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	460a      	mov	r2, r1
 800375a:	71fb      	strb	r3, [r7, #7]
 800375c:	4613      	mov	r3, r2
 800375e:	71bb      	strb	r3, [r7, #6]
	int8_t leftMot_v  = clamp_int(left_speed , -100, 100);
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2264      	movs	r2, #100	@ 0x64
 8003766:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ffcd 	bl	800370a <clamp_int>
 8003770:	4603      	mov	r3, r0
 8003772:	77fb      	strb	r3, [r7, #31]
	int8_t rightMot_v = clamp_int(right_speed, -100, 100);
 8003774:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003778:	2264      	movs	r2, #100	@ 0x64
 800377a:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ffc3 	bl	800370a <clamp_int>
 8003784:	4603      	mov	r3, r0
 8003786:	77bb      	strb	r3, [r7, #30]

	if(leftMot_v >= 0){
 8003788:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f2c0 8082 	blt.w	8003896 <move_robot+0x146>
		uint32_t target_pulse_left = (uint32_t)(499 * leftMot_v / 100.0f);
 8003792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003796:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037a6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003998 <move_robot+0x248>
 80037aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b2:	ee17 3a90 	vmov	r3, s15
 80037b6:	617b      	str	r3, [r7, #20]
		__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in2, 0);
 80037b8:	4b78      	ldr	r3, [pc, #480]	@ (800399c <move_robot+0x24c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <move_robot+0x7c>
 80037c0:	4b76      	ldr	r3, [pc, #472]	@ (800399c <move_robot+0x24c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80037ca:	e02c      	b.n	8003826 <move_robot+0xd6>
 80037cc:	4b73      	ldr	r3, [pc, #460]	@ (800399c <move_robot+0x24c>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d105      	bne.n	80037e0 <move_robot+0x90>
 80037d4:	4b71      	ldr	r3, [pc, #452]	@ (800399c <move_robot+0x24c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	6393      	str	r3, [r2, #56]	@ 0x38
 80037de:	e022      	b.n	8003826 <move_robot+0xd6>
 80037e0:	4b6e      	ldr	r3, [pc, #440]	@ (800399c <move_robot+0x24c>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d105      	bne.n	80037f4 <move_robot+0xa4>
 80037e8:	4b6c      	ldr	r3, [pc, #432]	@ (800399c <move_robot+0x24c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	2300      	movs	r3, #0
 80037f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80037f2:	e018      	b.n	8003826 <move_robot+0xd6>
 80037f4:	4b69      	ldr	r3, [pc, #420]	@ (800399c <move_robot+0x24c>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d105      	bne.n	8003808 <move_robot+0xb8>
 80037fc:	4b67      	ldr	r3, [pc, #412]	@ (800399c <move_robot+0x24c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	e00e      	b.n	8003826 <move_robot+0xd6>
 8003808:	4b64      	ldr	r3, [pc, #400]	@ (800399c <move_robot+0x24c>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b10      	cmp	r3, #16
 800380e:	d105      	bne.n	800381c <move_robot+0xcc>
 8003810:	4b62      	ldr	r3, [pc, #392]	@ (800399c <move_robot+0x24c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	6493      	str	r3, [r2, #72]	@ 0x48
 800381a:	e004      	b.n	8003826 <move_robot+0xd6>
 800381c:	4b5f      	ldr	r3, [pc, #380]	@ (800399c <move_robot+0x24c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in1, target_pulse_left);
 8003826:	4b5d      	ldr	r3, [pc, #372]	@ (800399c <move_robot+0x24c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <move_robot+0xea>
 800382e:	4b5b      	ldr	r3, [pc, #364]	@ (800399c <move_robot+0x24c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	635a      	str	r2, [r3, #52]	@ 0x34
 8003838:	e0b7      	b.n	80039aa <move_robot+0x25a>
 800383a:	4b58      	ldr	r3, [pc, #352]	@ (800399c <move_robot+0x24c>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d105      	bne.n	800384e <move_robot+0xfe>
 8003842:	4b56      	ldr	r3, [pc, #344]	@ (800399c <move_robot+0x24c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	6393      	str	r3, [r2, #56]	@ 0x38
 800384c:	e0ad      	b.n	80039aa <move_robot+0x25a>
 800384e:	4b53      	ldr	r3, [pc, #332]	@ (800399c <move_robot+0x24c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b08      	cmp	r3, #8
 8003854:	d105      	bne.n	8003862 <move_robot+0x112>
 8003856:	4b51      	ldr	r3, [pc, #324]	@ (800399c <move_robot+0x24c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003860:	e0a3      	b.n	80039aa <move_robot+0x25a>
 8003862:	4b4e      	ldr	r3, [pc, #312]	@ (800399c <move_robot+0x24c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d105      	bne.n	8003876 <move_robot+0x126>
 800386a:	4b4c      	ldr	r3, [pc, #304]	@ (800399c <move_robot+0x24c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	6413      	str	r3, [r2, #64]	@ 0x40
 8003874:	e099      	b.n	80039aa <move_robot+0x25a>
 8003876:	4b49      	ldr	r3, [pc, #292]	@ (800399c <move_robot+0x24c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b10      	cmp	r3, #16
 800387c:	d105      	bne.n	800388a <move_robot+0x13a>
 800387e:	4b47      	ldr	r3, [pc, #284]	@ (800399c <move_robot+0x24c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	6493      	str	r3, [r2, #72]	@ 0x48
 8003888:	e08f      	b.n	80039aa <move_robot+0x25a>
 800388a:	4b44      	ldr	r3, [pc, #272]	@ (800399c <move_robot+0x24c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003894:	e089      	b.n	80039aa <move_robot+0x25a>
	} else {
		leftMot_v = leftMot_v * -1;
 8003896:	7ffb      	ldrb	r3, [r7, #31]
 8003898:	425b      	negs	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	77fb      	strb	r3, [r7, #31]
		uint32_t target_pulse_left = (uint32_t)(499 * leftMot_v / 100.0f);
 800389e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038a2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b2:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8003998 <move_robot+0x248>
 80038b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038be:	ee17 3a90 	vmov	r3, s15
 80038c2:	61bb      	str	r3, [r7, #24]

		__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in1, 0);
 80038c4:	4b35      	ldr	r3, [pc, #212]	@ (800399c <move_robot+0x24c>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <move_robot+0x188>
 80038cc:	4b33      	ldr	r3, [pc, #204]	@ (800399c <move_robot+0x24c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80038d6:	e02c      	b.n	8003932 <move_robot+0x1e2>
 80038d8:	4b30      	ldr	r3, [pc, #192]	@ (800399c <move_robot+0x24c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d105      	bne.n	80038ec <move_robot+0x19c>
 80038e0:	4b2e      	ldr	r3, [pc, #184]	@ (800399c <move_robot+0x24c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	2300      	movs	r3, #0
 80038e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80038ea:	e022      	b.n	8003932 <move_robot+0x1e2>
 80038ec:	4b2b      	ldr	r3, [pc, #172]	@ (800399c <move_robot+0x24c>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d105      	bne.n	8003900 <move_robot+0x1b0>
 80038f4:	4b29      	ldr	r3, [pc, #164]	@ (800399c <move_robot+0x24c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	2300      	movs	r3, #0
 80038fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80038fe:	e018      	b.n	8003932 <move_robot+0x1e2>
 8003900:	4b26      	ldr	r3, [pc, #152]	@ (800399c <move_robot+0x24c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d105      	bne.n	8003914 <move_robot+0x1c4>
 8003908:	4b24      	ldr	r3, [pc, #144]	@ (800399c <move_robot+0x24c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
 8003912:	e00e      	b.n	8003932 <move_robot+0x1e2>
 8003914:	4b21      	ldr	r3, [pc, #132]	@ (800399c <move_robot+0x24c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b10      	cmp	r3, #16
 800391a:	d105      	bne.n	8003928 <move_robot+0x1d8>
 800391c:	4b1f      	ldr	r3, [pc, #124]	@ (800399c <move_robot+0x24c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	6493      	str	r3, [r2, #72]	@ 0x48
 8003926:	e004      	b.n	8003932 <move_robot+0x1e2>
 8003928:	4b1c      	ldr	r3, [pc, #112]	@ (800399c <move_robot+0x24c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	2300      	movs	r3, #0
 8003930:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in2, target_pulse_left);
 8003932:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <move_robot+0x24c>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <move_robot+0x1f6>
 800393a:	4b18      	ldr	r3, [pc, #96]	@ (800399c <move_robot+0x24c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34
 8003944:	e031      	b.n	80039aa <move_robot+0x25a>
 8003946:	4b15      	ldr	r3, [pc, #84]	@ (800399c <move_robot+0x24c>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d105      	bne.n	800395a <move_robot+0x20a>
 800394e:	4b13      	ldr	r3, [pc, #76]	@ (800399c <move_robot+0x24c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6393      	str	r3, [r2, #56]	@ 0x38
 8003958:	e027      	b.n	80039aa <move_robot+0x25a>
 800395a:	4b10      	ldr	r3, [pc, #64]	@ (800399c <move_robot+0x24c>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b08      	cmp	r3, #8
 8003960:	d105      	bne.n	800396e <move_robot+0x21e>
 8003962:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <move_robot+0x24c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800396c:	e01d      	b.n	80039aa <move_robot+0x25a>
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <move_robot+0x24c>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d105      	bne.n	8003982 <move_robot+0x232>
 8003976:	4b09      	ldr	r3, [pc, #36]	@ (800399c <move_robot+0x24c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003980:	e013      	b.n	80039aa <move_robot+0x25a>
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <move_robot+0x24c>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b10      	cmp	r3, #16
 8003988:	d10a      	bne.n	80039a0 <move_robot+0x250>
 800398a:	4b04      	ldr	r3, [pc, #16]	@ (800399c <move_robot+0x24c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6493      	str	r3, [r2, #72]	@ 0x48
 8003994:	e009      	b.n	80039aa <move_robot+0x25a>
 8003996:	bf00      	nop
 8003998:	42c80000 	.word	0x42c80000
 800399c:	2000001c 	.word	0x2000001c
 80039a0:	4b8a      	ldr	r3, [pc, #552]	@ (8003bcc <move_robot+0x47c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	}


	if(rightMot_v >= 0){
 80039aa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f2c0 8082 	blt.w	8003ab8 <move_robot+0x368>
		uint32_t target_pulse_right = (uint32_t)(499 * rightMot_v / 100.0f);
 80039b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80039b8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c8:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8003bd0 <move_robot+0x480>
 80039cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d4:	ee17 3a90 	vmov	r3, s15
 80039d8:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, 0);
 80039da:	4b7e      	ldr	r3, [pc, #504]	@ (8003bd4 <move_robot+0x484>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <move_robot+0x29e>
 80039e2:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd4 <move_robot+0x484>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ec:	e02c      	b.n	8003a48 <move_robot+0x2f8>
 80039ee:	4b79      	ldr	r3, [pc, #484]	@ (8003bd4 <move_robot+0x484>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d105      	bne.n	8003a02 <move_robot+0x2b2>
 80039f6:	4b77      	ldr	r3, [pc, #476]	@ (8003bd4 <move_robot+0x484>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2300      	movs	r3, #0
 80039fe:	6393      	str	r3, [r2, #56]	@ 0x38
 8003a00:	e022      	b.n	8003a48 <move_robot+0x2f8>
 8003a02:	4b74      	ldr	r3, [pc, #464]	@ (8003bd4 <move_robot+0x484>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d105      	bne.n	8003a16 <move_robot+0x2c6>
 8003a0a:	4b72      	ldr	r3, [pc, #456]	@ (8003bd4 <move_robot+0x484>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003a14:	e018      	b.n	8003a48 <move_robot+0x2f8>
 8003a16:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <move_robot+0x484>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d105      	bne.n	8003a2a <move_robot+0x2da>
 8003a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd4 <move_robot+0x484>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2300      	movs	r3, #0
 8003a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a28:	e00e      	b.n	8003a48 <move_robot+0x2f8>
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd4 <move_robot+0x484>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d105      	bne.n	8003a3e <move_robot+0x2ee>
 8003a32:	4b68      	ldr	r3, [pc, #416]	@ (8003bd4 <move_robot+0x484>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a3c:	e004      	b.n	8003a48 <move_robot+0x2f8>
 8003a3e:	4b65      	ldr	r3, [pc, #404]	@ (8003bd4 <move_robot+0x484>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, target_pulse_right);
 8003a48:	4b62      	ldr	r3, [pc, #392]	@ (8003bd4 <move_robot+0x484>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <move_robot+0x30c>
 8003a50:	4b60      	ldr	r3, [pc, #384]	@ (8003bd4 <move_robot+0x484>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	635a      	str	r2, [r3, #52]	@ 0x34

		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, target_pulse_right);
	}

}
 8003a5a:	e0b3      	b.n	8003bc4 <move_robot+0x474>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, target_pulse_right);
 8003a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd4 <move_robot+0x484>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d105      	bne.n	8003a70 <move_robot+0x320>
 8003a64:	4b5b      	ldr	r3, [pc, #364]	@ (8003bd4 <move_robot+0x484>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8003a6e:	e0a9      	b.n	8003bc4 <move_robot+0x474>
 8003a70:	4b58      	ldr	r3, [pc, #352]	@ (8003bd4 <move_robot+0x484>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d105      	bne.n	8003a84 <move_robot+0x334>
 8003a78:	4b56      	ldr	r3, [pc, #344]	@ (8003bd4 <move_robot+0x484>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003a82:	e09f      	b.n	8003bc4 <move_robot+0x474>
 8003a84:	4b53      	ldr	r3, [pc, #332]	@ (8003bd4 <move_robot+0x484>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d105      	bne.n	8003a98 <move_robot+0x348>
 8003a8c:	4b51      	ldr	r3, [pc, #324]	@ (8003bd4 <move_robot+0x484>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a96:	e095      	b.n	8003bc4 <move_robot+0x474>
 8003a98:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd4 <move_robot+0x484>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d105      	bne.n	8003aac <move_robot+0x35c>
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd4 <move_robot+0x484>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6493      	str	r3, [r2, #72]	@ 0x48
 8003aaa:	e08b      	b.n	8003bc4 <move_robot+0x474>
 8003aac:	4b49      	ldr	r3, [pc, #292]	@ (8003bd4 <move_robot+0x484>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003ab6:	e085      	b.n	8003bc4 <move_robot+0x474>
		rightMot_v = rightMot_v * -1;
 8003ab8:	7fbb      	ldrb	r3, [r7, #30]
 8003aba:	425b      	negs	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	77bb      	strb	r3, [r7, #30]
		uint32_t target_pulse_right = (uint32_t)(499 * rightMot_v / 100.0f);
 8003ac0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ac4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ad4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8003bd0 <move_robot+0x480>
 8003ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae0:	ee17 3a90 	vmov	r3, s15
 8003ae4:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <move_robot+0x484>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d105      	bne.n	8003afa <move_robot+0x3aa>
 8003aee:	4b39      	ldr	r3, [pc, #228]	@ (8003bd4 <move_robot+0x484>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2200      	movs	r2, #0
 8003af6:	635a      	str	r2, [r3, #52]	@ 0x34
 8003af8:	e02c      	b.n	8003b54 <move_robot+0x404>
 8003afa:	4b36      	ldr	r3, [pc, #216]	@ (8003bd4 <move_robot+0x484>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d105      	bne.n	8003b0e <move_robot+0x3be>
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <move_robot+0x484>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6393      	str	r3, [r2, #56]	@ 0x38
 8003b0c:	e022      	b.n	8003b54 <move_robot+0x404>
 8003b0e:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <move_robot+0x484>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d105      	bne.n	8003b22 <move_robot+0x3d2>
 8003b16:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd4 <move_robot+0x484>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003b20:	e018      	b.n	8003b54 <move_robot+0x404>
 8003b22:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd4 <move_robot+0x484>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d105      	bne.n	8003b36 <move_robot+0x3e6>
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <move_robot+0x484>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2300      	movs	r3, #0
 8003b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b34:	e00e      	b.n	8003b54 <move_robot+0x404>
 8003b36:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <move_robot+0x484>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d105      	bne.n	8003b4a <move_robot+0x3fa>
 8003b3e:	4b25      	ldr	r3, [pc, #148]	@ (8003bd4 <move_robot+0x484>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b48:	e004      	b.n	8003b54 <move_robot+0x404>
 8003b4a:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <move_robot+0x484>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, target_pulse_right);
 8003b54:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <move_robot+0x484>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <move_robot+0x418>
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <move_robot+0x484>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b66:	e02d      	b.n	8003bc4 <move_robot+0x474>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, target_pulse_right);
 8003b68:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <move_robot+0x484>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d105      	bne.n	8003b7c <move_robot+0x42c>
 8003b70:	4b18      	ldr	r3, [pc, #96]	@ (8003bd4 <move_robot+0x484>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b7a:	e023      	b.n	8003bc4 <move_robot+0x474>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, target_pulse_right);
 8003b7c:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <move_robot+0x484>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d105      	bne.n	8003b90 <move_robot+0x440>
 8003b84:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <move_robot+0x484>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b8e:	e019      	b.n	8003bc4 <move_robot+0x474>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, target_pulse_right);
 8003b90:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <move_robot+0x484>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d105      	bne.n	8003ba4 <move_robot+0x454>
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <move_robot+0x484>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003ba2:	e00f      	b.n	8003bc4 <move_robot+0x474>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, target_pulse_right);
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <move_robot+0x484>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d105      	bne.n	8003bb8 <move_robot+0x468>
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <move_robot+0x484>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003bb6:	e005      	b.n	8003bc4 <move_robot+0x474>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, target_pulse_right);
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <move_robot+0x484>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003bc2:	e7ff      	b.n	8003bc4 <move_robot+0x474>
 8003bc4:	bf00      	nop
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	2000001c 	.word	0x2000001c
 8003bd0:	42c80000 	.word	0x42c80000
 8003bd4:	20000000 	.word	0x20000000

08003bd8 <stop_robot>:

void stop_robot(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in2, 0);
 8003bdc:	4b70      	ldr	r3, [pc, #448]	@ (8003da0 <stop_robot+0x1c8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <stop_robot+0x18>
 8003be4:	4b6e      	ldr	r3, [pc, #440]	@ (8003da0 <stop_robot+0x1c8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bee:	e02c      	b.n	8003c4a <stop_robot+0x72>
 8003bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8003da0 <stop_robot+0x1c8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d105      	bne.n	8003c04 <stop_robot+0x2c>
 8003bf8:	4b69      	ldr	r3, [pc, #420]	@ (8003da0 <stop_robot+0x1c8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c02:	e022      	b.n	8003c4a <stop_robot+0x72>
 8003c04:	4b66      	ldr	r3, [pc, #408]	@ (8003da0 <stop_robot+0x1c8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d105      	bne.n	8003c18 <stop_robot+0x40>
 8003c0c:	4b64      	ldr	r3, [pc, #400]	@ (8003da0 <stop_robot+0x1c8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	2300      	movs	r3, #0
 8003c14:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003c16:	e018      	b.n	8003c4a <stop_robot+0x72>
 8003c18:	4b61      	ldr	r3, [pc, #388]	@ (8003da0 <stop_robot+0x1c8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d105      	bne.n	8003c2c <stop_robot+0x54>
 8003c20:	4b5f      	ldr	r3, [pc, #380]	@ (8003da0 <stop_robot+0x1c8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	2300      	movs	r3, #0
 8003c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2a:	e00e      	b.n	8003c4a <stop_robot+0x72>
 8003c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8003da0 <stop_robot+0x1c8>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d105      	bne.n	8003c40 <stop_robot+0x68>
 8003c34:	4b5a      	ldr	r3, [pc, #360]	@ (8003da0 <stop_robot+0x1c8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c3e:	e004      	b.n	8003c4a <stop_robot+0x72>
 8003c40:	4b57      	ldr	r3, [pc, #348]	@ (8003da0 <stop_robot+0x1c8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in1, 0);
 8003c4a:	4b55      	ldr	r3, [pc, #340]	@ (8003da0 <stop_robot+0x1c8>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <stop_robot+0x86>
 8003c52:	4b53      	ldr	r3, [pc, #332]	@ (8003da0 <stop_robot+0x1c8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c5c:	e02c      	b.n	8003cb8 <stop_robot+0xe0>
 8003c5e:	4b50      	ldr	r3, [pc, #320]	@ (8003da0 <stop_robot+0x1c8>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d105      	bne.n	8003c72 <stop_robot+0x9a>
 8003c66:	4b4e      	ldr	r3, [pc, #312]	@ (8003da0 <stop_robot+0x1c8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c70:	e022      	b.n	8003cb8 <stop_robot+0xe0>
 8003c72:	4b4b      	ldr	r3, [pc, #300]	@ (8003da0 <stop_robot+0x1c8>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d105      	bne.n	8003c86 <stop_robot+0xae>
 8003c7a:	4b49      	ldr	r3, [pc, #292]	@ (8003da0 <stop_robot+0x1c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2300      	movs	r3, #0
 8003c82:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003c84:	e018      	b.n	8003cb8 <stop_robot+0xe0>
 8003c86:	4b46      	ldr	r3, [pc, #280]	@ (8003da0 <stop_robot+0x1c8>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d105      	bne.n	8003c9a <stop_robot+0xc2>
 8003c8e:	4b44      	ldr	r3, [pc, #272]	@ (8003da0 <stop_robot+0x1c8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c98:	e00e      	b.n	8003cb8 <stop_robot+0xe0>
 8003c9a:	4b41      	ldr	r3, [pc, #260]	@ (8003da0 <stop_robot+0x1c8>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d105      	bne.n	8003cae <stop_robot+0xd6>
 8003ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8003da0 <stop_robot+0x1c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cac:	e004      	b.n	8003cb8 <stop_robot+0xe0>
 8003cae:	4b3c      	ldr	r3, [pc, #240]	@ (8003da0 <stop_robot+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c

	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, 0);
 8003cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003da4 <stop_robot+0x1cc>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <stop_robot+0xf4>
 8003cc0:	4b38      	ldr	r3, [pc, #224]	@ (8003da4 <stop_robot+0x1cc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cca:	e02c      	b.n	8003d26 <stop_robot+0x14e>
 8003ccc:	4b35      	ldr	r3, [pc, #212]	@ (8003da4 <stop_robot+0x1cc>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d105      	bne.n	8003ce0 <stop_robot+0x108>
 8003cd4:	4b33      	ldr	r3, [pc, #204]	@ (8003da4 <stop_robot+0x1cc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6393      	str	r3, [r2, #56]	@ 0x38
 8003cde:	e022      	b.n	8003d26 <stop_robot+0x14e>
 8003ce0:	4b30      	ldr	r3, [pc, #192]	@ (8003da4 <stop_robot+0x1cc>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d105      	bne.n	8003cf4 <stop_robot+0x11c>
 8003ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8003da4 <stop_robot+0x1cc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003cf2:	e018      	b.n	8003d26 <stop_robot+0x14e>
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <stop_robot+0x1cc>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	d105      	bne.n	8003d08 <stop_robot+0x130>
 8003cfc:	4b29      	ldr	r3, [pc, #164]	@ (8003da4 <stop_robot+0x1cc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2300      	movs	r3, #0
 8003d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d06:	e00e      	b.n	8003d26 <stop_robot+0x14e>
 8003d08:	4b26      	ldr	r3, [pc, #152]	@ (8003da4 <stop_robot+0x1cc>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d105      	bne.n	8003d1c <stop_robot+0x144>
 8003d10:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <stop_robot+0x1cc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	6493      	str	r3, [r2, #72]	@ 0x48
 8003d1a:	e004      	b.n	8003d26 <stop_robot+0x14e>
 8003d1c:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <stop_robot+0x1cc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003d26:	4b1f      	ldr	r3, [pc, #124]	@ (8003da4 <stop_robot+0x1cc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <stop_robot+0x162>
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <stop_robot+0x1cc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8003d38:	e02c      	b.n	8003d94 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <stop_robot+0x1cc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d105      	bne.n	8003d4e <stop_robot+0x176>
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <stop_robot+0x1cc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d4c:	e022      	b.n	8003d94 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003d4e:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <stop_robot+0x1cc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d105      	bne.n	8003d62 <stop_robot+0x18a>
 8003d56:	4b13      	ldr	r3, [pc, #76]	@ (8003da4 <stop_robot+0x1cc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d60:	e018      	b.n	8003d94 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <stop_robot+0x1cc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d105      	bne.n	8003d76 <stop_robot+0x19e>
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <stop_robot+0x1cc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2300      	movs	r3, #0
 8003d72:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003d74:	e00e      	b.n	8003d94 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003d76:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <stop_robot+0x1cc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d105      	bne.n	8003d8a <stop_robot+0x1b2>
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <stop_robot+0x1cc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003d88:	e004      	b.n	8003d94 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <stop_robot+0x1cc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	2000001c 	.word	0x2000001c
 8003da4:	20000000 	.word	0x20000000

08003da8 <USS_Init>:
// ------------------------------------------------------ Ultrasonic Sensor HC-SR04 --------------------------------------
// -----------------------------------------------------------------------------------------------------------------------

void USS_Init(TIM_HandleTypeDef *trig_tim, uint32_t trig_channel,
              TIM_HandleTypeDef *echo_tim, uint32_t echo_channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
    HAL_TIM_PWM_Start(trig_tim, trig_channel);
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f002 f91d 	bl	8005ff8 <HAL_TIM_PWM_Start>
    HAL_TIM_IC_Start_IT(echo_tim, echo_channel);
 8003dbe:	6839      	ldr	r1, [r7, #0]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f002 fd8b 	bl	80068dc <HAL_TIM_IC_Start_IT>
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <USS_get_value>:

uint32_t USS_get_value(uint32_t pulse_ticks){
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	uint32_t dist = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

	if(pulse_ticks >= 38000){
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d902      	bls.n	8003dec <USS_get_value+0x1c>
		dist = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e005      	b.n	8003df8 <USS_get_value+0x28>
	} else {
		dist = (uint32_t)(pulse_ticks) / 580;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a06      	ldr	r2, [pc, #24]	@ (8003e08 <USS_get_value+0x38>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	0a5b      	lsrs	r3, r3, #9
 8003df6:	60fb      	str	r3, [r7, #12]
	}
	return dist;
 8003df8:	68fb      	ldr	r3, [r7, #12]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e1fc780f 	.word	0xe1fc780f

08003e0c <get_LTS_value>:

// -----------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------ Line Tracker Sensor SEN-KY033LT --------------------------------------
// -----------------------------------------------------------------------------------------------------------------------------

LTSensor get_LTS_value(const LTS_Config *cfg) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    LTSensor val = {
 8003e14:	2300      	movs	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]
        .leftLine_detected   = HAL_GPIO_ReadPin(cfg->leftPort,   cfg->leftPin)   == GPIO_PIN_SET,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	889b      	ldrh	r3, [r3, #4]
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f000 ff90 	bl	8004d48 <HAL_GPIO_ReadPin>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
    LTSensor val = {
 8003e34:	723b      	strb	r3, [r7, #8]
        .middleLine_detected = HAL_GPIO_ReadPin(cfg->middlePort, cfg->middlePin) == GPIO_PIN_SET,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	899b      	ldrh	r3, [r3, #12]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f000 ff81 	bl	8004d48 <HAL_GPIO_ReadPin>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
    LTSensor val = {
 8003e52:	727b      	strb	r3, [r7, #9]
        .rightLine_detected  = HAL_GPIO_ReadPin(cfg->rightPort,  cfg->rightPin)  == GPIO_PIN_SET
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8a9b      	ldrh	r3, [r3, #20]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 ff72 	bl	8004d48 <HAL_GPIO_ReadPin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
    LTSensor val = {
 8003e70:	72bb      	strb	r3, [r7, #10]
    };

    // Build the 3-bit state from the booleans
    val.current_state =
          (val.leftLine_detected   ? SENSOR_LEFT   : 0)
 8003e72:	7a3b      	ldrb	r3, [r7, #8]
        | (val.middleLine_detected ? SENSOR_MIDDLE : 0)
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <get_LTS_value+0x70>
 8003e78:	2204      	movs	r2, #4
 8003e7a:	e000      	b.n	8003e7e <get_LTS_value+0x72>
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	7a7b      	ldrb	r3, [r7, #9]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <get_LTS_value+0x7c>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e000      	b.n	8003e8a <get_LTS_value+0x7e>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	b25a      	sxtb	r2, r3
        | (val.rightLine_detected  ? SENSOR_RIGHT  : 0);
 8003e8e:	7abb      	ldrb	r3, [r7, #10]
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
    val.current_state =
 8003e98:	72fb      	strb	r3, [r7, #11]

    return val;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	7b3a      	ldrb	r2, [r7, #12]
 8003ea2:	f362 0307 	bfi	r3, r2, #0, #8
 8003ea6:	7b7a      	ldrb	r2, [r7, #13]
 8003ea8:	f362 230f 	bfi	r3, r2, #8, #8
 8003eac:	7bba      	ldrb	r2, [r7, #14]
 8003eae:	f362 4317 	bfi	r3, r2, #16, #8
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	f362 631f 	bfi	r3, r2, #24, #8
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <get_IPS_value>:
// -----------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------ Infrared Proximity Sensor SEN-KY032IR --------------------------------
// -----------------------------------------------------------------------------------------------------------------------------

IPSensor get_IPS_value(const IPS_Config *cfg)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    IPSensor val = {
    		.leftObstacle_detected = HAL_GPIO_ReadPin(cfg->leftPort, cfg->leftPin) == LOW,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	889b      	ldrh	r3, [r3, #4]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 ff38 	bl	8004d48 <HAL_GPIO_ReadPin>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
    IPSensor val = {
 8003ee4:	723b      	strb	r3, [r7, #8]
			.rightObstacle_detected = HAL_GPIO_ReadPin(cfg->rightPort, cfg->rightPin) == LOW
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	899b      	ldrh	r3, [r3, #12]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f000 ff29 	bl	8004d48 <HAL_GPIO_ReadPin>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
    IPSensor val = {
 8003f02:	727b      	strb	r3, [r7, #9]
    };

    return val;
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	81bb      	strh	r3, [r7, #12]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	7b3a      	ldrb	r2, [r7, #12]
 8003f0c:	f362 0307 	bfi	r3, r2, #0, #8
 8003f10:	7b7a      	ldrb	r2, [r7, #13]
 8003f12:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <Set_LED>:
uint16_t pwmData[(24*MAX_LED)+50];

volatile int datasentflag;

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	b2d9      	uxtb	r1, r3
 8003f32:	4a11      	ldr	r2, [pc, #68]	@ (8003f78 <Set_LED+0x58>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	b2d9      	uxtb	r1, r3
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f78 <Set_LED+0x58>)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	460a      	mov	r2, r1
 8003f48:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	b2d9      	uxtb	r1, r3
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f78 <Set_LED+0x58>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	460a      	mov	r2, r1
 8003f58:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2d9      	uxtb	r1, r3
 8003f5e:	4a06      	ldr	r2, [pc, #24]	@ (8003f78 <Set_LED+0x58>)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	460a      	mov	r2, r1
 8003f68:	70da      	strb	r2, [r3, #3]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	200006c0 	.word	0x200006c0
 8003f7c:	00000000 	.word	0x00000000

08003f80 <Set_Brightness>:

void Set_Brightness (int brightness)  // 0-45
{
 8003f80:	b5b0      	push	{r4, r5, r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8003f8c:	dd01      	ble.n	8003f92 <Set_Brightness+0x12>
 8003f8e:	232d      	movs	r3, #45	@ 0x2d
 8003f90:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e060      	b.n	800405a <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8003f98:	4a37      	ldr	r2, [pc, #220]	@ (8004078 <Set_Brightness+0xf8>)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003fa0:	4a36      	ldr	r2, [pc, #216]	@ (800407c <Set_Brightness+0xfc>)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8003fa8:	2301      	movs	r3, #1
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	e04f      	b.n	800404e <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbc:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7fc fae9 	bl	8000598 <__aeabi_f2d>
 8003fc6:	a32a      	add	r3, pc, #168	@ (adr r3, 8004070 <Set_Brightness+0xf0>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fb3c 	bl	8000648 <__aeabi_dmul>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	4b28      	ldr	r3, [pc, #160]	@ (8004080 <Set_Brightness+0x100>)
 8003fde:	f7fc fc5d 	bl	800089c <__aeabi_ddiv>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7fc fe25 	bl	8000c38 <__aeabi_d2f>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8003ff2:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <Set_Brightness+0xf8>)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fab7 	bl	8000574 <__aeabi_i2d>
 8004006:	4604      	mov	r4, r0
 8004008:	460d      	mov	r5, r1
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7fc fac4 	bl	8000598 <__aeabi_f2d>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	ec43 2b10 	vmov	d0, r2, r3
 8004018:	f00b f9b6 	bl	800f388 <tan>
 800401c:	ec53 2b10 	vmov	r2, r3, d0
 8004020:	4620      	mov	r0, r4
 8004022:	4629      	mov	r1, r5
 8004024:	f7fc fc3a 	bl	800089c <__aeabi_ddiv>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f7fc fde2 	bl	8000bf8 <__aeabi_d2uiz>
 8004034:	4603      	mov	r3, r0
 8004036:	b2d9      	uxtb	r1, r3
 8004038:	4a10      	ldr	r2, [pc, #64]	@ (800407c <Set_Brightness+0xfc>)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	441a      	add	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	460a      	mov	r2, r1
 8004046:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	3301      	adds	r3, #1
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b03      	cmp	r3, #3
 8004052:	ddac      	ble.n	8003fae <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3301      	adds	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b07      	cmp	r3, #7
 800405e:	dd9b      	ble.n	8003f98 <Set_Brightness+0x18>
		}
	}
#endif
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bdb0      	pop	{r4, r5, r7, pc}
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w
 8004070:	53c8d4f1 	.word	0x53c8d4f1
 8004074:	400921fb 	.word	0x400921fb
 8004078:	200006c0 	.word	0x200006c0
 800407c:	200006e0 	.word	0x200006e0
 8004080:	40668000 	.word	0x40668000

08004084 <WS2812_Send>:

void WS2812_Send (void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e036      	b.n	8004102 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8004094:	4a2e      	ldr	r2, [pc, #184]	@ (8004150 <WS2812_Send+0xcc>)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	041a      	lsls	r2, r3, #16
 80040a0:	492b      	ldr	r1, [pc, #172]	@ (8004150 <WS2812_Send+0xcc>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	789b      	ldrb	r3, [r3, #2]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	431a      	orrs	r2, r3
 80040ae:	4928      	ldr	r1, [pc, #160]	@ (8004150 <WS2812_Send+0xcc>)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	78db      	ldrb	r3, [r3, #3]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80040bc:	2317      	movs	r3, #23
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e019      	b.n	80040f6 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80040c2:	2201      	movs	r2, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 141;  // 2/3 of the Period
 80040d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004154 <WS2812_Send+0xd0>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	218d      	movs	r1, #141	@ 0x8d
 80040da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80040de:	e004      	b.n	80040ea <WS2812_Send+0x66>
			}

			else pwmData[indx] = 70;  // 1/3 of the Period
 80040e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004154 <WS2812_Send+0xd0>)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2146      	movs	r1, #70	@ 0x46
 80040e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3301      	adds	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dae2      	bge.n	80040c2 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3301      	adds	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b07      	cmp	r3, #7
 8004106:	ddc5      	ble.n	8004094 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	e00a      	b.n	8004124 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800410e:	4a11      	ldr	r2, [pc, #68]	@ (8004154 <WS2812_Send+0xd0>)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2100      	movs	r1, #0
 8004114:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	3301      	adds	r3, #1
 800411c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3301      	adds	r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b31      	cmp	r3, #49	@ 0x31
 8004128:	ddf1      	ble.n	800410e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_4, (uint32_t *)pwmData, indx);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	b29b      	uxth	r3, r3
 800412e:	4a09      	ldr	r2, [pc, #36]	@ (8004154 <WS2812_Send+0xd0>)
 8004130:	210c      	movs	r1, #12
 8004132:	4809      	ldr	r0, [pc, #36]	@ (8004158 <WS2812_Send+0xd4>)
 8004134:	f002 f860 	bl	80061f8 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8004138:	bf00      	nop
 800413a:	4b08      	ldr	r3, [pc, #32]	@ (800415c <WS2812_Send+0xd8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0fb      	beq.n	800413a <WS2812_Send+0xb6>
	datasentflag = 0;
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <WS2812_Send+0xd8>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200006e0 	.word	0x200006e0
 8004154:	20000700 	.word	0x20000700
 8004158:	200002f0 	.word	0x200002f0
 800415c:	200008e4 	.word	0x200008e4

08004160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004160:	480d      	ldr	r0, [pc, #52]	@ (8004198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004162:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004164:	f7ff fa86 	bl	8003674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004168:	480c      	ldr	r0, [pc, #48]	@ (800419c <LoopForever+0x6>)
  ldr r1, =_edata
 800416a:	490d      	ldr	r1, [pc, #52]	@ (80041a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800416c:	4a0d      	ldr	r2, [pc, #52]	@ (80041a4 <LoopForever+0xe>)
  movs r3, #0
 800416e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004170:	e002      	b.n	8004178 <LoopCopyDataInit>

08004172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004176:	3304      	adds	r3, #4

08004178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800417a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800417c:	d3f9      	bcc.n	8004172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417e:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004180:	4c0a      	ldr	r4, [pc, #40]	@ (80041ac <LoopForever+0x16>)
  movs r3, #0
 8004182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004184:	e001      	b.n	800418a <LoopFillZerobss>

08004186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004188:	3204      	adds	r2, #4

0800418a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800418a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800418c:	d3fb      	bcc.n	8004186 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800418e:	f009 fa2d 	bl	800d5ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004192:	f7fd fe93 	bl	8001ebc <main>

08004196 <LoopForever>:

LoopForever:
    b LoopForever
 8004196:	e7fe      	b.n	8004196 <LoopForever>
  ldr   r0, =_estack
 8004198:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800419c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041a0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80041a4:	08010b30 	.word	0x08010b30
  ldr r2, =_sbss
 80041a8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80041ac:	20002ef8 	.word	0x20002ef8

080041b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041b0:	e7fe      	b.n	80041b0 <ADC1_2_IRQHandler>

080041b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041bc:	2003      	movs	r0, #3
 80041be:	f000 f8dc 	bl	800437a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041c2:	200f      	movs	r0, #15
 80041c4:	f7ff f8b8 	bl	8003338 <HAL_InitTick>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	71fb      	strb	r3, [r7, #7]
 80041d2:	e001      	b.n	80041d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041d4:	f7fe fdde 	bl	8002d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041d8:	79fb      	ldrb	r3, [r7, #7]

}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <HAL_IncTick+0x1c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_IncTick+0x20>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4413      	add	r3, r2
 80041f2:	4a03      	ldr	r2, [pc, #12]	@ (8004200 <HAL_IncTick+0x1c>)
 80041f4:	6013      	str	r3, [r2, #0]
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	200008e8 	.word	0x200008e8
 8004204:	20000044 	.word	0x20000044

08004208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return uwTick;
 800420c:	4b03      	ldr	r3, [pc, #12]	@ (800421c <HAL_GetTick+0x14>)
 800420e:	681b      	ldr	r3, [r3, #0]
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	200008e8 	.word	0x200008e8

08004220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800424c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004252:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	60d3      	str	r3, [r2, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <__NVIC_GetPriorityGrouping+0x18>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0307 	and.w	r3, r3, #7
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4907      	ldr	r1, [pc, #28]	@ (80042bc <__NVIC_EnableIRQ+0x38>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	@ (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	@ (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	@ 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f1c3 0307 	rsb	r3, r3, #7
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf28      	it	cs
 8004332:	2304      	movcs	r3, #4
 8004334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3304      	adds	r3, #4
 800433a:	2b06      	cmp	r3, #6
 800433c:	d902      	bls.n	8004344 <NVIC_EncodePriority+0x30>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3b03      	subs	r3, #3
 8004342:	e000      	b.n	8004346 <NVIC_EncodePriority+0x32>
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	401a      	ands	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800435c:	f04f 31ff 	mov.w	r1, #4294967295
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43d9      	mvns	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436c:	4313      	orrs	r3, r2
         );
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff4c 	bl	8004220 <__NVIC_SetPriorityGrouping>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800439e:	f7ff ff63 	bl	8004268 <__NVIC_GetPriorityGrouping>
 80043a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7ff ffb3 	bl	8004314 <NVIC_EncodePriority>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff82 	bl	80042c0 <__NVIC_SetPriority>
}
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff56 	bl	8004284 <__NVIC_EnableIRQ>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e08d      	b.n	800450e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b47      	ldr	r3, [pc, #284]	@ (8004518 <HAL_DMA_Init+0x138>)
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d80f      	bhi.n	800441e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	4b45      	ldr	r3, [pc, #276]	@ (800451c <HAL_DMA_Init+0x13c>)
 8004406:	4413      	add	r3, r2
 8004408:	4a45      	ldr	r2, [pc, #276]	@ (8004520 <HAL_DMA_Init+0x140>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	009a      	lsls	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <HAL_DMA_Init+0x144>)
 800441a:	641a      	str	r2, [r3, #64]	@ 0x40
 800441c:	e00e      	b.n	800443c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <HAL_DMA_Init+0x148>)
 8004426:	4413      	add	r3, r2
 8004428:	4a3d      	ldr	r2, [pc, #244]	@ (8004520 <HAL_DMA_Init+0x140>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	009a      	lsls	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a3c      	ldr	r2, [pc, #240]	@ (800452c <HAL_DMA_Init+0x14c>)
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004456:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa76 	bl	8004980 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800449c:	d102      	bne.n	80044a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d010      	beq.n	80044e4 <HAL_DMA_Init+0x104>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d80c      	bhi.n	80044e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa96 	bl	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	e008      	b.n	80044f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40020407 	.word	0x40020407
 800451c:	bffdfff8 	.word	0xbffdfff8
 8004520:	cccccccd 	.word	0xcccccccd
 8004524:	40020000 	.word	0x40020000
 8004528:	bffdfbf8 	.word	0xbffdfbf8
 800452c:	40020400 	.word	0x40020400

08004530 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_DMA_Start_IT+0x20>
 800454c:	2302      	movs	r3, #2
 800454e:	e066      	b.n	800461e <HAL_DMA_Start_IT+0xee>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d155      	bne.n	8004610 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f9bb 	bl	8004904 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 020e 	orr.w	r2, r2, #14
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e00f      	b.n	80045c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0204 	bic.w	r2, r2, #4
 80045b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 020a 	orr.w	r2, r2, #10
 80045c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	e005      	b.n	800461c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004618:	2302      	movs	r3, #2
 800461a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d005      	beq.n	800464a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e037      	b.n	80046ba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 020e 	bic.w	r2, r2, #14
 8004658:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004668:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f003 021f 	and.w	r2, r3, #31
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	2101      	movs	r1, #1
 8004688:	fa01 f202 	lsl.w	r2, r1, r2
 800468c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004696:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00c      	beq.n	80046ba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046ae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046b8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d00d      	beq.n	800470c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2204      	movs	r2, #4
 80046f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e047      	b.n	800479c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 020e 	bic.w	r2, r2, #14
 800471a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004736:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800473a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	f003 021f 	and.w	r2, r3, #31
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f202 	lsl.w	r2, r1, r2
 800474e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004758:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004770:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800477a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4798      	blx	r3
    }
  }
  return status;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2204      	movs	r2, #4
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d026      	beq.n	8004820 <HAL_DMA_IRQHandler+0x7a>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d021      	beq.n	8004820 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0204 	bic.w	r2, r2, #4
 80047f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	f003 021f 	and.w	r2, r3, #31
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	2104      	movs	r1, #4
 8004808:	fa01 f202 	lsl.w	r2, r1, r2
 800480c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	2b00      	cmp	r3, #0
 8004814:	d071      	beq.n	80048fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800481e:	e06c      	b.n	80048fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2202      	movs	r2, #2
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02e      	beq.n	8004892 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d029      	beq.n	8004892 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 020a 	bic.w	r2, r2, #10
 800485a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	2102      	movs	r1, #2
 8004872:	fa01 f202 	lsl.w	r2, r1, r2
 8004876:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d038      	beq.n	80048fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004890:	e033      	b.n	80048fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2208      	movs	r2, #8
 800489c:	409a      	lsls	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d02a      	beq.n	80048fc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d025      	beq.n	80048fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 020e 	bic.w	r2, r2, #14
 80048be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f202 	lsl.w	r2, r1, r2
 80048d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
}
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800491a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800492c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	f003 021f 	and.w	r2, r3, #31
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	2101      	movs	r1, #1
 800493c:	fa01 f202 	lsl.w	r2, r1, r2
 8004940:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b10      	cmp	r3, #16
 8004950:	d108      	bne.n	8004964 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004962:	e007      	b.n	8004974 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	60da      	str	r2, [r3, #12]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	4b16      	ldr	r3, [pc, #88]	@ (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004990:	429a      	cmp	r2, r3
 8004992:	d802      	bhi.n	800499a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004994:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e001      	b.n	800499e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800499c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	3b08      	subs	r3, #8
 80049aa:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	009a      	lsls	r2, r3, #2
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4413      	add	r3, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a0b      	ldr	r2, [pc, #44]	@ (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80049ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2201      	movs	r2, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40020407 	.word	0x40020407
 80049ec:	40020800 	.word	0x40020800
 80049f0:	40020820 	.word	0x40020820
 80049f4:	cccccccd 	.word	0xcccccccd
 80049f8:	40020880 	.word	0x40020880

080049fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a08      	ldr	r2, [pc, #32]	@ (8004a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a1e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2201      	movs	r2, #1
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	1000823f 	.word	0x1000823f
 8004a40:	40020940 	.word	0x40020940

08004a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a52:	e15a      	b.n	8004d0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	2101      	movs	r1, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 814c 	beq.w	8004d04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d005      	beq.n	8004a84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d130      	bne.n	8004ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aba:	2201      	movs	r2, #1
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0201 	and.w	r2, r3, #1
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d017      	beq.n	8004b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	2203      	movs	r2, #3
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d123      	bne.n	8004b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	08da      	lsrs	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3208      	adds	r2, #8
 8004b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	220f      	movs	r2, #15
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	08da      	lsrs	r2, r3, #3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3208      	adds	r2, #8
 8004b70:	6939      	ldr	r1, [r7, #16]
 8004b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0203 	and.w	r2, r3, #3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80a6 	beq.w	8004d04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d28 <HAL_GPIO_Init+0x2e4>)
 8004bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d28 <HAL_GPIO_Init+0x2e4>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bc4:	4b58      	ldr	r3, [pc, #352]	@ (8004d28 <HAL_GPIO_Init+0x2e4>)
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bd0:	4a56      	ldr	r2, [pc, #344]	@ (8004d2c <HAL_GPIO_Init+0x2e8>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	220f      	movs	r2, #15
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bfa:	d01f      	beq.n	8004c3c <HAL_GPIO_Init+0x1f8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a4c      	ldr	r2, [pc, #304]	@ (8004d30 <HAL_GPIO_Init+0x2ec>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d019      	beq.n	8004c38 <HAL_GPIO_Init+0x1f4>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a4b      	ldr	r2, [pc, #300]	@ (8004d34 <HAL_GPIO_Init+0x2f0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <HAL_GPIO_Init+0x1f0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d38 <HAL_GPIO_Init+0x2f4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00d      	beq.n	8004c30 <HAL_GPIO_Init+0x1ec>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a49      	ldr	r2, [pc, #292]	@ (8004d3c <HAL_GPIO_Init+0x2f8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <HAL_GPIO_Init+0x1e8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a48      	ldr	r2, [pc, #288]	@ (8004d40 <HAL_GPIO_Init+0x2fc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_GPIO_Init+0x1e4>
 8004c24:	2305      	movs	r3, #5
 8004c26:	e00a      	b.n	8004c3e <HAL_GPIO_Init+0x1fa>
 8004c28:	2306      	movs	r3, #6
 8004c2a:	e008      	b.n	8004c3e <HAL_GPIO_Init+0x1fa>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	e006      	b.n	8004c3e <HAL_GPIO_Init+0x1fa>
 8004c30:	2303      	movs	r3, #3
 8004c32:	e004      	b.n	8004c3e <HAL_GPIO_Init+0x1fa>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e002      	b.n	8004c3e <HAL_GPIO_Init+0x1fa>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <HAL_GPIO_Init+0x1fa>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	f002 0203 	and.w	r2, r2, #3
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	4093      	lsls	r3, r2
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c4e:	4937      	ldr	r1, [pc, #220]	@ (8004d2c <HAL_GPIO_Init+0x2e8>)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	089b      	lsrs	r3, r3, #2
 8004c54:	3302      	adds	r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c5c:	4b39      	ldr	r3, [pc, #228]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c80:	4a30      	ldr	r2, [pc, #192]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c86:	4b2f      	ldr	r3, [pc, #188]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004caa:	4a26      	ldr	r2, [pc, #152]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cb0:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cda:	4b1a      	ldr	r3, [pc, #104]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cfe:	4a11      	ldr	r2, [pc, #68]	@ (8004d44 <HAL_GPIO_Init+0x300>)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3301      	adds	r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f ae9d 	bne.w	8004a54 <HAL_GPIO_Init+0x10>
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	48000400 	.word	0x48000400
 8004d34:	48000800 	.word	0x48000800
 8004d38:	48000c00 	.word	0x48000c00
 8004d3c:	48001000 	.word	0x48001000
 8004d40:	48001400 	.word	0x48001400
 8004d44:	40010400 	.word	0x40010400

08004d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	887b      	ldrh	r3, [r7, #2]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	e001      	b.n	8004d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
 8004d84:	4613      	mov	r3, r2
 8004d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d88:	787b      	ldrb	r3, [r7, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d94:	e002      	b.n	8004d9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d141      	bne.n	8004e3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004db6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc2:	d131      	bne.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc4:	4b47      	ldr	r3, [pc, #284]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dca:	4a46      	ldr	r2, [pc, #280]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd4:	4b43      	ldr	r3, [pc, #268]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ddc:	4a41      	ldr	r2, [pc, #260]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004de2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004de4:	4b40      	ldr	r3, [pc, #256]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2232      	movs	r2, #50	@ 0x32
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	4a3f      	ldr	r2, [pc, #252]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	0c9b      	lsrs	r3, r3, #18
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfa:	e002      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e02:	4b38      	ldr	r3, [pc, #224]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0e:	d102      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f2      	bne.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e16:	4b33      	ldr	r3, [pc, #204]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d158      	bne.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e057      	b.n	8004ed8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e28:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e38:	e04d      	b.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d141      	bne.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e42:	4b28      	ldr	r3, [pc, #160]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4e:	d131      	bne.n	8004eb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e50:	4b24      	ldr	r3, [pc, #144]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e56:	4a23      	ldr	r2, [pc, #140]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e60:	4b20      	ldr	r3, [pc, #128]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2232      	movs	r2, #50	@ 0x32
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	0c9b      	lsrs	r3, r3, #18
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e86:	e002      	b.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e9a:	d102      	bne.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f2      	bne.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eae:	d112      	bne.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e011      	b.n	8004ed8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ec4:	e007      	b.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ec6:	4b07      	ldr	r3, [pc, #28]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ece:	4a05      	ldr	r2, [pc, #20]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ed4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	2000003c 	.word	0x2000003c
 8004eec:	431bde83 	.word	0x431bde83

08004ef0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004efa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004efe:	6093      	str	r3, [r2, #8]
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40007000 	.word	0x40007000

08004f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e2fe      	b.n	8005520 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d075      	beq.n	800501a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f2e:	4b97      	ldr	r3, [pc, #604]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f38:	4b94      	ldr	r3, [pc, #592]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	d102      	bne.n	8004f4e <HAL_RCC_OscConfig+0x3e>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d002      	beq.n	8004f54 <HAL_RCC_OscConfig+0x44>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d10b      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	4b8d      	ldr	r3, [pc, #564]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d05b      	beq.n	8005018 <HAL_RCC_OscConfig+0x108>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d157      	bne.n	8005018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e2d9      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f74:	d106      	bne.n	8004f84 <HAL_RCC_OscConfig+0x74>
 8004f76:	4b85      	ldr	r3, [pc, #532]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a84      	ldr	r2, [pc, #528]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e01d      	b.n	8004fc0 <HAL_RCC_OscConfig+0xb0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x98>
 8004f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a7e      	ldr	r2, [pc, #504]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7b      	ldr	r2, [pc, #492]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	4b78      	ldr	r3, [pc, #480]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a77      	ldr	r2, [pc, #476]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b75      	ldr	r3, [pc, #468]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a74      	ldr	r2, [pc, #464]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d013      	beq.n	8004ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7ff f91e 	bl	8004208 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7ff f91a 	bl	8004208 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	@ 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e29e      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xc0>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7ff f90a 	bl	8004208 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7ff f906 	bl	8004208 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e28a      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800500a:	4b60      	ldr	r3, [pc, #384]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0xe8>
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d075      	beq.n	8005112 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005026:	4b59      	ldr	r3, [pc, #356]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005030:	4b56      	ldr	r3, [pc, #344]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	d102      	bne.n	8005046 <HAL_RCC_OscConfig+0x136>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d002      	beq.n	800504c <HAL_RCC_OscConfig+0x13c>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d11f      	bne.n	800508c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800504c:	4b4f      	ldr	r3, [pc, #316]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_OscConfig+0x154>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e25d      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005064:	4b49      	ldr	r3, [pc, #292]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	061b      	lsls	r3, r3, #24
 8005072:	4946      	ldr	r1, [pc, #280]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005078:	4b45      	ldr	r3, [pc, #276]	@ (8005190 <HAL_RCC_OscConfig+0x280>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe f95b 	bl	8003338 <HAL_InitTick>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d043      	beq.n	8005110 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e249      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d023      	beq.n	80050dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005094:	4b3d      	ldr	r3, [pc, #244]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3c      	ldr	r2, [pc, #240]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7ff f8b2 	bl	8004208 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a8:	f7ff f8ae 	bl	8004208 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e232      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ba:	4b34      	ldr	r3, [pc, #208]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c6:	4b31      	ldr	r3, [pc, #196]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	492d      	ldr	r1, [pc, #180]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
 80050da:	e01a      	b.n	8005112 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050dc:	4b2b      	ldr	r3, [pc, #172]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2a      	ldr	r2, [pc, #168]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 80050e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7ff f88e 	bl	8004208 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f0:	f7ff f88a 	bl	8004208 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e20e      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005102:	4b22      	ldr	r3, [pc, #136]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x1e0>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d041      	beq.n	80051a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01c      	beq.n	8005160 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005126:	4b19      	ldr	r3, [pc, #100]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512c:	4a17      	ldr	r2, [pc, #92]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7ff f867 	bl	8004208 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513e:	f7ff f863 	bl	8004208 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e1e7      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005150:	4b0e      	ldr	r3, [pc, #56]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ef      	beq.n	800513e <HAL_RCC_OscConfig+0x22e>
 800515e:	e020      	b.n	80051a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005160:	4b0a      	ldr	r3, [pc, #40]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005166:	4a09      	ldr	r2, [pc, #36]	@ (800518c <HAL_RCC_OscConfig+0x27c>)
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7ff f84a 	bl	8004208 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005176:	e00d      	b.n	8005194 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005178:	f7ff f846 	bl	8004208 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d906      	bls.n	8005194 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e1ca      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000
 8005190:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005194:	4b8c      	ldr	r3, [pc, #560]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ea      	bne.n	8005178 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80a6 	beq.w	80052fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b0:	2300      	movs	r3, #0
 80051b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051b4:	4b84      	ldr	r3, [pc, #528]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_OscConfig+0x2b4>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x2b6>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	4b7f      	ldr	r3, [pc, #508]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	4a7e      	ldr	r2, [pc, #504]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d6:	4b7c      	ldr	r3, [pc, #496]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051e2:	2301      	movs	r3, #1
 80051e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e6:	4b79      	ldr	r3, [pc, #484]	@ (80053cc <HAL_RCC_OscConfig+0x4bc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d118      	bne.n	8005224 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f2:	4b76      	ldr	r3, [pc, #472]	@ (80053cc <HAL_RCC_OscConfig+0x4bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a75      	ldr	r2, [pc, #468]	@ (80053cc <HAL_RCC_OscConfig+0x4bc>)
 80051f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fe:	f7ff f803 	bl	8004208 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005206:	f7fe ffff 	bl	8004208 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e183      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005218:	4b6c      	ldr	r3, [pc, #432]	@ (80053cc <HAL_RCC_OscConfig+0x4bc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d108      	bne.n	800523e <HAL_RCC_OscConfig+0x32e>
 800522c:	4b66      	ldr	r3, [pc, #408]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005232:	4a65      	ldr	r2, [pc, #404]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800523c:	e024      	b.n	8005288 <HAL_RCC_OscConfig+0x378>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d110      	bne.n	8005268 <HAL_RCC_OscConfig+0x358>
 8005246:	4b60      	ldr	r3, [pc, #384]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	4a5e      	ldr	r2, [pc, #376]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800524e:	f043 0304 	orr.w	r3, r3, #4
 8005252:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005256:	4b5c      	ldr	r3, [pc, #368]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525c:	4a5a      	ldr	r2, [pc, #360]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005266:	e00f      	b.n	8005288 <HAL_RCC_OscConfig+0x378>
 8005268:	4b57      	ldr	r3, [pc, #348]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526e:	4a56      	ldr	r2, [pc, #344]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005278:	4b53      	ldr	r3, [pc, #332]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527e:	4a52      	ldr	r2, [pc, #328]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d016      	beq.n	80052be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fe ffba 	bl	8004208 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005296:	e00a      	b.n	80052ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fe ffb6 	bl	8004208 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e138      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ae:	4b46      	ldr	r3, [pc, #280]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0ed      	beq.n	8005298 <HAL_RCC_OscConfig+0x388>
 80052bc:	e015      	b.n	80052ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052be:	f7fe ffa3 	bl	8004208 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052c4:	e00a      	b.n	80052dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fe ff9f 	bl	8004208 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e121      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052dc:	4b3a      	ldr	r3, [pc, #232]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1ed      	bne.n	80052c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ea:	7ffb      	ldrb	r3, [r7, #31]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d105      	bne.n	80052fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f0:	4b35      	ldr	r3, [pc, #212]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f4:	4a34      	ldr	r2, [pc, #208]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80052f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d03c      	beq.n	8005382 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01c      	beq.n	800534a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005310:	4b2d      	ldr	r3, [pc, #180]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005316:	4a2c      	ldr	r2, [pc, #176]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fe ff72 	bl	8004208 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005328:	f7fe ff6e 	bl	8004208 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e0f2      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800533a:	4b23      	ldr	r3, [pc, #140]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800533c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ef      	beq.n	8005328 <HAL_RCC_OscConfig+0x418>
 8005348:	e01b      	b.n	8005382 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800534a:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800534c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005350:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535a:	f7fe ff55 	bl	8004208 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005362:	f7fe ff51 	bl	8004208 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e0d5      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005374:	4b14      	ldr	r3, [pc, #80]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 8005376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ef      	bne.n	8005362 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80c9 	beq.w	800551e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800538c:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b0c      	cmp	r3, #12
 8005396:	f000 8083 	beq.w	80054a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d15e      	bne.n	8005460 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a2:	4b09      	ldr	r3, [pc, #36]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fe ff2b 	bl	8004208 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	e00c      	b.n	80053d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b6:	f7fe ff27 	bl	8004208 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d905      	bls.n	80053d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0ab      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
 80053c8:	40021000 	.word	0x40021000
 80053cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d0:	4b55      	ldr	r3, [pc, #340]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1ec      	bne.n	80053b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053dc:	4b52      	ldr	r3, [pc, #328]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	4b52      	ldr	r3, [pc, #328]	@ (800552c <HAL_RCC_OscConfig+0x61c>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6a11      	ldr	r1, [r2, #32]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ec:	3a01      	subs	r2, #1
 80053ee:	0112      	lsls	r2, r2, #4
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053f6:	0212      	lsls	r2, r2, #8
 80053f8:	4311      	orrs	r1, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053fe:	0852      	lsrs	r2, r2, #1
 8005400:	3a01      	subs	r2, #1
 8005402:	0552      	lsls	r2, r2, #21
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800540a:	0852      	lsrs	r2, r2, #1
 800540c:	3a01      	subs	r2, #1
 800540e:	0652      	lsls	r2, r2, #25
 8005410:	4311      	orrs	r1, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005416:	06d2      	lsls	r2, r2, #27
 8005418:	430a      	orrs	r2, r1
 800541a:	4943      	ldr	r1, [pc, #268]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 800541c:	4313      	orrs	r3, r2
 800541e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b41      	ldr	r3, [pc, #260]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a40      	ldr	r2, [pc, #256]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800542a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800542c:	4b3e      	ldr	r3, [pc, #248]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a3d      	ldr	r2, [pc, #244]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005436:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fe fee6 	bl	8004208 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005440:	f7fe fee2 	bl	8004208 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e066      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005452:	4b35      	ldr	r3, [pc, #212]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x530>
 800545e:	e05e      	b.n	800551e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005460:	4b31      	ldr	r3, [pc, #196]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a30      	ldr	r2, [pc, #192]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800546a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fe fecc 	bl	8004208 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005474:	f7fe fec8 	bl	8004208 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04c      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005486:	4b28      	ldr	r3, [pc, #160]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005492:	4b25      	ldr	r3, [pc, #148]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	4924      	ldr	r1, [pc, #144]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 8005498:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <HAL_RCC_OscConfig+0x620>)
 800549a:	4013      	ands	r3, r2
 800549c:	60cb      	str	r3, [r1, #12]
 800549e:	e03e      	b.n	800551e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e039      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005528 <HAL_RCC_OscConfig+0x618>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 0203 	and.w	r2, r3, #3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d12c      	bne.n	800551a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	3b01      	subs	r3, #1
 80054cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d123      	bne.n	800551a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d11b      	bne.n	800551a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d113      	bne.n	800551a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fc:	085b      	lsrs	r3, r3, #1
 80054fe:	3b01      	subs	r3, #1
 8005500:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d109      	bne.n	800551a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	3b01      	subs	r3, #1
 8005514:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3720      	adds	r7, #32
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000
 800552c:	019f800c 	.word	0x019f800c
 8005530:	feeefffc 	.word	0xfeeefffc

08005534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e11e      	b.n	800578a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800554c:	4b91      	ldr	r3, [pc, #580]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d910      	bls.n	800557c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b8e      	ldr	r3, [pc, #568]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 020f 	bic.w	r2, r3, #15
 8005562:	498c      	ldr	r1, [pc, #560]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b8a      	ldr	r3, [pc, #552]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e106      	b.n	800578a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d073      	beq.n	8005670 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b03      	cmp	r3, #3
 800558e:	d129      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005590:	4b81      	ldr	r3, [pc, #516]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0f4      	b.n	800578a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055a0:	f000 f9d0 	bl	8005944 <RCC_GetSysClockFreqFromPLLSource>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4a7c      	ldr	r2, [pc, #496]	@ (800579c <HAL_RCC_ClockConfig+0x268>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d93f      	bls.n	800562e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d033      	beq.n	800562e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d12f      	bne.n	800562e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ce:	4b72      	ldr	r3, [pc, #456]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055d6:	4a70      	ldr	r2, [pc, #448]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80055d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055de:	2380      	movs	r3, #128	@ 0x80
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e024      	b.n	800562e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d107      	bne.n	80055fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0c6      	b.n	800578a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055fc:	4b66      	ldr	r3, [pc, #408]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0be      	b.n	800578a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800560c:	f000 f8ce 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8005610:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4a61      	ldr	r2, [pc, #388]	@ (800579c <HAL_RCC_ClockConfig+0x268>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d909      	bls.n	800562e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800561a:	4b5f      	ldr	r3, [pc, #380]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005622:	4a5d      	ldr	r2, [pc, #372]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 8005624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005628:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800562a:	2380      	movs	r3, #128	@ 0x80
 800562c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800562e:	4b5a      	ldr	r3, [pc, #360]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f023 0203 	bic.w	r2, r3, #3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4957      	ldr	r1, [pc, #348]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800563c:	4313      	orrs	r3, r2
 800563e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005640:	f7fe fde2 	bl	8004208 <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	e00a      	b.n	800565e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f7fe fdde 	bl	8004208 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e095      	b.n	800578a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	4b4e      	ldr	r3, [pc, #312]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 020c 	and.w	r2, r3, #12
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	429a      	cmp	r2, r3
 800566e:	d1eb      	bne.n	8005648 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d023      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005688:	4b43      	ldr	r3, [pc, #268]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4a42      	ldr	r2, [pc, #264]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800568e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005692:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80056aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b0:	4b39      	ldr	r3, [pc, #228]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	4936      	ldr	r1, [pc, #216]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	608b      	str	r3, [r1, #8]
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b80      	cmp	r3, #128	@ 0x80
 80056c8:	d105      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056ca:	4b33      	ldr	r3, [pc, #204]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	4a32      	ldr	r2, [pc, #200]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80056d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d21d      	bcs.n	8005720 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 020f 	bic.w	r2, r3, #15
 80056ec:	4929      	ldr	r1, [pc, #164]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056f4:	f7fe fd88 	bl	8004208 <HAL_GetTick>
 80056f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056fc:	f7fe fd84 	bl	8004208 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e03b      	b.n	800578a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d1ed      	bne.n	80056fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800572c:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4917      	ldr	r1, [pc, #92]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574a:	4b13      	ldr	r3, [pc, #76]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	490f      	ldr	r1, [pc, #60]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800575e:	f000 f825 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8005762:	4602      	mov	r2, r0
 8005764:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	490c      	ldr	r1, [pc, #48]	@ (80057a0 <HAL_RCC_ClockConfig+0x26c>)
 8005770:	5ccb      	ldrb	r3, [r1, r3]
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	4a0a      	ldr	r2, [pc, #40]	@ (80057a4 <HAL_RCC_ClockConfig+0x270>)
 800577c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800577e:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <HAL_RCC_ClockConfig+0x274>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fd fdd8 	bl	8003338 <HAL_InitTick>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40022000 	.word	0x40022000
 8005798:	40021000 	.word	0x40021000
 800579c:	04c4b400 	.word	0x04c4b400
 80057a0:	0801058c 	.word	0x0801058c
 80057a4:	2000003c 	.word	0x2000003c
 80057a8:	20000040 	.word	0x20000040

080057ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d102      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057be:	4b2a      	ldr	r3, [pc, #168]	@ (8005868 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e047      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057c4:	4b27      	ldr	r3, [pc, #156]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d102      	bne.n	80057d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057d0:	4b26      	ldr	r3, [pc, #152]	@ (800586c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e03e      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057d6:	4b23      	ldr	r3, [pc, #140]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d136      	bne.n	8005850 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057e2:	4b20      	ldr	r3, [pc, #128]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	3301      	adds	r3, #1
 80057f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d10c      	bne.n	800581a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005800:	4a1a      	ldr	r2, [pc, #104]	@ (800586c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	4a16      	ldr	r2, [pc, #88]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800580a:	68d2      	ldr	r2, [r2, #12]
 800580c:	0a12      	lsrs	r2, r2, #8
 800580e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	617b      	str	r3, [r7, #20]
      break;
 8005818:	e00c      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800581a:	4a13      	ldr	r2, [pc, #76]	@ (8005868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	4a10      	ldr	r2, [pc, #64]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005824:	68d2      	ldr	r2, [r2, #12]
 8005826:	0a12      	lsrs	r2, r2, #8
 8005828:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]
      break;
 8005832:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005834:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	0e5b      	lsrs	r3, r3, #25
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	3301      	adds	r3, #1
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e001      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005854:	693b      	ldr	r3, [r7, #16]
}
 8005856:	4618      	mov	r0, r3
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40021000 	.word	0x40021000
 8005868:	00f42400 	.word	0x00f42400
 800586c:	016e3600 	.word	0x016e3600

08005870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005874:	4b03      	ldr	r3, [pc, #12]	@ (8005884 <HAL_RCC_GetHCLKFreq+0x14>)
 8005876:	681b      	ldr	r3, [r3, #0]
}
 8005878:	4618      	mov	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	2000003c 	.word	0x2000003c

08005888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800588c:	f7ff fff0 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4904      	ldr	r1, [pc, #16]	@ (80058b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40021000 	.word	0x40021000
 80058b0:	0801059c 	.word	0x0801059c

080058b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058b8:	f7ff ffda 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 80058bc:	4602      	mov	r2, r0
 80058be:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0adb      	lsrs	r3, r3, #11
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4904      	ldr	r1, [pc, #16]	@ (80058dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80058ca:	5ccb      	ldrb	r3, [r1, r3]
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40021000 	.word	0x40021000
 80058dc:	0801059c 	.word	0x0801059c

080058e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	220f      	movs	r2, #15
 80058ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80058f0:	4b12      	ldr	r3, [pc, #72]	@ (800593c <HAL_RCC_GetClockConfig+0x5c>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0203 	and.w	r2, r3, #3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80058fc:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <HAL_RCC_GetClockConfig+0x5c>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005908:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <HAL_RCC_GetClockConfig+0x5c>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005914:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_RCC_GetClockConfig+0x5c>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	08db      	lsrs	r3, r3, #3
 800591a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005922:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <HAL_RCC_GetClockConfig+0x60>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 020f 	and.w	r2, r3, #15
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	601a      	str	r2, [r3, #0]
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000
 8005940:	40022000 	.word	0x40022000

08005944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800594a:	4b1e      	ldr	r3, [pc, #120]	@ (80059c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005954:	4b1b      	ldr	r3, [pc, #108]	@ (80059c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d10c      	bne.n	8005982 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005968:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	4a14      	ldr	r2, [pc, #80]	@ (80059c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005972:	68d2      	ldr	r2, [r2, #12]
 8005974:	0a12      	lsrs	r2, r2, #8
 8005976:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	617b      	str	r3, [r7, #20]
    break;
 8005980:	e00c      	b.n	800599c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005982:	4a12      	ldr	r2, [pc, #72]	@ (80059cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	fbb2 f3f3 	udiv	r3, r2, r3
 800598a:	4a0e      	ldr	r2, [pc, #56]	@ (80059c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800598c:	68d2      	ldr	r2, [r2, #12]
 800598e:	0a12      	lsrs	r2, r2, #8
 8005990:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
    break;
 800599a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800599c:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	0e5b      	lsrs	r3, r3, #25
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	3301      	adds	r3, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80059b6:	687b      	ldr	r3, [r7, #4]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40021000 	.word	0x40021000
 80059c8:	016e3600 	.word	0x016e3600
 80059cc:	00f42400 	.word	0x00f42400

080059d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059d8:	2300      	movs	r3, #0
 80059da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059dc:	2300      	movs	r3, #0
 80059de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8098 	beq.w	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ee:	2300      	movs	r3, #0
 80059f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f2:	4b43      	ldr	r3, [pc, #268]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10d      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fe:	4b40      	ldr	r3, [pc, #256]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a02:	4a3f      	ldr	r2, [pc, #252]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a16:	2301      	movs	r3, #1
 8005a18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a39      	ldr	r2, [pc, #228]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a26:	f7fe fbef 	bl	8004208 <HAL_GetTick>
 8005a2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a2c:	e009      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2e:	f7fe fbeb 	bl	8004208 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d902      	bls.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	74fb      	strb	r3, [r7, #19]
        break;
 8005a40:	e005      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a42:	4b30      	ldr	r3, [pc, #192]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0ef      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a4e:	7cfb      	ldrb	r3, [r7, #19]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d159      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a54:	4b2a      	ldr	r3, [pc, #168]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d01e      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d019      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a70:	4b23      	ldr	r3, [pc, #140]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a7c:	4b20      	ldr	r3, [pc, #128]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a82:	4a1f      	ldr	r2, [pc, #124]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a92:	4a1b      	ldr	r2, [pc, #108]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a9c:	4a18      	ldr	r2, [pc, #96]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d016      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aae:	f7fe fbab 	bl	8004208 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab4:	e00b      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab6:	f7fe fba7 	bl	8004208 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d902      	bls.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	74fb      	strb	r3, [r7, #19]
            break;
 8005acc:	e006      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ace:	4b0c      	ldr	r3, [pc, #48]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ec      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae2:	4b07      	ldr	r3, [pc, #28]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	4903      	ldr	r1, [pc, #12]	@ (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005af8:	e008      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005afa:	7cfb      	ldrb	r3, [r7, #19]
 8005afc:	74bb      	strb	r3, [r7, #18]
 8005afe:	e005      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b00:	40021000 	.word	0x40021000
 8005b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b0c:	7c7b      	ldrb	r3, [r7, #17]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b12:	4ba6      	ldr	r3, [pc, #664]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b16:	4aa5      	ldr	r2, [pc, #660]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b2a:	4ba0      	ldr	r3, [pc, #640]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b30:	f023 0203 	bic.w	r2, r3, #3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	499c      	ldr	r1, [pc, #624]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b4c:	4b97      	ldr	r3, [pc, #604]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b52:	f023 020c 	bic.w	r2, r3, #12
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	4994      	ldr	r1, [pc, #592]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	498b      	ldr	r1, [pc, #556]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b90:	4b86      	ldr	r3, [pc, #536]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	4983      	ldr	r1, [pc, #524]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bb2:	4b7e      	ldr	r3, [pc, #504]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	497a      	ldr	r1, [pc, #488]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bd4:	4b75      	ldr	r3, [pc, #468]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	4972      	ldr	r1, [pc, #456]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4969      	ldr	r1, [pc, #420]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c18:	4b64      	ldr	r3, [pc, #400]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	4961      	ldr	r1, [pc, #388]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c48:	4958      	ldr	r1, [pc, #352]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d015      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c5c:	4b53      	ldr	r3, [pc, #332]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6a:	4950      	ldr	r1, [pc, #320]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c7a:	d105      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a4a      	ldr	r2, [pc, #296]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c86:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d015      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c94:	4b45      	ldr	r3, [pc, #276]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	4942      	ldr	r1, [pc, #264]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cbe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ccc:	4b37      	ldr	r3, [pc, #220]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	4934      	ldr	r1, [pc, #208]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cea:	d105      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cec:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cf6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d015      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d04:	4b29      	ldr	r3, [pc, #164]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d12:	4926      	ldr	r1, [pc, #152]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d22:	d105      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d24:	4b21      	ldr	r3, [pc, #132]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4a20      	ldr	r2, [pc, #128]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d015      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	4918      	ldr	r1, [pc, #96]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d5a:	d105      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d5c:	4b13      	ldr	r3, [pc, #76]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4a12      	ldr	r2, [pc, #72]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d74:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d82:	490a      	ldr	r1, [pc, #40]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d92:	d105      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d94:	4b05      	ldr	r3, [pc, #20]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a04      	ldr	r2, [pc, #16]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40021000 	.word	0x40021000

08005db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e049      	b.n	8005e56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fd f806 	bl	8002de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f001 fbee 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d001      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e04a      	b.n	8005f0e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a21      	ldr	r2, [pc, #132]	@ (8005f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a19      	ldr	r2, [pc, #100]	@ (8005f2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d115      	bne.n	8005ef8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	4b17      	ldr	r3, [pc, #92]	@ (8005f30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d015      	beq.n	8005f0a <HAL_TIM_Base_Start_IT+0xaa>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ee4:	d011      	beq.n	8005f0a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef6:	e008      	b.n	8005f0a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e000      	b.n	8005f0c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40013400 	.word	0x40013400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	00010007 	.word	0x00010007

08005f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e049      	b.n	8005fda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f841 	bl	8005fe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f001 fb2c 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d109      	bne.n	800601c <HAL_TIM_PWM_Start+0x24>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	e03c      	b.n	8006096 <HAL_TIM_PWM_Start+0x9e>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b04      	cmp	r3, #4
 8006020:	d109      	bne.n	8006036 <HAL_TIM_PWM_Start+0x3e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	bf14      	ite	ne
 800602e:	2301      	movne	r3, #1
 8006030:	2300      	moveq	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e02f      	b.n	8006096 <HAL_TIM_PWM_Start+0x9e>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d109      	bne.n	8006050 <HAL_TIM_PWM_Start+0x58>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	bf14      	ite	ne
 8006048:	2301      	movne	r3, #1
 800604a:	2300      	moveq	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e022      	b.n	8006096 <HAL_TIM_PWM_Start+0x9e>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b0c      	cmp	r3, #12
 8006054:	d109      	bne.n	800606a <HAL_TIM_PWM_Start+0x72>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	e015      	b.n	8006096 <HAL_TIM_PWM_Start+0x9e>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b10      	cmp	r3, #16
 800606e:	d109      	bne.n	8006084 <HAL_TIM_PWM_Start+0x8c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e008      	b.n	8006096 <HAL_TIM_PWM_Start+0x9e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	bf14      	ite	ne
 8006090:	2301      	movne	r3, #1
 8006092:	2300      	moveq	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e097      	b.n	80061ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <HAL_TIM_PWM_Start+0xb6>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060ac:	e023      	b.n	80060f6 <HAL_TIM_PWM_Start+0xfe>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d104      	bne.n	80060be <HAL_TIM_PWM_Start+0xc6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060bc:	e01b      	b.n	80060f6 <HAL_TIM_PWM_Start+0xfe>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_PWM_Start+0xd6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060cc:	e013      	b.n	80060f6 <HAL_TIM_PWM_Start+0xfe>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	d104      	bne.n	80060de <HAL_TIM_PWM_Start+0xe6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060dc:	e00b      	b.n	80060f6 <HAL_TIM_PWM_Start+0xfe>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d104      	bne.n	80060ee <HAL_TIM_PWM_Start+0xf6>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060ec:	e003      	b.n	80060f6 <HAL_TIM_PWM_Start+0xfe>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2201      	movs	r2, #1
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 ffb2 	bl	8008068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a33      	ldr	r2, [pc, #204]	@ (80061d8 <HAL_TIM_PWM_Start+0x1e0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <HAL_TIM_PWM_Start+0x13e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a32      	ldr	r2, [pc, #200]	@ (80061dc <HAL_TIM_PWM_Start+0x1e4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00e      	beq.n	8006136 <HAL_TIM_PWM_Start+0x13e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a30      	ldr	r2, [pc, #192]	@ (80061e0 <HAL_TIM_PWM_Start+0x1e8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_TIM_PWM_Start+0x13e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2f      	ldr	r2, [pc, #188]	@ (80061e4 <HAL_TIM_PWM_Start+0x1ec>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_TIM_PWM_Start+0x13e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a2d      	ldr	r2, [pc, #180]	@ (80061e8 <HAL_TIM_PWM_Start+0x1f0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <HAL_TIM_PWM_Start+0x142>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_TIM_PWM_Start+0x144>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800614e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a20      	ldr	r2, [pc, #128]	@ (80061d8 <HAL_TIM_PWM_Start+0x1e0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_TIM_PWM_Start+0x194>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006162:	d013      	beq.n	800618c <HAL_TIM_PWM_Start+0x194>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a20      	ldr	r2, [pc, #128]	@ (80061ec <HAL_TIM_PWM_Start+0x1f4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_TIM_PWM_Start+0x194>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <HAL_TIM_PWM_Start+0x1f8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_TIM_PWM_Start+0x194>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a17      	ldr	r2, [pc, #92]	@ (80061dc <HAL_TIM_PWM_Start+0x1e4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_PWM_Start+0x194>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a16      	ldr	r2, [pc, #88]	@ (80061e0 <HAL_TIM_PWM_Start+0x1e8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d115      	bne.n	80061b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	4b18      	ldr	r3, [pc, #96]	@ (80061f4 <HAL_TIM_PWM_Start+0x1fc>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d015      	beq.n	80061ca <HAL_TIM_PWM_Start+0x1d2>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a4:	d011      	beq.n	80061ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	e008      	b.n	80061ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e000      	b.n	80061cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40012c00 	.word	0x40012c00
 80061dc:	40013400 	.word	0x40013400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40014400 	.word	0x40014400
 80061e8:	40014800 	.word	0x40014800
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	00010007 	.word	0x00010007

080061f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e03c      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b04      	cmp	r3, #4
 8006228:	d109      	bne.n	800623e <HAL_TIM_PWM_Start_DMA+0x46>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	bf0c      	ite	eq
 8006236:	2301      	moveq	r3, #1
 8006238:	2300      	movne	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	e02f      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0xa6>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b08      	cmp	r3, #8
 8006242:	d109      	bne.n	8006258 <HAL_TIM_PWM_Start_DMA+0x60>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	e022      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b0c      	cmp	r3, #12
 800625c:	d109      	bne.n	8006272 <HAL_TIM_PWM_Start_DMA+0x7a>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	e015      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b10      	cmp	r3, #16
 8006276:	d109      	bne.n	800628c <HAL_TIM_PWM_Start_DMA+0x94>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e008      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0xa6>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
 80062a4:	e1a6      	b.n	80065f4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e03c      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x142>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d109      	bne.n	80062da <HAL_TIM_PWM_Start_DMA+0xe2>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	bf0c      	ite	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	2300      	movne	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	e02f      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x142>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e022      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x142>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d109      	bne.n	800630e <HAL_TIM_PWM_Start_DMA+0x116>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e015      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x142>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b10      	cmp	r3, #16
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start_DMA+0x130>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e008      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x142>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf0c      	ite	eq
 8006334:	2301      	moveq	r3, #1
 8006336:	2300      	movne	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d034      	beq.n	80063a8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_TIM_PWM_Start_DMA+0x152>
 8006344:	887b      	ldrh	r3, [r7, #2]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e152      	b.n	80065f4 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_TIM_PWM_Start_DMA+0x166>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800635c:	e026      	b.n	80063ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d104      	bne.n	800636e <HAL_TIM_PWM_Start_DMA+0x176>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800636c:	e01e      	b.n	80063ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d104      	bne.n	800637e <HAL_TIM_PWM_Start_DMA+0x186>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800637c:	e016      	b.n	80063ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b0c      	cmp	r3, #12
 8006382:	d104      	bne.n	800638e <HAL_TIM_PWM_Start_DMA+0x196>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800638c:	e00e      	b.n	80063ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b10      	cmp	r3, #16
 8006392:	d104      	bne.n	800639e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800639c:	e006      	b.n	80063ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a6:	e001      	b.n	80063ac <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e123      	b.n	80065f4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b0c      	cmp	r3, #12
 80063b0:	f200 80ae 	bhi.w	8006510 <HAL_TIM_PWM_Start_DMA+0x318>
 80063b4:	a201      	add	r2, pc, #4	@ (adr r2, 80063bc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	08006511 	.word	0x08006511
 80063c4:	08006511 	.word	0x08006511
 80063c8:	08006511 	.word	0x08006511
 80063cc:	08006439 	.word	0x08006439
 80063d0:	08006511 	.word	0x08006511
 80063d4:	08006511 	.word	0x08006511
 80063d8:	08006511 	.word	0x08006511
 80063dc:	08006481 	.word	0x08006481
 80063e0:	08006511 	.word	0x08006511
 80063e4:	08006511 	.word	0x08006511
 80063e8:	08006511 	.word	0x08006511
 80063ec:	080064c9 	.word	0x080064c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	4a81      	ldr	r2, [pc, #516]	@ (80065fc <HAL_TIM_PWM_Start_DMA+0x404>)
 80063f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fc:	4a80      	ldr	r2, [pc, #512]	@ (8006600 <HAL_TIM_PWM_Start_DMA+0x408>)
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	4a7f      	ldr	r2, [pc, #508]	@ (8006604 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006406:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3334      	adds	r3, #52	@ 0x34
 8006414:	461a      	mov	r2, r3
 8006416:	887b      	ldrh	r3, [r7, #2]
 8006418:	f7fe f88a 	bl	8004530 <HAL_DMA_Start_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0e6      	b.n	80065f4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006434:	60da      	str	r2, [r3, #12]
      break;
 8006436:	e06e      	b.n	8006516 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	4a6f      	ldr	r2, [pc, #444]	@ (80065fc <HAL_TIM_PWM_Start_DMA+0x404>)
 800643e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	4a6e      	ldr	r2, [pc, #440]	@ (8006600 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006446:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	4a6d      	ldr	r2, [pc, #436]	@ (8006604 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800644e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3338      	adds	r3, #56	@ 0x38
 800645c:	461a      	mov	r2, r3
 800645e:	887b      	ldrh	r3, [r7, #2]
 8006460:	f7fe f866 	bl	8004530 <HAL_DMA_Start_IT>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e0c2      	b.n	80065f4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800647c:	60da      	str	r2, [r3, #12]
      break;
 800647e:	e04a      	b.n	8006516 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	4a5d      	ldr	r2, [pc, #372]	@ (80065fc <HAL_TIM_PWM_Start_DMA+0x404>)
 8006486:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	4a5c      	ldr	r2, [pc, #368]	@ (8006600 <HAL_TIM_PWM_Start_DMA+0x408>)
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006494:	4a5b      	ldr	r2, [pc, #364]	@ (8006604 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006496:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	333c      	adds	r3, #60	@ 0x3c
 80064a4:	461a      	mov	r2, r3
 80064a6:	887b      	ldrh	r3, [r7, #2]
 80064a8:	f7fe f842 	bl	8004530 <HAL_DMA_Start_IT>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e09e      	b.n	80065f4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064c4:	60da      	str	r2, [r3, #12]
      break;
 80064c6:	e026      	b.n	8006516 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	4a4b      	ldr	r2, [pc, #300]	@ (80065fc <HAL_TIM_PWM_Start_DMA+0x404>)
 80064ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006600 <HAL_TIM_PWM_Start_DMA+0x408>)
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064dc:	4a49      	ldr	r2, [pc, #292]	@ (8006604 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80064de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3340      	adds	r3, #64	@ 0x40
 80064ec:	461a      	mov	r2, r3
 80064ee:	887b      	ldrh	r3, [r7, #2]
 80064f0:	f7fe f81e 	bl	8004530 <HAL_DMA_Start_IT>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e07a      	b.n	80065f4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800650c:	60da      	str	r2, [r3, #12]
      break;
 800650e:	e002      	b.n	8006516 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	75fb      	strb	r3, [r7, #23]
      break;
 8006514:	bf00      	nop
  }

  if (status == HAL_OK)
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d16a      	bne.n	80065f2 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2201      	movs	r2, #1
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	4618      	mov	r0, r3
 8006526:	f001 fd9f 	bl	8008068 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a36      	ldr	r2, [pc, #216]	@ (8006608 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d013      	beq.n	800655c <HAL_TIM_PWM_Start_DMA+0x364>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a34      	ldr	r2, [pc, #208]	@ (800660c <HAL_TIM_PWM_Start_DMA+0x414>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00e      	beq.n	800655c <HAL_TIM_PWM_Start_DMA+0x364>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a33      	ldr	r2, [pc, #204]	@ (8006610 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d009      	beq.n	800655c <HAL_TIM_PWM_Start_DMA+0x364>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a31      	ldr	r2, [pc, #196]	@ (8006614 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <HAL_TIM_PWM_Start_DMA+0x364>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a30      	ldr	r2, [pc, #192]	@ (8006618 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d101      	bne.n	8006560 <HAL_TIM_PWM_Start_DMA+0x368>
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <HAL_TIM_PWM_Start_DMA+0x36a>
 8006560:	2300      	movs	r3, #0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a23      	ldr	r2, [pc, #140]	@ (8006608 <HAL_TIM_PWM_Start_DMA+0x410>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d018      	beq.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006588:	d013      	beq.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a23      	ldr	r2, [pc, #140]	@ (800661c <HAL_TIM_PWM_Start_DMA+0x424>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00e      	beq.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a21      	ldr	r2, [pc, #132]	@ (8006620 <HAL_TIM_PWM_Start_DMA+0x428>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d009      	beq.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1a      	ldr	r2, [pc, #104]	@ (800660c <HAL_TIM_PWM_Start_DMA+0x414>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d004      	beq.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a18      	ldr	r2, [pc, #96]	@ (8006610 <HAL_TIM_PWM_Start_DMA+0x418>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d115      	bne.n	80065de <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006624 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b06      	cmp	r3, #6
 80065c2:	d015      	beq.n	80065f0 <HAL_TIM_PWM_Start_DMA+0x3f8>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ca:	d011      	beq.n	80065f0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065dc:	e008      	b.n	80065f0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e000      	b.n	80065f2 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	080074bf 	.word	0x080074bf
 8006600:	08007567 	.word	0x08007567
 8006604:	0800742d 	.word	0x0800742d
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40013400 	.word	0x40013400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	00010007 	.word	0x00010007

08006628 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b0c      	cmp	r3, #12
 800663a:	d855      	bhi.n	80066e8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800663c:	a201      	add	r2, pc, #4	@ (adr r2, 8006644 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	08006679 	.word	0x08006679
 8006648:	080066e9 	.word	0x080066e9
 800664c:	080066e9 	.word	0x080066e9
 8006650:	080066e9 	.word	0x080066e9
 8006654:	08006695 	.word	0x08006695
 8006658:	080066e9 	.word	0x080066e9
 800665c:	080066e9 	.word	0x080066e9
 8006660:	080066e9 	.word	0x080066e9
 8006664:	080066b1 	.word	0x080066b1
 8006668:	080066e9 	.word	0x080066e9
 800666c:	080066e9 	.word	0x080066e9
 8006670:	080066e9 	.word	0x080066e9
 8006674:	080066cd 	.word	0x080066cd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006686:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe f823 	bl	80046d8 <HAL_DMA_Abort_IT>
      break;
 8006692:	e02c      	b.n	80066ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe f815 	bl	80046d8 <HAL_DMA_Abort_IT>
      break;
 80066ae:	e01e      	b.n	80066ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe f807 	bl	80046d8 <HAL_DMA_Abort_IT>
      break;
 80066ca:	e010      	b.n	80066ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fd fff9 	bl	80046d8 <HAL_DMA_Abort_IT>
      break;
 80066e6:	e002      	b.n	80066ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
      break;
 80066ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f040 8081 	bne.w	80067f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fcb2 	bl	8008068 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3e      	ldr	r2, [pc, #248]	@ (8006804 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a3d      	ldr	r2, [pc, #244]	@ (8006808 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a3b      	ldr	r2, [pc, #236]	@ (800680c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a3a      	ldr	r2, [pc, #232]	@ (8006810 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a38      	ldr	r2, [pc, #224]	@ (8006814 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d101      	bne.n	800673a <HAL_TIM_PWM_Stop_DMA+0x112>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <HAL_TIM_PWM_Stop_DMA+0x114>
 800673a:	2300      	movs	r3, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d017      	beq.n	8006770 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	f241 1311 	movw	r3, #4369	@ 0x1111
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10f      	bne.n	8006770 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6a1a      	ldr	r2, [r3, #32]
 8006756:	f244 4344 	movw	r3, #17476	@ 0x4444
 800675a:	4013      	ands	r3, r2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800676e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	f241 1311 	movw	r3, #4369	@ 0x1111
 800677a:	4013      	ands	r3, r2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10f      	bne.n	80067a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	f244 4344 	movw	r3, #17476	@ 0x4444
 800678a:	4013      	ands	r3, r2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d107      	bne.n	80067a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <HAL_TIM_PWM_Stop_DMA+0x188>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067ae:	e023      	b.n	80067f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d104      	bne.n	80067c0 <HAL_TIM_PWM_Stop_DMA+0x198>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067be:	e01b      	b.n	80067f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d104      	bne.n	80067d0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067ce:	e013      	b.n	80067f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b0c      	cmp	r3, #12
 80067d4:	d104      	bne.n	80067e0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067de:	e00b      	b.n	80067f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d104      	bne.n	80067f0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067ee:	e003      	b.n	80067f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40013400 	.word	0x40013400
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800

08006818 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e049      	b.n	80068be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f841 	bl	80068c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	4610      	mov	r0, r2
 8006858:	f000 feba 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_IC_Start_IT+0x1e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	e023      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d104      	bne.n	800690a <HAL_TIM_IC_Start_IT+0x2e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006906:	b2db      	uxtb	r3, r3
 8006908:	e01b      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d104      	bne.n	800691a <HAL_TIM_IC_Start_IT+0x3e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006916:	b2db      	uxtb	r3, r3
 8006918:	e013      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b0c      	cmp	r3, #12
 800691e:	d104      	bne.n	800692a <HAL_TIM_IC_Start_IT+0x4e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006926:	b2db      	uxtb	r3, r3
 8006928:	e00b      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b10      	cmp	r3, #16
 800692e:	d104      	bne.n	800693a <HAL_TIM_IC_Start_IT+0x5e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006936:	b2db      	uxtb	r3, r3
 8006938:	e003      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006940:	b2db      	uxtb	r3, r3
 8006942:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_TIM_IC_Start_IT+0x78>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006950:	b2db      	uxtb	r3, r3
 8006952:	e013      	b.n	800697c <HAL_TIM_IC_Start_IT+0xa0>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b04      	cmp	r3, #4
 8006958:	d104      	bne.n	8006964 <HAL_TIM_IC_Start_IT+0x88>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006960:	b2db      	uxtb	r3, r3
 8006962:	e00b      	b.n	800697c <HAL_TIM_IC_Start_IT+0xa0>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b08      	cmp	r3, #8
 8006968:	d104      	bne.n	8006974 <HAL_TIM_IC_Start_IT+0x98>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e003      	b.n	800697c <HAL_TIM_IC_Start_IT+0xa0>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800697a:	b2db      	uxtb	r3, r3
 800697c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d102      	bne.n	800698a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006984:	7b7b      	ldrb	r3, [r7, #13]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d001      	beq.n	800698e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e0d8      	b.n	8006b40 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_TIM_IC_Start_IT+0xc2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800699c:	e023      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_IC_Start_IT+0xd2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069ac:	e01b      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d104      	bne.n	80069be <HAL_TIM_IC_Start_IT+0xe2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069bc:	e013      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b0c      	cmp	r3, #12
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_IC_Start_IT+0xf2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069cc:	e00b      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d104      	bne.n	80069de <HAL_TIM_IC_Start_IT+0x102>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069dc:	e003      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_IC_Start_IT+0x11a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069f4:	e013      	b.n	8006a1e <HAL_TIM_IC_Start_IT+0x142>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_IC_Start_IT+0x12a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a04:	e00b      	b.n	8006a1e <HAL_TIM_IC_Start_IT+0x142>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_IC_Start_IT+0x13a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a14:	e003      	b.n	8006a1e <HAL_TIM_IC_Start_IT+0x142>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	d841      	bhi.n	8006aa8 <HAL_TIM_IC_Start_IT+0x1cc>
 8006a24:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <HAL_TIM_IC_Start_IT+0x150>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006aa9 	.word	0x08006aa9
 8006a34:	08006aa9 	.word	0x08006aa9
 8006a38:	08006aa9 	.word	0x08006aa9
 8006a3c:	08006a73 	.word	0x08006a73
 8006a40:	08006aa9 	.word	0x08006aa9
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006aa9 	.word	0x08006aa9
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006aa9 	.word	0x08006aa9
 8006a54:	08006aa9 	.word	0x08006aa9
 8006a58:	08006aa9 	.word	0x08006aa9
 8006a5c:	08006a97 	.word	0x08006a97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0202 	orr.w	r2, r2, #2
 8006a6e:	60da      	str	r2, [r3, #12]
      break;
 8006a70:	e01d      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0204 	orr.w	r2, r2, #4
 8006a80:	60da      	str	r2, [r3, #12]
      break;
 8006a82:	e014      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0208 	orr.w	r2, r2, #8
 8006a92:	60da      	str	r2, [r3, #12]
      break;
 8006a94:	e00b      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0210 	orr.w	r2, r2, #16
 8006aa4:	60da      	str	r2, [r3, #12]
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006aac:	bf00      	nop
  }

  if (status == HAL_OK)
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d144      	bne.n	8006b3e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fad3 	bl	8008068 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a20      	ldr	r2, [pc, #128]	@ (8006b48 <HAL_TIM_IC_Start_IT+0x26c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <HAL_TIM_IC_Start_IT+0x222>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad4:	d013      	beq.n	8006afe <HAL_TIM_IC_Start_IT+0x222>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1c      	ldr	r2, [pc, #112]	@ (8006b4c <HAL_TIM_IC_Start_IT+0x270>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <HAL_TIM_IC_Start_IT+0x222>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b50 <HAL_TIM_IC_Start_IT+0x274>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_TIM_IC_Start_IT+0x222>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a19      	ldr	r2, [pc, #100]	@ (8006b54 <HAL_TIM_IC_Start_IT+0x278>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_TIM_IC_Start_IT+0x222>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a17      	ldr	r2, [pc, #92]	@ (8006b58 <HAL_TIM_IC_Start_IT+0x27c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d115      	bne.n	8006b2a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	4b15      	ldr	r3, [pc, #84]	@ (8006b5c <HAL_TIM_IC_Start_IT+0x280>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d015      	beq.n	8006b3c <HAL_TIM_IC_Start_IT+0x260>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b16:	d011      	beq.n	8006b3c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b28:	e008      	b.n	8006b3c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0201 	orr.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e000      	b.n	8006b3e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40013400 	.word	0x40013400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	00010007 	.word	0x00010007

08006b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d020      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0202 	mvn.w	r2, #2
 8006b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fb fea4 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fc12 	bl	80073dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fb ff6d 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d020      	beq.n	8006c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01b      	beq.n	8006c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0204 	mvn.w	r2, #4
 8006be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fb fe7e 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8006bfc:	e005      	b.n	8006c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fbec 	bl	80073dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7fb ff47 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d020      	beq.n	8006c5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01b      	beq.n	8006c5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0208 	mvn.w	r2, #8
 8006c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2204      	movs	r2, #4
 8006c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fb fe58 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8006c48:	e005      	b.n	8006c56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fbc6 	bl	80073dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fb ff21 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d020      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01b      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0210 	mvn.w	r2, #16
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fb fe32 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fba0 	bl	80073dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fb fefb 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00c      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0201 	mvn.w	r2, #1
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fc f83e 	bl	8002d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 faf5 	bl	80082e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00c      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 faed 	bl	80082f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fb61 	bl	8007404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00c      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f06f 0220 	mvn.w	r2, #32
 8006d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fab5 	bl	80082d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00c      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fac1 	bl	800830c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00c      	beq.n	8006dae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 fab9 	bl	8008320 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00c      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d007      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fab1 	bl	8008334 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 faa9 	bl	8008348 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e088      	b.n	8006f2e <HAL_TIM_IC_ConfigChannel+0x130>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11b      	bne.n	8006e62 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006e3a:	f000 ff5b 	bl	8007cf4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 020c 	bic.w	r2, r2, #12
 8006e4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6999      	ldr	r1, [r3, #24]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	619a      	str	r2, [r3, #24]
 8006e60:	e060      	b.n	8006f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d11c      	bne.n	8006ea2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006e78:	f000 ffd3 	bl	8007e22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006e8a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6999      	ldr	r1, [r3, #24]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	021a      	lsls	r2, r3, #8
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	619a      	str	r2, [r3, #24]
 8006ea0:	e040      	b.n	8006f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d11b      	bne.n	8006ee0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006eb8:	f001 f820 	bl	8007efc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 020c 	bic.w	r2, r2, #12
 8006eca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69d9      	ldr	r1, [r3, #28]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	61da      	str	r2, [r3, #28]
 8006ede:	e021      	b.n	8006f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b0c      	cmp	r3, #12
 8006ee4:	d11c      	bne.n	8006f20 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006ef6:	f001 f83d 	bl	8007f74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006f08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69d9      	ldr	r1, [r3, #28]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	021a      	lsls	r2, r3, #8
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	61da      	str	r2, [r3, #28]
 8006f1e:	e001      	b.n	8006f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e0ff      	b.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b14      	cmp	r3, #20
 8006f62:	f200 80f0 	bhi.w	8007146 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f66:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08007147 	.word	0x08007147
 8006f74:	08007147 	.word	0x08007147
 8006f78:	08007147 	.word	0x08007147
 8006f7c:	08007001 	.word	0x08007001
 8006f80:	08007147 	.word	0x08007147
 8006f84:	08007147 	.word	0x08007147
 8006f88:	08007147 	.word	0x08007147
 8006f8c:	08007043 	.word	0x08007043
 8006f90:	08007147 	.word	0x08007147
 8006f94:	08007147 	.word	0x08007147
 8006f98:	08007147 	.word	0x08007147
 8006f9c:	08007083 	.word	0x08007083
 8006fa0:	08007147 	.word	0x08007147
 8006fa4:	08007147 	.word	0x08007147
 8006fa8:	08007147 	.word	0x08007147
 8006fac:	080070c5 	.word	0x080070c5
 8006fb0:	08007147 	.word	0x08007147
 8006fb4:	08007147 	.word	0x08007147
 8006fb8:	08007147 	.word	0x08007147
 8006fbc:	08007105 	.word	0x08007105
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fb9e 	bl	8007708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0208 	orr.w	r2, r2, #8
 8006fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0204 	bic.w	r2, r2, #4
 8006fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6999      	ldr	r1, [r3, #24]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	619a      	str	r2, [r3, #24]
      break;
 8006ffe:	e0a5      	b.n	800714c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fc0e 	bl	8007828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800701a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800702a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6999      	ldr	r1, [r3, #24]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	021a      	lsls	r2, r3, #8
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	619a      	str	r2, [r3, #24]
      break;
 8007040:	e084      	b.n	800714c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fc77 	bl	800793c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0208 	orr.w	r2, r2, #8
 800705c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69da      	ldr	r2, [r3, #28]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0204 	bic.w	r2, r2, #4
 800706c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69d9      	ldr	r1, [r3, #28]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	61da      	str	r2, [r3, #28]
      break;
 8007080:	e064      	b.n	800714c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fcdf 	bl	8007a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800709c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69d9      	ldr	r1, [r3, #28]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	021a      	lsls	r2, r3, #8
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	61da      	str	r2, [r3, #28]
      break;
 80070c2:	e043      	b.n	800714c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fd48 	bl	8007b60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0208 	orr.w	r2, r2, #8
 80070de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0204 	bic.w	r2, r2, #4
 80070ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007102:	e023      	b.n	800714c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fd8c 	bl	8007c28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800711e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800712e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	021a      	lsls	r2, r3, #8
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007144:	e002      	b.n	800714c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	75fb      	strb	r3, [r7, #23]
      break;
 800714a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop

08007160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_TIM_ConfigClockSource+0x1c>
 8007178:	2302      	movs	r3, #2
 800717a:	e0de      	b.n	800733a <HAL_TIM_ConfigClockSource+0x1da>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800719a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800719e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a63      	ldr	r2, [pc, #396]	@ (8007344 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	f000 80a9 	beq.w	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 80071bc:	4a61      	ldr	r2, [pc, #388]	@ (8007344 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	f200 80ae 	bhi.w	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 80071c4:	4a60      	ldr	r2, [pc, #384]	@ (8007348 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	f000 80a1 	beq.w	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 80071cc:	4a5e      	ldr	r2, [pc, #376]	@ (8007348 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	f200 80a6 	bhi.w	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 80071d4:	4a5d      	ldr	r2, [pc, #372]	@ (800734c <HAL_TIM_ConfigClockSource+0x1ec>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	f000 8099 	beq.w	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 80071dc:	4a5b      	ldr	r2, [pc, #364]	@ (800734c <HAL_TIM_ConfigClockSource+0x1ec>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	f200 809e 	bhi.w	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 80071e4:	4a5a      	ldr	r2, [pc, #360]	@ (8007350 <HAL_TIM_ConfigClockSource+0x1f0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	f000 8091 	beq.w	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 80071ec:	4a58      	ldr	r2, [pc, #352]	@ (8007350 <HAL_TIM_ConfigClockSource+0x1f0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	f200 8096 	bhi.w	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 80071f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80071f8:	f000 8089 	beq.w	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 80071fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007200:	f200 808e 	bhi.w	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007208:	d03e      	beq.n	8007288 <HAL_TIM_ConfigClockSource+0x128>
 800720a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800720e:	f200 8087 	bhi.w	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007216:	f000 8086 	beq.w	8007326 <HAL_TIM_ConfigClockSource+0x1c6>
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800721e:	d87f      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007220:	2b70      	cmp	r3, #112	@ 0x70
 8007222:	d01a      	beq.n	800725a <HAL_TIM_ConfigClockSource+0xfa>
 8007224:	2b70      	cmp	r3, #112	@ 0x70
 8007226:	d87b      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007228:	2b60      	cmp	r3, #96	@ 0x60
 800722a:	d050      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
 800722c:	2b60      	cmp	r3, #96	@ 0x60
 800722e:	d877      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007230:	2b50      	cmp	r3, #80	@ 0x50
 8007232:	d03c      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0x14e>
 8007234:	2b50      	cmp	r3, #80	@ 0x50
 8007236:	d873      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007238:	2b40      	cmp	r3, #64	@ 0x40
 800723a:	d058      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x18e>
 800723c:	2b40      	cmp	r3, #64	@ 0x40
 800723e:	d86f      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007240:	2b30      	cmp	r3, #48	@ 0x30
 8007242:	d064      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 8007244:	2b30      	cmp	r3, #48	@ 0x30
 8007246:	d86b      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007248:	2b20      	cmp	r3, #32
 800724a:	d060      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 800724c:	2b20      	cmp	r3, #32
 800724e:	d867      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d05c      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 8007254:	2b10      	cmp	r3, #16
 8007256:	d05a      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1ae>
 8007258:	e062      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800726a:	f000 fedd 	bl	8008028 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800727c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	609a      	str	r2, [r3, #8]
      break;
 8007286:	e04f      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007298:	f000 fec6 	bl	8008028 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072aa:	609a      	str	r2, [r3, #8]
      break;
 80072ac:	e03c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ba:	461a      	mov	r2, r3
 80072bc:	f000 fd82 	bl	8007dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2150      	movs	r1, #80	@ 0x50
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fe91 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 80072cc:	e02c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072da:	461a      	mov	r2, r3
 80072dc:	f000 fdde 	bl	8007e9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2160      	movs	r1, #96	@ 0x60
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fe81 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 80072ec:	e01c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072fa:	461a      	mov	r2, r3
 80072fc:	f000 fd62 	bl	8007dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2140      	movs	r1, #64	@ 0x40
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fe71 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 800730c:	e00c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f000 fe68 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 800731e:	e003      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	73fb      	strb	r3, [r7, #15]
      break;
 8007324:	e000      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	00100070 	.word	0x00100070
 8007348:	00100040 	.word	0x00100040
 800734c:	00100030 	.word	0x00100030
 8007350:	00100020 	.word	0x00100020

08007354 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b0c      	cmp	r3, #12
 8007366:	d831      	bhi.n	80073cc <HAL_TIM_ReadCapturedValue+0x78>
 8007368:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <HAL_TIM_ReadCapturedValue+0x1c>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	080073a5 	.word	0x080073a5
 8007374:	080073cd 	.word	0x080073cd
 8007378:	080073cd 	.word	0x080073cd
 800737c:	080073cd 	.word	0x080073cd
 8007380:	080073af 	.word	0x080073af
 8007384:	080073cd 	.word	0x080073cd
 8007388:	080073cd 	.word	0x080073cd
 800738c:	080073cd 	.word	0x080073cd
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073cd 	.word	0x080073cd
 8007398:	080073cd 	.word	0x080073cd
 800739c:	080073cd 	.word	0x080073cd
 80073a0:	080073c3 	.word	0x080073c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073aa:	60fb      	str	r3, [r7, #12]

      break;
 80073ac:	e00f      	b.n	80073ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	60fb      	str	r3, [r7, #12]

      break;
 80073b6:	e00a      	b.n	80073ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073be:	60fb      	str	r3, [r7, #12]

      break;
 80073c0:	e005      	b.n	80073ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c8:	60fb      	str	r3, [r7, #12]

      break;
 80073ca:	e000      	b.n	80073ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80073cc:	bf00      	nop
  }

  return tmpreg;
 80073ce:	68fb      	ldr	r3, [r7, #12]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d107      	bne.n	8007454 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007452:	e02a      	b.n	80074aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d107      	bne.n	800746e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2202      	movs	r2, #2
 8007462:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800746c:	e01d      	b.n	80074aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d107      	bne.n	8007488 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2204      	movs	r2, #4
 800747c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007486:	e010      	b.n	80074aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d107      	bne.n	80074a2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2208      	movs	r2, #8
 8007496:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074a0:	e003      	b.n	80074aa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff ffb4 	bl	8007418 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	771a      	strb	r2, [r3, #28]
}
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d10b      	bne.n	80074ee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d136      	bne.n	8007552 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074ec:	e031      	b.n	8007552 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d10b      	bne.n	8007510 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2202      	movs	r2, #2
 80074fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d125      	bne.n	8007552 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800750e:	e020      	b.n	8007552 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d10b      	bne.n	8007532 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2204      	movs	r2, #4
 800751e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d114      	bne.n	8007552 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007530:	e00f      	b.n	8007552 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d10a      	bne.n	8007552 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2208      	movs	r2, #8
 8007540:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7fb faa0 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	771a      	strb	r2, [r3, #28]
}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007572:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	429a      	cmp	r2, r3
 800757c:	d103      	bne.n	8007586 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	771a      	strb	r2, [r3, #28]
 8007584:	e019      	b.n	80075ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d103      	bne.n	8007598 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2202      	movs	r2, #2
 8007594:	771a      	strb	r2, [r3, #28]
 8007596:	e010      	b.n	80075ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d103      	bne.n	80075aa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2204      	movs	r2, #4
 80075a6:	771a      	strb	r2, [r3, #28]
 80075a8:	e007      	b.n	80075ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d102      	bne.n	80075ba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2208      	movs	r2, #8
 80075b8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7ff ff18 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	771a      	strb	r2, [r3, #28]
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a42      	ldr	r2, [pc, #264]	@ (80076ec <TIM_Base_SetConfig+0x11c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d00f      	beq.n	8007608 <TIM_Base_SetConfig+0x38>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ee:	d00b      	beq.n	8007608 <TIM_Base_SetConfig+0x38>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a3f      	ldr	r2, [pc, #252]	@ (80076f0 <TIM_Base_SetConfig+0x120>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d007      	beq.n	8007608 <TIM_Base_SetConfig+0x38>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a3e      	ldr	r2, [pc, #248]	@ (80076f4 <TIM_Base_SetConfig+0x124>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_Base_SetConfig+0x38>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a3d      	ldr	r2, [pc, #244]	@ (80076f8 <TIM_Base_SetConfig+0x128>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d108      	bne.n	800761a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a33      	ldr	r2, [pc, #204]	@ (80076ec <TIM_Base_SetConfig+0x11c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01b      	beq.n	800765a <TIM_Base_SetConfig+0x8a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007628:	d017      	beq.n	800765a <TIM_Base_SetConfig+0x8a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a30      	ldr	r2, [pc, #192]	@ (80076f0 <TIM_Base_SetConfig+0x120>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <TIM_Base_SetConfig+0x8a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a2f      	ldr	r2, [pc, #188]	@ (80076f4 <TIM_Base_SetConfig+0x124>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00f      	beq.n	800765a <TIM_Base_SetConfig+0x8a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2e      	ldr	r2, [pc, #184]	@ (80076f8 <TIM_Base_SetConfig+0x128>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00b      	beq.n	800765a <TIM_Base_SetConfig+0x8a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2d      	ldr	r2, [pc, #180]	@ (80076fc <TIM_Base_SetConfig+0x12c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d007      	beq.n	800765a <TIM_Base_SetConfig+0x8a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a2c      	ldr	r2, [pc, #176]	@ (8007700 <TIM_Base_SetConfig+0x130>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d003      	beq.n	800765a <TIM_Base_SetConfig+0x8a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a2b      	ldr	r2, [pc, #172]	@ (8007704 <TIM_Base_SetConfig+0x134>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d108      	bne.n	800766c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a16      	ldr	r2, [pc, #88]	@ (80076ec <TIM_Base_SetConfig+0x11c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00f      	beq.n	80076b8 <TIM_Base_SetConfig+0xe8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a17      	ldr	r2, [pc, #92]	@ (80076f8 <TIM_Base_SetConfig+0x128>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00b      	beq.n	80076b8 <TIM_Base_SetConfig+0xe8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a16      	ldr	r2, [pc, #88]	@ (80076fc <TIM_Base_SetConfig+0x12c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_Base_SetConfig+0xe8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <TIM_Base_SetConfig+0x130>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_Base_SetConfig+0xe8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a14      	ldr	r2, [pc, #80]	@ (8007704 <TIM_Base_SetConfig+0x134>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d103      	bne.n	80076c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d105      	bne.n	80076de <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f023 0201 	bic.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	611a      	str	r2, [r3, #16]
  }
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40013400 	.word	0x40013400
 80076fc:	40014000 	.word	0x40014000
 8007700:	40014400 	.word	0x40014400
 8007704:	40014800 	.word	0x40014800

08007708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	f023 0201 	bic.w	r2, r3, #1
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800773a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f023 0302 	bic.w	r3, r3, #2
 8007754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a2c      	ldr	r2, [pc, #176]	@ (8007814 <TIM_OC1_SetConfig+0x10c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00f      	beq.n	8007788 <TIM_OC1_SetConfig+0x80>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a2b      	ldr	r2, [pc, #172]	@ (8007818 <TIM_OC1_SetConfig+0x110>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00b      	beq.n	8007788 <TIM_OC1_SetConfig+0x80>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a2a      	ldr	r2, [pc, #168]	@ (800781c <TIM_OC1_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_OC1_SetConfig+0x80>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a29      	ldr	r2, [pc, #164]	@ (8007820 <TIM_OC1_SetConfig+0x118>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC1_SetConfig+0x80>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a28      	ldr	r2, [pc, #160]	@ (8007824 <TIM_OC1_SetConfig+0x11c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d10c      	bne.n	80077a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f023 0308 	bic.w	r3, r3, #8
 800778e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f023 0304 	bic.w	r3, r3, #4
 80077a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007814 <TIM_OC1_SetConfig+0x10c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00f      	beq.n	80077ca <TIM_OC1_SetConfig+0xc2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007818 <TIM_OC1_SetConfig+0x110>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00b      	beq.n	80077ca <TIM_OC1_SetConfig+0xc2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a19      	ldr	r2, [pc, #100]	@ (800781c <TIM_OC1_SetConfig+0x114>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d007      	beq.n	80077ca <TIM_OC1_SetConfig+0xc2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a18      	ldr	r2, [pc, #96]	@ (8007820 <TIM_OC1_SetConfig+0x118>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d003      	beq.n	80077ca <TIM_OC1_SetConfig+0xc2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a17      	ldr	r2, [pc, #92]	@ (8007824 <TIM_OC1_SetConfig+0x11c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d111      	bne.n	80077ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	621a      	str	r2, [r3, #32]
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40012c00 	.word	0x40012c00
 8007818:	40013400 	.word	0x40013400
 800781c:	40014000 	.word	0x40014000
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800

08007828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f023 0210 	bic.w	r2, r3, #16
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800785a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f023 0320 	bic.w	r3, r3, #32
 8007876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a28      	ldr	r2, [pc, #160]	@ (8007928 <TIM_OC2_SetConfig+0x100>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_OC2_SetConfig+0x6c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a27      	ldr	r2, [pc, #156]	@ (800792c <TIM_OC2_SetConfig+0x104>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d10d      	bne.n	80078b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800789a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007928 <TIM_OC2_SetConfig+0x100>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00f      	beq.n	80078d8 <TIM_OC2_SetConfig+0xb0>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a1c      	ldr	r2, [pc, #112]	@ (800792c <TIM_OC2_SetConfig+0x104>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00b      	beq.n	80078d8 <TIM_OC2_SetConfig+0xb0>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <TIM_OC2_SetConfig+0x108>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d007      	beq.n	80078d8 <TIM_OC2_SetConfig+0xb0>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <TIM_OC2_SetConfig+0x10c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_OC2_SetConfig+0xb0>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a19      	ldr	r2, [pc, #100]	@ (8007938 <TIM_OC2_SetConfig+0x110>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d113      	bne.n	8007900 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40013400 	.word	0x40013400
 8007930:	40014000 	.word	0x40014000
 8007934:	40014400 	.word	0x40014400
 8007938:	40014800 	.word	0x40014800

0800793c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800796a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0303 	bic.w	r3, r3, #3
 8007976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a27      	ldr	r2, [pc, #156]	@ (8007a38 <TIM_OC3_SetConfig+0xfc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d003      	beq.n	80079a6 <TIM_OC3_SetConfig+0x6a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a26      	ldr	r2, [pc, #152]	@ (8007a3c <TIM_OC3_SetConfig+0x100>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d10d      	bne.n	80079c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a38 <TIM_OC3_SetConfig+0xfc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00f      	beq.n	80079ea <TIM_OC3_SetConfig+0xae>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a3c <TIM_OC3_SetConfig+0x100>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00b      	beq.n	80079ea <TIM_OC3_SetConfig+0xae>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007a40 <TIM_OC3_SetConfig+0x104>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d007      	beq.n	80079ea <TIM_OC3_SetConfig+0xae>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a19      	ldr	r2, [pc, #100]	@ (8007a44 <TIM_OC3_SetConfig+0x108>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d003      	beq.n	80079ea <TIM_OC3_SetConfig+0xae>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a18      	ldr	r2, [pc, #96]	@ (8007a48 <TIM_OC3_SetConfig+0x10c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d113      	bne.n	8007a12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	621a      	str	r2, [r3, #32]
}
 8007a2c:	bf00      	nop
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	40012c00 	.word	0x40012c00
 8007a3c:	40013400 	.word	0x40013400
 8007a40:	40014000 	.word	0x40014000
 8007a44:	40014400 	.word	0x40014400
 8007a48:	40014800 	.word	0x40014800

08007a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	031b      	lsls	r3, r3, #12
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a28      	ldr	r2, [pc, #160]	@ (8007b4c <TIM_OC4_SetConfig+0x100>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC4_SetConfig+0x6c>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a27      	ldr	r2, [pc, #156]	@ (8007b50 <TIM_OC4_SetConfig+0x104>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d10d      	bne.n	8007ad4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	031b      	lsls	r3, r3, #12
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b4c <TIM_OC4_SetConfig+0x100>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00f      	beq.n	8007afc <TIM_OC4_SetConfig+0xb0>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a1c      	ldr	r2, [pc, #112]	@ (8007b50 <TIM_OC4_SetConfig+0x104>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00b      	beq.n	8007afc <TIM_OC4_SetConfig+0xb0>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b54 <TIM_OC4_SetConfig+0x108>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d007      	beq.n	8007afc <TIM_OC4_SetConfig+0xb0>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1a      	ldr	r2, [pc, #104]	@ (8007b58 <TIM_OC4_SetConfig+0x10c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_OC4_SetConfig+0xb0>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a19      	ldr	r2, [pc, #100]	@ (8007b5c <TIM_OC4_SetConfig+0x110>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d113      	bne.n	8007b24 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	019b      	lsls	r3, r3, #6
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	019b      	lsls	r3, r3, #6
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800

08007b60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ba4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	041b      	lsls	r3, r3, #16
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a17      	ldr	r2, [pc, #92]	@ (8007c14 <TIM_OC5_SetConfig+0xb4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00f      	beq.n	8007bda <TIM_OC5_SetConfig+0x7a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a16      	ldr	r2, [pc, #88]	@ (8007c18 <TIM_OC5_SetConfig+0xb8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00b      	beq.n	8007bda <TIM_OC5_SetConfig+0x7a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a15      	ldr	r2, [pc, #84]	@ (8007c1c <TIM_OC5_SetConfig+0xbc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <TIM_OC5_SetConfig+0x7a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a14      	ldr	r2, [pc, #80]	@ (8007c20 <TIM_OC5_SetConfig+0xc0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_OC5_SetConfig+0x7a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a13      	ldr	r2, [pc, #76]	@ (8007c24 <TIM_OC5_SetConfig+0xc4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d109      	bne.n	8007bee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007be0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	621a      	str	r2, [r3, #32]
}
 8007c08:	bf00      	nop
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	40012c00 	.word	0x40012c00
 8007c18:	40013400 	.word	0x40013400
 8007c1c:	40014000 	.word	0x40014000
 8007c20:	40014400 	.word	0x40014400
 8007c24:	40014800 	.word	0x40014800

08007c28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	051b      	lsls	r3, r3, #20
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <TIM_OC6_SetConfig+0xb8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00f      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x7c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a17      	ldr	r2, [pc, #92]	@ (8007ce4 <TIM_OC6_SetConfig+0xbc>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00b      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x7c>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ce8 <TIM_OC6_SetConfig+0xc0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d007      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x7c>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a15      	ldr	r2, [pc, #84]	@ (8007cec <TIM_OC6_SetConfig+0xc4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x7c>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a14      	ldr	r2, [pc, #80]	@ (8007cf0 <TIM_OC6_SetConfig+0xc8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d109      	bne.n	8007cb8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007caa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	029b      	lsls	r3, r3, #10
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400
 8007cf0:	40014800 	.word	0x40014800

08007cf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	f023 0201 	bic.w	r2, r3, #1
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	@ (8007db0 <TIM_TI1_SetConfig+0xbc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d013      	beq.n	8007d4a <TIM_TI1_SetConfig+0x56>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d28:	d00f      	beq.n	8007d4a <TIM_TI1_SetConfig+0x56>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a21      	ldr	r2, [pc, #132]	@ (8007db4 <TIM_TI1_SetConfig+0xc0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00b      	beq.n	8007d4a <TIM_TI1_SetConfig+0x56>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a20      	ldr	r2, [pc, #128]	@ (8007db8 <TIM_TI1_SetConfig+0xc4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d007      	beq.n	8007d4a <TIM_TI1_SetConfig+0x56>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007dbc <TIM_TI1_SetConfig+0xc8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <TIM_TI1_SetConfig+0x56>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a1e      	ldr	r2, [pc, #120]	@ (8007dc0 <TIM_TI1_SetConfig+0xcc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d101      	bne.n	8007d4e <TIM_TI1_SetConfig+0x5a>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <TIM_TI1_SetConfig+0x5c>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d008      	beq.n	8007d66 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	e003      	b.n	8007d6e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f043 0301 	orr.w	r3, r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f023 030a 	bic.w	r3, r3, #10
 8007d88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f003 030a 	and.w	r3, r3, #10
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	621a      	str	r2, [r3, #32]
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40000800 	.word	0x40000800
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40014000 	.word	0x40014000

08007dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f023 0201 	bic.w	r2, r3, #1
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f023 030a 	bic.w	r3, r3, #10
 8007e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	621a      	str	r2, [r3, #32]
}
 8007e16:	bf00      	nop
 8007e18:	371c      	adds	r7, #28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b087      	sub	sp, #28
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f023 0210 	bic.w	r2, r3, #16
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	031b      	lsls	r3, r3, #12
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f023 0210 	bic.w	r2, r3, #16
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	031b      	lsls	r3, r3, #12
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	621a      	str	r2, [r3, #32]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f023 0303 	bic.w	r3, r3, #3
 8007f28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	621a      	str	r2, [r3, #32]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	031b      	lsls	r3, r3, #12
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	031b      	lsls	r3, r3, #12
 8007fcc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4313      	orrs	r3, r2
 8008010:	f043 0307 	orr.w	r3, r3, #7
 8008014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	609a      	str	r2, [r3, #8]
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	021a      	lsls	r2, r3, #8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	431a      	orrs	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	4313      	orrs	r3, r2
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	609a      	str	r2, [r3, #8]
}
 800805c:	bf00      	nop
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f003 031f 	and.w	r3, r3, #31
 800807a:	2201      	movs	r2, #1
 800807c:	fa02 f303 	lsl.w	r3, r2, r3
 8008080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1a      	ldr	r2, [r3, #32]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	43db      	mvns	r3, r3
 800808a:	401a      	ands	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a1a      	ldr	r2, [r3, #32]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	fa01 f303 	lsl.w	r3, r1, r3
 80080a0:	431a      	orrs	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	621a      	str	r2, [r3, #32]
}
 80080a6:	bf00      	nop
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
	...

080080b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d101      	bne.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c8:	2302      	movs	r3, #2
 80080ca:	e065      	b.n	8008198 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2c      	ldr	r2, [pc, #176]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a2b      	ldr	r2, [pc, #172]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d108      	bne.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008106:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	4313      	orrs	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1b      	ldr	r2, [pc, #108]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d018      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	d013      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a18      	ldr	r2, [pc, #96]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00e      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a17      	ldr	r2, [pc, #92]	@ (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d009      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a12      	ldr	r2, [pc, #72]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a13      	ldr	r2, [pc, #76]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d10c      	bne.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4313      	orrs	r3, r2
 800817c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	40012c00 	.word	0x40012c00
 80081a8:	40013400 	.word	0x40013400
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40014000 	.word	0x40014000

080081b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e073      	b.n	80082bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a19      	ldr	r2, [pc, #100]	@ (80082c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d004      	beq.n	8008270 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a18      	ldr	r2, [pc, #96]	@ (80082cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d11c      	bne.n	80082aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827a:	051b      	lsls	r3, r3, #20
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40013400 	.word	0x40013400

080082d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e042      	b.n	80083f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fa ff19 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2224      	movs	r2, #36	@ 0x24
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0201 	bic.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fe4c 	bl	8009044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fb7d 	bl	8008aac <UART_SetConfig>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e01b      	b.n	80083f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f042 0201 	orr.w	r2, r2, #1
 80083ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fecb 	bl	8009188 <UART_CheckIdleState>
 80083f2:	4603      	mov	r3, r0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b0ba      	sub	sp, #232	@ 0xe8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008422:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008426:	f640 030f 	movw	r3, #2063	@ 0x80f
 800842a:	4013      	ands	r3, r2
 800842c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d11b      	bne.n	8008470 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b00      	cmp	r3, #0
 8008442:	d015      	beq.n	8008470 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d009      	beq.n	8008470 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 8300 	beq.w	8008a66 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
      }
      return;
 800846e:	e2fa      	b.n	8008a66 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8123 	beq.w	80086c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800847a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800847e:	4b8d      	ldr	r3, [pc, #564]	@ (80086b4 <HAL_UART_IRQHandler+0x2b8>)
 8008480:	4013      	ands	r3, r2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d106      	bne.n	8008494 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008486:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800848a:	4b8b      	ldr	r3, [pc, #556]	@ (80086b8 <HAL_UART_IRQHandler+0x2bc>)
 800848c:	4013      	ands	r3, r2
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8116 	beq.w	80086c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d011      	beq.n	80084c4 <HAL_UART_IRQHandler+0xc8>
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2201      	movs	r2, #1
 80084b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ba:	f043 0201 	orr.w	r2, r3, #1
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d011      	beq.n	80084f4 <HAL_UART_IRQHandler+0xf8>
 80084d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2202      	movs	r2, #2
 80084e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ea:	f043 0204 	orr.w	r2, r3, #4
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d011      	beq.n	8008524 <HAL_UART_IRQHandler+0x128>
 8008500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2204      	movs	r2, #4
 8008512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	2b00      	cmp	r3, #0
 800852e:	d017      	beq.n	8008560 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800853c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008540:	4b5c      	ldr	r3, [pc, #368]	@ (80086b4 <HAL_UART_IRQHandler+0x2b8>)
 8008542:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2208      	movs	r2, #8
 800854e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008556:	f043 0208 	orr.w	r2, r3, #8
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008568:	2b00      	cmp	r3, #0
 800856a:	d012      	beq.n	8008592 <HAL_UART_IRQHandler+0x196>
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008570:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00c      	beq.n	8008592 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008588:	f043 0220 	orr.w	r2, r3, #32
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8266 	beq.w	8008a6a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d013      	beq.n	80085d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d105      	bne.n	80085c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e6:	2b40      	cmp	r3, #64	@ 0x40
 80085e8:	d005      	beq.n	80085f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d054      	beq.n	80086a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fedd 	bl	80093b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008606:	2b40      	cmp	r3, #64	@ 0x40
 8008608:	d146      	bne.n	8008698 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008620:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008636:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800863a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800864e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1d9      	bne.n	800860a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800865c:	2b00      	cmp	r3, #0
 800865e:	d017      	beq.n	8008690 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008666:	4a15      	ldr	r2, [pc, #84]	@ (80086bc <HAL_UART_IRQHandler+0x2c0>)
 8008668:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008670:	4618      	mov	r0, r3
 8008672:	f7fc f831 	bl	80046d8 <HAL_DMA_Abort_IT>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d019      	beq.n	80086b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800868a:	4610      	mov	r0, r2
 800868c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868e:	e00f      	b.n	80086b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f9f5 	bl	8008a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008696:	e00b      	b.n	80086b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f9f1 	bl	8008a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869e:	e007      	b.n	80086b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f9ed 	bl	8008a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80086ae:	e1dc      	b.n	8008a6a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b0:	bf00      	nop
    return;
 80086b2:	e1da      	b.n	8008a6a <HAL_UART_IRQHandler+0x66e>
 80086b4:	10000001 	.word	0x10000001
 80086b8:	04000120 	.word	0x04000120
 80086bc:	08009483 	.word	0x08009483

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	f040 8170 	bne.w	80089aa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ce:	f003 0310 	and.w	r3, r3, #16
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 8169 	beq.w	80089aa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 8162 	beq.w	80089aa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2210      	movs	r2, #16
 80086ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f8:	2b40      	cmp	r3, #64	@ 0x40
 80086fa:	f040 80d8 	bne.w	80088ae <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800870c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80af 	beq.w	8008874 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800871c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008720:	429a      	cmp	r2, r3
 8008722:	f080 80a7 	bcs.w	8008874 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800872c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 8087 	bne.w	8008852 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008758:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800875c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008760:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800876e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008772:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800877a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1da      	bne.n	8008744 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800879e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e1      	bne.n	800878e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3308      	adds	r3, #8
 80087ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e3      	bne.n	80087ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800881e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008834:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e4      	bne.n	8008810 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884c:	4618      	mov	r0, r3
 800884e:	f7fb feea 	bl	8004626 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008864:	b29b      	uxth	r3, r3
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	b29b      	uxth	r3, r3
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f911 	bl	8008a94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008872:	e0fc      	b.n	8008a6e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800887a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800887e:	429a      	cmp	r2, r3
 8008880:	f040 80f5 	bne.w	8008a6e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b20      	cmp	r3, #32
 8008894:	f040 80eb 	bne.w	8008a6e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f8f4 	bl	8008a94 <HAL_UARTEx_RxEventCallback>
      return;
 80088ac:	e0df      	b.n	8008a6e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 80d1 	beq.w	8008a72 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80088d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80cc 	beq.w	8008a72 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80088fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800890a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e4      	bne.n	80088da <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3308      	adds	r3, #8
 8008916:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	e853 3f00 	ldrex	r3, [r3]
 800891e:	623b      	str	r3, [r7, #32]
   return(result);
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008938:	633a      	str	r2, [r7, #48]	@ 0x30
 800893a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800893e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e1      	bne.n	8008910 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	60fb      	str	r3, [r7, #12]
   return(result);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f023 0310 	bic.w	r3, r3, #16
 8008974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	69b9      	ldr	r1, [r7, #24]
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	617b      	str	r3, [r7, #20]
   return(result);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e4      	bne.n	8008960 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800899c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f876 	bl	8008a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089a8:	e063      	b.n	8008a72 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <HAL_UART_IRQHandler+0x5d8>
 80089b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d008      	beq.n	80089d4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80089ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fd95 	bl	80094fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089d2:	e051      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d014      	beq.n	8008a0a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d008      	beq.n	8008a0a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d03a      	beq.n	8008a76 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
    }
    return;
 8008a08:	e035      	b.n	8008a76 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <HAL_UART_IRQHandler+0x62e>
 8008a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fd3f 	bl	80094a6 <UART_EndTransmit_IT>
    return;
 8008a28:	e026      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <HAL_UART_IRQHandler+0x64e>
 8008a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fd6e 	bl	8009524 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a48:	e016      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d010      	beq.n	8008a78 <HAL_UART_IRQHandler+0x67c>
 8008a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da0c      	bge.n	8008a78 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fd56 	bl	8009510 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a64:	e008      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
      return;
 8008a66:	bf00      	nop
 8008a68:	e006      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
    return;
 8008a6a:	bf00      	nop
 8008a6c:	e004      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
      return;
 8008a6e:	bf00      	nop
 8008a70:	e002      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
      return;
 8008a72:	bf00      	nop
 8008a74:	e000      	b.n	8008a78 <HAL_UART_IRQHandler+0x67c>
    return;
 8008a76:	bf00      	nop
  }
}
 8008a78:	37e8      	adds	r7, #232	@ 0xe8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop

08008a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab0:	b08c      	sub	sp, #48	@ 0x30
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4bab      	ldr	r3, [pc, #684]	@ (8008d88 <UART_SetConfig+0x2dc>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	6812      	ldr	r2, [r2, #0]
 8008ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4aa0      	ldr	r2, [pc, #640]	@ (8008d8c <UART_SetConfig+0x2e0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b14:	4313      	orrs	r3, r2
 8008b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008b22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	6812      	ldr	r2, [r2, #0]
 8008b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	f023 010f 	bic.w	r1, r3, #15
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a91      	ldr	r2, [pc, #580]	@ (8008d90 <UART_SetConfig+0x2e4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d125      	bne.n	8008b9c <UART_SetConfig+0xf0>
 8008b50:	4b90      	ldr	r3, [pc, #576]	@ (8008d94 <UART_SetConfig+0x2e8>)
 8008b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b56:	f003 0303 	and.w	r3, r3, #3
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d81a      	bhi.n	8008b94 <UART_SetConfig+0xe8>
 8008b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b64 <UART_SetConfig+0xb8>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008b8d 	.word	0x08008b8d
 8008b74:	2301      	movs	r3, #1
 8008b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b7a:	e0d6      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b82:	e0d2      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008b84:	2304      	movs	r3, #4
 8008b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b8a:	e0ce      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b92:	e0ca      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008b94:	2310      	movs	r3, #16
 8008b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b9a:	e0c6      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a7d      	ldr	r2, [pc, #500]	@ (8008d98 <UART_SetConfig+0x2ec>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d138      	bne.n	8008c18 <UART_SetConfig+0x16c>
 8008ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8008d94 <UART_SetConfig+0x2e8>)
 8008ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bac:	f003 030c 	and.w	r3, r3, #12
 8008bb0:	2b0c      	cmp	r3, #12
 8008bb2:	d82d      	bhi.n	8008c10 <UART_SetConfig+0x164>
 8008bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bbc <UART_SetConfig+0x110>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bf1 	.word	0x08008bf1
 8008bc0:	08008c11 	.word	0x08008c11
 8008bc4:	08008c11 	.word	0x08008c11
 8008bc8:	08008c11 	.word	0x08008c11
 8008bcc:	08008c01 	.word	0x08008c01
 8008bd0:	08008c11 	.word	0x08008c11
 8008bd4:	08008c11 	.word	0x08008c11
 8008bd8:	08008c11 	.word	0x08008c11
 8008bdc:	08008bf9 	.word	0x08008bf9
 8008be0:	08008c11 	.word	0x08008c11
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	08008c11 	.word	0x08008c11
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bf6:	e098      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bfe:	e094      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c00:	2304      	movs	r3, #4
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c06:	e090      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c08:	2308      	movs	r3, #8
 8008c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0e:	e08c      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c10:	2310      	movs	r3, #16
 8008c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c16:	e088      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a5f      	ldr	r2, [pc, #380]	@ (8008d9c <UART_SetConfig+0x2f0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d125      	bne.n	8008c6e <UART_SetConfig+0x1c2>
 8008c22:	4b5c      	ldr	r3, [pc, #368]	@ (8008d94 <UART_SetConfig+0x2e8>)
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c2c:	2b30      	cmp	r3, #48	@ 0x30
 8008c2e:	d016      	beq.n	8008c5e <UART_SetConfig+0x1b2>
 8008c30:	2b30      	cmp	r3, #48	@ 0x30
 8008c32:	d818      	bhi.n	8008c66 <UART_SetConfig+0x1ba>
 8008c34:	2b20      	cmp	r3, #32
 8008c36:	d00a      	beq.n	8008c4e <UART_SetConfig+0x1a2>
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d814      	bhi.n	8008c66 <UART_SetConfig+0x1ba>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <UART_SetConfig+0x19a>
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d008      	beq.n	8008c56 <UART_SetConfig+0x1aa>
 8008c44:	e00f      	b.n	8008c66 <UART_SetConfig+0x1ba>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c4c:	e06d      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c54:	e069      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c56:	2304      	movs	r3, #4
 8008c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c5c:	e065      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c5e:	2308      	movs	r3, #8
 8008c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c64:	e061      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c66:	2310      	movs	r3, #16
 8008c68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c6c:	e05d      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a4b      	ldr	r2, [pc, #300]	@ (8008da0 <UART_SetConfig+0x2f4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d125      	bne.n	8008cc4 <UART_SetConfig+0x218>
 8008c78:	4b46      	ldr	r3, [pc, #280]	@ (8008d94 <UART_SetConfig+0x2e8>)
 8008c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c84:	d016      	beq.n	8008cb4 <UART_SetConfig+0x208>
 8008c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c88:	d818      	bhi.n	8008cbc <UART_SetConfig+0x210>
 8008c8a:	2b80      	cmp	r3, #128	@ 0x80
 8008c8c:	d00a      	beq.n	8008ca4 <UART_SetConfig+0x1f8>
 8008c8e:	2b80      	cmp	r3, #128	@ 0x80
 8008c90:	d814      	bhi.n	8008cbc <UART_SetConfig+0x210>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <UART_SetConfig+0x1f0>
 8008c96:	2b40      	cmp	r3, #64	@ 0x40
 8008c98:	d008      	beq.n	8008cac <UART_SetConfig+0x200>
 8008c9a:	e00f      	b.n	8008cbc <UART_SetConfig+0x210>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ca2:	e042      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008caa:	e03e      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb2:	e03a      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cba:	e036      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cc2:	e032      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a30      	ldr	r2, [pc, #192]	@ (8008d8c <UART_SetConfig+0x2e0>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d12a      	bne.n	8008d24 <UART_SetConfig+0x278>
 8008cce:	4b31      	ldr	r3, [pc, #196]	@ (8008d94 <UART_SetConfig+0x2e8>)
 8008cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008cd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cdc:	d01a      	beq.n	8008d14 <UART_SetConfig+0x268>
 8008cde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ce2:	d81b      	bhi.n	8008d1c <UART_SetConfig+0x270>
 8008ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ce8:	d00c      	beq.n	8008d04 <UART_SetConfig+0x258>
 8008cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cee:	d815      	bhi.n	8008d1c <UART_SetConfig+0x270>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <UART_SetConfig+0x250>
 8008cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cf8:	d008      	beq.n	8008d0c <UART_SetConfig+0x260>
 8008cfa:	e00f      	b.n	8008d1c <UART_SetConfig+0x270>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d02:	e012      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008d04:	2302      	movs	r3, #2
 8008d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d0a:	e00e      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d12:	e00a      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008d14:	2308      	movs	r3, #8
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d1a:	e006      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d22:	e002      	b.n	8008d2a <UART_SetConfig+0x27e>
 8008d24:	2310      	movs	r3, #16
 8008d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a17      	ldr	r2, [pc, #92]	@ (8008d8c <UART_SetConfig+0x2e0>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	f040 80a8 	bne.w	8008e86 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d834      	bhi.n	8008da8 <UART_SetConfig+0x2fc>
 8008d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d44 <UART_SetConfig+0x298>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d69 	.word	0x08008d69
 8008d48:	08008da9 	.word	0x08008da9
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008da9 	.word	0x08008da9
 8008d54:	08008d77 	.word	0x08008d77
 8008d58:	08008da9 	.word	0x08008da9
 8008d5c:	08008da9 	.word	0x08008da9
 8008d60:	08008da9 	.word	0x08008da9
 8008d64:	08008d7f 	.word	0x08008d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d68:	f7fc fd8e 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8008d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d6e:	e021      	b.n	8008db4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d70:	4b0c      	ldr	r3, [pc, #48]	@ (8008da4 <UART_SetConfig+0x2f8>)
 8008d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d74:	e01e      	b.n	8008db4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d76:	f7fc fd19 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8008d7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d7c:	e01a      	b.n	8008db4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d84:	e016      	b.n	8008db4 <UART_SetConfig+0x308>
 8008d86:	bf00      	nop
 8008d88:	cfff69f3 	.word	0xcfff69f3
 8008d8c:	40008000 	.word	0x40008000
 8008d90:	40013800 	.word	0x40013800
 8008d94:	40021000 	.word	0x40021000
 8008d98:	40004400 	.word	0x40004400
 8008d9c:	40004800 	.word	0x40004800
 8008da0:	40004c00 	.word	0x40004c00
 8008da4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008db2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 812a 	beq.w	8009010 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc0:	4a9e      	ldr	r2, [pc, #632]	@ (800903c <UART_SetConfig+0x590>)
 8008dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	4413      	add	r3, r2
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d305      	bcc.n	8008dec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d903      	bls.n	8008df4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008df2:	e10d      	b.n	8009010 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	2200      	movs	r2, #0
 8008df8:	60bb      	str	r3, [r7, #8]
 8008dfa:	60fa      	str	r2, [r7, #12]
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e00:	4a8e      	ldr	r2, [pc, #568]	@ (800903c <UART_SetConfig+0x590>)
 8008e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2200      	movs	r2, #0
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e16:	f7f7 ff5f 	bl	8000cd8 <__aeabi_uldivmod>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	f04f 0200 	mov.w	r2, #0
 8008e26:	f04f 0300 	mov.w	r3, #0
 8008e2a:	020b      	lsls	r3, r1, #8
 8008e2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e30:	0202      	lsls	r2, r0, #8
 8008e32:	6979      	ldr	r1, [r7, #20]
 8008e34:	6849      	ldr	r1, [r1, #4]
 8008e36:	0849      	lsrs	r1, r1, #1
 8008e38:	2000      	movs	r0, #0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	eb12 0804 	adds.w	r8, r2, r4
 8008e42:	eb43 0905 	adc.w	r9, r3, r5
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	469a      	mov	sl, r3
 8008e4e:	4693      	mov	fp, r2
 8008e50:	4652      	mov	r2, sl
 8008e52:	465b      	mov	r3, fp
 8008e54:	4640      	mov	r0, r8
 8008e56:	4649      	mov	r1, r9
 8008e58:	f7f7 ff3e 	bl	8000cd8 <__aeabi_uldivmod>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4613      	mov	r3, r2
 8008e62:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e6a:	d308      	bcc.n	8008e7e <UART_SetConfig+0x3d2>
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e72:	d204      	bcs.n	8008e7e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6a3a      	ldr	r2, [r7, #32]
 8008e7a:	60da      	str	r2, [r3, #12]
 8008e7c:	e0c8      	b.n	8009010 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e84:	e0c4      	b.n	8009010 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e8e:	d167      	bne.n	8008f60 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008e90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d828      	bhi.n	8008eea <UART_SetConfig+0x43e>
 8008e98:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea0 <UART_SetConfig+0x3f4>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008ec5 	.word	0x08008ec5
 8008ea4:	08008ecd 	.word	0x08008ecd
 8008ea8:	08008ed5 	.word	0x08008ed5
 8008eac:	08008eeb 	.word	0x08008eeb
 8008eb0:	08008edb 	.word	0x08008edb
 8008eb4:	08008eeb 	.word	0x08008eeb
 8008eb8:	08008eeb 	.word	0x08008eeb
 8008ebc:	08008eeb 	.word	0x08008eeb
 8008ec0:	08008ee3 	.word	0x08008ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec4:	f7fc fce0 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8008ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eca:	e014      	b.n	8008ef6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ecc:	f7fc fcf2 	bl	80058b4 <HAL_RCC_GetPCLK2Freq>
 8008ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ed2:	e010      	b.n	8008ef6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8009040 <UART_SetConfig+0x594>)
 8008ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ed8:	e00d      	b.n	8008ef6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eda:	f7fc fc67 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8008ede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ee0:	e009      	b.n	8008ef6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ee8:	e005      	b.n	8008ef6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 8089 	beq.w	8009010 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f02:	4a4e      	ldr	r2, [pc, #312]	@ (800903c <UART_SetConfig+0x590>)
 8008f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f10:	005a      	lsls	r2, r3, #1
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	085b      	lsrs	r3, r3, #1
 8008f18:	441a      	add	r2, r3
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	2b0f      	cmp	r3, #15
 8008f28:	d916      	bls.n	8008f58 <UART_SetConfig+0x4ac>
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f30:	d212      	bcs.n	8008f58 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	f023 030f 	bic.w	r3, r3, #15
 8008f3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	085b      	lsrs	r3, r3, #1
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	8bfb      	ldrh	r3, [r7, #30]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	8bfa      	ldrh	r2, [r7, #30]
 8008f54:	60da      	str	r2, [r3, #12]
 8008f56:	e05b      	b.n	8009010 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f5e:	e057      	b.n	8009010 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f64:	2b08      	cmp	r3, #8
 8008f66:	d828      	bhi.n	8008fba <UART_SetConfig+0x50e>
 8008f68:	a201      	add	r2, pc, #4	@ (adr r2, 8008f70 <UART_SetConfig+0x4c4>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008f95 	.word	0x08008f95
 8008f74:	08008f9d 	.word	0x08008f9d
 8008f78:	08008fa5 	.word	0x08008fa5
 8008f7c:	08008fbb 	.word	0x08008fbb
 8008f80:	08008fab 	.word	0x08008fab
 8008f84:	08008fbb 	.word	0x08008fbb
 8008f88:	08008fbb 	.word	0x08008fbb
 8008f8c:	08008fbb 	.word	0x08008fbb
 8008f90:	08008fb3 	.word	0x08008fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f94:	f7fc fc78 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8008f98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f9a:	e014      	b.n	8008fc6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f9c:	f7fc fc8a 	bl	80058b4 <HAL_RCC_GetPCLK2Freq>
 8008fa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fa2:	e010      	b.n	8008fc6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fa4:	4b26      	ldr	r3, [pc, #152]	@ (8009040 <UART_SetConfig+0x594>)
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fa8:	e00d      	b.n	8008fc6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008faa:	f7fc fbff 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8008fae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fb0:	e009      	b.n	8008fc6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fb8:	e005      	b.n	8008fc6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008fc4:	bf00      	nop
    }

    if (pclk != 0U)
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d021      	beq.n	8009010 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800903c <UART_SetConfig+0x590>)
 8008fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	085b      	lsrs	r3, r3, #1
 8008fe4:	441a      	add	r2, r3
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	2b0f      	cmp	r3, #15
 8008ff4:	d909      	bls.n	800900a <UART_SetConfig+0x55e>
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ffc:	d205      	bcs.n	800900a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	b29a      	uxth	r2, r3
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60da      	str	r2, [r3, #12]
 8009008:	e002      	b.n	8009010 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2201      	movs	r2, #1
 8009014:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2201      	movs	r2, #1
 800901c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2200      	movs	r2, #0
 8009024:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2200      	movs	r2, #0
 800902a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800902c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009030:	4618      	mov	r0, r3
 8009032:	3730      	adds	r7, #48	@ 0x30
 8009034:	46bd      	mov	sp, r7
 8009036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800903a:	bf00      	nop
 800903c:	080105a4 	.word	0x080105a4
 8009040:	00f42400 	.word	0x00f42400

08009044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d8:	f003 0310 	and.w	r3, r3, #16
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800911c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009120:	2b00      	cmp	r3, #0
 8009122:	d01a      	beq.n	800915a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009142:	d10a      	bne.n	800915a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	605a      	str	r2, [r3, #4]
  }
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b098      	sub	sp, #96	@ 0x60
 800918c:	af02      	add	r7, sp, #8
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009198:	f7fb f836 	bl	8004208 <HAL_GetTick>
 800919c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d12f      	bne.n	800920c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091b4:	2200      	movs	r2, #0
 80091b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f88e 	bl	80092dc <UART_WaitOnFlagUntilTimeout>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d022      	beq.n	800920c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091da:	653b      	str	r3, [r7, #80]	@ 0x50
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e6      	bne.n	80091c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e063      	b.n	80092d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0304 	and.w	r3, r3, #4
 8009216:	2b04      	cmp	r3, #4
 8009218:	d149      	bne.n	80092ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800921a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009222:	2200      	movs	r2, #0
 8009224:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f857 	bl	80092dc <UART_WaitOnFlagUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d03c      	beq.n	80092ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	623b      	str	r3, [r7, #32]
   return(result);
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009252:	633b      	str	r3, [r7, #48]	@ 0x30
 8009254:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e6      	bne.n	8009234 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	60fb      	str	r3, [r7, #12]
   return(result);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009286:	61fa      	str	r2, [r7, #28]
 8009288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	69b9      	ldr	r1, [r7, #24]
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	617b      	str	r3, [r7, #20]
   return(result);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e5      	bne.n	8009266 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e012      	b.n	80092d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3758      	adds	r7, #88	@ 0x58
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	4613      	mov	r3, r2
 80092ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ec:	e04f      	b.n	800938e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d04b      	beq.n	800938e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092f6:	f7fa ff87 	bl	8004208 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	429a      	cmp	r2, r3
 8009304:	d302      	bcc.n	800930c <UART_WaitOnFlagUntilTimeout+0x30>
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e04e      	b.n	80093ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b00      	cmp	r3, #0
 800931c:	d037      	beq.n	800938e <UART_WaitOnFlagUntilTimeout+0xb2>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b80      	cmp	r3, #128	@ 0x80
 8009322:	d034      	beq.n	800938e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b40      	cmp	r3, #64	@ 0x40
 8009328:	d031      	beq.n	800938e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b08      	cmp	r3, #8
 8009336:	d110      	bne.n	800935a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2208      	movs	r2, #8
 800933e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f838 	bl	80093b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2208      	movs	r2, #8
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e029      	b.n	80093ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009368:	d111      	bne.n	800938e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f81e 	bl	80093b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2220      	movs	r2, #32
 800937e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e00f      	b.n	80093ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69da      	ldr	r2, [r3, #28]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	4013      	ands	r3, r2
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	429a      	cmp	r2, r3
 800939c:	bf0c      	ite	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	2300      	movne	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	461a      	mov	r2, r3
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d0a0      	beq.n	80092ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b095      	sub	sp, #84	@ 0x54
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	461a      	mov	r2, r3
 80093da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80093de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e6      	bne.n	80093be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009406:	f023 0301 	bic.w	r3, r3, #1
 800940a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3308      	adds	r3, #8
 8009412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800941a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e3      	bne.n	80093f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d118      	bne.n	8009462 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	60bb      	str	r3, [r7, #8]
   return(result);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f023 0310 	bic.w	r3, r3, #16
 8009444:	647b      	str	r3, [r7, #68]	@ 0x44
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	613b      	str	r3, [r7, #16]
   return(result);
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009476:	bf00      	nop
 8009478:	3754      	adds	r7, #84	@ 0x54
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7ff faf1 	bl	8008a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b088      	sub	sp, #32
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094c2:	61fb      	str	r3, [r7, #28]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	61bb      	str	r3, [r7, #24]
 80094ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	6979      	ldr	r1, [r7, #20]
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	613b      	str	r3, [r7, #16]
   return(result);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e6      	bne.n	80094ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7f9 fae6 	bl	8002ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f4:	bf00      	nop
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009546:	2b01      	cmp	r3, #1
 8009548:	d101      	bne.n	800954e <HAL_UARTEx_DisableFifoMode+0x16>
 800954a:	2302      	movs	r3, #2
 800954c:	e027      	b.n	800959e <HAL_UARTEx_DisableFifoMode+0x66>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2224      	movs	r2, #36	@ 0x24
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800957c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095be:	2302      	movs	r3, #2
 80095c0:	e02d      	b.n	800961e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2224      	movs	r2, #36	@ 0x24
 80095ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0201 	bic.w	r2, r2, #1
 80095e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f850 	bl	80096a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2220      	movs	r2, #32
 8009610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800963a:	2302      	movs	r3, #2
 800963c:	e02d      	b.n	800969a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2224      	movs	r2, #36	@ 0x24
 800964a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0201 	bic.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f812 	bl	80096a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d108      	bne.n	80096c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096c4:	e031      	b.n	800972a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096c6:	2308      	movs	r3, #8
 80096c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096ca:	2308      	movs	r3, #8
 80096cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	0e5b      	lsrs	r3, r3, #25
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	0f5b      	lsrs	r3, r3, #29
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	7b3a      	ldrb	r2, [r7, #12]
 80096f2:	4911      	ldr	r1, [pc, #68]	@ (8009738 <UARTEx_SetNbDataToProcess+0x94>)
 80096f4:	5c8a      	ldrb	r2, [r1, r2]
 80096f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096fa:	7b3a      	ldrb	r2, [r7, #12]
 80096fc:	490f      	ldr	r1, [pc, #60]	@ (800973c <UARTEx_SetNbDataToProcess+0x98>)
 80096fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009700:	fb93 f3f2 	sdiv	r3, r3, r2
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	7b7a      	ldrb	r2, [r7, #13]
 8009710:	4909      	ldr	r1, [pc, #36]	@ (8009738 <UARTEx_SetNbDataToProcess+0x94>)
 8009712:	5c8a      	ldrb	r2, [r1, r2]
 8009714:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009718:	7b7a      	ldrb	r2, [r7, #13]
 800971a:	4908      	ldr	r1, [pc, #32]	@ (800973c <UARTEx_SetNbDataToProcess+0x98>)
 800971c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800971e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009722:	b29a      	uxth	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	080105bc 	.word	0x080105bc
 800973c:	080105c4 	.word	0x080105c4

08009740 <__NVIC_SetPriority>:
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	6039      	str	r1, [r7, #0]
 800974a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800974c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009750:	2b00      	cmp	r3, #0
 8009752:	db0a      	blt.n	800976a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	b2da      	uxtb	r2, r3
 8009758:	490c      	ldr	r1, [pc, #48]	@ (800978c <__NVIC_SetPriority+0x4c>)
 800975a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800975e:	0112      	lsls	r2, r2, #4
 8009760:	b2d2      	uxtb	r2, r2
 8009762:	440b      	add	r3, r1
 8009764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009768:	e00a      	b.n	8009780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	b2da      	uxtb	r2, r3
 800976e:	4908      	ldr	r1, [pc, #32]	@ (8009790 <__NVIC_SetPriority+0x50>)
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	3b04      	subs	r3, #4
 8009778:	0112      	lsls	r2, r2, #4
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	440b      	add	r3, r1
 800977e:	761a      	strb	r2, [r3, #24]
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	e000e100 	.word	0xe000e100
 8009790:	e000ed00 	.word	0xe000ed00

08009794 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009798:	4b05      	ldr	r3, [pc, #20]	@ (80097b0 <SysTick_Handler+0x1c>)
 800979a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800979c:	f002 f808 	bl	800b7b0 <xTaskGetSchedulerState>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d001      	beq.n	80097aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80097a6:	f002 febf 	bl	800c528 <xPortSysTickHandler>
  }
}
 80097aa:	bf00      	nop
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	e000e010 	.word	0xe000e010

080097b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097b8:	2100      	movs	r1, #0
 80097ba:	f06f 0004 	mvn.w	r0, #4
 80097be:	f7ff ffbf 	bl	8009740 <__NVIC_SetPriority>
#endif
}
 80097c2:	bf00      	nop
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ce:	f3ef 8305 	mrs	r3, IPSR
 80097d2:	603b      	str	r3, [r7, #0]
  return(result);
 80097d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097da:	f06f 0305 	mvn.w	r3, #5
 80097de:	607b      	str	r3, [r7, #4]
 80097e0:	e00c      	b.n	80097fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097e2:	4b0a      	ldr	r3, [pc, #40]	@ (800980c <osKernelInitialize+0x44>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097ea:	4b08      	ldr	r3, [pc, #32]	@ (800980c <osKernelInitialize+0x44>)
 80097ec:	2201      	movs	r2, #1
 80097ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	607b      	str	r3, [r7, #4]
 80097f4:	e002      	b.n	80097fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097f6:	f04f 33ff 	mov.w	r3, #4294967295
 80097fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097fc:	687b      	ldr	r3, [r7, #4]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	200008ec 	.word	0x200008ec

08009810 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009816:	f3ef 8305 	mrs	r3, IPSR
 800981a:	603b      	str	r3, [r7, #0]
  return(result);
 800981c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009822:	f06f 0305 	mvn.w	r3, #5
 8009826:	607b      	str	r3, [r7, #4]
 8009828:	e010      	b.n	800984c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800982a:	4b0b      	ldr	r3, [pc, #44]	@ (8009858 <osKernelStart+0x48>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d109      	bne.n	8009846 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009832:	f7ff ffbf 	bl	80097b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009836:	4b08      	ldr	r3, [pc, #32]	@ (8009858 <osKernelStart+0x48>)
 8009838:	2202      	movs	r2, #2
 800983a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800983c:	f001 fb10 	bl	800ae60 <vTaskStartScheduler>
      stat = osOK;
 8009840:	2300      	movs	r3, #0
 8009842:	607b      	str	r3, [r7, #4]
 8009844:	e002      	b.n	800984c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009846:	f04f 33ff 	mov.w	r3, #4294967295
 800984a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800984c:	687b      	ldr	r3, [r7, #4]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200008ec 	.word	0x200008ec

0800985c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b08e      	sub	sp, #56	@ 0x38
 8009860:	af04      	add	r7, sp, #16
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009868:	2300      	movs	r3, #0
 800986a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800986c:	f3ef 8305 	mrs	r3, IPSR
 8009870:	617b      	str	r3, [r7, #20]
  return(result);
 8009872:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009874:	2b00      	cmp	r3, #0
 8009876:	d17e      	bne.n	8009976 <osThreadNew+0x11a>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d07b      	beq.n	8009976 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800987e:	2380      	movs	r3, #128	@ 0x80
 8009880:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009882:	2318      	movs	r3, #24
 8009884:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800988a:	f04f 33ff 	mov.w	r3, #4294967295
 800988e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d045      	beq.n	8009922 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <osThreadNew+0x48>
        name = attr->name;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <osThreadNew+0x6e>
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2b38      	cmp	r3, #56	@ 0x38
 80098bc:	d805      	bhi.n	80098ca <osThreadNew+0x6e>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <osThreadNew+0x72>
        return (NULL);
 80098ca:	2300      	movs	r3, #0
 80098cc:	e054      	b.n	8009978 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	089b      	lsrs	r3, r3, #2
 80098dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00e      	beq.n	8009904 <osThreadNew+0xa8>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80098ec:	d90a      	bls.n	8009904 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d006      	beq.n	8009904 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <osThreadNew+0xa8>
        mem = 1;
 80098fe:	2301      	movs	r3, #1
 8009900:	61bb      	str	r3, [r7, #24]
 8009902:	e010      	b.n	8009926 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10c      	bne.n	8009926 <osThreadNew+0xca>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d108      	bne.n	8009926 <osThreadNew+0xca>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <osThreadNew+0xca>
          mem = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	61bb      	str	r3, [r7, #24]
 8009920:	e001      	b.n	8009926 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d110      	bne.n	800994e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009934:	9202      	str	r2, [sp, #8]
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6a3a      	ldr	r2, [r7, #32]
 8009940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f001 f814 	bl	800a970 <xTaskCreateStatic>
 8009948:	4603      	mov	r3, r0
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	e013      	b.n	8009976 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d110      	bne.n	8009976 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	b29a      	uxth	r2, r3
 8009958:	f107 0310 	add.w	r3, r7, #16
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f001 f862 	bl	800aa30 <xTaskCreate>
 800996c:	4603      	mov	r3, r0
 800996e:	2b01      	cmp	r3, #1
 8009970:	d001      	beq.n	8009976 <osThreadNew+0x11a>
            hTask = NULL;
 8009972:	2300      	movs	r3, #0
 8009974:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009976:	693b      	ldr	r3, [r7, #16]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3728      	adds	r7, #40	@ 0x28
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4a07      	ldr	r2, [pc, #28]	@ (80099ac <vApplicationGetIdleTaskMemory+0x2c>)
 8009990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4a06      	ldr	r2, [pc, #24]	@ (80099b0 <vApplicationGetIdleTaskMemory+0x30>)
 8009996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2280      	movs	r2, #128	@ 0x80
 800999c:	601a      	str	r2, [r3, #0]
}
 800999e:	bf00      	nop
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	200008f0 	.word	0x200008f0
 80099b0:	2000094c 	.word	0x2000094c

080099b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a07      	ldr	r2, [pc, #28]	@ (80099e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80099c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	4a06      	ldr	r2, [pc, #24]	@ (80099e4 <vApplicationGetTimerTaskMemory+0x30>)
 80099ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	20000b4c 	.word	0x20000b4c
 80099e4:	20000ba8 	.word	0x20000ba8

080099e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f103 0208 	add.w	r2, r3, #8
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f103 0208 	add.w	r2, r3, #8
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f103 0208 	add.w	r2, r3, #8
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a42:	b480      	push	{r7}
 8009a44:	b085      	sub	sp, #20
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	601a      	str	r2, [r3, #0]
}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b085      	sub	sp, #20
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa0:	d103      	bne.n	8009aaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	e00c      	b.n	8009ac4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3308      	adds	r3, #8
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e002      	b.n	8009ab8 <vListInsert+0x2e>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d2f6      	bcs.n	8009ab2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	601a      	str	r2, [r3, #0]
}
 8009af0:	bf00      	nop
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	6892      	ldr	r2, [r2, #8]
 8009b12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	6852      	ldr	r2, [r2, #4]
 8009b1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d103      	bne.n	8009b30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	1e5a      	subs	r2, r3, #1
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10b      	bne.n	8009b7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	e7fd      	b.n	8009b78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b7c:	f002 fc3e 	bl	800c3fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b88:	68f9      	ldr	r1, [r7, #12]
 8009b8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b8c:	fb01 f303 	mul.w	r3, r1, r3
 8009b90:	441a      	add	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bac:	3b01      	subs	r3, #1
 8009bae:	68f9      	ldr	r1, [r7, #12]
 8009bb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	441a      	add	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	22ff      	movs	r2, #255	@ 0xff
 8009bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	22ff      	movs	r2, #255	@ 0xff
 8009bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d114      	bne.n	8009bfc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01a      	beq.n	8009c10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3310      	adds	r3, #16
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 fc20 	bl	800b424 <xTaskRemoveFromEventList>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d012      	beq.n	8009c10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <xQueueGenericReset+0xd0>)
 8009bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	e009      	b.n	8009c10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3310      	adds	r3, #16
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff fef1 	bl	80099e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	3324      	adds	r3, #36	@ 0x24
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff feec 	bl	80099e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c10:	f002 fc26 	bl	800c460 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c14:	2301      	movs	r3, #1
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08e      	sub	sp, #56	@ 0x38
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10b      	bne.n	8009c50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10b      	bne.n	8009c6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <xQueueGenericCreateStatic+0x56>
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <xQueueGenericCreateStatic+0x5a>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e000      	b.n	8009c80 <xQueueGenericCreateStatic+0x5c>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10b      	bne.n	8009c9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	623b      	str	r3, [r7, #32]
}
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	e7fd      	b.n	8009c98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d102      	bne.n	8009ca8 <xQueueGenericCreateStatic+0x84>
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <xQueueGenericCreateStatic+0x88>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <xQueueGenericCreateStatic+0x8a>
 8009cac:	2300      	movs	r3, #0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	61fb      	str	r3, [r7, #28]
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	e7fd      	b.n	8009cc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cca:	2350      	movs	r3, #80	@ 0x50
 8009ccc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b50      	cmp	r3, #80	@ 0x50
 8009cd2:	d00b      	beq.n	8009cec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	61bb      	str	r3, [r7, #24]
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	e7fd      	b.n	8009ce8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009cec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00e      	beq.n	8009d16 <xQueueGenericCreateStatic+0xf2>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f82e 	bl	8009d70 <prvInitialiseNewQueue>
 8009d14:	e027      	b.n	8009d66 <xQueueGenericCreateStatic+0x142>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8009d16:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d823      	bhi.n	8009d66 <xQueueGenericCreateStatic+0x142>
 8009d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d24 <xQueueGenericCreateStatic+0x100>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009d39 	.word	0x08009d39
 8009d28:	08009d51 	.word	0x08009d51
 8009d2c:	08009d67 	.word	0x08009d67
 8009d30:	08009d45 	.word	0x08009d45
 8009d34:	08009d5d 	.word	0x08009d5d
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	2041      	movs	r0, #65	@ 0x41
 8009d3e:	f7f7 fb09 	bl	8001354 <xTraceEventCreate2>
 8009d42:	e010      	b.n	8009d66 <xQueueGenericCreateStatic+0x142>
 8009d44:	2200      	movs	r2, #0
 8009d46:	2100      	movs	r1, #0
 8009d48:	2042      	movs	r0, #66	@ 0x42
 8009d4a:	f7f7 fb03 	bl	8001354 <xTraceEventCreate2>
 8009d4e:	e00a      	b.n	8009d66 <xQueueGenericCreateStatic+0x142>
 8009d50:	2200      	movs	r2, #0
 8009d52:	2100      	movs	r1, #0
 8009d54:	2043      	movs	r0, #67	@ 0x43
 8009d56:	f7f7 fafd 	bl	8001354 <xTraceEventCreate2>
 8009d5a:	e004      	b.n	8009d66 <xQueueGenericCreateStatic+0x142>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2100      	movs	r1, #0
 8009d60:	2047      	movs	r0, #71	@ 0x47
 8009d62:	f7f7 faf7 	bl	8001354 <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3730      	adds	r7, #48	@ 0x30
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d103      	bne.n	8009d8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	e002      	b.n	8009d92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d9e:	2101      	movs	r1, #1
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f7ff fed5 	bl	8009b50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	78fa      	ldrb	r2, [r7, #3]
 8009daa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d828      	bhi.n	8009e0a <prvInitialiseNewQueue+0x9a>
 8009db8:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc0 <prvInitialiseNewQueue+0x50>)
 8009dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbe:	bf00      	nop
 8009dc0:	08009dd5 	.word	0x08009dd5
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	08009e0b 	.word	0x08009e0b
 8009dcc:	08009de3 	.word	0x08009de3
 8009dd0:	08009dff 	.word	0x08009dff
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8009e14 <prvInitialiseNewQueue+0xa4>)
 8009dd8:	69b9      	ldr	r1, [r7, #24]
 8009dda:	2011      	movs	r0, #17
 8009ddc:	f7f7 ffc2 	bl	8001d64 <xTraceObjectRegisterWithoutHandle>
 8009de0:	e013      	b.n	8009e0a <prvInitialiseNewQueue+0x9a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	4a0b      	ldr	r2, [pc, #44]	@ (8009e14 <prvInitialiseNewQueue+0xa4>)
 8009de6:	69b9      	ldr	r1, [r7, #24]
 8009de8:	2012      	movs	r0, #18
 8009dea:	f7f7 ffbb 	bl	8001d64 <xTraceObjectRegisterWithoutHandle>
 8009dee:	e00c      	b.n	8009e0a <prvInitialiseNewQueue+0x9a>
 8009df0:	2300      	movs	r3, #0
 8009df2:	4a08      	ldr	r2, [pc, #32]	@ (8009e14 <prvInitialiseNewQueue+0xa4>)
 8009df4:	69b9      	ldr	r1, [r7, #24]
 8009df6:	2013      	movs	r0, #19
 8009df8:	f7f7 ffb4 	bl	8001d64 <xTraceObjectRegisterWithoutHandle>
 8009dfc:	e005      	b.n	8009e0a <prvInitialiseNewQueue+0x9a>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	4a04      	ldr	r2, [pc, #16]	@ (8009e14 <prvInitialiseNewQueue+0xa4>)
 8009e02:	69b9      	ldr	r1, [r7, #24]
 8009e04:	2017      	movs	r0, #23
 8009e06:	f7f7 ffad 	bl	8001d64 <xTraceObjectRegisterWithoutHandle>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	08010504 	.word	0x08010504

08009e18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08e      	sub	sp, #56	@ 0x38
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e26:	2300      	movs	r3, #0
 8009e28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10b      	bne.n	8009e4c <xQueueGenericSend+0x34>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d103      	bne.n	8009e5a <xQueueGenericSend+0x42>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <xQueueGenericSend+0x46>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <xQueueGenericSend+0x48>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10b      	bne.n	8009e7c <xQueueGenericSend+0x64>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e76:	bf00      	nop
 8009e78:	bf00      	nop
 8009e7a:	e7fd      	b.n	8009e78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d103      	bne.n	8009e8a <xQueueGenericSend+0x72>
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <xQueueGenericSend+0x76>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <xQueueGenericSend+0x78>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10b      	bne.n	8009eac <xQueueGenericSend+0x94>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	623b      	str	r3, [r7, #32]
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009eac:	f001 fc80 	bl	800b7b0 <xTaskGetSchedulerState>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d102      	bne.n	8009ebc <xQueueGenericSend+0xa4>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <xQueueGenericSend+0xa8>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e000      	b.n	8009ec2 <xQueueGenericSend+0xaa>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10b      	bne.n	8009ede <xQueueGenericSend+0xc6>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	61fb      	str	r3, [r7, #28]
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	e7fd      	b.n	8009eda <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ede:	f002 fa8d 	bl	800c3fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d302      	bcc.n	8009ef4 <xQueueGenericSend+0xdc>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d15d      	bne.n	8009fb0 <xQueueGenericSend+0x198>
			{
				traceQUEUE_SEND( pxQueue );
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d82e      	bhi.n	8009f5c <xQueueGenericSend+0x144>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <xQueueGenericSend+0xec>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f19 	.word	0x08009f19
 8009f08:	08009f47 	.word	0x08009f47
 8009f0c:	08009f35 	.word	0x08009f35
 8009f10:	08009f35 	.word	0x08009f35
 8009f14:	08009f53 	.word	0x08009f53
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <xQueueGenericSend+0x10a>
 8009f1e:	2050      	movs	r0, #80	@ 0x50
 8009f20:	e000      	b.n	8009f24 <xQueueGenericSend+0x10c>
 8009f22:	20c0      	movs	r0, #192	@ 0xc0
 8009f24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f7f7 fa11 	bl	8001354 <xTraceEventCreate2>
 8009f32:	e013      	b.n	8009f5c <xQueueGenericSend+0x144>
 8009f34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2051      	movs	r0, #81	@ 0x51
 8009f40:	f7f7 fa08 	bl	8001354 <xTraceEventCreate2>
 8009f44:	e00a      	b.n	8009f5c <xQueueGenericSend+0x144>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	4619      	mov	r1, r3
 8009f4a:	2052      	movs	r0, #82	@ 0x52
 8009f4c:	f7f7 f98a 	bl	8001264 <xTraceEventCreate1>
 8009f50:	e004      	b.n	8009f5c <xQueueGenericSend+0x144>
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	4619      	mov	r1, r3
 8009f56:	20c5      	movs	r0, #197	@ 0xc5
 8009f58:	f7f7 f984 	bl	8001264 <xTraceEventCreate1>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f62:	f000 fb95 	bl	800a690 <prvCopyDataToQueue>
 8009f66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d010      	beq.n	8009f92 <xQueueGenericSend+0x17a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f72:	3324      	adds	r3, #36	@ 0x24
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 fa55 	bl	800b424 <xTaskRemoveFromEventList>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d013      	beq.n	8009fa8 <xQueueGenericSend+0x190>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f80:	4b82      	ldr	r3, [pc, #520]	@ (800a18c <xQueueGenericSend+0x374>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	e00a      	b.n	8009fa8 <xQueueGenericSend+0x190>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d007      	beq.n	8009fa8 <xQueueGenericSend+0x190>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f98:	4b7c      	ldr	r3, [pc, #496]	@ (800a18c <xQueueGenericSend+0x374>)
 8009f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fa8:	f002 fa5a 	bl	800c460 <vPortExitCritical>
				return pdPASS;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e0e8      	b.n	800a182 <xQueueGenericSend+0x36a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d130      	bne.n	800a018 <xQueueGenericSend+0x200>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fb6:	f002 fa53 	bl	800c460 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8009fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d827      	bhi.n	800a014 <xQueueGenericSend+0x1fc>
 8009fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fcc <xQueueGenericSend+0x1b4>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	0800a00b 	.word	0x0800a00b
 8009fd4:	08009ffb 	.word	0x08009ffb
 8009fd8:	08009ffb 	.word	0x08009ffb
 8009fdc:	0800a00b 	.word	0x0800a00b
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <xQueueGenericSend+0x1d2>
 8009fe6:	2053      	movs	r0, #83	@ 0x53
 8009fe8:	e000      	b.n	8009fec <xQueueGenericSend+0x1d4>
 8009fea:	20c1      	movs	r0, #193	@ 0xc1
 8009fec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f7f7 f9ae 	bl	8001354 <xTraceEventCreate2>
 8009ff8:	e00c      	b.n	800a014 <xQueueGenericSend+0x1fc>
 8009ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a000:	461a      	mov	r2, r3
 800a002:	2054      	movs	r0, #84	@ 0x54
 800a004:	f7f7 f9a6 	bl	8001354 <xTraceEventCreate2>
 800a008:	e004      	b.n	800a014 <xQueueGenericSend+0x1fc>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	4619      	mov	r1, r3
 800a00e:	2055      	movs	r0, #85	@ 0x55
 800a010:	f7f7 f928 	bl	8001264 <xTraceEventCreate1>
					return errQUEUE_FULL;
 800a014:	2300      	movs	r3, #0
 800a016:	e0b4      	b.n	800a182 <xQueueGenericSend+0x36a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <xQueueGenericSend+0x214>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	4618      	mov	r0, r3
 800a024:	f001 fa68 	bl	800b4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a028:	2301      	movs	r3, #1
 800a02a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a02c:	f002 fa18 	bl	800c460 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a030:	f000 ff88 	bl	800af44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a034:	f002 f9e2 	bl	800c3fc <vPortEnterCritical>
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a03e:	b25b      	sxtb	r3, r3
 800a040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a044:	d103      	bne.n	800a04e <xQueueGenericSend+0x236>
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a054:	b25b      	sxtb	r3, r3
 800a056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05a:	d103      	bne.n	800a064 <xQueueGenericSend+0x24c>
 800a05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a064:	f002 f9fc 	bl	800c460 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a068:	1d3a      	adds	r2, r7, #4
 800a06a:	f107 0314 	add.w	r3, r7, #20
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f001 fa57 	bl	800b524 <xTaskCheckForTimeOut>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d150      	bne.n	800a11e <xQueueGenericSend+0x306>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a07c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a07e:	f000 fbff 	bl	800a880 <prvIsQueueFull>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d044      	beq.n	800a112 <xQueueGenericSend+0x2fa>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d826      	bhi.n	800a0e0 <xQueueGenericSend+0x2c8>
 800a092:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <xQueueGenericSend+0x280>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a0ad 	.word	0x0800a0ad
 800a09c:	0800a0d7 	.word	0x0800a0d7
 800a0a0:	0800a0c7 	.word	0x0800a0c7
 800a0a4:	0800a0c7 	.word	0x0800a0c7
 800a0a8:	0800a0d7 	.word	0x0800a0d7
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <xQueueGenericSend+0x29e>
 800a0b2:	2056      	movs	r0, #86	@ 0x56
 800a0b4:	e000      	b.n	800a0b8 <xQueueGenericSend+0x2a0>
 800a0b6:	20c2      	movs	r0, #194	@ 0xc2
 800a0b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f7f7 f948 	bl	8001354 <xTraceEventCreate2>
 800a0c4:	e00c      	b.n	800a0e0 <xQueueGenericSend+0x2c8>
 800a0c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2057      	movs	r0, #87	@ 0x57
 800a0d0:	f7f7 f940 	bl	8001354 <xTraceEventCreate2>
 800a0d4:	e004      	b.n	800a0e0 <xQueueGenericSend+0x2c8>
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d8:	4619      	mov	r1, r3
 800a0da:	2058      	movs	r0, #88	@ 0x58
 800a0dc:	f7f7 f8c2 	bl	8001264 <xTraceEventCreate1>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	3310      	adds	r3, #16
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f001 f93f 	bl	800b36c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0f0:	f000 fb5e 	bl	800a7b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0f4:	f000 ff34 	bl	800af60 <xTaskResumeAll>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f47f aeef 	bne.w	8009ede <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a100:	4b22      	ldr	r3, [pc, #136]	@ (800a18c <xQueueGenericSend+0x374>)
 800a102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	e6e5      	b.n	8009ede <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a112:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a114:	f000 fb4c 	bl	800a7b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a118:	f000 ff22 	bl	800af60 <xTaskResumeAll>
 800a11c:	e6df      	b.n	8009ede <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a11e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a120:	f000 fb46 	bl	800a7b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a124:	f000 ff1c 	bl	800af60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800a128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d826      	bhi.n	800a180 <xQueueGenericSend+0x368>
 800a132:	a201      	add	r2, pc, #4	@ (adr r2, 800a138 <xQueueGenericSend+0x320>)
 800a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a138:	0800a14d 	.word	0x0800a14d
 800a13c:	0800a177 	.word	0x0800a177
 800a140:	0800a167 	.word	0x0800a167
 800a144:	0800a167 	.word	0x0800a167
 800a148:	0800a177 	.word	0x0800a177
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <xQueueGenericSend+0x33e>
 800a152:	2053      	movs	r0, #83	@ 0x53
 800a154:	e000      	b.n	800a158 <xQueueGenericSend+0x340>
 800a156:	20c1      	movs	r0, #193	@ 0xc1
 800a158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15e:	461a      	mov	r2, r3
 800a160:	f7f7 f8f8 	bl	8001354 <xTraceEventCreate2>
 800a164:	e00c      	b.n	800a180 <xQueueGenericSend+0x368>
 800a166:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	461a      	mov	r2, r3
 800a16e:	2054      	movs	r0, #84	@ 0x54
 800a170:	f7f7 f8f0 	bl	8001354 <xTraceEventCreate2>
 800a174:	e004      	b.n	800a180 <xQueueGenericSend+0x368>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	4619      	mov	r1, r3
 800a17a:	2055      	movs	r0, #85	@ 0x55
 800a17c:	f7f7 f872 	bl	8001264 <xTraceEventCreate1>
			return errQUEUE_FULL;
 800a180:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a182:	4618      	mov	r0, r3
 800a184:	3738      	adds	r7, #56	@ 0x38
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	e000ed04 	.word	0xe000ed04

0800a190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b090      	sub	sp, #64	@ 0x40
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
 800a19c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10b      	bne.n	800a1c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1ba:	bf00      	nop
 800a1bc:	bf00      	nop
 800a1be:	e7fd      	b.n	800a1bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d103      	bne.n	800a1ce <xQueueGenericSendFromISR+0x3e>
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <xQueueGenericSendFromISR+0x42>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e000      	b.n	800a1d4 <xQueueGenericSendFromISR+0x44>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	e7fd      	b.n	800a1ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d103      	bne.n	800a1fe <xQueueGenericSendFromISR+0x6e>
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <xQueueGenericSendFromISR+0x72>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e000      	b.n	800a204 <xQueueGenericSendFromISR+0x74>
 800a202:	2300      	movs	r3, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10b      	bne.n	800a220 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	623b      	str	r3, [r7, #32]
}
 800a21a:	bf00      	nop
 800a21c:	bf00      	nop
 800a21e:	e7fd      	b.n	800a21c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a220:	f002 f9d2 	bl	800c5c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a224:	f3ef 8211 	mrs	r2, BASEPRI
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	61fa      	str	r2, [r7, #28]
 800a23a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a23c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a23e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a248:	429a      	cmp	r2, r3
 800a24a:	d302      	bcc.n	800a252 <xQueueGenericSendFromISR+0xc2>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d150      	bne.n	800a2f4 <xQueueGenericSendFromISR+0x164>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a258:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800a262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a264:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d005      	beq.n	800a278 <xQueueGenericSendFromISR+0xe8>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	db19      	blt.n	800a2a4 <xQueueGenericSendFromISR+0x114>
 800a270:	3b02      	subs	r3, #2
 800a272:	2b01      	cmp	r3, #1
 800a274:	d816      	bhi.n	800a2a4 <xQueueGenericSendFromISR+0x114>
 800a276:	e00d      	b.n	800a294 <xQueueGenericSendFromISR+0x104>
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <xQueueGenericSendFromISR+0xf2>
 800a27e:	2059      	movs	r0, #89	@ 0x59
 800a280:	e000      	b.n	800a284 <xQueueGenericSendFromISR+0xf4>
 800a282:	20c3      	movs	r0, #195	@ 0xc3
 800a284:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28a:	3301      	adds	r3, #1
 800a28c:	461a      	mov	r2, r3
 800a28e:	f7f7 f861 	bl	8001354 <xTraceEventCreate2>
 800a292:	e007      	b.n	800a2a4 <xQueueGenericSendFromISR+0x114>
 800a294:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29a:	3301      	adds	r3, #1
 800a29c:	461a      	mov	r2, r3
 800a29e:	205a      	movs	r0, #90	@ 0x5a
 800a2a0:	f7f7 f858 	bl	8001354 <xTraceEventCreate2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a2aa:	f000 f9f1 	bl	800a690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b6:	d112      	bne.n	800a2de <xQueueGenericSendFromISR+0x14e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d016      	beq.n	800a2ee <xQueueGenericSendFromISR+0x15e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c2:	3324      	adds	r3, #36	@ 0x24
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f001 f8ad 	bl	800b424 <xTaskRemoveFromEventList>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00e      	beq.n	800a2ee <xQueueGenericSendFromISR+0x15e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00b      	beq.n	800a2ee <xQueueGenericSendFromISR+0x15e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	e007      	b.n	800a2ee <xQueueGenericSendFromISR+0x15e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	b25a      	sxtb	r2, r3
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a2f2:	e020      	b.n	800a336 <xQueueGenericSendFromISR+0x1a6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d005      	beq.n	800a30a <xQueueGenericSendFromISR+0x17a>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	db17      	blt.n	800a332 <xQueueGenericSendFromISR+0x1a2>
 800a302:	3b02      	subs	r3, #2
 800a304:	2b01      	cmp	r3, #1
 800a306:	d814      	bhi.n	800a332 <xQueueGenericSendFromISR+0x1a2>
 800a308:	e00c      	b.n	800a324 <xQueueGenericSendFromISR+0x194>
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <xQueueGenericSendFromISR+0x184>
 800a310:	205c      	movs	r0, #92	@ 0x5c
 800a312:	e000      	b.n	800a316 <xQueueGenericSendFromISR+0x186>
 800a314:	20c4      	movs	r0, #196	@ 0xc4
 800a316:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31c:	461a      	mov	r2, r3
 800a31e:	f7f7 f819 	bl	8001354 <xTraceEventCreate2>
 800a322:	e006      	b.n	800a332 <xQueueGenericSendFromISR+0x1a2>
 800a324:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32a:	461a      	mov	r2, r3
 800a32c:	205d      	movs	r0, #93	@ 0x5d
 800a32e:	f7f7 f811 	bl	8001354 <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a338:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a340:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a344:	4618      	mov	r0, r3
 800a346:	3740      	adds	r7, #64	@ 0x40
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08c      	sub	sp, #48	@ 0x30
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a358:	2300      	movs	r3, #0
 800a35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <xQueueReceive+0x32>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	623b      	str	r3, [r7, #32]
}
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
 800a37c:	e7fd      	b.n	800a37a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d103      	bne.n	800a38c <xQueueReceive+0x40>
 800a384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <xQueueReceive+0x44>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e000      	b.n	800a392 <xQueueReceive+0x46>
 800a390:	2300      	movs	r3, #0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <xQueueReceive+0x62>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	61fb      	str	r3, [r7, #28]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ae:	f001 f9ff 	bl	800b7b0 <xTaskGetSchedulerState>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <xQueueReceive+0x72>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <xQueueReceive+0x76>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueReceive+0x78>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <xQueueReceive+0x94>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	61bb      	str	r3, [r7, #24]
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3e0:	f002 f80c 	bl	800c3fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d050      	beq.n	800a492 <xQueueReceive+0x146>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3f4:	f000 f9b6 	bl	800a764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d82b      	bhi.n	800a45a <xQueueReceive+0x10e>
 800a402:	a201      	add	r2, pc, #4	@ (adr r2, 800a408 <xQueueReceive+0xbc>)
 800a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a408:	0800a41d 	.word	0x0800a41d
 800a40c:	0800a441 	.word	0x0800a441
 800a410:	0800a42f 	.word	0x0800a42f
 800a414:	0800a42f 	.word	0x0800a42f
 800a418:	0800a44f 	.word	0x0800a44f
 800a41c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a424:	3b01      	subs	r3, #1
 800a426:	2060      	movs	r0, #96	@ 0x60
 800a428:	f7f7 f810 	bl	800144c <xTraceEventCreate3>
 800a42c:	e015      	b.n	800a45a <xQueueReceive+0x10e>
 800a42e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a436:	3b01      	subs	r3, #1
 800a438:	2061      	movs	r0, #97	@ 0x61
 800a43a:	f7f7 f807 	bl	800144c <xTraceEventCreate3>
 800a43e:	e00c      	b.n	800a45a <xQueueReceive+0x10e>
 800a440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	4619      	mov	r1, r3
 800a446:	2062      	movs	r0, #98	@ 0x62
 800a448:	f7f6 ff84 	bl	8001354 <xTraceEventCreate2>
 800a44c:	e005      	b.n	800a45a <xQueueReceive+0x10e>
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4619      	mov	r1, r3
 800a454:	20c7      	movs	r0, #199	@ 0xc7
 800a456:	f7f6 ff7d 	bl	8001354 <xTraceEventCreate2>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	1e5a      	subs	r2, r3, #1
 800a45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a460:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00f      	beq.n	800a48a <xQueueReceive+0x13e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	3310      	adds	r3, #16
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 ffd8 	bl	800b424 <xTaskRemoveFromEventList>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d007      	beq.n	800a48a <xQueueReceive+0x13e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a47a:	4b84      	ldr	r3, [pc, #528]	@ (800a68c <xQueueReceive+0x340>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a48a:	f001 ffe9 	bl	800c460 <vPortExitCritical>
				return pdPASS;
 800a48e:	2301      	movs	r3, #1
 800a490:	e0f8      	b.n	800a684 <xQueueReceive+0x338>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d132      	bne.n	800a4fe <xQueueReceive+0x1b2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a498:	f001 ffe2 	bl	800c460 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d829      	bhi.n	800a4fa <xQueueReceive+0x1ae>
 800a4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ac <xQueueReceive+0x160>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4c1 	.word	0x0800a4c1
 800a4b0:	0800a4e1 	.word	0x0800a4e1
 800a4b4:	0800a4d1 	.word	0x0800a4d1
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a4ef 	.word	0x0800a4ef
 800a4c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c8:	2063      	movs	r0, #99	@ 0x63
 800a4ca:	f7f6 ffbf 	bl	800144c <xTraceEventCreate3>
 800a4ce:	e014      	b.n	800a4fa <xQueueReceive+0x1ae>
 800a4d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d8:	2064      	movs	r0, #100	@ 0x64
 800a4da:	f7f6 ffb7 	bl	800144c <xTraceEventCreate3>
 800a4de:	e00c      	b.n	800a4fa <xQueueReceive+0x1ae>
 800a4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	2065      	movs	r0, #101	@ 0x65
 800a4e8:	f7f6 ff34 	bl	8001354 <xTraceEventCreate2>
 800a4ec:	e005      	b.n	800a4fa <xQueueReceive+0x1ae>
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	20c8      	movs	r0, #200	@ 0xc8
 800a4f6:	f7f6 ff2d 	bl	8001354 <xTraceEventCreate2>
					return errQUEUE_EMPTY;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e0c2      	b.n	800a684 <xQueueReceive+0x338>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d106      	bne.n	800a512 <xQueueReceive+0x1c6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a504:	f107 0310 	add.w	r3, r7, #16
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fff5 	bl	800b4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a50e:	2301      	movs	r3, #1
 800a510:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a512:	f001 ffa5 	bl	800c460 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a516:	f000 fd15 	bl	800af44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a51a:	f001 ff6f 	bl	800c3fc <vPortEnterCritical>
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a524:	b25b      	sxtb	r3, r3
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d103      	bne.n	800a534 <xQueueReceive+0x1e8>
 800a52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d103      	bne.n	800a54a <xQueueReceive+0x1fe>
 800a542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a54a:	f001 ff89 	bl	800c460 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a54e:	1d3a      	adds	r2, r7, #4
 800a550:	f107 0310 	add.w	r3, r7, #16
 800a554:	4611      	mov	r1, r2
 800a556:	4618      	mov	r0, r3
 800a558:	f000 ffe4 	bl	800b524 <xTaskCheckForTimeOut>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d154      	bne.n	800a60c <xQueueReceive+0x2c0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a564:	f000 f976 	bl	800a854 <prvIsQueueEmpty>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d048      	beq.n	800a600 <xQueueReceive+0x2b4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a570:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a574:	2b04      	cmp	r3, #4
 800a576:	d82a      	bhi.n	800a5ce <xQueueReceive+0x282>
 800a578:	a201      	add	r2, pc, #4	@ (adr r2, 800a580 <xQueueReceive+0x234>)
 800a57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57e:	bf00      	nop
 800a580:	0800a595 	.word	0x0800a595
 800a584:	0800a5b5 	.word	0x0800a5b5
 800a588:	0800a5a5 	.word	0x0800a5a5
 800a58c:	0800a5a5 	.word	0x0800a5a5
 800a590:	0800a5c3 	.word	0x0800a5c3
 800a594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a59c:	2066      	movs	r0, #102	@ 0x66
 800a59e:	f7f6 ff55 	bl	800144c <xTraceEventCreate3>
 800a5a2:	e014      	b.n	800a5ce <xQueueReceive+0x282>
 800a5a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ac:	2067      	movs	r0, #103	@ 0x67
 800a5ae:	f7f6 ff4d 	bl	800144c <xTraceEventCreate3>
 800a5b2:	e00c      	b.n	800a5ce <xQueueReceive+0x282>
 800a5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	2068      	movs	r0, #104	@ 0x68
 800a5bc:	f7f6 feca 	bl	8001354 <xTraceEventCreate2>
 800a5c0:	e005      	b.n	800a5ce <xQueueReceive+0x282>
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	20f6      	movs	r0, #246	@ 0xf6
 800a5ca:	f7f6 fec3 	bl	8001354 <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d0:	3324      	adds	r3, #36	@ 0x24
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fec8 	bl	800b36c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5de:	f000 f8e7 	bl	800a7b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5e2:	f000 fcbd 	bl	800af60 <xTaskResumeAll>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f47f aef9 	bne.w	800a3e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a5ee:	4b27      	ldr	r3, [pc, #156]	@ (800a68c <xQueueReceive+0x340>)
 800a5f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	e6ef      	b.n	800a3e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a600:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a602:	f000 f8d5 	bl	800a7b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a606:	f000 fcab 	bl	800af60 <xTaskResumeAll>
 800a60a:	e6e9      	b.n	800a3e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a60c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a60e:	f000 f8cf 	bl	800a7b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a612:	f000 fca5 	bl	800af60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a618:	f000 f91c 	bl	800a854 <prvIsQueueEmpty>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f43f aede 	beq.w	800a3e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a626:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d829      	bhi.n	800a682 <xQueueReceive+0x336>
 800a62e:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <xQueueReceive+0x2e8>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a649 	.word	0x0800a649
 800a638:	0800a669 	.word	0x0800a669
 800a63c:	0800a659 	.word	0x0800a659
 800a640:	0800a659 	.word	0x0800a659
 800a644:	0800a677 	.word	0x0800a677
 800a648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a650:	2063      	movs	r0, #99	@ 0x63
 800a652:	f7f6 fefb 	bl	800144c <xTraceEventCreate3>
 800a656:	e014      	b.n	800a682 <xQueueReceive+0x336>
 800a658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a660:	2064      	movs	r0, #100	@ 0x64
 800a662:	f7f6 fef3 	bl	800144c <xTraceEventCreate3>
 800a666:	e00c      	b.n	800a682 <xQueueReceive+0x336>
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	4619      	mov	r1, r3
 800a66e:	2065      	movs	r0, #101	@ 0x65
 800a670:	f7f6 fe70 	bl	8001354 <xTraceEventCreate2>
 800a674:	e005      	b.n	800a682 <xQueueReceive+0x336>
 800a676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	4619      	mov	r1, r3
 800a67c:	20c8      	movs	r0, #200	@ 0xc8
 800a67e:	f7f6 fe69 	bl	8001354 <xTraceEventCreate2>
				return errQUEUE_EMPTY;
 800a682:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a684:	4618      	mov	r0, r3
 800a686:	3730      	adds	r7, #48	@ 0x30
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	e000ed04 	.word	0xe000ed04

0800a690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10d      	bne.n	800a6ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d14d      	bne.n	800a752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f001 f896 	bl	800b7ec <xTaskPriorityDisinherit>
 800a6c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	609a      	str	r2, [r3, #8]
 800a6c8:	e043      	b.n	800a752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d119      	bne.n	800a704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6858      	ldr	r0, [r3, #4]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d8:	461a      	mov	r2, r3
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	f002 ffad 	bl	800d63a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e8:	441a      	add	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d32b      	bcc.n	800a752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	605a      	str	r2, [r3, #4]
 800a702:	e026      	b.n	800a752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	68d8      	ldr	r0, [r3, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70c:	461a      	mov	r2, r3
 800a70e:	68b9      	ldr	r1, [r7, #8]
 800a710:	f002 ff93 	bl	800d63a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71c:	425b      	negs	r3, r3
 800a71e:	441a      	add	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68da      	ldr	r2, [r3, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d207      	bcs.n	800a740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a738:	425b      	negs	r3, r3
 800a73a:	441a      	add	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b02      	cmp	r3, #2
 800a744:	d105      	bne.n	800a752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	3b01      	subs	r3, #1
 800a750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a75a:	697b      	ldr	r3, [r7, #20]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a772:	2b00      	cmp	r3, #0
 800a774:	d018      	beq.n	800a7a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a77e:	441a      	add	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d303      	bcc.n	800a798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68d9      	ldr	r1, [r3, #12]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6838      	ldr	r0, [r7, #0]
 800a7a4:	f002 ff49 	bl	800d63a <memcpy>
	}
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7b8:	f001 fe20 	bl	800c3fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7c4:	e011      	b.n	800a7ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d012      	beq.n	800a7f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3324      	adds	r3, #36	@ 0x24
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 fe26 	bl	800b424 <xTaskRemoveFromEventList>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7de:	f000 ff05 	bl	800b5ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	dce9      	bgt.n	800a7c6 <prvUnlockQueue+0x16>
 800a7f2:	e000      	b.n	800a7f6 <prvUnlockQueue+0x46>
					break;
 800a7f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	22ff      	movs	r2, #255	@ 0xff
 800a7fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a7fe:	f001 fe2f 	bl	800c460 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a802:	f001 fdfb 	bl	800c3fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a80c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a80e:	e011      	b.n	800a834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d012      	beq.n	800a83e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3310      	adds	r3, #16
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 fe01 	bl	800b424 <xTaskRemoveFromEventList>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a828:	f000 fee0 	bl	800b5ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	3b01      	subs	r3, #1
 800a830:	b2db      	uxtb	r3, r3
 800a832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	dce9      	bgt.n	800a810 <prvUnlockQueue+0x60>
 800a83c:	e000      	b.n	800a840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a83e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	22ff      	movs	r2, #255	@ 0xff
 800a844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a848:	f001 fe0a 	bl	800c460 <vPortExitCritical>
}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a85c:	f001 fdce 	bl	800c3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a868:	2301      	movs	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	e001      	b.n	800a872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a86e:	2300      	movs	r3, #0
 800a870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a872:	f001 fdf5 	bl	800c460 <vPortExitCritical>

	return xReturn;
 800a876:	68fb      	ldr	r3, [r7, #12]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a888:	f001 fdb8 	bl	800c3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a894:	429a      	cmp	r2, r3
 800a896:	d102      	bne.n	800a89e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a898:	2301      	movs	r3, #1
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	e001      	b.n	800a8a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8a2:	f001 fddd 	bl	800c460 <vPortExitCritical>

	return xReturn;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	e018      	b.n	800a8f2 <vQueueAddToRegistry+0x42>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8c0:	4a10      	ldr	r2, [pc, #64]	@ (800a904 <vQueueAddToRegistry+0x54>)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10f      	bne.n	800a8ec <vQueueAddToRegistry+0x3c>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8cc:	490d      	ldr	r1, [pc, #52]	@ (800a904 <vQueueAddToRegistry+0x54>)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8d6:	4a0b      	ldr	r2, [pc, #44]	@ (800a904 <vQueueAddToRegistry+0x54>)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	4413      	add	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7f7 fa56 	bl	8001d96 <xTraceObjectSetNameWithoutHandle>
				break;
 800a8ea:	e006      	b.n	800a8fa <vQueueAddToRegistry+0x4a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b07      	cmp	r3, #7
 800a8f6:	d9e3      	bls.n	800a8c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000fa8 	.word	0x20000fa8

0800a908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a918:	f001 fd70 	bl	800c3fc <vPortEnterCritical>
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a922:	b25b      	sxtb	r3, r3
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d103      	bne.n	800a932 <vQueueWaitForMessageRestricted+0x2a>
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93e:	d103      	bne.n	800a948 <vQueueWaitForMessageRestricted+0x40>
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a948:	f001 fd8a 	bl	800c460 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	3324      	adds	r3, #36	@ 0x24
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fd2b 	bl	800b3b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a962:	6978      	ldr	r0, [r7, #20]
 800a964:	f7ff ff24 	bl	800a7b0 <prvUnlockQueue>
	}
 800a968:	bf00      	nop
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08e      	sub	sp, #56	@ 0x38
 800a974:	af04      	add	r7, sp, #16
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10b      	bne.n	800a99c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	623b      	str	r3, [r7, #32]
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	e7fd      	b.n	800a998 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <xTaskCreateStatic+0x4a>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	61fb      	str	r3, [r7, #28]
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	e7fd      	b.n	800a9b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9ba:	235c      	movs	r3, #92	@ 0x5c
 800a9bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a9c2:	d00b      	beq.n	800a9dc <xTaskCreateStatic+0x6c>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	61bb      	str	r3, [r7, #24]
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	e7fd      	b.n	800a9d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d01e      	beq.n	800aa22 <xTaskCreateStatic+0xb2>
 800a9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d01b      	beq.n	800aa22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	9303      	str	r3, [sp, #12]
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	9302      	str	r3, [sp, #8]
 800aa04:	f107 0314 	add.w	r3, r7, #20
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 f850 	bl	800aaba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa1c:	f000 f8de 	bl	800abdc <prvAddNewTaskToReadyList>
 800aa20:	e001      	b.n	800aa26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa26:	697b      	ldr	r3, [r7, #20]
	}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3728      	adds	r7, #40	@ 0x28
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08c      	sub	sp, #48	@ 0x30
 800aa34:	af04      	add	r7, sp, #16
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa40:	88fb      	ldrh	r3, [r7, #6]
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 fe01 	bl	800c64c <pvPortMalloc>
 800aa4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00e      	beq.n	800aa70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa52:	205c      	movs	r0, #92	@ 0x5c
 800aa54:	f001 fdfa 	bl	800c64c <pvPortMalloc>
 800aa58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa66:	e005      	b.n	800aa74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa68:	6978      	ldr	r0, [r7, #20]
 800aa6a:	f001 fed5 	bl	800c818 <vPortFree>
 800aa6e:	e001      	b.n	800aa74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d017      	beq.n	800aaaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	2300      	movs	r3, #0
 800aa86:	9303      	str	r3, [sp, #12]
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	9302      	str	r3, [sp, #8]
 800aa8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	68b9      	ldr	r1, [r7, #8]
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 f80e 	bl	800aaba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa9e:	69f8      	ldr	r0, [r7, #28]
 800aaa0:	f000 f89c 	bl	800abdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	61bb      	str	r3, [r7, #24]
 800aaa8:	e002      	b.n	800aab0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aaae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aab0:	69bb      	ldr	r3, [r7, #24]
	}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b088      	sub	sp, #32
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60f8      	str	r0, [r7, #12]
 800aac2:	60b9      	str	r1, [r7, #8]
 800aac4:	607a      	str	r2, [r7, #4]
 800aac6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	461a      	mov	r2, r3
 800aad2:	21a5      	movs	r1, #165	@ 0xa5
 800aad4:	f002 fd31 	bl	800d53a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aae2:	3b01      	subs	r3, #1
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	f023 0307 	bic.w	r3, r3, #7
 800aaf0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	617b      	str	r3, [r7, #20]
}
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	e7fd      	b.n	800ab10 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01f      	beq.n	800ab5a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	61fb      	str	r3, [r7, #28]
 800ab1e:	e012      	b.n	800ab46 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	4413      	add	r3, r2
 800ab26:	7819      	ldrb	r1, [r3, #0]
 800ab28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3334      	adds	r3, #52	@ 0x34
 800ab30:	460a      	mov	r2, r1
 800ab32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4413      	add	r3, r2
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d006      	beq.n	800ab4e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	3301      	adds	r3, #1
 800ab44:	61fb      	str	r3, [r7, #28]
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	2b0f      	cmp	r3, #15
 800ab4a:	d9e9      	bls.n	800ab20 <prvInitialiseNewTask+0x66>
 800ab4c:	e000      	b.n	800ab50 <prvInitialiseNewTask+0x96>
			{
				break;
 800ab4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab58:	e003      	b.n	800ab62 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab64:	2b37      	cmp	r3, #55	@ 0x37
 800ab66:	d901      	bls.n	800ab6c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab68:	2337      	movs	r3, #55	@ 0x37
 800ab6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab70:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab76:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab80:	3304      	adds	r3, #4
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe ff50 	bl	8009a28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	3318      	adds	r3, #24
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe ff4b 	bl	8009a28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aba6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	2200      	movs	r2, #0
 800abac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	68f9      	ldr	r1, [r7, #12]
 800abba:	69b8      	ldr	r0, [r7, #24]
 800abbc:	f001 fade 	bl	800c17c <pxPortInitialiseStack>
 800abc0:	4602      	mov	r2, r0
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abd2:	bf00      	nop
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abe4:	f001 fc0a 	bl	800c3fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abe8:	4b37      	ldr	r3, [pc, #220]	@ (800acc8 <prvAddNewTaskToReadyList+0xec>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	4a36      	ldr	r2, [pc, #216]	@ (800acc8 <prvAddNewTaskToReadyList+0xec>)
 800abf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abf2:	4b36      	ldr	r3, [pc, #216]	@ (800accc <prvAddNewTaskToReadyList+0xf0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abfa:	4a34      	ldr	r2, [pc, #208]	@ (800accc <prvAddNewTaskToReadyList+0xf0>)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac00:	4b31      	ldr	r3, [pc, #196]	@ (800acc8 <prvAddNewTaskToReadyList+0xec>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d110      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac08:	f000 fd14 	bl	800b634 <prvInitialiseTaskLists>
 800ac0c:	e00d      	b.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac0e:	4b30      	ldr	r3, [pc, #192]	@ (800acd0 <prvAddNewTaskToReadyList+0xf4>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac16:	4b2d      	ldr	r3, [pc, #180]	@ (800accc <prvAddNewTaskToReadyList+0xf0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d802      	bhi.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac24:	4a29      	ldr	r2, [pc, #164]	@ (800accc <prvAddNewTaskToReadyList+0xf0>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac2a:	4b2a      	ldr	r3, [pc, #168]	@ (800acd4 <prvAddNewTaskToReadyList+0xf8>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	4a28      	ldr	r2, [pc, #160]	@ (800acd4 <prvAddNewTaskToReadyList+0xf8>)
 800ac32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac34:	4b27      	ldr	r3, [pc, #156]	@ (800acd4 <prvAddNewTaskToReadyList+0xf8>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <prvAddNewTaskToReadyList+0x7e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d008      	beq.n	800ac5a <prvAddNewTaskToReadyList+0x7e>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	2010      	movs	r0, #16
 800ac56:	f7f7 f885 	bl	8001d64 <xTraceObjectRegisterWithoutHandle>

		prvAddTaskToReadyList( pxNewTCB );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	2030      	movs	r0, #48	@ 0x30
 800ac60:	f7f6 fb00 	bl	8001264 <xTraceEventCreate1>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac68:	4b1b      	ldr	r3, [pc, #108]	@ (800acd8 <prvAddNewTaskToReadyList+0xfc>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d903      	bls.n	800ac78 <prvAddNewTaskToReadyList+0x9c>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac74:	4a18      	ldr	r2, [pc, #96]	@ (800acd8 <prvAddNewTaskToReadyList+0xfc>)
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4a15      	ldr	r2, [pc, #84]	@ (800acdc <prvAddNewTaskToReadyList+0x100>)
 800ac86:	441a      	add	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	f7fe fed7 	bl	8009a42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac94:	f001 fbe4 	bl	800c460 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac98:	4b0d      	ldr	r3, [pc, #52]	@ (800acd0 <prvAddNewTaskToReadyList+0xf4>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00e      	beq.n	800acbe <prvAddNewTaskToReadyList+0xe2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aca0:	4b0a      	ldr	r3, [pc, #40]	@ (800accc <prvAddNewTaskToReadyList+0xf0>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acaa:	429a      	cmp	r2, r3
 800acac:	d207      	bcs.n	800acbe <prvAddNewTaskToReadyList+0xe2>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acae:	4b0c      	ldr	r3, [pc, #48]	@ (800ace0 <prvAddNewTaskToReadyList+0x104>)
 800acb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	200014bc 	.word	0x200014bc
 800accc:	20000fe8 	.word	0x20000fe8
 800acd0:	200014c8 	.word	0x200014c8
 800acd4:	200014d8 	.word	0x200014d8
 800acd8:	200014c4 	.word	0x200014c4
 800acdc:	20000fec 	.word	0x20000fec
 800ace0:	e000ed04 	.word	0xe000ed04

0800ace4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08a      	sub	sp, #40	@ 0x28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800acee:	2300      	movs	r3, #0
 800acf0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10b      	bne.n	800ad10 <vTaskDelayUntil+0x2c>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	617b      	str	r3, [r7, #20]
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	e7fd      	b.n	800ad0c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <vTaskDelayUntil+0x4a>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	613b      	str	r3, [r7, #16]
}
 800ad28:	bf00      	nop
 800ad2a:	bf00      	nop
 800ad2c:	e7fd      	b.n	800ad2a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ad2e:	4b2c      	ldr	r3, [pc, #176]	@ (800ade0 <vTaskDelayUntil+0xfc>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00b      	beq.n	800ad4e <vTaskDelayUntil+0x6a>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60fb      	str	r3, [r7, #12]
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	e7fd      	b.n	800ad4a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800ad4e:	f000 f8f9 	bl	800af44 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ad52:	4b24      	ldr	r3, [pc, #144]	@ (800ade4 <vTaskDelayUntil+0x100>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	4413      	add	r3, r2
 800ad60:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6a3a      	ldr	r2, [r7, #32]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d20b      	bcs.n	800ad84 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69fa      	ldr	r2, [r7, #28]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d211      	bcs.n	800ad9a <vTaskDelayUntil+0xb6>
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d90d      	bls.n	800ad9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad82:	e00a      	b.n	800ad9a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	69fa      	ldr	r2, [r7, #28]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d303      	bcc.n	800ad96 <vTaskDelayUntil+0xb2>
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	6a3b      	ldr	r3, [r7, #32]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d901      	bls.n	800ad9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ad96:	2301      	movs	r3, #1
 800ad98:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <vTaskDelayUntil+0xd8>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800ada6:	69f9      	ldr	r1, [r7, #28]
 800ada8:	2079      	movs	r0, #121	@ 0x79
 800adaa:	f7f6 fa5b 	bl	8001264 <xTraceEventCreate1>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	6a3b      	ldr	r3, [r7, #32]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	2100      	movs	r1, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fe32 	bl	800ba20 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800adbc:	f000 f8d0 	bl	800af60 <xTaskResumeAll>
 800adc0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d107      	bne.n	800add8 <vTaskDelayUntil+0xf4>
		{
			portYIELD_WITHIN_API();
 800adc8:	4b07      	ldr	r3, [pc, #28]	@ (800ade8 <vTaskDelayUntil+0x104>)
 800adca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800add8:	bf00      	nop
 800adda:	3728      	adds	r7, #40	@ 0x28
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	200014e4 	.word	0x200014e4
 800ade4:	200014c0 	.word	0x200014c0
 800ade8:	e000ed04 	.word	0xe000ed04

0800adec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01c      	beq.n	800ae38 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adfe:	4b16      	ldr	r3, [pc, #88]	@ (800ae58 <vTaskDelay+0x6c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <vTaskDelay+0x32>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60bb      	str	r3, [r7, #8]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae1e:	f000 f891 	bl	800af44 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	207a      	movs	r0, #122	@ 0x7a
 800ae26:	f7f6 fa1d 	bl	8001264 <xTraceEventCreate1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fdf7 	bl	800ba20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae32:	f000 f895 	bl	800af60 <xTaskResumeAll>
 800ae36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d107      	bne.n	800ae4e <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 800ae3e:	4b07      	ldr	r3, [pc, #28]	@ (800ae5c <vTaskDelay+0x70>)
 800ae40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae4e:	bf00      	nop
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	200014e4 	.word	0x200014e4
 800ae5c:	e000ed04 	.word	0xe000ed04

0800ae60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08a      	sub	sp, #40	@ 0x28
 800ae64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae6e:	463a      	mov	r2, r7
 800ae70:	1d39      	adds	r1, r7, #4
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe fd82 	bl	8009980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	9202      	str	r2, [sp, #8]
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	2300      	movs	r3, #0
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	460a      	mov	r2, r1
 800ae8e:	4926      	ldr	r1, [pc, #152]	@ (800af28 <vTaskStartScheduler+0xc8>)
 800ae90:	4826      	ldr	r0, [pc, #152]	@ (800af2c <vTaskStartScheduler+0xcc>)
 800ae92:	f7ff fd6d 	bl	800a970 <xTaskCreateStatic>
 800ae96:	4603      	mov	r3, r0
 800ae98:	4a25      	ldr	r2, [pc, #148]	@ (800af30 <vTaskStartScheduler+0xd0>)
 800ae9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae9c:	4b24      	ldr	r3, [pc, #144]	@ (800af30 <vTaskStartScheduler+0xd0>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aea4:	2301      	movs	r3, #1
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	e001      	b.n	800aeae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d102      	bne.n	800aeba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aeb4:	f000 fe08 	bl	800bac8 <xTimerCreateTimerTask>
 800aeb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d11f      	bne.n	800af00 <vTaskStartScheduler+0xa0>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	613b      	str	r3, [r7, #16]
}
 800aed2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aed4:	4b17      	ldr	r3, [pc, #92]	@ (800af34 <vTaskStartScheduler+0xd4>)
 800aed6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aedc:	4b16      	ldr	r3, [pc, #88]	@ (800af38 <vTaskStartScheduler+0xd8>)
 800aede:	2201      	movs	r2, #1
 800aee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aee2:	4b16      	ldr	r3, [pc, #88]	@ (800af3c <vTaskStartScheduler+0xdc>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800aee8:	4b15      	ldr	r3, [pc, #84]	@ (800af40 <vTaskStartScheduler+0xe0>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	4b14      	ldr	r3, [pc, #80]	@ (800af40 <vTaskStartScheduler+0xe0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7f6 ff91 	bl	8001e1c <xTraceTaskSwitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aefa:	f001 f9c9 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aefe:	e00f      	b.n	800af20 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d10b      	bne.n	800af20 <vTaskStartScheduler+0xc0>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	60fb      	str	r3, [r7, #12]
}
 800af1a:	bf00      	nop
 800af1c:	bf00      	nop
 800af1e:	e7fd      	b.n	800af1c <vTaskStartScheduler+0xbc>
}
 800af20:	bf00      	nop
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	08010508 	.word	0x08010508
 800af2c:	0800b605 	.word	0x0800b605
 800af30:	200014e0 	.word	0x200014e0
 800af34:	200014dc 	.word	0x200014dc
 800af38:	200014c8 	.word	0x200014c8
 800af3c:	200014c0 	.word	0x200014c0
 800af40:	20000fe8 	.word	0x20000fe8

0800af44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af48:	4b04      	ldr	r3, [pc, #16]	@ (800af5c <vTaskSuspendAll+0x18>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	4a03      	ldr	r2, [pc, #12]	@ (800af5c <vTaskSuspendAll+0x18>)
 800af50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	200014e4 	.word	0x200014e4

0800af60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af6e:	4b45      	ldr	r3, [pc, #276]	@ (800b084 <xTaskResumeAll+0x124>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10b      	bne.n	800af8e <xTaskResumeAll+0x2e>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	603b      	str	r3, [r7, #0]
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	e7fd      	b.n	800af8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af8e:	f001 fa35 	bl	800c3fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af92:	4b3c      	ldr	r3, [pc, #240]	@ (800b084 <xTaskResumeAll+0x124>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3b01      	subs	r3, #1
 800af98:	4a3a      	ldr	r2, [pc, #232]	@ (800b084 <xTaskResumeAll+0x124>)
 800af9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af9c:	4b39      	ldr	r3, [pc, #228]	@ (800b084 <xTaskResumeAll+0x124>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d167      	bne.n	800b074 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afa4:	4b38      	ldr	r3, [pc, #224]	@ (800b088 <xTaskResumeAll+0x128>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d063      	beq.n	800b074 <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afac:	e034      	b.n	800b018 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afae:	4b37      	ldr	r3, [pc, #220]	@ (800b08c <xTaskResumeAll+0x12c>)
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3318      	adds	r3, #24
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fe fd9e 	bl	8009afc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fe fd99 	bl	8009afc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	4619      	mov	r1, r3
 800afce:	2030      	movs	r0, #48	@ 0x30
 800afd0:	f7f6 f948 	bl	8001264 <xTraceEventCreate1>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd8:	4b2d      	ldr	r3, [pc, #180]	@ (800b090 <xTaskResumeAll+0x130>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d903      	bls.n	800afe8 <xTaskResumeAll+0x88>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe4:	4a2a      	ldr	r2, [pc, #168]	@ (800b090 <xTaskResumeAll+0x130>)
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afec:	4613      	mov	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4a27      	ldr	r2, [pc, #156]	@ (800b094 <xTaskResumeAll+0x134>)
 800aff6:	441a      	add	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	3304      	adds	r3, #4
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	f7fe fd1f 	bl	8009a42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b008:	4b23      	ldr	r3, [pc, #140]	@ (800b098 <xTaskResumeAll+0x138>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	429a      	cmp	r2, r3
 800b010:	d302      	bcc.n	800b018 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 800b012:	4b22      	ldr	r3, [pc, #136]	@ (800b09c <xTaskResumeAll+0x13c>)
 800b014:	2201      	movs	r2, #1
 800b016:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b018:	4b1c      	ldr	r3, [pc, #112]	@ (800b08c <xTaskResumeAll+0x12c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1c6      	bne.n	800afae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b026:	f000 fba3 	bl	800b770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b02a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0a0 <xTaskResumeAll+0x140>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d010      	beq.n	800b058 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b036:	f000 f859 	bl	800b0ec <xTaskIncrementTick>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 800b040:	4b16      	ldr	r3, [pc, #88]	@ (800b09c <xTaskResumeAll+0x13c>)
 800b042:	2201      	movs	r2, #1
 800b044:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3b01      	subs	r3, #1
 800b04a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1f1      	bne.n	800b036 <xTaskResumeAll+0xd6>

						xPendedTicks = 0;
 800b052:	4b13      	ldr	r3, [pc, #76]	@ (800b0a0 <xTaskResumeAll+0x140>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b058:	4b10      	ldr	r3, [pc, #64]	@ (800b09c <xTaskResumeAll+0x13c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d009      	beq.n	800b074 <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b060:	2301      	movs	r3, #1
 800b062:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b064:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a4 <xTaskResumeAll+0x144>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b074:	f001 f9f4 	bl	800c460 <vPortExitCritical>

	return xAlreadyYielded;
 800b078:	68bb      	ldr	r3, [r7, #8]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200014e4 	.word	0x200014e4
 800b088:	200014bc 	.word	0x200014bc
 800b08c:	2000147c 	.word	0x2000147c
 800b090:	200014c4 	.word	0x200014c4
 800b094:	20000fec 	.word	0x20000fec
 800b098:	20000fe8 	.word	0x20000fe8
 800b09c:	200014d0 	.word	0x200014d0
 800b0a0:	200014cc 	.word	0x200014cc
 800b0a4:	e000ed04 	.word	0xe000ed04

0800b0a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0ae:	4b05      	ldr	r3, [pc, #20]	@ (800b0c4 <xTaskGetTickCount+0x1c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0b4:	687b      	ldr	r3, [r7, #4]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	200014c0 	.word	0x200014c0

0800b0c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0ce:	f001 fa7b 	bl	800c5c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b0d6:	4b04      	ldr	r3, [pc, #16]	@ (800b0e8 <xTaskGetTickCountFromISR+0x20>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0dc:	683b      	ldr	r3, [r7, #0]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200014c0 	.word	0x200014c0

0800b0ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800b0f6:	4b5e      	ldr	r3, [pc, #376]	@ (800b270 <xTaskIncrementTick+0x184>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d003      	beq.n	800b106 <xTaskIncrementTick+0x1a>
 800b0fe:	4b5d      	ldr	r3, [pc, #372]	@ (800b274 <xTaskIncrementTick+0x188>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d105      	bne.n	800b112 <xTaskIncrementTick+0x26>
 800b106:	4b5c      	ldr	r3, [pc, #368]	@ (800b278 <xTaskIncrementTick+0x18c>)
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	4b5c      	ldr	r3, [pc, #368]	@ (800b27c <xTaskIncrementTick+0x190>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3201      	adds	r2, #1
 800b110:	619a      	str	r2, [r3, #24]
 800b112:	4b57      	ldr	r3, [pc, #348]	@ (800b270 <xTaskIncrementTick+0x184>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d106      	bne.n	800b128 <xTaskIncrementTick+0x3c>
 800b11a:	4b57      	ldr	r3, [pc, #348]	@ (800b278 <xTaskIncrementTick+0x18c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3301      	adds	r3, #1
 800b120:	4619      	mov	r1, r3
 800b122:	2031      	movs	r0, #49	@ 0x31
 800b124:	f7f6 f89e 	bl	8001264 <xTraceEventCreate1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b128:	4b51      	ldr	r3, [pc, #324]	@ (800b270 <xTaskIncrementTick+0x184>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f040 8095 	bne.w	800b25c <xTaskIncrementTick+0x170>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b132:	4b51      	ldr	r3, [pc, #324]	@ (800b278 <xTaskIncrementTick+0x18c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3301      	adds	r3, #1
 800b138:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b13a:	4a4f      	ldr	r2, [pc, #316]	@ (800b278 <xTaskIncrementTick+0x18c>)
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d121      	bne.n	800b18a <xTaskIncrementTick+0x9e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b146:	4b4e      	ldr	r3, [pc, #312]	@ (800b280 <xTaskIncrementTick+0x194>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00b      	beq.n	800b168 <xTaskIncrementTick+0x7c>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	603b      	str	r3, [r7, #0]
}
 800b162:	bf00      	nop
 800b164:	bf00      	nop
 800b166:	e7fd      	b.n	800b164 <xTaskIncrementTick+0x78>
 800b168:	4b45      	ldr	r3, [pc, #276]	@ (800b280 <xTaskIncrementTick+0x194>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	4b45      	ldr	r3, [pc, #276]	@ (800b284 <xTaskIncrementTick+0x198>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a43      	ldr	r2, [pc, #268]	@ (800b280 <xTaskIncrementTick+0x194>)
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	4a43      	ldr	r2, [pc, #268]	@ (800b284 <xTaskIncrementTick+0x198>)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	4b42      	ldr	r3, [pc, #264]	@ (800b288 <xTaskIncrementTick+0x19c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	4a41      	ldr	r2, [pc, #260]	@ (800b288 <xTaskIncrementTick+0x19c>)
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	f000 faf3 	bl	800b770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b18a:	4b40      	ldr	r3, [pc, #256]	@ (800b28c <xTaskIncrementTick+0x1a0>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	429a      	cmp	r2, r3
 800b192:	d34e      	bcc.n	800b232 <xTaskIncrementTick+0x146>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b194:	4b3a      	ldr	r3, [pc, #232]	@ (800b280 <xTaskIncrementTick+0x194>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d104      	bne.n	800b1a8 <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b19e:	4b3b      	ldr	r3, [pc, #236]	@ (800b28c <xTaskIncrementTick+0x1a0>)
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a4:	601a      	str	r2, [r3, #0]
					break;
 800b1a6:	e044      	b.n	800b232 <xTaskIncrementTick+0x146>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a8:	4b35      	ldr	r3, [pc, #212]	@ (800b280 <xTaskIncrementTick+0x194>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d203      	bcs.n	800b1c8 <xTaskIncrementTick+0xdc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1c0:	4a32      	ldr	r2, [pc, #200]	@ (800b28c <xTaskIncrementTick+0x1a0>)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1c6:	e034      	b.n	800b232 <xTaskIncrementTick+0x146>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fc95 	bl	8009afc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d004      	beq.n	800b1e4 <xTaskIncrementTick+0xf8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3318      	adds	r3, #24
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe fc8c 	bl	8009afc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	2030      	movs	r0, #48	@ 0x30
 800b1ea:	f7f6 f83b 	bl	8001264 <xTraceEventCreate1>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f2:	4b27      	ldr	r3, [pc, #156]	@ (800b290 <xTaskIncrementTick+0x1a4>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d903      	bls.n	800b202 <xTaskIncrementTick+0x116>
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fe:	4a24      	ldr	r2, [pc, #144]	@ (800b290 <xTaskIncrementTick+0x1a4>)
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b206:	4613      	mov	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4a21      	ldr	r2, [pc, #132]	@ (800b294 <xTaskIncrementTick+0x1a8>)
 800b210:	441a      	add	r2, r3
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	3304      	adds	r3, #4
 800b216:	4619      	mov	r1, r3
 800b218:	4610      	mov	r0, r2
 800b21a:	f7fe fc12 	bl	8009a42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b222:	4b1d      	ldr	r3, [pc, #116]	@ (800b298 <xTaskIncrementTick+0x1ac>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b228:	429a      	cmp	r2, r3
 800b22a:	d3b3      	bcc.n	800b194 <xTaskIncrementTick+0xa8>
						{
							xSwitchRequired = pdTRUE;
 800b22c:	2301      	movs	r3, #1
 800b22e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b230:	e7b0      	b.n	800b194 <xTaskIncrementTick+0xa8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b232:	4b19      	ldr	r3, [pc, #100]	@ (800b298 <xTaskIncrementTick+0x1ac>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b238:	4916      	ldr	r1, [pc, #88]	@ (800b294 <xTaskIncrementTick+0x1a8>)
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	440b      	add	r3, r1
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d901      	bls.n	800b24e <xTaskIncrementTick+0x162>
			{
				xSwitchRequired = pdTRUE;
 800b24a:	2301      	movs	r3, #1
 800b24c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b24e:	4b13      	ldr	r3, [pc, #76]	@ (800b29c <xTaskIncrementTick+0x1b0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d007      	beq.n	800b266 <xTaskIncrementTick+0x17a>
			{
				xSwitchRequired = pdTRUE;
 800b256:	2301      	movs	r3, #1
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	e004      	b.n	800b266 <xTaskIncrementTick+0x17a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b25c:	4b05      	ldr	r3, [pc, #20]	@ (800b274 <xTaskIncrementTick+0x188>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3301      	adds	r3, #1
 800b262:	4a04      	ldr	r2, [pc, #16]	@ (800b274 <xTaskIncrementTick+0x188>)
 800b264:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b266:	697b      	ldr	r3, [r7, #20]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	200014e4 	.word	0x200014e4
 800b274:	200014cc 	.word	0x200014cc
 800b278:	200014c0 	.word	0x200014c0
 800b27c:	20000254 	.word	0x20000254
 800b280:	20001474 	.word	0x20001474
 800b284:	20001478 	.word	0x20001478
 800b288:	200014d4 	.word	0x200014d4
 800b28c:	200014dc 	.word	0x200014dc
 800b290:	200014c4 	.word	0x200014c4
 800b294:	20000fec 	.word	0x20000fec
 800b298:	20000fe8 	.word	0x20000fe8
 800b29c:	200014d0 	.word	0x200014d0

0800b2a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2a6:	4b2c      	ldr	r3, [pc, #176]	@ (800b358 <vTaskSwitchContext+0xb8>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b35c <vTaskSwitchContext+0xbc>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2b4:	e04b      	b.n	800b34e <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 800b2b6:	4b29      	ldr	r3, [pc, #164]	@ (800b35c <vTaskSwitchContext+0xbc>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2bc:	4b28      	ldr	r3, [pc, #160]	@ (800b360 <vTaskSwitchContext+0xc0>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	60fb      	str	r3, [r7, #12]
 800b2c2:	e011      	b.n	800b2e8 <vTaskSwitchContext+0x48>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10b      	bne.n	800b2e2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	607b      	str	r3, [r7, #4]
}
 800b2dc:	bf00      	nop
 800b2de:	bf00      	nop
 800b2e0:	e7fd      	b.n	800b2de <vTaskSwitchContext+0x3e>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	491e      	ldr	r1, [pc, #120]	@ (800b364 <vTaskSwitchContext+0xc4>)
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	440b      	add	r3, r1
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d0e3      	beq.n	800b2c4 <vTaskSwitchContext+0x24>
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4a17      	ldr	r2, [pc, #92]	@ (800b364 <vTaskSwitchContext+0xc4>)
 800b308:	4413      	add	r3, r2
 800b30a:	60bb      	str	r3, [r7, #8]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	605a      	str	r2, [r3, #4]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	3308      	adds	r3, #8
 800b31e:	429a      	cmp	r2, r3
 800b320:	d104      	bne.n	800b32c <vTaskSwitchContext+0x8c>
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	605a      	str	r2, [r3, #4]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4a0d      	ldr	r2, [pc, #52]	@ (800b368 <vTaskSwitchContext+0xc8>)
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	4a0a      	ldr	r2, [pc, #40]	@ (800b360 <vTaskSwitchContext+0xc0>)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800b33c:	4b0a      	ldr	r3, [pc, #40]	@ (800b368 <vTaskSwitchContext+0xc8>)
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	4b09      	ldr	r3, [pc, #36]	@ (800b368 <vTaskSwitchContext+0xc8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b346:	4619      	mov	r1, r3
 800b348:	4610      	mov	r0, r2
 800b34a:	f7f6 fd67 	bl	8001e1c <xTraceTaskSwitch>
}
 800b34e:	bf00      	nop
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200014e4 	.word	0x200014e4
 800b35c:	200014d0 	.word	0x200014d0
 800b360:	200014c4 	.word	0x200014c4
 800b364:	20000fec 	.word	0x20000fec
 800b368:	20000fe8 	.word	0x20000fe8

0800b36c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10b      	bne.n	800b394 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	60fb      	str	r3, [r7, #12]
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	e7fd      	b.n	800b390 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b394:	4b07      	ldr	r3, [pc, #28]	@ (800b3b4 <vTaskPlaceOnEventList+0x48>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3318      	adds	r3, #24
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7fe fb74 	bl	8009a8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	6838      	ldr	r0, [r7, #0]
 800b3a6:	f000 fb3b 	bl	800ba20 <prvAddCurrentTaskToDelayedList>
}
 800b3aa:	bf00      	nop
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000fe8 	.word	0x20000fe8

0800b3b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10b      	bne.n	800b3e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	617b      	str	r3, [r7, #20]
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	e7fd      	b.n	800b3de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b41c <vTaskPlaceOnEventListRestricted+0x64>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3318      	adds	r3, #24
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f7fe fb29 	bl	8009a42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800b3fc:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <vTaskPlaceOnEventListRestricted+0x68>)
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	4413      	add	r3, r2
 800b404:	4619      	mov	r1, r3
 800b406:	2079      	movs	r0, #121	@ 0x79
 800b408:	f7f5 ff2c 	bl	8001264 <xTraceEventCreate1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b40c:	6879      	ldr	r1, [r7, #4]
 800b40e:	68b8      	ldr	r0, [r7, #8]
 800b410:	f000 fb06 	bl	800ba20 <prvAddCurrentTaskToDelayedList>
	}
 800b414:	bf00      	nop
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	20000fe8 	.word	0x20000fe8
 800b420:	200014c0 	.word	0x200014c0

0800b424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10b      	bne.n	800b452 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	60fb      	str	r3, [r7, #12]
}
 800b44c:	bf00      	nop
 800b44e:	bf00      	nop
 800b450:	e7fd      	b.n	800b44e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	3318      	adds	r3, #24
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fb50 	bl	8009afc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b45c:	4b20      	ldr	r3, [pc, #128]	@ (800b4e0 <xTaskRemoveFromEventList+0xbc>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d122      	bne.n	800b4aa <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	3304      	adds	r3, #4
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fe fb47 	bl	8009afc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	4619      	mov	r1, r3
 800b472:	2030      	movs	r0, #48	@ 0x30
 800b474:	f7f5 fef6 	bl	8001264 <xTraceEventCreate1>
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b47c:	4b19      	ldr	r3, [pc, #100]	@ (800b4e4 <xTaskRemoveFromEventList+0xc0>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	429a      	cmp	r2, r3
 800b482:	d903      	bls.n	800b48c <xTaskRemoveFromEventList+0x68>
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b488:	4a16      	ldr	r2, [pc, #88]	@ (800b4e4 <xTaskRemoveFromEventList+0xc0>)
 800b48a:	6013      	str	r3, [r2, #0]
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b490:	4613      	mov	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4a13      	ldr	r2, [pc, #76]	@ (800b4e8 <xTaskRemoveFromEventList+0xc4>)
 800b49a:	441a      	add	r2, r3
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	f7fe facd 	bl	8009a42 <vListInsertEnd>
 800b4a8:	e005      	b.n	800b4b6 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	3318      	adds	r3, #24
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	480e      	ldr	r0, [pc, #56]	@ (800b4ec <xTaskRemoveFromEventList+0xc8>)
 800b4b2:	f7fe fac6 	bl	8009a42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f0 <xTaskRemoveFromEventList+0xcc>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d905      	bls.n	800b4d0 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f4 <xTaskRemoveFromEventList+0xd0>)
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	e001      	b.n	800b4d4 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4d4:	697b      	ldr	r3, [r7, #20]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	200014e4 	.word	0x200014e4
 800b4e4:	200014c4 	.word	0x200014c4
 800b4e8:	20000fec 	.word	0x20000fec
 800b4ec:	2000147c 	.word	0x2000147c
 800b4f0:	20000fe8 	.word	0x20000fe8
 800b4f4:	200014d0 	.word	0x200014d0

0800b4f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b500:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <vTaskInternalSetTimeOutState+0x24>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b508:	4b05      	ldr	r3, [pc, #20]	@ (800b520 <vTaskInternalSetTimeOutState+0x28>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	605a      	str	r2, [r3, #4]
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	200014d4 	.word	0x200014d4
 800b520:	200014c0 	.word	0x200014c0

0800b524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10b      	bne.n	800b54c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	613b      	str	r3, [r7, #16]
}
 800b546:	bf00      	nop
 800b548:	bf00      	nop
 800b54a:	e7fd      	b.n	800b548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10b      	bne.n	800b56a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	60fb      	str	r3, [r7, #12]
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop
 800b568:	e7fd      	b.n	800b566 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b56a:	f000 ff47 	bl	800c3fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b56e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e4 <xTaskCheckForTimeOut+0xc0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b586:	d102      	bne.n	800b58e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b588:	2300      	movs	r3, #0
 800b58a:	61fb      	str	r3, [r7, #28]
 800b58c:	e023      	b.n	800b5d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	4b15      	ldr	r3, [pc, #84]	@ (800b5e8 <xTaskCheckForTimeOut+0xc4>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	429a      	cmp	r2, r3
 800b598:	d007      	beq.n	800b5aa <xTaskCheckForTimeOut+0x86>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	69ba      	ldr	r2, [r7, #24]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d302      	bcc.n	800b5aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	e015      	b.n	800b5d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d20b      	bcs.n	800b5cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	1ad2      	subs	r2, r2, r3
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7ff ff99 	bl	800b4f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	61fb      	str	r3, [r7, #28]
 800b5ca:	e004      	b.n	800b5d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5d6:	f000 ff43 	bl	800c460 <vPortExitCritical>

	return xReturn;
 800b5da:	69fb      	ldr	r3, [r7, #28]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3720      	adds	r7, #32
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	200014c0 	.word	0x200014c0
 800b5e8:	200014d4 	.word	0x200014d4

0800b5ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5f0:	4b03      	ldr	r3, [pc, #12]	@ (800b600 <vTaskMissedYield+0x14>)
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	601a      	str	r2, [r3, #0]
}
 800b5f6:	bf00      	nop
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	200014d0 	.word	0x200014d0

0800b604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b60c:	f000 f852 	bl	800b6b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b610:	4b06      	ldr	r3, [pc, #24]	@ (800b62c <prvIdleTask+0x28>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d9f9      	bls.n	800b60c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b618:	4b05      	ldr	r3, [pc, #20]	@ (800b630 <prvIdleTask+0x2c>)
 800b61a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b628:	e7f0      	b.n	800b60c <prvIdleTask+0x8>
 800b62a:	bf00      	nop
 800b62c:	20000fec 	.word	0x20000fec
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b63a:	2300      	movs	r3, #0
 800b63c:	607b      	str	r3, [r7, #4]
 800b63e:	e00c      	b.n	800b65a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4a12      	ldr	r2, [pc, #72]	@ (800b694 <prvInitialiseTaskLists+0x60>)
 800b64c:	4413      	add	r3, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe f9ca 	bl	80099e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3301      	adds	r3, #1
 800b658:	607b      	str	r3, [r7, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b37      	cmp	r3, #55	@ 0x37
 800b65e:	d9ef      	bls.n	800b640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b660:	480d      	ldr	r0, [pc, #52]	@ (800b698 <prvInitialiseTaskLists+0x64>)
 800b662:	f7fe f9c1 	bl	80099e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b666:	480d      	ldr	r0, [pc, #52]	@ (800b69c <prvInitialiseTaskLists+0x68>)
 800b668:	f7fe f9be 	bl	80099e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b66c:	480c      	ldr	r0, [pc, #48]	@ (800b6a0 <prvInitialiseTaskLists+0x6c>)
 800b66e:	f7fe f9bb 	bl	80099e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b672:	480c      	ldr	r0, [pc, #48]	@ (800b6a4 <prvInitialiseTaskLists+0x70>)
 800b674:	f7fe f9b8 	bl	80099e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b678:	480b      	ldr	r0, [pc, #44]	@ (800b6a8 <prvInitialiseTaskLists+0x74>)
 800b67a:	f7fe f9b5 	bl	80099e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b67e:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <prvInitialiseTaskLists+0x78>)
 800b680:	4a05      	ldr	r2, [pc, #20]	@ (800b698 <prvInitialiseTaskLists+0x64>)
 800b682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b684:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b0 <prvInitialiseTaskLists+0x7c>)
 800b686:	4a05      	ldr	r2, [pc, #20]	@ (800b69c <prvInitialiseTaskLists+0x68>)
 800b688:	601a      	str	r2, [r3, #0]
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20000fec 	.word	0x20000fec
 800b698:	2000144c 	.word	0x2000144c
 800b69c:	20001460 	.word	0x20001460
 800b6a0:	2000147c 	.word	0x2000147c
 800b6a4:	20001490 	.word	0x20001490
 800b6a8:	200014a8 	.word	0x200014a8
 800b6ac:	20001474 	.word	0x20001474
 800b6b0:	20001478 	.word	0x20001478

0800b6b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6ba:	e019      	b.n	800b6f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6bc:	f000 fe9e 	bl	800c3fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c0:	4b10      	ldr	r3, [pc, #64]	@ (800b704 <prvCheckTasksWaitingTermination+0x50>)
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe fa15 	bl	8009afc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b708 <prvCheckTasksWaitingTermination+0x54>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	4a0b      	ldr	r2, [pc, #44]	@ (800b708 <prvCheckTasksWaitingTermination+0x54>)
 800b6da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b70c <prvCheckTasksWaitingTermination+0x58>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b70c <prvCheckTasksWaitingTermination+0x58>)
 800b6e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6e6:	f000 febb 	bl	800c460 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f810 	bl	800b710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6f0:	4b06      	ldr	r3, [pc, #24]	@ (800b70c <prvCheckTasksWaitingTermination+0x58>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e1      	bne.n	800b6bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20001490 	.word	0x20001490
 800b708:	200014bc 	.word	0x200014bc
 800b70c:	200014a4 	.word	0x200014a4

0800b710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d108      	bne.n	800b734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b726:	4618      	mov	r0, r3
 800b728:	f001 f876 	bl	800c818 <vPortFree>
				vPortFree( pxTCB );
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 f873 	bl	800c818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b732:	e019      	b.n	800b768 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d103      	bne.n	800b746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f001 f86a 	bl	800c818 <vPortFree>
	}
 800b744:	e010      	b.n	800b768 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d00b      	beq.n	800b768 <prvDeleteTCB+0x58>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	60fb      	str	r3, [r7, #12]
}
 800b762:	bf00      	nop
 800b764:	bf00      	nop
 800b766:	e7fd      	b.n	800b764 <prvDeleteTCB+0x54>
	}
 800b768:	bf00      	nop
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b776:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a8 <prvResetNextTaskUnblockTime+0x38>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d104      	bne.n	800b78a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b780:	4b0a      	ldr	r3, [pc, #40]	@ (800b7ac <prvResetNextTaskUnblockTime+0x3c>)
 800b782:	f04f 32ff 	mov.w	r2, #4294967295
 800b786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b788:	e008      	b.n	800b79c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b78a:	4b07      	ldr	r3, [pc, #28]	@ (800b7a8 <prvResetNextTaskUnblockTime+0x38>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	4a04      	ldr	r2, [pc, #16]	@ (800b7ac <prvResetNextTaskUnblockTime+0x3c>)
 800b79a:	6013      	str	r3, [r2, #0]
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	20001474 	.word	0x20001474
 800b7ac:	200014dc 	.word	0x200014dc

0800b7b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e4 <xTaskGetSchedulerState+0x34>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d102      	bne.n	800b7c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	607b      	str	r3, [r7, #4]
 800b7c2:	e008      	b.n	800b7d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7c4:	4b08      	ldr	r3, [pc, #32]	@ (800b7e8 <xTaskGetSchedulerState+0x38>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	607b      	str	r3, [r7, #4]
 800b7d0:	e001      	b.n	800b7d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7d6:	687b      	ldr	r3, [r7, #4]
	}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	200014c8 	.word	0x200014c8
 800b7e8:	200014e4 	.word	0x200014e4

0800b7ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d064      	beq.n	800b8cc <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b802:	4b35      	ldr	r3, [pc, #212]	@ (800b8d8 <xTaskPriorityDisinherit+0xec>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d00b      	beq.n	800b824 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	60fb      	str	r3, [r7, #12]
}
 800b81e:	bf00      	nop
 800b820:	bf00      	nop
 800b822:	e7fd      	b.n	800b820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10b      	bne.n	800b844 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	60bb      	str	r3, [r7, #8]
}
 800b83e:	bf00      	nop
 800b840:	bf00      	nop
 800b842:	e7fd      	b.n	800b840 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b848:	1e5a      	subs	r2, r3, #1
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b856:	429a      	cmp	r2, r3
 800b858:	d038      	beq.n	800b8cc <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d134      	bne.n	800b8cc <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	3304      	adds	r3, #4
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe f948 	bl	8009afc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b86c:	6939      	ldr	r1, [r7, #16]
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b872:	461a      	mov	r2, r3
 800b874:	2006      	movs	r0, #6
 800b876:	f7f5 fd6d 	bl	8001354 <xTraceEventCreate2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b886:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	4619      	mov	r1, r3
 800b892:	2030      	movs	r0, #48	@ 0x30
 800b894:	f7f5 fce6 	bl	8001264 <xTraceEventCreate1>
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b89c:	4b0f      	ldr	r3, [pc, #60]	@ (800b8dc <xTaskPriorityDisinherit+0xf0>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d903      	bls.n	800b8ac <xTaskPriorityDisinherit+0xc0>
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a8:	4a0c      	ldr	r2, [pc, #48]	@ (800b8dc <xTaskPriorityDisinherit+0xf0>)
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4a09      	ldr	r2, [pc, #36]	@ (800b8e0 <xTaskPriorityDisinherit+0xf4>)
 800b8ba:	441a      	add	r2, r3
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	3304      	adds	r3, #4
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	f7fe f8bd 	bl	8009a42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8cc:	697b      	ldr	r3, [r7, #20]
	}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000fe8 	.word	0x20000fe8
 800b8dc:	200014c4 	.word	0x200014c4
 800b8e0:	20000fec 	.word	0x20000fec

0800b8e4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08a      	sub	sp, #40	@ 0x28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10b      	bne.n	800b90c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	61bb      	str	r3, [r7, #24]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b90c:	f000 fe5c 	bl	800c5c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800b914:	f3ef 8211 	mrs	r2, BASEPRI
 800b918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	617a      	str	r2, [r7, #20]
 800b92a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b92c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b92e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b932:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b936:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800b940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4619      	mov	r1, r3
 800b94e:	20cd      	movs	r0, #205	@ 0xcd
 800b950:	f7f5 fc88 	bl	8001264 <xTraceEventCreate1>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b954:	7ffb      	ldrb	r3, [r7, #31]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d14c      	bne.n	800b9f4 <vTaskNotifyGiveFromISR+0x110>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00b      	beq.n	800b97a <vTaskNotifyGiveFromISR+0x96>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	60fb      	str	r3, [r7, #12]
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop
 800b978:	e7fd      	b.n	800b976 <vTaskNotifyGiveFromISR+0x92>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97a:	4b23      	ldr	r3, [pc, #140]	@ (800ba08 <vTaskNotifyGiveFromISR+0x124>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d122      	bne.n	800b9c8 <vTaskNotifyGiveFromISR+0xe4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b984:	3304      	adds	r3, #4
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe f8b8 	bl	8009afc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98e:	4619      	mov	r1, r3
 800b990:	2030      	movs	r0, #48	@ 0x30
 800b992:	f7f5 fc67 	bl	8001264 <xTraceEventCreate1>
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99a:	4b1c      	ldr	r3, [pc, #112]	@ (800ba0c <vTaskNotifyGiveFromISR+0x128>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d903      	bls.n	800b9aa <vTaskNotifyGiveFromISR+0xc6>
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a6:	4a19      	ldr	r2, [pc, #100]	@ (800ba0c <vTaskNotifyGiveFromISR+0x128>)
 800b9a8:	6013      	str	r3, [r2, #0]
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4a16      	ldr	r2, [pc, #88]	@ (800ba10 <vTaskNotifyGiveFromISR+0x12c>)
 800b9b8:	441a      	add	r2, r3
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	3304      	adds	r3, #4
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	f7fe f83e 	bl	8009a42 <vListInsertEnd>
 800b9c6:	e005      	b.n	800b9d4 <vTaskNotifyGiveFromISR+0xf0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	3318      	adds	r3, #24
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4811      	ldr	r0, [pc, #68]	@ (800ba14 <vTaskNotifyGiveFromISR+0x130>)
 800b9d0:	f7fe f837 	bl	8009a42 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800ba18 <vTaskNotifyGiveFromISR+0x134>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d908      	bls.n	800b9f4 <vTaskNotifyGiveFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <vTaskNotifyGiveFromISR+0x10a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800ba1c <vTaskNotifyGiveFromISR+0x138>)
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	f383 8811 	msr	BASEPRI, r3
}
 800b9fe:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ba00:	bf00      	nop
 800ba02:	3728      	adds	r7, #40	@ 0x28
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	200014e4 	.word	0x200014e4
 800ba0c:	200014c4 	.word	0x200014c4
 800ba10:	20000fec 	.word	0x20000fec
 800ba14:	2000147c 	.word	0x2000147c
 800ba18:	20000fe8 	.word	0x20000fe8
 800ba1c:	200014d0 	.word	0x200014d0

0800ba20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba2a:	4b21      	ldr	r3, [pc, #132]	@ (800bab0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba30:	4b20      	ldr	r3, [pc, #128]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3304      	adds	r3, #4
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe f860 	bl	8009afc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba42:	d10a      	bne.n	800ba5a <prvAddCurrentTaskToDelayedList+0x3a>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d007      	beq.n	800ba5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4619      	mov	r1, r3
 800ba52:	4819      	ldr	r0, [pc, #100]	@ (800bab8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba54:	f7fd fff5 	bl	8009a42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba58:	e026      	b.n	800baa8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4413      	add	r3, r2
 800ba60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba62:	4b14      	ldr	r3, [pc, #80]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d209      	bcs.n	800ba86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba72:	4b12      	ldr	r3, [pc, #72]	@ (800babc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	4b0f      	ldr	r3, [pc, #60]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fe f803 	bl	8009a8a <vListInsert>
}
 800ba84:	e010      	b.n	800baa8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba86:	4b0e      	ldr	r3, [pc, #56]	@ (800bac0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	4b0a      	ldr	r3, [pc, #40]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fd fff9 	bl	8009a8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba98:	4b0a      	ldr	r3, [pc, #40]	@ (800bac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d202      	bcs.n	800baa8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800baa2:	4a08      	ldr	r2, [pc, #32]	@ (800bac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6013      	str	r3, [r2, #0]
}
 800baa8:	bf00      	nop
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	200014c0 	.word	0x200014c0
 800bab4:	20000fe8 	.word	0x20000fe8
 800bab8:	200014a8 	.word	0x200014a8
 800babc:	20001478 	.word	0x20001478
 800bac0:	20001474 	.word	0x20001474
 800bac4:	200014dc 	.word	0x200014dc

0800bac8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	@ 0x28
 800bacc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bace:	2300      	movs	r3, #0
 800bad0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bad2:	f000 fb13 	bl	800c0fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bad6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb4c <xTimerCreateTimerTask+0x84>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d021      	beq.n	800bb22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bae6:	1d3a      	adds	r2, r7, #4
 800bae8:	f107 0108 	add.w	r1, r7, #8
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fd ff5f 	bl	80099b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	9202      	str	r2, [sp, #8]
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	2302      	movs	r3, #2
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	2300      	movs	r3, #0
 800bb06:	460a      	mov	r2, r1
 800bb08:	4911      	ldr	r1, [pc, #68]	@ (800bb50 <xTimerCreateTimerTask+0x88>)
 800bb0a:	4812      	ldr	r0, [pc, #72]	@ (800bb54 <xTimerCreateTimerTask+0x8c>)
 800bb0c:	f7fe ff30 	bl	800a970 <xTaskCreateStatic>
 800bb10:	4603      	mov	r3, r0
 800bb12:	4a11      	ldr	r2, [pc, #68]	@ (800bb58 <xTimerCreateTimerTask+0x90>)
 800bb14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb16:	4b10      	ldr	r3, [pc, #64]	@ (800bb58 <xTimerCreateTimerTask+0x90>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	613b      	str	r3, [r7, #16]
}
 800bb3a:	bf00      	nop
 800bb3c:	bf00      	nop
 800bb3e:	e7fd      	b.n	800bb3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb40:	697b      	ldr	r3, [r7, #20]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20001518 	.word	0x20001518
 800bb50:	08010510 	.word	0x08010510
 800bb54:	0800bc95 	.word	0x0800bc95
 800bb58:	2000151c 	.word	0x2000151c

0800bb5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	@ 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10b      	bne.n	800bb8c <xTimerGenericCommand+0x30>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	623b      	str	r3, [r7, #32]
}
 800bb86:	bf00      	nop
 800bb88:	bf00      	nop
 800bb8a:	e7fd      	b.n	800bb88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb8c:	4b19      	ldr	r3, [pc, #100]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d02a      	beq.n	800bbea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b05      	cmp	r3, #5
 800bba4:	dc18      	bgt.n	800bbd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bba6:	f7ff fe03 	bl	800b7b0 <xTaskGetSchedulerState>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d109      	bne.n	800bbc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbb0:	4b10      	ldr	r3, [pc, #64]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	f107 0110 	add.w	r1, r7, #16
 800bbb8:	2300      	movs	r3, #0
 800bbba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbbc:	f7fe f92c 	bl	8009e18 <xQueueGenericSend>
 800bbc0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbc2:	e012      	b.n	800bbea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbc4:	4b0b      	ldr	r3, [pc, #44]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	f107 0110 	add.w	r1, r7, #16
 800bbcc:	2300      	movs	r3, #0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f7fe f922 	bl	8009e18 <xQueueGenericSend>
 800bbd4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbd6:	e008      	b.n	800bbea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbd8:	4b06      	ldr	r3, [pc, #24]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bbda:	6818      	ldr	r0, [r3, #0]
 800bbdc:	f107 0110 	add.w	r1, r7, #16
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	f7fe fad4 	bl	800a190 <xQueueGenericSendFromISR>
 800bbe8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3728      	adds	r7, #40	@ 0x28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20001518 	.word	0x20001518

0800bbf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af02      	add	r7, sp, #8
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc02:	4b23      	ldr	r3, [pc, #140]	@ (800bc90 <prvProcessExpiredTimer+0x98>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fd ff73 	bl	8009afc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc1c:	f003 0304 	and.w	r3, r3, #4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d023      	beq.n	800bc6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	699a      	ldr	r2, [r3, #24]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	18d1      	adds	r1, r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	6978      	ldr	r0, [r7, #20]
 800bc32:	f000 f8d5 	bl	800bde0 <prvInsertTimerInActiveList>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d020      	beq.n	800bc7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	2300      	movs	r3, #0
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	2100      	movs	r1, #0
 800bc46:	6978      	ldr	r0, [r7, #20]
 800bc48:	f7ff ff88 	bl	800bb5c <xTimerGenericCommand>
 800bc4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d114      	bne.n	800bc7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	60fb      	str	r3, [r7, #12]
}
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
 800bc6a:	e7fd      	b.n	800bc68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc72:	f023 0301 	bic.w	r3, r3, #1
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	4798      	blx	r3
}
 800bc86:	bf00      	nop
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20001510 	.word	0x20001510

0800bc94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc9c:	f107 0308 	add.w	r3, r7, #8
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 f859 	bl	800bd58 <prvGetNextExpireTime>
 800bca6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 f805 	bl	800bcbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcb2:	f000 f8d7 	bl	800be64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcb6:	bf00      	nop
 800bcb8:	e7f0      	b.n	800bc9c <prvTimerTask+0x8>
	...

0800bcbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcc6:	f7ff f93d 	bl	800af44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcca:	f107 0308 	add.w	r3, r7, #8
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 f866 	bl	800bda0 <prvSampleTimeNow>
 800bcd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d130      	bne.n	800bd3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <prvProcessTimerOrBlockTask+0x3c>
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d806      	bhi.n	800bcf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcea:	f7ff f939 	bl	800af60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcee:	68f9      	ldr	r1, [r7, #12]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff ff81 	bl	800bbf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcf6:	e024      	b.n	800bd42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d008      	beq.n	800bd10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcfe:	4b13      	ldr	r3, [pc, #76]	@ (800bd4c <prvProcessTimerOrBlockTask+0x90>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <prvProcessTimerOrBlockTask+0x50>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e000      	b.n	800bd0e <prvProcessTimerOrBlockTask+0x52>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd10:	4b0f      	ldr	r3, [pc, #60]	@ (800bd50 <prvProcessTimerOrBlockTask+0x94>)
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	f7fe fdf3 	bl	800a908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd22:	f7ff f91d 	bl	800af60 <xTaskResumeAll>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd2c:	4b09      	ldr	r3, [pc, #36]	@ (800bd54 <prvProcessTimerOrBlockTask+0x98>)
 800bd2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	f3bf 8f6f 	isb	sy
}
 800bd3c:	e001      	b.n	800bd42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd3e:	f7ff f90f 	bl	800af60 <xTaskResumeAll>
}
 800bd42:	bf00      	nop
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20001514 	.word	0x20001514
 800bd50:	20001518 	.word	0x20001518
 800bd54:	e000ed04 	.word	0xe000ed04

0800bd58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd60:	4b0e      	ldr	r3, [pc, #56]	@ (800bd9c <prvGetNextExpireTime+0x44>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <prvGetNextExpireTime+0x16>
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	e000      	b.n	800bd70 <prvGetNextExpireTime+0x18>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d105      	bne.n	800bd88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd7c:	4b07      	ldr	r3, [pc, #28]	@ (800bd9c <prvGetNextExpireTime+0x44>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	60fb      	str	r3, [r7, #12]
 800bd86:	e001      	b.n	800bd8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	20001510 	.word	0x20001510

0800bda0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bda8:	f7ff f97e 	bl	800b0a8 <xTaskGetTickCount>
 800bdac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdae:	4b0b      	ldr	r3, [pc, #44]	@ (800bddc <prvSampleTimeNow+0x3c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d205      	bcs.n	800bdc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdb8:	f000 f93a 	bl	800c030 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	e002      	b.n	800bdca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdca:	4a04      	ldr	r2, [pc, #16]	@ (800bddc <prvSampleTimeNow+0x3c>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20001520 	.word	0x20001520

0800bde0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	429a      	cmp	r2, r3
 800be04:	d812      	bhi.n	800be2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	429a      	cmp	r2, r3
 800be12:	d302      	bcc.n	800be1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	e01b      	b.n	800be52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be1a:	4b10      	ldr	r3, [pc, #64]	@ (800be5c <prvInsertTimerInActiveList+0x7c>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3304      	adds	r3, #4
 800be22:	4619      	mov	r1, r3
 800be24:	4610      	mov	r0, r2
 800be26:	f7fd fe30 	bl	8009a8a <vListInsert>
 800be2a:	e012      	b.n	800be52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d206      	bcs.n	800be42 <prvInsertTimerInActiveList+0x62>
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d302      	bcc.n	800be42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	e007      	b.n	800be52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be42:	4b07      	ldr	r3, [pc, #28]	@ (800be60 <prvInsertTimerInActiveList+0x80>)
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3304      	adds	r3, #4
 800be4a:	4619      	mov	r1, r3
 800be4c:	4610      	mov	r0, r2
 800be4e:	f7fd fe1c 	bl	8009a8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be52:	697b      	ldr	r3, [r7, #20]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	20001514 	.word	0x20001514
 800be60:	20001510 	.word	0x20001510

0800be64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08e      	sub	sp, #56	@ 0x38
 800be68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be6a:	e0ce      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da19      	bge.n	800bea6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be72:	1d3b      	adds	r3, r7, #4
 800be74:	3304      	adds	r3, #4
 800be76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10b      	bne.n	800be96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	61fb      	str	r3, [r7, #28]
}
 800be90:	bf00      	nop
 800be92:	bf00      	nop
 800be94:	e7fd      	b.n	800be92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be9c:	6850      	ldr	r0, [r2, #4]
 800be9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bea0:	6892      	ldr	r2, [r2, #8]
 800bea2:	4611      	mov	r1, r2
 800bea4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f2c0 80ae 	blt.w	800c00a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bebc:	3304      	adds	r3, #4
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fd fe1c 	bl	8009afc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bec4:	463b      	mov	r3, r7
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff ff6a 	bl	800bda0 <prvSampleTimeNow>
 800becc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b09      	cmp	r3, #9
 800bed2:	f200 8097 	bhi.w	800c004 <prvProcessReceivedCommands+0x1a0>
 800bed6:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <prvProcessReceivedCommands+0x78>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bf05 	.word	0x0800bf05
 800bee0:	0800bf05 	.word	0x0800bf05
 800bee4:	0800bf05 	.word	0x0800bf05
 800bee8:	0800bf7b 	.word	0x0800bf7b
 800beec:	0800bf8f 	.word	0x0800bf8f
 800bef0:	0800bfdb 	.word	0x0800bfdb
 800bef4:	0800bf05 	.word	0x0800bf05
 800bef8:	0800bf05 	.word	0x0800bf05
 800befc:	0800bf7b 	.word	0x0800bf7b
 800bf00:	0800bf8f 	.word	0x0800bf8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf0a:	f043 0301 	orr.w	r3, r3, #1
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	18d1      	adds	r1, r2, r3
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf24:	f7ff ff5c 	bl	800bde0 <prvInsertTimerInActiveList>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d06c      	beq.n	800c008 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d061      	beq.n	800c008 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf48:	699b      	ldr	r3, [r3, #24]
 800bf4a:	441a      	add	r2, r3
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	2300      	movs	r3, #0
 800bf52:	2100      	movs	r1, #0
 800bf54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf56:	f7ff fe01 	bl	800bb5c <xTimerGenericCommand>
 800bf5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d152      	bne.n	800c008 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	61bb      	str	r3, [r7, #24]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf8c:	e03d      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf94:	f043 0301 	orr.w	r3, r3, #1
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	617b      	str	r3, [r7, #20]
}
 800bfc0:	bf00      	nop
 800bfc2:	bf00      	nop
 800bfc4:	e7fd      	b.n	800bfc2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	699a      	ldr	r2, [r3, #24]
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	18d1      	adds	r1, r2, r3
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfd4:	f7ff ff04 	bl	800bde0 <prvInsertTimerInActiveList>
					break;
 800bfd8:	e017      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfe0:	f003 0302 	and.w	r3, r3, #2
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d103      	bne.n	800bff0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bfe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfea:	f000 fc15 	bl	800c818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfee:	e00c      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bff6:	f023 0301 	bic.w	r3, r3, #1
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c002:	e002      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c004:	bf00      	nop
 800c006:	e000      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
					break;
 800c008:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c00a:	4b08      	ldr	r3, [pc, #32]	@ (800c02c <prvProcessReceivedCommands+0x1c8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	1d39      	adds	r1, r7, #4
 800c010:	2200      	movs	r2, #0
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe f99a 	bl	800a34c <xQueueReceive>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f47f af26 	bne.w	800be6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop
 800c024:	3730      	adds	r7, #48	@ 0x30
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20001518 	.word	0x20001518

0800c030 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c036:	e049      	b.n	800c0cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c038:	4b2e      	ldr	r3, [pc, #184]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c042:	4b2c      	ldr	r3, [pc, #176]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3304      	adds	r3, #4
 800c050:	4618      	mov	r0, r3
 800c052:	f7fd fd53 	bl	8009afc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d02f      	beq.n	800c0cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	4413      	add	r3, r2
 800c074:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d90e      	bls.n	800c09c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c08a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3304      	adds	r3, #4
 800c092:	4619      	mov	r1, r3
 800c094:	4610      	mov	r0, r2
 800c096:	f7fd fcf8 	bl	8009a8a <vListInsert>
 800c09a:	e017      	b.n	800c0cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c09c:	2300      	movs	r3, #0
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7ff fd58 	bl	800bb5c <xTimerGenericCommand>
 800c0ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10b      	bne.n	800c0cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	603b      	str	r3, [r7, #0]
}
 800c0c6:	bf00      	nop
 800c0c8:	bf00      	nop
 800c0ca:	e7fd      	b.n	800c0c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0cc:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1b0      	bne.n	800c038 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0d6:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	@ (800c0f8 <prvSwitchTimerLists+0xc8>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a04      	ldr	r2, [pc, #16]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c0e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0e4:	4a04      	ldr	r2, [pc, #16]	@ (800c0f8 <prvSwitchTimerLists+0xc8>)
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	6013      	str	r3, [r2, #0]
}
 800c0ea:	bf00      	nop
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20001510 	.word	0x20001510
 800c0f8:	20001514 	.word	0x20001514

0800c0fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c102:	f000 f97b 	bl	800c3fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c106:	4b15      	ldr	r3, [pc, #84]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d120      	bne.n	800c150 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c10e:	4814      	ldr	r0, [pc, #80]	@ (800c160 <prvCheckForValidListAndQueue+0x64>)
 800c110:	f7fd fc6a 	bl	80099e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c114:	4813      	ldr	r0, [pc, #76]	@ (800c164 <prvCheckForValidListAndQueue+0x68>)
 800c116:	f7fd fc67 	bl	80099e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c11a:	4b13      	ldr	r3, [pc, #76]	@ (800c168 <prvCheckForValidListAndQueue+0x6c>)
 800c11c:	4a10      	ldr	r2, [pc, #64]	@ (800c160 <prvCheckForValidListAndQueue+0x64>)
 800c11e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c120:	4b12      	ldr	r3, [pc, #72]	@ (800c16c <prvCheckForValidListAndQueue+0x70>)
 800c122:	4a10      	ldr	r2, [pc, #64]	@ (800c164 <prvCheckForValidListAndQueue+0x68>)
 800c124:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c126:	2300      	movs	r3, #0
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	4b11      	ldr	r3, [pc, #68]	@ (800c170 <prvCheckForValidListAndQueue+0x74>)
 800c12c:	4a11      	ldr	r2, [pc, #68]	@ (800c174 <prvCheckForValidListAndQueue+0x78>)
 800c12e:	2110      	movs	r1, #16
 800c130:	200a      	movs	r0, #10
 800c132:	f7fd fd77 	bl	8009c24 <xQueueGenericCreateStatic>
 800c136:	4603      	mov	r3, r0
 800c138:	4a08      	ldr	r2, [pc, #32]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c13a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c13c:	4b07      	ldr	r3, [pc, #28]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c144:	4b05      	ldr	r3, [pc, #20]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	490b      	ldr	r1, [pc, #44]	@ (800c178 <prvCheckForValidListAndQueue+0x7c>)
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fbb0 	bl	800a8b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c150:	f000 f986 	bl	800c460 <vPortExitCritical>
}
 800c154:	bf00      	nop
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20001518 	.word	0x20001518
 800c160:	200014e8 	.word	0x200014e8
 800c164:	200014fc 	.word	0x200014fc
 800c168:	20001510 	.word	0x20001510
 800c16c:	20001514 	.word	0x20001514
 800c170:	200015c4 	.word	0x200015c4
 800c174:	20001524 	.word	0x20001524
 800c178:	08010518 	.word	0x08010518

0800c17c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3b04      	subs	r3, #4
 800c18c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3b04      	subs	r3, #4
 800c19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	f023 0201 	bic.w	r2, r3, #1
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3b04      	subs	r3, #4
 800c1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1ac:	4a0c      	ldr	r2, [pc, #48]	@ (800c1e0 <pxPortInitialiseStack+0x64>)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3b14      	subs	r3, #20
 800c1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3b04      	subs	r3, #4
 800c1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f06f 0202 	mvn.w	r2, #2
 800c1ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3b20      	subs	r3, #32
 800c1d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	0800c1e5 	.word	0x0800c1e5

0800c1e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1ee:	4b13      	ldr	r3, [pc, #76]	@ (800c23c <prvTaskExitError+0x58>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d00b      	beq.n	800c210 <prvTaskExitError+0x2c>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	60fb      	str	r3, [r7, #12]
}
 800c20a:	bf00      	nop
 800c20c:	bf00      	nop
 800c20e:	e7fd      	b.n	800c20c <prvTaskExitError+0x28>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	60bb      	str	r3, [r7, #8]
}
 800c222:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c224:	bf00      	nop
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d0fc      	beq.n	800c226 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	20000048 	.word	0x20000048

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	@ (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	20000fe8 	.word	0x20000fe8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	@ (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b50      	ldr	r3, [pc, #320]	@ (800c3d8 <xPortStartScheduler+0x148>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a50      	ldr	r2, [pc, #320]	@ (800c3dc <xPortStartScheduler+0x14c>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10b      	bne.n	800c2b8 <xPortStartScheduler+0x28>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	617b      	str	r3, [r7, #20]
}
 800c2b2:	bf00      	nop
 800c2b4:	bf00      	nop
 800c2b6:	e7fd      	b.n	800c2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b8:	4b47      	ldr	r3, [pc, #284]	@ (800c3d8 <xPortStartScheduler+0x148>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a48      	ldr	r2, [pc, #288]	@ (800c3e0 <xPortStartScheduler+0x150>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d10b      	bne.n	800c2da <xPortStartScheduler+0x4a>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	61bb      	str	r3, [r7, #24]
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
 800c2d8:	e7fd      	b.n	800c2d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2da:	4b42      	ldr	r3, [pc, #264]	@ (800c3e4 <xPortStartScheduler+0x154>)
 800c2dc:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	22ff      	movs	r2, #255	@ 0xff
 800c2ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	4b3a      	ldr	r3, [pc, #232]	@ (800c3e8 <xPortStartScheduler+0x158>)
 800c300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c302:	4b3a      	ldr	r3, [pc, #232]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c304:	2207      	movs	r2, #7
 800c306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c308:	e009      	b.n	800c31e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c30a:	4b38      	ldr	r3, [pc, #224]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3b01      	subs	r3, #1
 800c310:	4a36      	ldr	r2, [pc, #216]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	b2db      	uxtb	r3, r3
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c326:	2b80      	cmp	r3, #128	@ 0x80
 800c328:	d0ef      	beq.n	800c30a <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800c32a:	4b30      	ldr	r3, [pc, #192]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f1c3 0307 	rsb	r3, r3, #7
 800c332:	2b04      	cmp	r3, #4
 800c334:	d00b      	beq.n	800c34e <xPortStartScheduler+0xbe>
	__asm volatile
 800c336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	613b      	str	r3, [r7, #16]
}
 800c348:	bf00      	nop
 800c34a:	bf00      	nop
 800c34c:	e7fd      	b.n	800c34a <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c34e:	4b27      	ldr	r3, [pc, #156]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f1c3 0307 	rsb	r3, r3, #7
 800c356:	2b04      	cmp	r3, #4
 800c358:	d00b      	beq.n	800c372 <xPortStartScheduler+0xe2>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	60fb      	str	r3, [r7, #12]
}
 800c36c:	bf00      	nop
 800c36e:	bf00      	nop
 800c370:	e7fd      	b.n	800c36e <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c372:	4b1e      	ldr	r3, [pc, #120]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	021b      	lsls	r3, r3, #8
 800c378:	4a1c      	ldr	r2, [pc, #112]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c37a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c37c:	4b1b      	ldr	r3, [pc, #108]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c384:	4a19      	ldr	r2, [pc, #100]	@ (800c3ec <xPortStartScheduler+0x15c>)
 800c386:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c390:	4b17      	ldr	r3, [pc, #92]	@ (800c3f0 <xPortStartScheduler+0x160>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a16      	ldr	r2, [pc, #88]	@ (800c3f0 <xPortStartScheduler+0x160>)
 800c396:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c39a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c39c:	4b14      	ldr	r3, [pc, #80]	@ (800c3f0 <xPortStartScheduler+0x160>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a13      	ldr	r2, [pc, #76]	@ (800c3f0 <xPortStartScheduler+0x160>)
 800c3a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3a8:	f000 f8e0 	bl	800c56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3ac:	4b11      	ldr	r3, [pc, #68]	@ (800c3f4 <xPortStartScheduler+0x164>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3b2:	f000 f8ff 	bl	800c5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3b6:	4b10      	ldr	r3, [pc, #64]	@ (800c3f8 <xPortStartScheduler+0x168>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a0f      	ldr	r2, [pc, #60]	@ (800c3f8 <xPortStartScheduler+0x168>)
 800c3bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3c2:	f7ff ff51 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3c6:	f7fe ff6b 	bl	800b2a0 <vTaskSwitchContext>
	prvTaskExitError();
 800c3ca:	f7ff ff0b 	bl	800c1e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3720      	adds	r7, #32
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	e000ed00 	.word	0xe000ed00
 800c3dc:	410fc271 	.word	0x410fc271
 800c3e0:	410fc270 	.word	0x410fc270
 800c3e4:	e000e400 	.word	0xe000e400
 800c3e8:	20001614 	.word	0x20001614
 800c3ec:	20001618 	.word	0x20001618
 800c3f0:	e000ed20 	.word	0xe000ed20
 800c3f4:	20000048 	.word	0x20000048
 800c3f8:	e000ef34 	.word	0xe000ef34

0800c3fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	607b      	str	r3, [r7, #4]
}
 800c414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c416:	4b10      	ldr	r3, [pc, #64]	@ (800c458 <vPortEnterCritical+0x5c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3301      	adds	r3, #1
 800c41c:	4a0e      	ldr	r2, [pc, #56]	@ (800c458 <vPortEnterCritical+0x5c>)
 800c41e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c420:	4b0d      	ldr	r3, [pc, #52]	@ (800c458 <vPortEnterCritical+0x5c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d110      	bne.n	800c44a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c428:	4b0c      	ldr	r3, [pc, #48]	@ (800c45c <vPortEnterCritical+0x60>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00b      	beq.n	800c44a <vPortEnterCritical+0x4e>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	603b      	str	r3, [r7, #0]
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	e7fd      	b.n	800c446 <vPortEnterCritical+0x4a>
	}
}
 800c44a:	bf00      	nop
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	20000048 	.word	0x20000048
 800c45c:	e000ed04 	.word	0xe000ed04

0800c460 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c466:	4b12      	ldr	r3, [pc, #72]	@ (800c4b0 <vPortExitCritical+0x50>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10b      	bne.n	800c486 <vPortExitCritical+0x26>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	607b      	str	r3, [r7, #4]
}
 800c480:	bf00      	nop
 800c482:	bf00      	nop
 800c484:	e7fd      	b.n	800c482 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c486:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b0 <vPortExitCritical+0x50>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	4a08      	ldr	r2, [pc, #32]	@ (800c4b0 <vPortExitCritical+0x50>)
 800c48e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c490:	4b07      	ldr	r3, [pc, #28]	@ (800c4b0 <vPortExitCritical+0x50>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d105      	bne.n	800c4a4 <vPortExitCritical+0x44>
 800c498:	2300      	movs	r3, #0
 800c49a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	f383 8811 	msr	BASEPRI, r3
}
 800c4a2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	20000048 	.word	0x20000048
	...

0800c4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4c0:	f3ef 8009 	mrs	r0, PSP
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	4b15      	ldr	r3, [pc, #84]	@ (800c520 <pxCurrentTCBConst>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	f01e 0f10 	tst.w	lr, #16
 800c4d0:	bf08      	it	eq
 800c4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4da:	6010      	str	r0, [r2, #0]
 800c4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4e4:	f380 8811 	msr	BASEPRI, r0
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f7fe fed6 	bl	800b2a0 <vTaskSwitchContext>
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	f380 8811 	msr	BASEPRI, r0
 800c4fc:	bc09      	pop	{r0, r3}
 800c4fe:	6819      	ldr	r1, [r3, #0]
 800c500:	6808      	ldr	r0, [r1, #0]
 800c502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c506:	f01e 0f10 	tst.w	lr, #16
 800c50a:	bf08      	it	eq
 800c50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c510:	f380 8809 	msr	PSP, r0
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	f3af 8000 	nop.w

0800c520 <pxCurrentTCBConst>:
 800c520:	20000fe8 	.word	0x20000fe8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c524:	bf00      	nop
 800c526:	bf00      	nop

0800c528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	607b      	str	r3, [r7, #4]
}
 800c540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c542:	f7fe fdd3 	bl	800b0ec <xTaskIncrementTick>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c54c:	4b06      	ldr	r3, [pc, #24]	@ (800c568 <xPortSysTickHandler+0x40>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	2300      	movs	r3, #0
 800c556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	f383 8811 	msr	BASEPRI, r3
}
 800c55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c570:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c576:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a4 <vPortSetupTimerInterrupt+0x38>)
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <vPortSetupTimerInterrupt+0x3c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a0a      	ldr	r2, [pc, #40]	@ (800c5ac <vPortSetupTimerInterrupt+0x40>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	099b      	lsrs	r3, r3, #6
 800c588:	4a09      	ldr	r2, [pc, #36]	@ (800c5b0 <vPortSetupTimerInterrupt+0x44>)
 800c58a:	3b01      	subs	r3, #1
 800c58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c58e:	4b04      	ldr	r3, [pc, #16]	@ (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c590:	2207      	movs	r2, #7
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	bf00      	nop
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	e000e010 	.word	0xe000e010
 800c5a4:	e000e018 	.word	0xe000e018
 800c5a8:	2000003c 	.word	0x2000003c
 800c5ac:	10624dd3 	.word	0x10624dd3
 800c5b0:	e000e014 	.word	0xe000e014

0800c5b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5c4 <vPortEnableVFP+0x10>
 800c5b8:	6801      	ldr	r1, [r0, #0]
 800c5ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5be:	6001      	str	r1, [r0, #0]
 800c5c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5c2:	bf00      	nop
 800c5c4:	e000ed88 	.word	0xe000ed88

0800c5c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5ce:	f3ef 8305 	mrs	r3, IPSR
 800c5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	d915      	bls.n	800c606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5da:	4a18      	ldr	r2, [pc, #96]	@ (800c63c <vPortValidateInterruptPriority+0x74>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5e4:	4b16      	ldr	r3, [pc, #88]	@ (800c640 <vPortValidateInterruptPriority+0x78>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	7afa      	ldrb	r2, [r7, #11]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d20b      	bcs.n	800c606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	607b      	str	r3, [r7, #4]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c606:	4b0f      	ldr	r3, [pc, #60]	@ (800c644 <vPortValidateInterruptPriority+0x7c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c60e:	4b0e      	ldr	r3, [pc, #56]	@ (800c648 <vPortValidateInterruptPriority+0x80>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	429a      	cmp	r2, r3
 800c614:	d90b      	bls.n	800c62e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	603b      	str	r3, [r7, #0]
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	e7fd      	b.n	800c62a <vPortValidateInterruptPriority+0x62>
	}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	e000e3f0 	.word	0xe000e3f0
 800c640:	20001614 	.word	0x20001614
 800c644:	e000ed0c 	.word	0xe000ed0c
 800c648:	20001618 	.word	0x20001618

0800c64c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08a      	sub	sp, #40	@ 0x28
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c658:	f7fe fc74 	bl	800af44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c65c:	4b66      	ldr	r3, [pc, #408]	@ (800c7f8 <pvPortMalloc+0x1ac>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c664:	f000 f952 	bl	800c90c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c668:	4b64      	ldr	r3, [pc, #400]	@ (800c7fc <pvPortMalloc+0x1b0>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4013      	ands	r3, r2
 800c670:	2b00      	cmp	r3, #0
 800c672:	f040 8095 	bne.w	800c7a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d01e      	beq.n	800c6ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c67c:	2208      	movs	r2, #8
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4413      	add	r3, r2
 800c682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d015      	beq.n	800c6ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f023 0307 	bic.w	r3, r3, #7
 800c694:	3308      	adds	r3, #8
 800c696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <pvPortMalloc+0x6e>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	617b      	str	r3, [r7, #20]
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
 800c6b8:	e7fd      	b.n	800c6b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d06f      	beq.n	800c7a0 <pvPortMalloc+0x154>
 800c6c0:	4b4f      	ldr	r3, [pc, #316]	@ (800c800 <pvPortMalloc+0x1b4>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d86a      	bhi.n	800c7a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6ca:	4b4e      	ldr	r3, [pc, #312]	@ (800c804 <pvPortMalloc+0x1b8>)
 800c6cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6ce:	4b4d      	ldr	r3, [pc, #308]	@ (800c804 <pvPortMalloc+0x1b8>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6d4:	e004      	b.n	800c6e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d903      	bls.n	800c6f2 <pvPortMalloc+0xa6>
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1f1      	bne.n	800c6d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6f2:	4b41      	ldr	r3, [pc, #260]	@ (800c7f8 <pvPortMalloc+0x1ac>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d051      	beq.n	800c7a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2208      	movs	r2, #8
 800c702:	4413      	add	r3, r2
 800c704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	1ad2      	subs	r2, r2, r3
 800c716:	2308      	movs	r3, #8
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d920      	bls.n	800c760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4413      	add	r3, r2
 800c724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00b      	beq.n	800c748 <pvPortMalloc+0xfc>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	e7fd      	b.n	800c744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c75a:	69b8      	ldr	r0, [r7, #24]
 800c75c:	f000 f938 	bl	800c9d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c760:	4b27      	ldr	r3, [pc, #156]	@ (800c800 <pvPortMalloc+0x1b4>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	4a25      	ldr	r2, [pc, #148]	@ (800c800 <pvPortMalloc+0x1b4>)
 800c76c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c76e:	4b24      	ldr	r3, [pc, #144]	@ (800c800 <pvPortMalloc+0x1b4>)
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b25      	ldr	r3, [pc, #148]	@ (800c808 <pvPortMalloc+0x1bc>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d203      	bcs.n	800c782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c77a:	4b21      	ldr	r3, [pc, #132]	@ (800c800 <pvPortMalloc+0x1b4>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a22      	ldr	r2, [pc, #136]	@ (800c808 <pvPortMalloc+0x1bc>)
 800c780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	4b1d      	ldr	r3, [pc, #116]	@ (800c7fc <pvPortMalloc+0x1b0>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c796:	4b1d      	ldr	r3, [pc, #116]	@ (800c80c <pvPortMalloc+0x1c0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	4a1b      	ldr	r2, [pc, #108]	@ (800c80c <pvPortMalloc+0x1c0>)
 800c79e:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800c7a0:	4b1b      	ldr	r3, [pc, #108]	@ (800c810 <pvPortMalloc+0x1c4>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 0301 	and.w	r3, r3, #1
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00c      	beq.n	800c7c6 <pvPortMalloc+0x17a>
 800c7ac:	4b19      	ldr	r3, [pc, #100]	@ (800c814 <pvPortMalloc+0x1c8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d007      	beq.n	800c7c6 <pvPortMalloc+0x17a>
 800c7b6:	f7f5 f9e3 	bl	8001b80 <xTraceKernelPortGetSystemHeapHandle>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	69f9      	ldr	r1, [r7, #28]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7f5 f957 	bl	8001a74 <xTraceHeapAlloc>
	}
	( void ) xTaskResumeAll();
 800c7c6:	f7fe fbcb 	bl	800af60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	f003 0307 	and.w	r3, r3, #7
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <pvPortMalloc+0x1a0>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	60fb      	str	r3, [r7, #12]
}
 800c7e6:	bf00      	nop
 800c7e8:	bf00      	nop
 800c7ea:	e7fd      	b.n	800c7e8 <pvPortMalloc+0x19c>
	return pvReturn;
 800c7ec:	69fb      	ldr	r3, [r7, #28]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3728      	adds	r7, #40	@ 0x28
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20002d94 	.word	0x20002d94
 800c7fc:	20002da8 	.word	0x20002da8
 800c800:	20002d98 	.word	0x20002d98
 800c804:	20002d8c 	.word	0x20002d8c
 800c808:	20002d9c 	.word	0x20002d9c
 800c80c:	20002da0 	.word	0x20002da0
 800c810:	2000024c 	.word	0x2000024c
 800c814:	20000248 	.word	0x20000248

0800c818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d062      	beq.n	800c8f0 <vPortFree+0xd8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c82a:	2308      	movs	r3, #8
 800c82c:	425b      	negs	r3, r3
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	4413      	add	r3, r2
 800c832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	4b2e      	ldr	r3, [pc, #184]	@ (800c8f8 <vPortFree+0xe0>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4013      	ands	r3, r2
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10b      	bne.n	800c85e <vPortFree+0x46>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	60fb      	str	r3, [r7, #12]
}
 800c858:	bf00      	nop
 800c85a:	bf00      	nop
 800c85c:	e7fd      	b.n	800c85a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00b      	beq.n	800c87e <vPortFree+0x66>
	__asm volatile
 800c866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	60bb      	str	r3, [r7, #8]
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	4b1d      	ldr	r3, [pc, #116]	@ (800c8f8 <vPortFree+0xe0>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4013      	ands	r3, r2
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d031      	beq.n	800c8f0 <vPortFree+0xd8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d12d      	bne.n	800c8f0 <vPortFree+0xd8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	4b17      	ldr	r3, [pc, #92]	@ (800c8f8 <vPortFree+0xe0>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	43db      	mvns	r3, r3
 800c89e:	401a      	ands	r2, r3
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8a4:	f7fe fb4e 	bl	800af44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	4b13      	ldr	r3, [pc, #76]	@ (800c8fc <vPortFree+0xe4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	4a12      	ldr	r2, [pc, #72]	@ (800c8fc <vPortFree+0xe4>)
 800c8b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800c8b6:	4b12      	ldr	r3, [pc, #72]	@ (800c900 <vPortFree+0xe8>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00c      	beq.n	800c8dc <vPortFree+0xc4>
 800c8c2:	4b10      	ldr	r3, [pc, #64]	@ (800c904 <vPortFree+0xec>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d007      	beq.n	800c8dc <vPortFree+0xc4>
 800c8cc:	f7f5 f958 	bl	8001b80 <xTraceKernelPortGetSystemHeapHandle>
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	6879      	ldr	r1, [r7, #4]
 800c8d8:	f7f5 f900 	bl	8001adc <xTraceHeapFree>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8dc:	6938      	ldr	r0, [r7, #16]
 800c8de:	f000 f877 	bl	800c9d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c8e2:	4b09      	ldr	r3, [pc, #36]	@ (800c908 <vPortFree+0xf0>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	4a07      	ldr	r2, [pc, #28]	@ (800c908 <vPortFree+0xf0>)
 800c8ea:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c8ec:	f7fe fb38 	bl	800af60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8f0:	bf00      	nop
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	20002da8 	.word	0x20002da8
 800c8fc:	20002d98 	.word	0x20002d98
 800c900:	2000024c 	.word	0x2000024c
 800c904:	20000248 	.word	0x20000248
 800c908:	20002da4 	.word	0x20002da4

0800c90c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c912:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c916:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c918:	4b27      	ldr	r3, [pc, #156]	@ (800c9b8 <prvHeapInit+0xac>)
 800c91a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f003 0307 	and.w	r3, r3, #7
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00c      	beq.n	800c940 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3307      	adds	r3, #7
 800c92a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f023 0307 	bic.w	r3, r3, #7
 800c932:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	4a1f      	ldr	r2, [pc, #124]	@ (800c9b8 <prvHeapInit+0xac>)
 800c93c:	4413      	add	r3, r2
 800c93e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c944:	4a1d      	ldr	r2, [pc, #116]	@ (800c9bc <prvHeapInit+0xb0>)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c94a:	4b1c      	ldr	r3, [pc, #112]	@ (800c9bc <prvHeapInit+0xb0>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	4413      	add	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c958:	2208      	movs	r2, #8
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	1a9b      	subs	r3, r3, r2
 800c95e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f023 0307 	bic.w	r3, r3, #7
 800c966:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	4a15      	ldr	r2, [pc, #84]	@ (800c9c0 <prvHeapInit+0xb4>)
 800c96c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c96e:	4b14      	ldr	r3, [pc, #80]	@ (800c9c0 <prvHeapInit+0xb4>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2200      	movs	r2, #0
 800c974:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c976:	4b12      	ldr	r3, [pc, #72]	@ (800c9c0 <prvHeapInit+0xb4>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	1ad2      	subs	r2, r2, r3
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c98c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c0 <prvHeapInit+0xb4>)
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	4a0a      	ldr	r2, [pc, #40]	@ (800c9c4 <prvHeapInit+0xb8>)
 800c99a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	4a09      	ldr	r2, [pc, #36]	@ (800c9c8 <prvHeapInit+0xbc>)
 800c9a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9a4:	4b09      	ldr	r3, [pc, #36]	@ (800c9cc <prvHeapInit+0xc0>)
 800c9a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c9aa:	601a      	str	r2, [r3, #0]
}
 800c9ac:	bf00      	nop
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr
 800c9b8:	2000161c 	.word	0x2000161c
 800c9bc:	20002d8c 	.word	0x20002d8c
 800c9c0:	20002d94 	.word	0x20002d94
 800c9c4:	20002d9c 	.word	0x20002d9c
 800c9c8:	20002d98 	.word	0x20002d98
 800c9cc:	20002da8 	.word	0x20002da8

0800c9d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9d8:	4b28      	ldr	r3, [pc, #160]	@ (800ca7c <prvInsertBlockIntoFreeList+0xac>)
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	e002      	b.n	800c9e4 <prvInsertBlockIntoFreeList+0x14>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d8f7      	bhi.n	800c9de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	68ba      	ldr	r2, [r7, #8]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d108      	bne.n	800ca12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	441a      	add	r2, r3
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	441a      	add	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d118      	bne.n	800ca58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	4b15      	ldr	r3, [pc, #84]	@ (800ca80 <prvInsertBlockIntoFreeList+0xb0>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d00d      	beq.n	800ca4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	441a      	add	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	e008      	b.n	800ca60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ca80 <prvInsertBlockIntoFreeList+0xb0>)
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	601a      	str	r2, [r3, #0]
 800ca56:	e003      	b.n	800ca60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d002      	beq.n	800ca6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca6e:	bf00      	nop
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	20002d8c 	.word	0x20002d8c
 800ca80:	20002d94 	.word	0x20002d94

0800ca84 <__cvt>:
 800ca84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca88:	ec57 6b10 	vmov	r6, r7, d0
 800ca8c:	2f00      	cmp	r7, #0
 800ca8e:	460c      	mov	r4, r1
 800ca90:	4619      	mov	r1, r3
 800ca92:	463b      	mov	r3, r7
 800ca94:	bfbb      	ittet	lt
 800ca96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ca9a:	461f      	movlt	r7, r3
 800ca9c:	2300      	movge	r3, #0
 800ca9e:	232d      	movlt	r3, #45	@ 0x2d
 800caa0:	700b      	strb	r3, [r1, #0]
 800caa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800caa4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800caa8:	4691      	mov	r9, r2
 800caaa:	f023 0820 	bic.w	r8, r3, #32
 800caae:	bfbc      	itt	lt
 800cab0:	4632      	movlt	r2, r6
 800cab2:	4616      	movlt	r6, r2
 800cab4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cab8:	d005      	beq.n	800cac6 <__cvt+0x42>
 800caba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cabe:	d100      	bne.n	800cac2 <__cvt+0x3e>
 800cac0:	3401      	adds	r4, #1
 800cac2:	2102      	movs	r1, #2
 800cac4:	e000      	b.n	800cac8 <__cvt+0x44>
 800cac6:	2103      	movs	r1, #3
 800cac8:	ab03      	add	r3, sp, #12
 800caca:	9301      	str	r3, [sp, #4]
 800cacc:	ab02      	add	r3, sp, #8
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	ec47 6b10 	vmov	d0, r6, r7
 800cad4:	4653      	mov	r3, sl
 800cad6:	4622      	mov	r2, r4
 800cad8:	f000 fe46 	bl	800d768 <_dtoa_r>
 800cadc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cae0:	4605      	mov	r5, r0
 800cae2:	d119      	bne.n	800cb18 <__cvt+0x94>
 800cae4:	f019 0f01 	tst.w	r9, #1
 800cae8:	d00e      	beq.n	800cb08 <__cvt+0x84>
 800caea:	eb00 0904 	add.w	r9, r0, r4
 800caee:	2200      	movs	r2, #0
 800caf0:	2300      	movs	r3, #0
 800caf2:	4630      	mov	r0, r6
 800caf4:	4639      	mov	r1, r7
 800caf6:	f7f4 f80f 	bl	8000b18 <__aeabi_dcmpeq>
 800cafa:	b108      	cbz	r0, 800cb00 <__cvt+0x7c>
 800cafc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb00:	2230      	movs	r2, #48	@ 0x30
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	454b      	cmp	r3, r9
 800cb06:	d31e      	bcc.n	800cb46 <__cvt+0xc2>
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb0c:	1b5b      	subs	r3, r3, r5
 800cb0e:	4628      	mov	r0, r5
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	b004      	add	sp, #16
 800cb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb1c:	eb00 0904 	add.w	r9, r0, r4
 800cb20:	d1e5      	bne.n	800caee <__cvt+0x6a>
 800cb22:	7803      	ldrb	r3, [r0, #0]
 800cb24:	2b30      	cmp	r3, #48	@ 0x30
 800cb26:	d10a      	bne.n	800cb3e <__cvt+0xba>
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	4639      	mov	r1, r7
 800cb30:	f7f3 fff2 	bl	8000b18 <__aeabi_dcmpeq>
 800cb34:	b918      	cbnz	r0, 800cb3e <__cvt+0xba>
 800cb36:	f1c4 0401 	rsb	r4, r4, #1
 800cb3a:	f8ca 4000 	str.w	r4, [sl]
 800cb3e:	f8da 3000 	ldr.w	r3, [sl]
 800cb42:	4499      	add	r9, r3
 800cb44:	e7d3      	b.n	800caee <__cvt+0x6a>
 800cb46:	1c59      	adds	r1, r3, #1
 800cb48:	9103      	str	r1, [sp, #12]
 800cb4a:	701a      	strb	r2, [r3, #0]
 800cb4c:	e7d9      	b.n	800cb02 <__cvt+0x7e>

0800cb4e <__exponent>:
 800cb4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb50:	2900      	cmp	r1, #0
 800cb52:	bfba      	itte	lt
 800cb54:	4249      	neglt	r1, r1
 800cb56:	232d      	movlt	r3, #45	@ 0x2d
 800cb58:	232b      	movge	r3, #43	@ 0x2b
 800cb5a:	2909      	cmp	r1, #9
 800cb5c:	7002      	strb	r2, [r0, #0]
 800cb5e:	7043      	strb	r3, [r0, #1]
 800cb60:	dd29      	ble.n	800cbb6 <__exponent+0x68>
 800cb62:	f10d 0307 	add.w	r3, sp, #7
 800cb66:	461d      	mov	r5, r3
 800cb68:	270a      	movs	r7, #10
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	fbb1 f6f7 	udiv	r6, r1, r7
 800cb70:	fb07 1416 	mls	r4, r7, r6, r1
 800cb74:	3430      	adds	r4, #48	@ 0x30
 800cb76:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	2c63      	cmp	r4, #99	@ 0x63
 800cb7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb82:	4631      	mov	r1, r6
 800cb84:	dcf1      	bgt.n	800cb6a <__exponent+0x1c>
 800cb86:	3130      	adds	r1, #48	@ 0x30
 800cb88:	1e94      	subs	r4, r2, #2
 800cb8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb8e:	1c41      	adds	r1, r0, #1
 800cb90:	4623      	mov	r3, r4
 800cb92:	42ab      	cmp	r3, r5
 800cb94:	d30a      	bcc.n	800cbac <__exponent+0x5e>
 800cb96:	f10d 0309 	add.w	r3, sp, #9
 800cb9a:	1a9b      	subs	r3, r3, r2
 800cb9c:	42ac      	cmp	r4, r5
 800cb9e:	bf88      	it	hi
 800cba0:	2300      	movhi	r3, #0
 800cba2:	3302      	adds	r3, #2
 800cba4:	4403      	add	r3, r0
 800cba6:	1a18      	subs	r0, r3, r0
 800cba8:	b003      	add	sp, #12
 800cbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cbb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cbb4:	e7ed      	b.n	800cb92 <__exponent+0x44>
 800cbb6:	2330      	movs	r3, #48	@ 0x30
 800cbb8:	3130      	adds	r1, #48	@ 0x30
 800cbba:	7083      	strb	r3, [r0, #2]
 800cbbc:	70c1      	strb	r1, [r0, #3]
 800cbbe:	1d03      	adds	r3, r0, #4
 800cbc0:	e7f1      	b.n	800cba6 <__exponent+0x58>
	...

0800cbc4 <_printf_float>:
 800cbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc8:	b08d      	sub	sp, #52	@ 0x34
 800cbca:	460c      	mov	r4, r1
 800cbcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cbd0:	4616      	mov	r6, r2
 800cbd2:	461f      	mov	r7, r3
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	f000 fcb9 	bl	800d54c <_localeconv_r>
 800cbda:	6803      	ldr	r3, [r0, #0]
 800cbdc:	9304      	str	r3, [sp, #16]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f3 fb6e 	bl	80002c0 <strlen>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbec:	9005      	str	r0, [sp, #20]
 800cbee:	3307      	adds	r3, #7
 800cbf0:	f023 0307 	bic.w	r3, r3, #7
 800cbf4:	f103 0208 	add.w	r2, r3, #8
 800cbf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cbfc:	f8d4 b000 	ldr.w	fp, [r4]
 800cc00:	f8c8 2000 	str.w	r2, [r8]
 800cc04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc0c:	9307      	str	r3, [sp, #28]
 800cc0e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc1a:	4b9c      	ldr	r3, [pc, #624]	@ (800ce8c <_printf_float+0x2c8>)
 800cc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc20:	f7f3 ffac 	bl	8000b7c <__aeabi_dcmpun>
 800cc24:	bb70      	cbnz	r0, 800cc84 <_printf_float+0xc0>
 800cc26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc2a:	4b98      	ldr	r3, [pc, #608]	@ (800ce8c <_printf_float+0x2c8>)
 800cc2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc30:	f7f3 ff86 	bl	8000b40 <__aeabi_dcmple>
 800cc34:	bb30      	cbnz	r0, 800cc84 <_printf_float+0xc0>
 800cc36:	2200      	movs	r2, #0
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	4649      	mov	r1, r9
 800cc3e:	f7f3 ff75 	bl	8000b2c <__aeabi_dcmplt>
 800cc42:	b110      	cbz	r0, 800cc4a <_printf_float+0x86>
 800cc44:	232d      	movs	r3, #45	@ 0x2d
 800cc46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc4a:	4a91      	ldr	r2, [pc, #580]	@ (800ce90 <_printf_float+0x2cc>)
 800cc4c:	4b91      	ldr	r3, [pc, #580]	@ (800ce94 <_printf_float+0x2d0>)
 800cc4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cc52:	bf8c      	ite	hi
 800cc54:	4690      	movhi	r8, r2
 800cc56:	4698      	movls	r8, r3
 800cc58:	2303      	movs	r3, #3
 800cc5a:	6123      	str	r3, [r4, #16]
 800cc5c:	f02b 0304 	bic.w	r3, fp, #4
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	f04f 0900 	mov.w	r9, #0
 800cc66:	9700      	str	r7, [sp, #0]
 800cc68:	4633      	mov	r3, r6
 800cc6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f000 f9d2 	bl	800d018 <_printf_common>
 800cc74:	3001      	adds	r0, #1
 800cc76:	f040 808d 	bne.w	800cd94 <_printf_float+0x1d0>
 800cc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc7e:	b00d      	add	sp, #52	@ 0x34
 800cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc84:	4642      	mov	r2, r8
 800cc86:	464b      	mov	r3, r9
 800cc88:	4640      	mov	r0, r8
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	f7f3 ff76 	bl	8000b7c <__aeabi_dcmpun>
 800cc90:	b140      	cbz	r0, 800cca4 <_printf_float+0xe0>
 800cc92:	464b      	mov	r3, r9
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	bfbc      	itt	lt
 800cc98:	232d      	movlt	r3, #45	@ 0x2d
 800cc9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cc9e:	4a7e      	ldr	r2, [pc, #504]	@ (800ce98 <_printf_float+0x2d4>)
 800cca0:	4b7e      	ldr	r3, [pc, #504]	@ (800ce9c <_printf_float+0x2d8>)
 800cca2:	e7d4      	b.n	800cc4e <_printf_float+0x8a>
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ccaa:	9206      	str	r2, [sp, #24]
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	d13b      	bne.n	800cd28 <_printf_float+0x164>
 800ccb0:	2306      	movs	r3, #6
 800ccb2:	6063      	str	r3, [r4, #4]
 800ccb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ccb8:	2300      	movs	r3, #0
 800ccba:	6022      	str	r2, [r4, #0]
 800ccbc:	9303      	str	r3, [sp, #12]
 800ccbe:	ab0a      	add	r3, sp, #40	@ 0x28
 800ccc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ccc4:	ab09      	add	r3, sp, #36	@ 0x24
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	6861      	ldr	r1, [r4, #4]
 800ccca:	ec49 8b10 	vmov	d0, r8, r9
 800ccce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f7ff fed6 	bl	800ca84 <__cvt>
 800ccd8:	9b06      	ldr	r3, [sp, #24]
 800ccda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccdc:	2b47      	cmp	r3, #71	@ 0x47
 800ccde:	4680      	mov	r8, r0
 800cce0:	d129      	bne.n	800cd36 <_printf_float+0x172>
 800cce2:	1cc8      	adds	r0, r1, #3
 800cce4:	db02      	blt.n	800ccec <_printf_float+0x128>
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	4299      	cmp	r1, r3
 800ccea:	dd41      	ble.n	800cd70 <_printf_float+0x1ac>
 800ccec:	f1aa 0a02 	sub.w	sl, sl, #2
 800ccf0:	fa5f fa8a 	uxtb.w	sl, sl
 800ccf4:	3901      	subs	r1, #1
 800ccf6:	4652      	mov	r2, sl
 800ccf8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ccfc:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccfe:	f7ff ff26 	bl	800cb4e <__exponent>
 800cd02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd04:	1813      	adds	r3, r2, r0
 800cd06:	2a01      	cmp	r2, #1
 800cd08:	4681      	mov	r9, r0
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	dc02      	bgt.n	800cd14 <_printf_float+0x150>
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	07d2      	lsls	r2, r2, #31
 800cd12:	d501      	bpl.n	800cd18 <_printf_float+0x154>
 800cd14:	3301      	adds	r3, #1
 800cd16:	6123      	str	r3, [r4, #16]
 800cd18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d0a2      	beq.n	800cc66 <_printf_float+0xa2>
 800cd20:	232d      	movs	r3, #45	@ 0x2d
 800cd22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd26:	e79e      	b.n	800cc66 <_printf_float+0xa2>
 800cd28:	9a06      	ldr	r2, [sp, #24]
 800cd2a:	2a47      	cmp	r2, #71	@ 0x47
 800cd2c:	d1c2      	bne.n	800ccb4 <_printf_float+0xf0>
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1c0      	bne.n	800ccb4 <_printf_float+0xf0>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e7bd      	b.n	800ccb2 <_printf_float+0xee>
 800cd36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd3a:	d9db      	bls.n	800ccf4 <_printf_float+0x130>
 800cd3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cd40:	d118      	bne.n	800cd74 <_printf_float+0x1b0>
 800cd42:	2900      	cmp	r1, #0
 800cd44:	6863      	ldr	r3, [r4, #4]
 800cd46:	dd0b      	ble.n	800cd60 <_printf_float+0x19c>
 800cd48:	6121      	str	r1, [r4, #16]
 800cd4a:	b913      	cbnz	r3, 800cd52 <_printf_float+0x18e>
 800cd4c:	6822      	ldr	r2, [r4, #0]
 800cd4e:	07d0      	lsls	r0, r2, #31
 800cd50:	d502      	bpl.n	800cd58 <_printf_float+0x194>
 800cd52:	3301      	adds	r3, #1
 800cd54:	440b      	add	r3, r1
 800cd56:	6123      	str	r3, [r4, #16]
 800cd58:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cd5a:	f04f 0900 	mov.w	r9, #0
 800cd5e:	e7db      	b.n	800cd18 <_printf_float+0x154>
 800cd60:	b913      	cbnz	r3, 800cd68 <_printf_float+0x1a4>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	07d2      	lsls	r2, r2, #31
 800cd66:	d501      	bpl.n	800cd6c <_printf_float+0x1a8>
 800cd68:	3302      	adds	r3, #2
 800cd6a:	e7f4      	b.n	800cd56 <_printf_float+0x192>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e7f2      	b.n	800cd56 <_printf_float+0x192>
 800cd70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cd74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd76:	4299      	cmp	r1, r3
 800cd78:	db05      	blt.n	800cd86 <_printf_float+0x1c2>
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	6121      	str	r1, [r4, #16]
 800cd7e:	07d8      	lsls	r0, r3, #31
 800cd80:	d5ea      	bpl.n	800cd58 <_printf_float+0x194>
 800cd82:	1c4b      	adds	r3, r1, #1
 800cd84:	e7e7      	b.n	800cd56 <_printf_float+0x192>
 800cd86:	2900      	cmp	r1, #0
 800cd88:	bfd4      	ite	le
 800cd8a:	f1c1 0202 	rsble	r2, r1, #2
 800cd8e:	2201      	movgt	r2, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	e7e0      	b.n	800cd56 <_printf_float+0x192>
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	055a      	lsls	r2, r3, #21
 800cd98:	d407      	bmi.n	800cdaa <_printf_float+0x1e6>
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	4642      	mov	r2, r8
 800cd9e:	4631      	mov	r1, r6
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b8      	blx	r7
 800cda4:	3001      	adds	r0, #1
 800cda6:	d12b      	bne.n	800ce00 <_printf_float+0x23c>
 800cda8:	e767      	b.n	800cc7a <_printf_float+0xb6>
 800cdaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdae:	f240 80dd 	bls.w	800cf6c <_printf_float+0x3a8>
 800cdb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f7f3 fead 	bl	8000b18 <__aeabi_dcmpeq>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d033      	beq.n	800ce2a <_printf_float+0x266>
 800cdc2:	4a37      	ldr	r2, [pc, #220]	@ (800cea0 <_printf_float+0x2dc>)
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f af54 	beq.w	800cc7a <_printf_float+0xb6>
 800cdd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cdd6:	4543      	cmp	r3, r8
 800cdd8:	db02      	blt.n	800cde0 <_printf_float+0x21c>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	07d8      	lsls	r0, r3, #31
 800cdde:	d50f      	bpl.n	800ce00 <_printf_float+0x23c>
 800cde0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	f43f af45 	beq.w	800cc7a <_printf_float+0xb6>
 800cdf0:	f04f 0900 	mov.w	r9, #0
 800cdf4:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdf8:	f104 0a1a 	add.w	sl, r4, #26
 800cdfc:	45c8      	cmp	r8, r9
 800cdfe:	dc09      	bgt.n	800ce14 <_printf_float+0x250>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	079b      	lsls	r3, r3, #30
 800ce04:	f100 8103 	bmi.w	800d00e <_printf_float+0x44a>
 800ce08:	68e0      	ldr	r0, [r4, #12]
 800ce0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce0c:	4298      	cmp	r0, r3
 800ce0e:	bfb8      	it	lt
 800ce10:	4618      	movlt	r0, r3
 800ce12:	e734      	b.n	800cc7e <_printf_float+0xba>
 800ce14:	2301      	movs	r3, #1
 800ce16:	4652      	mov	r2, sl
 800ce18:	4631      	mov	r1, r6
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	47b8      	blx	r7
 800ce1e:	3001      	adds	r0, #1
 800ce20:	f43f af2b 	beq.w	800cc7a <_printf_float+0xb6>
 800ce24:	f109 0901 	add.w	r9, r9, #1
 800ce28:	e7e8      	b.n	800cdfc <_printf_float+0x238>
 800ce2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dc39      	bgt.n	800cea4 <_printf_float+0x2e0>
 800ce30:	4a1b      	ldr	r2, [pc, #108]	@ (800cea0 <_printf_float+0x2dc>)
 800ce32:	2301      	movs	r3, #1
 800ce34:	4631      	mov	r1, r6
 800ce36:	4628      	mov	r0, r5
 800ce38:	47b8      	blx	r7
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	f43f af1d 	beq.w	800cc7a <_printf_float+0xb6>
 800ce40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ce44:	ea59 0303 	orrs.w	r3, r9, r3
 800ce48:	d102      	bne.n	800ce50 <_printf_float+0x28c>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	07d9      	lsls	r1, r3, #31
 800ce4e:	d5d7      	bpl.n	800ce00 <_printf_float+0x23c>
 800ce50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce54:	4631      	mov	r1, r6
 800ce56:	4628      	mov	r0, r5
 800ce58:	47b8      	blx	r7
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	f43f af0d 	beq.w	800cc7a <_printf_float+0xb6>
 800ce60:	f04f 0a00 	mov.w	sl, #0
 800ce64:	f104 0b1a 	add.w	fp, r4, #26
 800ce68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce6a:	425b      	negs	r3, r3
 800ce6c:	4553      	cmp	r3, sl
 800ce6e:	dc01      	bgt.n	800ce74 <_printf_float+0x2b0>
 800ce70:	464b      	mov	r3, r9
 800ce72:	e793      	b.n	800cd9c <_printf_float+0x1d8>
 800ce74:	2301      	movs	r3, #1
 800ce76:	465a      	mov	r2, fp
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	47b8      	blx	r7
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f43f aefb 	beq.w	800cc7a <_printf_float+0xb6>
 800ce84:	f10a 0a01 	add.w	sl, sl, #1
 800ce88:	e7ee      	b.n	800ce68 <_printf_float+0x2a4>
 800ce8a:	bf00      	nop
 800ce8c:	7fefffff 	.word	0x7fefffff
 800ce90:	080105d0 	.word	0x080105d0
 800ce94:	080105cc 	.word	0x080105cc
 800ce98:	080105d8 	.word	0x080105d8
 800ce9c:	080105d4 	.word	0x080105d4
 800cea0:	080105dc 	.word	0x080105dc
 800cea4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cea6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ceaa:	4553      	cmp	r3, sl
 800ceac:	bfa8      	it	ge
 800ceae:	4653      	movge	r3, sl
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	4699      	mov	r9, r3
 800ceb4:	dc36      	bgt.n	800cf24 <_printf_float+0x360>
 800ceb6:	f04f 0b00 	mov.w	fp, #0
 800ceba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cebe:	f104 021a 	add.w	r2, r4, #26
 800cec2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cec4:	9306      	str	r3, [sp, #24]
 800cec6:	eba3 0309 	sub.w	r3, r3, r9
 800ceca:	455b      	cmp	r3, fp
 800cecc:	dc31      	bgt.n	800cf32 <_printf_float+0x36e>
 800cece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced0:	459a      	cmp	sl, r3
 800ced2:	dc3a      	bgt.n	800cf4a <_printf_float+0x386>
 800ced4:	6823      	ldr	r3, [r4, #0]
 800ced6:	07da      	lsls	r2, r3, #31
 800ced8:	d437      	bmi.n	800cf4a <_printf_float+0x386>
 800ceda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cedc:	ebaa 0903 	sub.w	r9, sl, r3
 800cee0:	9b06      	ldr	r3, [sp, #24]
 800cee2:	ebaa 0303 	sub.w	r3, sl, r3
 800cee6:	4599      	cmp	r9, r3
 800cee8:	bfa8      	it	ge
 800ceea:	4699      	movge	r9, r3
 800ceec:	f1b9 0f00 	cmp.w	r9, #0
 800cef0:	dc33      	bgt.n	800cf5a <_printf_float+0x396>
 800cef2:	f04f 0800 	mov.w	r8, #0
 800cef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cefa:	f104 0b1a 	add.w	fp, r4, #26
 800cefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf00:	ebaa 0303 	sub.w	r3, sl, r3
 800cf04:	eba3 0309 	sub.w	r3, r3, r9
 800cf08:	4543      	cmp	r3, r8
 800cf0a:	f77f af79 	ble.w	800ce00 <_printf_float+0x23c>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	465a      	mov	r2, fp
 800cf12:	4631      	mov	r1, r6
 800cf14:	4628      	mov	r0, r5
 800cf16:	47b8      	blx	r7
 800cf18:	3001      	adds	r0, #1
 800cf1a:	f43f aeae 	beq.w	800cc7a <_printf_float+0xb6>
 800cf1e:	f108 0801 	add.w	r8, r8, #1
 800cf22:	e7ec      	b.n	800cefe <_printf_float+0x33a>
 800cf24:	4642      	mov	r2, r8
 800cf26:	4631      	mov	r1, r6
 800cf28:	4628      	mov	r0, r5
 800cf2a:	47b8      	blx	r7
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d1c2      	bne.n	800ceb6 <_printf_float+0x2f2>
 800cf30:	e6a3      	b.n	800cc7a <_printf_float+0xb6>
 800cf32:	2301      	movs	r3, #1
 800cf34:	4631      	mov	r1, r6
 800cf36:	4628      	mov	r0, r5
 800cf38:	9206      	str	r2, [sp, #24]
 800cf3a:	47b8      	blx	r7
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	f43f ae9c 	beq.w	800cc7a <_printf_float+0xb6>
 800cf42:	9a06      	ldr	r2, [sp, #24]
 800cf44:	f10b 0b01 	add.w	fp, fp, #1
 800cf48:	e7bb      	b.n	800cec2 <_printf_float+0x2fe>
 800cf4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf4e:	4631      	mov	r1, r6
 800cf50:	4628      	mov	r0, r5
 800cf52:	47b8      	blx	r7
 800cf54:	3001      	adds	r0, #1
 800cf56:	d1c0      	bne.n	800ceda <_printf_float+0x316>
 800cf58:	e68f      	b.n	800cc7a <_printf_float+0xb6>
 800cf5a:	9a06      	ldr	r2, [sp, #24]
 800cf5c:	464b      	mov	r3, r9
 800cf5e:	4442      	add	r2, r8
 800cf60:	4631      	mov	r1, r6
 800cf62:	4628      	mov	r0, r5
 800cf64:	47b8      	blx	r7
 800cf66:	3001      	adds	r0, #1
 800cf68:	d1c3      	bne.n	800cef2 <_printf_float+0x32e>
 800cf6a:	e686      	b.n	800cc7a <_printf_float+0xb6>
 800cf6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf70:	f1ba 0f01 	cmp.w	sl, #1
 800cf74:	dc01      	bgt.n	800cf7a <_printf_float+0x3b6>
 800cf76:	07db      	lsls	r3, r3, #31
 800cf78:	d536      	bpl.n	800cfe8 <_printf_float+0x424>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4642      	mov	r2, r8
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4628      	mov	r0, r5
 800cf82:	47b8      	blx	r7
 800cf84:	3001      	adds	r0, #1
 800cf86:	f43f ae78 	beq.w	800cc7a <_printf_float+0xb6>
 800cf8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf8e:	4631      	mov	r1, r6
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b8      	blx	r7
 800cf94:	3001      	adds	r0, #1
 800cf96:	f43f ae70 	beq.w	800cc7a <_printf_float+0xb6>
 800cf9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfa6:	f7f3 fdb7 	bl	8000b18 <__aeabi_dcmpeq>
 800cfaa:	b9c0      	cbnz	r0, 800cfde <_printf_float+0x41a>
 800cfac:	4653      	mov	r3, sl
 800cfae:	f108 0201 	add.w	r2, r8, #1
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	47b8      	blx	r7
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d10c      	bne.n	800cfd6 <_printf_float+0x412>
 800cfbc:	e65d      	b.n	800cc7a <_printf_float+0xb6>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	465a      	mov	r2, fp
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	47b8      	blx	r7
 800cfc8:	3001      	adds	r0, #1
 800cfca:	f43f ae56 	beq.w	800cc7a <_printf_float+0xb6>
 800cfce:	f108 0801 	add.w	r8, r8, #1
 800cfd2:	45d0      	cmp	r8, sl
 800cfd4:	dbf3      	blt.n	800cfbe <_printf_float+0x3fa>
 800cfd6:	464b      	mov	r3, r9
 800cfd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cfdc:	e6df      	b.n	800cd9e <_printf_float+0x1da>
 800cfde:	f04f 0800 	mov.w	r8, #0
 800cfe2:	f104 0b1a 	add.w	fp, r4, #26
 800cfe6:	e7f4      	b.n	800cfd2 <_printf_float+0x40e>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4642      	mov	r2, r8
 800cfec:	e7e1      	b.n	800cfb2 <_printf_float+0x3ee>
 800cfee:	2301      	movs	r3, #1
 800cff0:	464a      	mov	r2, r9
 800cff2:	4631      	mov	r1, r6
 800cff4:	4628      	mov	r0, r5
 800cff6:	47b8      	blx	r7
 800cff8:	3001      	adds	r0, #1
 800cffa:	f43f ae3e 	beq.w	800cc7a <_printf_float+0xb6>
 800cffe:	f108 0801 	add.w	r8, r8, #1
 800d002:	68e3      	ldr	r3, [r4, #12]
 800d004:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d006:	1a5b      	subs	r3, r3, r1
 800d008:	4543      	cmp	r3, r8
 800d00a:	dcf0      	bgt.n	800cfee <_printf_float+0x42a>
 800d00c:	e6fc      	b.n	800ce08 <_printf_float+0x244>
 800d00e:	f04f 0800 	mov.w	r8, #0
 800d012:	f104 0919 	add.w	r9, r4, #25
 800d016:	e7f4      	b.n	800d002 <_printf_float+0x43e>

0800d018 <_printf_common>:
 800d018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d01c:	4616      	mov	r6, r2
 800d01e:	4698      	mov	r8, r3
 800d020:	688a      	ldr	r2, [r1, #8]
 800d022:	690b      	ldr	r3, [r1, #16]
 800d024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d028:	4293      	cmp	r3, r2
 800d02a:	bfb8      	it	lt
 800d02c:	4613      	movlt	r3, r2
 800d02e:	6033      	str	r3, [r6, #0]
 800d030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d034:	4607      	mov	r7, r0
 800d036:	460c      	mov	r4, r1
 800d038:	b10a      	cbz	r2, 800d03e <_printf_common+0x26>
 800d03a:	3301      	adds	r3, #1
 800d03c:	6033      	str	r3, [r6, #0]
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	0699      	lsls	r1, r3, #26
 800d042:	bf42      	ittt	mi
 800d044:	6833      	ldrmi	r3, [r6, #0]
 800d046:	3302      	addmi	r3, #2
 800d048:	6033      	strmi	r3, [r6, #0]
 800d04a:	6825      	ldr	r5, [r4, #0]
 800d04c:	f015 0506 	ands.w	r5, r5, #6
 800d050:	d106      	bne.n	800d060 <_printf_common+0x48>
 800d052:	f104 0a19 	add.w	sl, r4, #25
 800d056:	68e3      	ldr	r3, [r4, #12]
 800d058:	6832      	ldr	r2, [r6, #0]
 800d05a:	1a9b      	subs	r3, r3, r2
 800d05c:	42ab      	cmp	r3, r5
 800d05e:	dc26      	bgt.n	800d0ae <_printf_common+0x96>
 800d060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d064:	6822      	ldr	r2, [r4, #0]
 800d066:	3b00      	subs	r3, #0
 800d068:	bf18      	it	ne
 800d06a:	2301      	movne	r3, #1
 800d06c:	0692      	lsls	r2, r2, #26
 800d06e:	d42b      	bmi.n	800d0c8 <_printf_common+0xb0>
 800d070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d074:	4641      	mov	r1, r8
 800d076:	4638      	mov	r0, r7
 800d078:	47c8      	blx	r9
 800d07a:	3001      	adds	r0, #1
 800d07c:	d01e      	beq.n	800d0bc <_printf_common+0xa4>
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	6922      	ldr	r2, [r4, #16]
 800d082:	f003 0306 	and.w	r3, r3, #6
 800d086:	2b04      	cmp	r3, #4
 800d088:	bf02      	ittt	eq
 800d08a:	68e5      	ldreq	r5, [r4, #12]
 800d08c:	6833      	ldreq	r3, [r6, #0]
 800d08e:	1aed      	subeq	r5, r5, r3
 800d090:	68a3      	ldr	r3, [r4, #8]
 800d092:	bf0c      	ite	eq
 800d094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d098:	2500      	movne	r5, #0
 800d09a:	4293      	cmp	r3, r2
 800d09c:	bfc4      	itt	gt
 800d09e:	1a9b      	subgt	r3, r3, r2
 800d0a0:	18ed      	addgt	r5, r5, r3
 800d0a2:	2600      	movs	r6, #0
 800d0a4:	341a      	adds	r4, #26
 800d0a6:	42b5      	cmp	r5, r6
 800d0a8:	d11a      	bne.n	800d0e0 <_printf_common+0xc8>
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	e008      	b.n	800d0c0 <_printf_common+0xa8>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	4652      	mov	r2, sl
 800d0b2:	4641      	mov	r1, r8
 800d0b4:	4638      	mov	r0, r7
 800d0b6:	47c8      	blx	r9
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d103      	bne.n	800d0c4 <_printf_common+0xac>
 800d0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c4:	3501      	adds	r5, #1
 800d0c6:	e7c6      	b.n	800d056 <_printf_common+0x3e>
 800d0c8:	18e1      	adds	r1, r4, r3
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	2030      	movs	r0, #48	@ 0x30
 800d0ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d0d2:	4422      	add	r2, r4
 800d0d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d0d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d0dc:	3302      	adds	r3, #2
 800d0de:	e7c7      	b.n	800d070 <_printf_common+0x58>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4641      	mov	r1, r8
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	47c8      	blx	r9
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	d0e6      	beq.n	800d0bc <_printf_common+0xa4>
 800d0ee:	3601      	adds	r6, #1
 800d0f0:	e7d9      	b.n	800d0a6 <_printf_common+0x8e>
	...

0800d0f4 <_printf_i>:
 800d0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f8:	7e0f      	ldrb	r7, [r1, #24]
 800d0fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0fc:	2f78      	cmp	r7, #120	@ 0x78
 800d0fe:	4691      	mov	r9, r2
 800d100:	4680      	mov	r8, r0
 800d102:	460c      	mov	r4, r1
 800d104:	469a      	mov	sl, r3
 800d106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d10a:	d807      	bhi.n	800d11c <_printf_i+0x28>
 800d10c:	2f62      	cmp	r7, #98	@ 0x62
 800d10e:	d80a      	bhi.n	800d126 <_printf_i+0x32>
 800d110:	2f00      	cmp	r7, #0
 800d112:	f000 80d1 	beq.w	800d2b8 <_printf_i+0x1c4>
 800d116:	2f58      	cmp	r7, #88	@ 0x58
 800d118:	f000 80b8 	beq.w	800d28c <_printf_i+0x198>
 800d11c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d124:	e03a      	b.n	800d19c <_printf_i+0xa8>
 800d126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d12a:	2b15      	cmp	r3, #21
 800d12c:	d8f6      	bhi.n	800d11c <_printf_i+0x28>
 800d12e:	a101      	add	r1, pc, #4	@ (adr r1, 800d134 <_printf_i+0x40>)
 800d130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d134:	0800d18d 	.word	0x0800d18d
 800d138:	0800d1a1 	.word	0x0800d1a1
 800d13c:	0800d11d 	.word	0x0800d11d
 800d140:	0800d11d 	.word	0x0800d11d
 800d144:	0800d11d 	.word	0x0800d11d
 800d148:	0800d11d 	.word	0x0800d11d
 800d14c:	0800d1a1 	.word	0x0800d1a1
 800d150:	0800d11d 	.word	0x0800d11d
 800d154:	0800d11d 	.word	0x0800d11d
 800d158:	0800d11d 	.word	0x0800d11d
 800d15c:	0800d11d 	.word	0x0800d11d
 800d160:	0800d29f 	.word	0x0800d29f
 800d164:	0800d1cb 	.word	0x0800d1cb
 800d168:	0800d259 	.word	0x0800d259
 800d16c:	0800d11d 	.word	0x0800d11d
 800d170:	0800d11d 	.word	0x0800d11d
 800d174:	0800d2c1 	.word	0x0800d2c1
 800d178:	0800d11d 	.word	0x0800d11d
 800d17c:	0800d1cb 	.word	0x0800d1cb
 800d180:	0800d11d 	.word	0x0800d11d
 800d184:	0800d11d 	.word	0x0800d11d
 800d188:	0800d261 	.word	0x0800d261
 800d18c:	6833      	ldr	r3, [r6, #0]
 800d18e:	1d1a      	adds	r2, r3, #4
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6032      	str	r2, [r6, #0]
 800d194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d19c:	2301      	movs	r3, #1
 800d19e:	e09c      	b.n	800d2da <_printf_i+0x1e6>
 800d1a0:	6833      	ldr	r3, [r6, #0]
 800d1a2:	6820      	ldr	r0, [r4, #0]
 800d1a4:	1d19      	adds	r1, r3, #4
 800d1a6:	6031      	str	r1, [r6, #0]
 800d1a8:	0606      	lsls	r6, r0, #24
 800d1aa:	d501      	bpl.n	800d1b0 <_printf_i+0xbc>
 800d1ac:	681d      	ldr	r5, [r3, #0]
 800d1ae:	e003      	b.n	800d1b8 <_printf_i+0xc4>
 800d1b0:	0645      	lsls	r5, r0, #25
 800d1b2:	d5fb      	bpl.n	800d1ac <_printf_i+0xb8>
 800d1b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d1b8:	2d00      	cmp	r5, #0
 800d1ba:	da03      	bge.n	800d1c4 <_printf_i+0xd0>
 800d1bc:	232d      	movs	r3, #45	@ 0x2d
 800d1be:	426d      	negs	r5, r5
 800d1c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1c4:	4858      	ldr	r0, [pc, #352]	@ (800d328 <_printf_i+0x234>)
 800d1c6:	230a      	movs	r3, #10
 800d1c8:	e011      	b.n	800d1ee <_printf_i+0xfa>
 800d1ca:	6821      	ldr	r1, [r4, #0]
 800d1cc:	6833      	ldr	r3, [r6, #0]
 800d1ce:	0608      	lsls	r0, r1, #24
 800d1d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d1d4:	d402      	bmi.n	800d1dc <_printf_i+0xe8>
 800d1d6:	0649      	lsls	r1, r1, #25
 800d1d8:	bf48      	it	mi
 800d1da:	b2ad      	uxthmi	r5, r5
 800d1dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d1de:	4852      	ldr	r0, [pc, #328]	@ (800d328 <_printf_i+0x234>)
 800d1e0:	6033      	str	r3, [r6, #0]
 800d1e2:	bf14      	ite	ne
 800d1e4:	230a      	movne	r3, #10
 800d1e6:	2308      	moveq	r3, #8
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d1ee:	6866      	ldr	r6, [r4, #4]
 800d1f0:	60a6      	str	r6, [r4, #8]
 800d1f2:	2e00      	cmp	r6, #0
 800d1f4:	db05      	blt.n	800d202 <_printf_i+0x10e>
 800d1f6:	6821      	ldr	r1, [r4, #0]
 800d1f8:	432e      	orrs	r6, r5
 800d1fa:	f021 0104 	bic.w	r1, r1, #4
 800d1fe:	6021      	str	r1, [r4, #0]
 800d200:	d04b      	beq.n	800d29a <_printf_i+0x1a6>
 800d202:	4616      	mov	r6, r2
 800d204:	fbb5 f1f3 	udiv	r1, r5, r3
 800d208:	fb03 5711 	mls	r7, r3, r1, r5
 800d20c:	5dc7      	ldrb	r7, [r0, r7]
 800d20e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d212:	462f      	mov	r7, r5
 800d214:	42bb      	cmp	r3, r7
 800d216:	460d      	mov	r5, r1
 800d218:	d9f4      	bls.n	800d204 <_printf_i+0x110>
 800d21a:	2b08      	cmp	r3, #8
 800d21c:	d10b      	bne.n	800d236 <_printf_i+0x142>
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	07df      	lsls	r7, r3, #31
 800d222:	d508      	bpl.n	800d236 <_printf_i+0x142>
 800d224:	6923      	ldr	r3, [r4, #16]
 800d226:	6861      	ldr	r1, [r4, #4]
 800d228:	4299      	cmp	r1, r3
 800d22a:	bfde      	ittt	le
 800d22c:	2330      	movle	r3, #48	@ 0x30
 800d22e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d232:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d236:	1b92      	subs	r2, r2, r6
 800d238:	6122      	str	r2, [r4, #16]
 800d23a:	f8cd a000 	str.w	sl, [sp]
 800d23e:	464b      	mov	r3, r9
 800d240:	aa03      	add	r2, sp, #12
 800d242:	4621      	mov	r1, r4
 800d244:	4640      	mov	r0, r8
 800d246:	f7ff fee7 	bl	800d018 <_printf_common>
 800d24a:	3001      	adds	r0, #1
 800d24c:	d14a      	bne.n	800d2e4 <_printf_i+0x1f0>
 800d24e:	f04f 30ff 	mov.w	r0, #4294967295
 800d252:	b004      	add	sp, #16
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	6823      	ldr	r3, [r4, #0]
 800d25a:	f043 0320 	orr.w	r3, r3, #32
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	4832      	ldr	r0, [pc, #200]	@ (800d32c <_printf_i+0x238>)
 800d262:	2778      	movs	r7, #120	@ 0x78
 800d264:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d268:	6823      	ldr	r3, [r4, #0]
 800d26a:	6831      	ldr	r1, [r6, #0]
 800d26c:	061f      	lsls	r7, r3, #24
 800d26e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d272:	d402      	bmi.n	800d27a <_printf_i+0x186>
 800d274:	065f      	lsls	r7, r3, #25
 800d276:	bf48      	it	mi
 800d278:	b2ad      	uxthmi	r5, r5
 800d27a:	6031      	str	r1, [r6, #0]
 800d27c:	07d9      	lsls	r1, r3, #31
 800d27e:	bf44      	itt	mi
 800d280:	f043 0320 	orrmi.w	r3, r3, #32
 800d284:	6023      	strmi	r3, [r4, #0]
 800d286:	b11d      	cbz	r5, 800d290 <_printf_i+0x19c>
 800d288:	2310      	movs	r3, #16
 800d28a:	e7ad      	b.n	800d1e8 <_printf_i+0xf4>
 800d28c:	4826      	ldr	r0, [pc, #152]	@ (800d328 <_printf_i+0x234>)
 800d28e:	e7e9      	b.n	800d264 <_printf_i+0x170>
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	f023 0320 	bic.w	r3, r3, #32
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	e7f6      	b.n	800d288 <_printf_i+0x194>
 800d29a:	4616      	mov	r6, r2
 800d29c:	e7bd      	b.n	800d21a <_printf_i+0x126>
 800d29e:	6833      	ldr	r3, [r6, #0]
 800d2a0:	6825      	ldr	r5, [r4, #0]
 800d2a2:	6961      	ldr	r1, [r4, #20]
 800d2a4:	1d18      	adds	r0, r3, #4
 800d2a6:	6030      	str	r0, [r6, #0]
 800d2a8:	062e      	lsls	r6, r5, #24
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	d501      	bpl.n	800d2b2 <_printf_i+0x1be>
 800d2ae:	6019      	str	r1, [r3, #0]
 800d2b0:	e002      	b.n	800d2b8 <_printf_i+0x1c4>
 800d2b2:	0668      	lsls	r0, r5, #25
 800d2b4:	d5fb      	bpl.n	800d2ae <_printf_i+0x1ba>
 800d2b6:	8019      	strh	r1, [r3, #0]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	6123      	str	r3, [r4, #16]
 800d2bc:	4616      	mov	r6, r2
 800d2be:	e7bc      	b.n	800d23a <_printf_i+0x146>
 800d2c0:	6833      	ldr	r3, [r6, #0]
 800d2c2:	1d1a      	adds	r2, r3, #4
 800d2c4:	6032      	str	r2, [r6, #0]
 800d2c6:	681e      	ldr	r6, [r3, #0]
 800d2c8:	6862      	ldr	r2, [r4, #4]
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f7f2 ffa7 	bl	8000220 <memchr>
 800d2d2:	b108      	cbz	r0, 800d2d8 <_printf_i+0x1e4>
 800d2d4:	1b80      	subs	r0, r0, r6
 800d2d6:	6060      	str	r0, [r4, #4]
 800d2d8:	6863      	ldr	r3, [r4, #4]
 800d2da:	6123      	str	r3, [r4, #16]
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2e2:	e7aa      	b.n	800d23a <_printf_i+0x146>
 800d2e4:	6923      	ldr	r3, [r4, #16]
 800d2e6:	4632      	mov	r2, r6
 800d2e8:	4649      	mov	r1, r9
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	47d0      	blx	sl
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	d0ad      	beq.n	800d24e <_printf_i+0x15a>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	079b      	lsls	r3, r3, #30
 800d2f6:	d413      	bmi.n	800d320 <_printf_i+0x22c>
 800d2f8:	68e0      	ldr	r0, [r4, #12]
 800d2fa:	9b03      	ldr	r3, [sp, #12]
 800d2fc:	4298      	cmp	r0, r3
 800d2fe:	bfb8      	it	lt
 800d300:	4618      	movlt	r0, r3
 800d302:	e7a6      	b.n	800d252 <_printf_i+0x15e>
 800d304:	2301      	movs	r3, #1
 800d306:	4632      	mov	r2, r6
 800d308:	4649      	mov	r1, r9
 800d30a:	4640      	mov	r0, r8
 800d30c:	47d0      	blx	sl
 800d30e:	3001      	adds	r0, #1
 800d310:	d09d      	beq.n	800d24e <_printf_i+0x15a>
 800d312:	3501      	adds	r5, #1
 800d314:	68e3      	ldr	r3, [r4, #12]
 800d316:	9903      	ldr	r1, [sp, #12]
 800d318:	1a5b      	subs	r3, r3, r1
 800d31a:	42ab      	cmp	r3, r5
 800d31c:	dcf2      	bgt.n	800d304 <_printf_i+0x210>
 800d31e:	e7eb      	b.n	800d2f8 <_printf_i+0x204>
 800d320:	2500      	movs	r5, #0
 800d322:	f104 0619 	add.w	r6, r4, #25
 800d326:	e7f5      	b.n	800d314 <_printf_i+0x220>
 800d328:	080105de 	.word	0x080105de
 800d32c:	080105ef 	.word	0x080105ef

0800d330 <std>:
 800d330:	2300      	movs	r3, #0
 800d332:	b510      	push	{r4, lr}
 800d334:	4604      	mov	r4, r0
 800d336:	e9c0 3300 	strd	r3, r3, [r0]
 800d33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d33e:	6083      	str	r3, [r0, #8]
 800d340:	8181      	strh	r1, [r0, #12]
 800d342:	6643      	str	r3, [r0, #100]	@ 0x64
 800d344:	81c2      	strh	r2, [r0, #14]
 800d346:	6183      	str	r3, [r0, #24]
 800d348:	4619      	mov	r1, r3
 800d34a:	2208      	movs	r2, #8
 800d34c:	305c      	adds	r0, #92	@ 0x5c
 800d34e:	f000 f8f4 	bl	800d53a <memset>
 800d352:	4b0d      	ldr	r3, [pc, #52]	@ (800d388 <std+0x58>)
 800d354:	6263      	str	r3, [r4, #36]	@ 0x24
 800d356:	4b0d      	ldr	r3, [pc, #52]	@ (800d38c <std+0x5c>)
 800d358:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d35a:	4b0d      	ldr	r3, [pc, #52]	@ (800d390 <std+0x60>)
 800d35c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d35e:	4b0d      	ldr	r3, [pc, #52]	@ (800d394 <std+0x64>)
 800d360:	6323      	str	r3, [r4, #48]	@ 0x30
 800d362:	4b0d      	ldr	r3, [pc, #52]	@ (800d398 <std+0x68>)
 800d364:	6224      	str	r4, [r4, #32]
 800d366:	429c      	cmp	r4, r3
 800d368:	d006      	beq.n	800d378 <std+0x48>
 800d36a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d36e:	4294      	cmp	r4, r2
 800d370:	d002      	beq.n	800d378 <std+0x48>
 800d372:	33d0      	adds	r3, #208	@ 0xd0
 800d374:	429c      	cmp	r4, r3
 800d376:	d105      	bne.n	800d384 <std+0x54>
 800d378:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d380:	f000 b958 	b.w	800d634 <__retarget_lock_init_recursive>
 800d384:	bd10      	pop	{r4, pc}
 800d386:	bf00      	nop
 800d388:	0800d4b5 	.word	0x0800d4b5
 800d38c:	0800d4d7 	.word	0x0800d4d7
 800d390:	0800d50f 	.word	0x0800d50f
 800d394:	0800d533 	.word	0x0800d533
 800d398:	20002dac 	.word	0x20002dac

0800d39c <stdio_exit_handler>:
 800d39c:	4a02      	ldr	r2, [pc, #8]	@ (800d3a8 <stdio_exit_handler+0xc>)
 800d39e:	4903      	ldr	r1, [pc, #12]	@ (800d3ac <stdio_exit_handler+0x10>)
 800d3a0:	4803      	ldr	r0, [pc, #12]	@ (800d3b0 <stdio_exit_handler+0x14>)
 800d3a2:	f000 b869 	b.w	800d478 <_fwalk_sglue>
 800d3a6:	bf00      	nop
 800d3a8:	2000004c 	.word	0x2000004c
 800d3ac:	0800ed05 	.word	0x0800ed05
 800d3b0:	2000005c 	.word	0x2000005c

0800d3b4 <cleanup_stdio>:
 800d3b4:	6841      	ldr	r1, [r0, #4]
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e8 <cleanup_stdio+0x34>)
 800d3b8:	4299      	cmp	r1, r3
 800d3ba:	b510      	push	{r4, lr}
 800d3bc:	4604      	mov	r4, r0
 800d3be:	d001      	beq.n	800d3c4 <cleanup_stdio+0x10>
 800d3c0:	f001 fca0 	bl	800ed04 <_fflush_r>
 800d3c4:	68a1      	ldr	r1, [r4, #8]
 800d3c6:	4b09      	ldr	r3, [pc, #36]	@ (800d3ec <cleanup_stdio+0x38>)
 800d3c8:	4299      	cmp	r1, r3
 800d3ca:	d002      	beq.n	800d3d2 <cleanup_stdio+0x1e>
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f001 fc99 	bl	800ed04 <_fflush_r>
 800d3d2:	68e1      	ldr	r1, [r4, #12]
 800d3d4:	4b06      	ldr	r3, [pc, #24]	@ (800d3f0 <cleanup_stdio+0x3c>)
 800d3d6:	4299      	cmp	r1, r3
 800d3d8:	d004      	beq.n	800d3e4 <cleanup_stdio+0x30>
 800d3da:	4620      	mov	r0, r4
 800d3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e0:	f001 bc90 	b.w	800ed04 <_fflush_r>
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	bf00      	nop
 800d3e8:	20002dac 	.word	0x20002dac
 800d3ec:	20002e14 	.word	0x20002e14
 800d3f0:	20002e7c 	.word	0x20002e7c

0800d3f4 <global_stdio_init.part.0>:
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d424 <global_stdio_init.part.0+0x30>)
 800d3f8:	4c0b      	ldr	r4, [pc, #44]	@ (800d428 <global_stdio_init.part.0+0x34>)
 800d3fa:	4a0c      	ldr	r2, [pc, #48]	@ (800d42c <global_stdio_init.part.0+0x38>)
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	4620      	mov	r0, r4
 800d400:	2200      	movs	r2, #0
 800d402:	2104      	movs	r1, #4
 800d404:	f7ff ff94 	bl	800d330 <std>
 800d408:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d40c:	2201      	movs	r2, #1
 800d40e:	2109      	movs	r1, #9
 800d410:	f7ff ff8e 	bl	800d330 <std>
 800d414:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d418:	2202      	movs	r2, #2
 800d41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d41e:	2112      	movs	r1, #18
 800d420:	f7ff bf86 	b.w	800d330 <std>
 800d424:	20002ee4 	.word	0x20002ee4
 800d428:	20002dac 	.word	0x20002dac
 800d42c:	0800d39d 	.word	0x0800d39d

0800d430 <__sfp_lock_acquire>:
 800d430:	4801      	ldr	r0, [pc, #4]	@ (800d438 <__sfp_lock_acquire+0x8>)
 800d432:	f000 b900 	b.w	800d636 <__retarget_lock_acquire_recursive>
 800d436:	bf00      	nop
 800d438:	20002eed 	.word	0x20002eed

0800d43c <__sfp_lock_release>:
 800d43c:	4801      	ldr	r0, [pc, #4]	@ (800d444 <__sfp_lock_release+0x8>)
 800d43e:	f000 b8fb 	b.w	800d638 <__retarget_lock_release_recursive>
 800d442:	bf00      	nop
 800d444:	20002eed 	.word	0x20002eed

0800d448 <__sinit>:
 800d448:	b510      	push	{r4, lr}
 800d44a:	4604      	mov	r4, r0
 800d44c:	f7ff fff0 	bl	800d430 <__sfp_lock_acquire>
 800d450:	6a23      	ldr	r3, [r4, #32]
 800d452:	b11b      	cbz	r3, 800d45c <__sinit+0x14>
 800d454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d458:	f7ff bff0 	b.w	800d43c <__sfp_lock_release>
 800d45c:	4b04      	ldr	r3, [pc, #16]	@ (800d470 <__sinit+0x28>)
 800d45e:	6223      	str	r3, [r4, #32]
 800d460:	4b04      	ldr	r3, [pc, #16]	@ (800d474 <__sinit+0x2c>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1f5      	bne.n	800d454 <__sinit+0xc>
 800d468:	f7ff ffc4 	bl	800d3f4 <global_stdio_init.part.0>
 800d46c:	e7f2      	b.n	800d454 <__sinit+0xc>
 800d46e:	bf00      	nop
 800d470:	0800d3b5 	.word	0x0800d3b5
 800d474:	20002ee4 	.word	0x20002ee4

0800d478 <_fwalk_sglue>:
 800d478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d47c:	4607      	mov	r7, r0
 800d47e:	4688      	mov	r8, r1
 800d480:	4614      	mov	r4, r2
 800d482:	2600      	movs	r6, #0
 800d484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d488:	f1b9 0901 	subs.w	r9, r9, #1
 800d48c:	d505      	bpl.n	800d49a <_fwalk_sglue+0x22>
 800d48e:	6824      	ldr	r4, [r4, #0]
 800d490:	2c00      	cmp	r4, #0
 800d492:	d1f7      	bne.n	800d484 <_fwalk_sglue+0xc>
 800d494:	4630      	mov	r0, r6
 800d496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d49a:	89ab      	ldrh	r3, [r5, #12]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d907      	bls.n	800d4b0 <_fwalk_sglue+0x38>
 800d4a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	d003      	beq.n	800d4b0 <_fwalk_sglue+0x38>
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	47c0      	blx	r8
 800d4ae:	4306      	orrs	r6, r0
 800d4b0:	3568      	adds	r5, #104	@ 0x68
 800d4b2:	e7e9      	b.n	800d488 <_fwalk_sglue+0x10>

0800d4b4 <__sread>:
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4bc:	f000 f86c 	bl	800d598 <_read_r>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	bfab      	itete	ge
 800d4c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d4c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d4c8:	181b      	addge	r3, r3, r0
 800d4ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d4ce:	bfac      	ite	ge
 800d4d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d4d2:	81a3      	strhlt	r3, [r4, #12]
 800d4d4:	bd10      	pop	{r4, pc}

0800d4d6 <__swrite>:
 800d4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4da:	461f      	mov	r7, r3
 800d4dc:	898b      	ldrh	r3, [r1, #12]
 800d4de:	05db      	lsls	r3, r3, #23
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	d505      	bpl.n	800d4f4 <__swrite+0x1e>
 800d4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f000 f840 	bl	800d574 <_lseek_r>
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d4fe:	81a3      	strh	r3, [r4, #12]
 800d500:	4632      	mov	r2, r6
 800d502:	463b      	mov	r3, r7
 800d504:	4628      	mov	r0, r5
 800d506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d50a:	f000 b857 	b.w	800d5bc <_write_r>

0800d50e <__sseek>:
 800d50e:	b510      	push	{r4, lr}
 800d510:	460c      	mov	r4, r1
 800d512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d516:	f000 f82d 	bl	800d574 <_lseek_r>
 800d51a:	1c43      	adds	r3, r0, #1
 800d51c:	89a3      	ldrh	r3, [r4, #12]
 800d51e:	bf15      	itete	ne
 800d520:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d52a:	81a3      	strheq	r3, [r4, #12]
 800d52c:	bf18      	it	ne
 800d52e:	81a3      	strhne	r3, [r4, #12]
 800d530:	bd10      	pop	{r4, pc}

0800d532 <__sclose>:
 800d532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d536:	f000 b80d 	b.w	800d554 <_close_r>

0800d53a <memset>:
 800d53a:	4402      	add	r2, r0
 800d53c:	4603      	mov	r3, r0
 800d53e:	4293      	cmp	r3, r2
 800d540:	d100      	bne.n	800d544 <memset+0xa>
 800d542:	4770      	bx	lr
 800d544:	f803 1b01 	strb.w	r1, [r3], #1
 800d548:	e7f9      	b.n	800d53e <memset+0x4>
	...

0800d54c <_localeconv_r>:
 800d54c:	4800      	ldr	r0, [pc, #0]	@ (800d550 <_localeconv_r+0x4>)
 800d54e:	4770      	bx	lr
 800d550:	20000198 	.word	0x20000198

0800d554 <_close_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4d06      	ldr	r5, [pc, #24]	@ (800d570 <_close_r+0x1c>)
 800d558:	2300      	movs	r3, #0
 800d55a:	4604      	mov	r4, r0
 800d55c:	4608      	mov	r0, r1
 800d55e:	602b      	str	r3, [r5, #0]
 800d560:	f7f6 f81e 	bl	80035a0 <_close>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	d102      	bne.n	800d56e <_close_r+0x1a>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	b103      	cbz	r3, 800d56e <_close_r+0x1a>
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	bd38      	pop	{r3, r4, r5, pc}
 800d570:	20002ee8 	.word	0x20002ee8

0800d574 <_lseek_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d07      	ldr	r5, [pc, #28]	@ (800d594 <_lseek_r+0x20>)
 800d578:	4604      	mov	r4, r0
 800d57a:	4608      	mov	r0, r1
 800d57c:	4611      	mov	r1, r2
 800d57e:	2200      	movs	r2, #0
 800d580:	602a      	str	r2, [r5, #0]
 800d582:	461a      	mov	r2, r3
 800d584:	f7f6 f833 	bl	80035ee <_lseek>
 800d588:	1c43      	adds	r3, r0, #1
 800d58a:	d102      	bne.n	800d592 <_lseek_r+0x1e>
 800d58c:	682b      	ldr	r3, [r5, #0]
 800d58e:	b103      	cbz	r3, 800d592 <_lseek_r+0x1e>
 800d590:	6023      	str	r3, [r4, #0]
 800d592:	bd38      	pop	{r3, r4, r5, pc}
 800d594:	20002ee8 	.word	0x20002ee8

0800d598 <_read_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4d07      	ldr	r5, [pc, #28]	@ (800d5b8 <_read_r+0x20>)
 800d59c:	4604      	mov	r4, r0
 800d59e:	4608      	mov	r0, r1
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	602a      	str	r2, [r5, #0]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	f7f5 ffc1 	bl	800352e <_read>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	d102      	bne.n	800d5b6 <_read_r+0x1e>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	b103      	cbz	r3, 800d5b6 <_read_r+0x1e>
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	20002ee8 	.word	0x20002ee8

0800d5bc <_write_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	@ (800d5dc <_write_r+0x20>)
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	4608      	mov	r0, r1
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	602a      	str	r2, [r5, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f7f5 ffcc 	bl	8003568 <_write>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_write_r+0x1e>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_write_r+0x1e>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20002ee8 	.word	0x20002ee8

0800d5e0 <__errno>:
 800d5e0:	4b01      	ldr	r3, [pc, #4]	@ (800d5e8 <__errno+0x8>)
 800d5e2:	6818      	ldr	r0, [r3, #0]
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	20000058 	.word	0x20000058

0800d5ec <__libc_init_array>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	4d0d      	ldr	r5, [pc, #52]	@ (800d624 <__libc_init_array+0x38>)
 800d5f0:	4c0d      	ldr	r4, [pc, #52]	@ (800d628 <__libc_init_array+0x3c>)
 800d5f2:	1b64      	subs	r4, r4, r5
 800d5f4:	10a4      	asrs	r4, r4, #2
 800d5f6:	2600      	movs	r6, #0
 800d5f8:	42a6      	cmp	r6, r4
 800d5fa:	d109      	bne.n	800d610 <__libc_init_array+0x24>
 800d5fc:	4d0b      	ldr	r5, [pc, #44]	@ (800d62c <__libc_init_array+0x40>)
 800d5fe:	4c0c      	ldr	r4, [pc, #48]	@ (800d630 <__libc_init_array+0x44>)
 800d600:	f002 ff46 	bl	8010490 <_init>
 800d604:	1b64      	subs	r4, r4, r5
 800d606:	10a4      	asrs	r4, r4, #2
 800d608:	2600      	movs	r6, #0
 800d60a:	42a6      	cmp	r6, r4
 800d60c:	d105      	bne.n	800d61a <__libc_init_array+0x2e>
 800d60e:	bd70      	pop	{r4, r5, r6, pc}
 800d610:	f855 3b04 	ldr.w	r3, [r5], #4
 800d614:	4798      	blx	r3
 800d616:	3601      	adds	r6, #1
 800d618:	e7ee      	b.n	800d5f8 <__libc_init_array+0xc>
 800d61a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d61e:	4798      	blx	r3
 800d620:	3601      	adds	r6, #1
 800d622:	e7f2      	b.n	800d60a <__libc_init_array+0x1e>
 800d624:	08010b28 	.word	0x08010b28
 800d628:	08010b28 	.word	0x08010b28
 800d62c:	08010b28 	.word	0x08010b28
 800d630:	08010b2c 	.word	0x08010b2c

0800d634 <__retarget_lock_init_recursive>:
 800d634:	4770      	bx	lr

0800d636 <__retarget_lock_acquire_recursive>:
 800d636:	4770      	bx	lr

0800d638 <__retarget_lock_release_recursive>:
 800d638:	4770      	bx	lr

0800d63a <memcpy>:
 800d63a:	440a      	add	r2, r1
 800d63c:	4291      	cmp	r1, r2
 800d63e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d642:	d100      	bne.n	800d646 <memcpy+0xc>
 800d644:	4770      	bx	lr
 800d646:	b510      	push	{r4, lr}
 800d648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d64c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d650:	4291      	cmp	r1, r2
 800d652:	d1f9      	bne.n	800d648 <memcpy+0xe>
 800d654:	bd10      	pop	{r4, pc}

0800d656 <quorem>:
 800d656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65a:	6903      	ldr	r3, [r0, #16]
 800d65c:	690c      	ldr	r4, [r1, #16]
 800d65e:	42a3      	cmp	r3, r4
 800d660:	4607      	mov	r7, r0
 800d662:	db7e      	blt.n	800d762 <quorem+0x10c>
 800d664:	3c01      	subs	r4, #1
 800d666:	f101 0814 	add.w	r8, r1, #20
 800d66a:	00a3      	lsls	r3, r4, #2
 800d66c:	f100 0514 	add.w	r5, r0, #20
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d67c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d680:	3301      	adds	r3, #1
 800d682:	429a      	cmp	r2, r3
 800d684:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d688:	fbb2 f6f3 	udiv	r6, r2, r3
 800d68c:	d32e      	bcc.n	800d6ec <quorem+0x96>
 800d68e:	f04f 0a00 	mov.w	sl, #0
 800d692:	46c4      	mov	ip, r8
 800d694:	46ae      	mov	lr, r5
 800d696:	46d3      	mov	fp, sl
 800d698:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d69c:	b298      	uxth	r0, r3
 800d69e:	fb06 a000 	mla	r0, r6, r0, sl
 800d6a2:	0c02      	lsrs	r2, r0, #16
 800d6a4:	0c1b      	lsrs	r3, r3, #16
 800d6a6:	fb06 2303 	mla	r3, r6, r3, r2
 800d6aa:	f8de 2000 	ldr.w	r2, [lr]
 800d6ae:	b280      	uxth	r0, r0
 800d6b0:	b292      	uxth	r2, r2
 800d6b2:	1a12      	subs	r2, r2, r0
 800d6b4:	445a      	add	r2, fp
 800d6b6:	f8de 0000 	ldr.w	r0, [lr]
 800d6ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d6c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d6c8:	b292      	uxth	r2, r2
 800d6ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d6ce:	45e1      	cmp	r9, ip
 800d6d0:	f84e 2b04 	str.w	r2, [lr], #4
 800d6d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d6d8:	d2de      	bcs.n	800d698 <quorem+0x42>
 800d6da:	9b00      	ldr	r3, [sp, #0]
 800d6dc:	58eb      	ldr	r3, [r5, r3]
 800d6de:	b92b      	cbnz	r3, 800d6ec <quorem+0x96>
 800d6e0:	9b01      	ldr	r3, [sp, #4]
 800d6e2:	3b04      	subs	r3, #4
 800d6e4:	429d      	cmp	r5, r3
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	d32f      	bcc.n	800d74a <quorem+0xf4>
 800d6ea:	613c      	str	r4, [r7, #16]
 800d6ec:	4638      	mov	r0, r7
 800d6ee:	f001 f97d 	bl	800e9ec <__mcmp>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	db25      	blt.n	800d742 <quorem+0xec>
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6fe:	f8d1 c000 	ldr.w	ip, [r1]
 800d702:	fa1f fe82 	uxth.w	lr, r2
 800d706:	fa1f f38c 	uxth.w	r3, ip
 800d70a:	eba3 030e 	sub.w	r3, r3, lr
 800d70e:	4403      	add	r3, r0
 800d710:	0c12      	lsrs	r2, r2, #16
 800d712:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d716:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d720:	45c1      	cmp	r9, r8
 800d722:	f841 3b04 	str.w	r3, [r1], #4
 800d726:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d72a:	d2e6      	bcs.n	800d6fa <quorem+0xa4>
 800d72c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d734:	b922      	cbnz	r2, 800d740 <quorem+0xea>
 800d736:	3b04      	subs	r3, #4
 800d738:	429d      	cmp	r5, r3
 800d73a:	461a      	mov	r2, r3
 800d73c:	d30b      	bcc.n	800d756 <quorem+0x100>
 800d73e:	613c      	str	r4, [r7, #16]
 800d740:	3601      	adds	r6, #1
 800d742:	4630      	mov	r0, r6
 800d744:	b003      	add	sp, #12
 800d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74a:	6812      	ldr	r2, [r2, #0]
 800d74c:	3b04      	subs	r3, #4
 800d74e:	2a00      	cmp	r2, #0
 800d750:	d1cb      	bne.n	800d6ea <quorem+0x94>
 800d752:	3c01      	subs	r4, #1
 800d754:	e7c6      	b.n	800d6e4 <quorem+0x8e>
 800d756:	6812      	ldr	r2, [r2, #0]
 800d758:	3b04      	subs	r3, #4
 800d75a:	2a00      	cmp	r2, #0
 800d75c:	d1ef      	bne.n	800d73e <quorem+0xe8>
 800d75e:	3c01      	subs	r4, #1
 800d760:	e7ea      	b.n	800d738 <quorem+0xe2>
 800d762:	2000      	movs	r0, #0
 800d764:	e7ee      	b.n	800d744 <quorem+0xee>
	...

0800d768 <_dtoa_r>:
 800d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	69c7      	ldr	r7, [r0, #28]
 800d76e:	b097      	sub	sp, #92	@ 0x5c
 800d770:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d774:	ec55 4b10 	vmov	r4, r5, d0
 800d778:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d77a:	9107      	str	r1, [sp, #28]
 800d77c:	4681      	mov	r9, r0
 800d77e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d780:	9311      	str	r3, [sp, #68]	@ 0x44
 800d782:	b97f      	cbnz	r7, 800d7a4 <_dtoa_r+0x3c>
 800d784:	2010      	movs	r0, #16
 800d786:	f000 fe09 	bl	800e39c <malloc>
 800d78a:	4602      	mov	r2, r0
 800d78c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d790:	b920      	cbnz	r0, 800d79c <_dtoa_r+0x34>
 800d792:	4ba9      	ldr	r3, [pc, #676]	@ (800da38 <_dtoa_r+0x2d0>)
 800d794:	21ef      	movs	r1, #239	@ 0xef
 800d796:	48a9      	ldr	r0, [pc, #676]	@ (800da3c <_dtoa_r+0x2d4>)
 800d798:	f001 faec 	bl	800ed74 <__assert_func>
 800d79c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d7a0:	6007      	str	r7, [r0, #0]
 800d7a2:	60c7      	str	r7, [r0, #12]
 800d7a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7a8:	6819      	ldr	r1, [r3, #0]
 800d7aa:	b159      	cbz	r1, 800d7c4 <_dtoa_r+0x5c>
 800d7ac:	685a      	ldr	r2, [r3, #4]
 800d7ae:	604a      	str	r2, [r1, #4]
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4093      	lsls	r3, r2
 800d7b4:	608b      	str	r3, [r1, #8]
 800d7b6:	4648      	mov	r0, r9
 800d7b8:	f000 fee6 	bl	800e588 <_Bfree>
 800d7bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	1e2b      	subs	r3, r5, #0
 800d7c6:	bfb9      	ittee	lt
 800d7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d7cc:	9305      	strlt	r3, [sp, #20]
 800d7ce:	2300      	movge	r3, #0
 800d7d0:	6033      	strge	r3, [r6, #0]
 800d7d2:	9f05      	ldr	r7, [sp, #20]
 800d7d4:	4b9a      	ldr	r3, [pc, #616]	@ (800da40 <_dtoa_r+0x2d8>)
 800d7d6:	bfbc      	itt	lt
 800d7d8:	2201      	movlt	r2, #1
 800d7da:	6032      	strlt	r2, [r6, #0]
 800d7dc:	43bb      	bics	r3, r7
 800d7de:	d112      	bne.n	800d806 <_dtoa_r+0x9e>
 800d7e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d7e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7ec:	4323      	orrs	r3, r4
 800d7ee:	f000 855a 	beq.w	800e2a6 <_dtoa_r+0xb3e>
 800d7f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800da54 <_dtoa_r+0x2ec>
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f000 855c 	beq.w	800e2b6 <_dtoa_r+0xb4e>
 800d7fe:	f10a 0303 	add.w	r3, sl, #3
 800d802:	f000 bd56 	b.w	800e2b2 <_dtoa_r+0xb4a>
 800d806:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d80a:	2200      	movs	r2, #0
 800d80c:	ec51 0b17 	vmov	r0, r1, d7
 800d810:	2300      	movs	r3, #0
 800d812:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d816:	f7f3 f97f 	bl	8000b18 <__aeabi_dcmpeq>
 800d81a:	4680      	mov	r8, r0
 800d81c:	b158      	cbz	r0, 800d836 <_dtoa_r+0xce>
 800d81e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d820:	2301      	movs	r3, #1
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d826:	b113      	cbz	r3, 800d82e <_dtoa_r+0xc6>
 800d828:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d82a:	4b86      	ldr	r3, [pc, #536]	@ (800da44 <_dtoa_r+0x2dc>)
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800da58 <_dtoa_r+0x2f0>
 800d832:	f000 bd40 	b.w	800e2b6 <_dtoa_r+0xb4e>
 800d836:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d83a:	aa14      	add	r2, sp, #80	@ 0x50
 800d83c:	a915      	add	r1, sp, #84	@ 0x54
 800d83e:	4648      	mov	r0, r9
 800d840:	f001 f984 	bl	800eb4c <__d2b>
 800d844:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d848:	9002      	str	r0, [sp, #8]
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	d078      	beq.n	800d940 <_dtoa_r+0x1d8>
 800d84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d850:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d85c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d860:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d864:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d868:	4619      	mov	r1, r3
 800d86a:	2200      	movs	r2, #0
 800d86c:	4b76      	ldr	r3, [pc, #472]	@ (800da48 <_dtoa_r+0x2e0>)
 800d86e:	f7f2 fd33 	bl	80002d8 <__aeabi_dsub>
 800d872:	a36b      	add	r3, pc, #428	@ (adr r3, 800da20 <_dtoa_r+0x2b8>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	f7f2 fee6 	bl	8000648 <__aeabi_dmul>
 800d87c:	a36a      	add	r3, pc, #424	@ (adr r3, 800da28 <_dtoa_r+0x2c0>)
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	f7f2 fd2b 	bl	80002dc <__adddf3>
 800d886:	4604      	mov	r4, r0
 800d888:	4630      	mov	r0, r6
 800d88a:	460d      	mov	r5, r1
 800d88c:	f7f2 fe72 	bl	8000574 <__aeabi_i2d>
 800d890:	a367      	add	r3, pc, #412	@ (adr r3, 800da30 <_dtoa_r+0x2c8>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f7f2 fed7 	bl	8000648 <__aeabi_dmul>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4620      	mov	r0, r4
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f7f2 fd1b 	bl	80002dc <__adddf3>
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	460d      	mov	r5, r1
 800d8aa:	f7f3 f97d 	bl	8000ba8 <__aeabi_d2iz>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	4607      	mov	r7, r0
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	f7f3 f938 	bl	8000b2c <__aeabi_dcmplt>
 800d8bc:	b140      	cbz	r0, 800d8d0 <_dtoa_r+0x168>
 800d8be:	4638      	mov	r0, r7
 800d8c0:	f7f2 fe58 	bl	8000574 <__aeabi_i2d>
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	462b      	mov	r3, r5
 800d8c8:	f7f3 f926 	bl	8000b18 <__aeabi_dcmpeq>
 800d8cc:	b900      	cbnz	r0, 800d8d0 <_dtoa_r+0x168>
 800d8ce:	3f01      	subs	r7, #1
 800d8d0:	2f16      	cmp	r7, #22
 800d8d2:	d852      	bhi.n	800d97a <_dtoa_r+0x212>
 800d8d4:	4b5d      	ldr	r3, [pc, #372]	@ (800da4c <_dtoa_r+0x2e4>)
 800d8d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d8e2:	f7f3 f923 	bl	8000b2c <__aeabi_dcmplt>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d049      	beq.n	800d97e <_dtoa_r+0x216>
 800d8ea:	3f01      	subs	r7, #1
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8f2:	1b9b      	subs	r3, r3, r6
 800d8f4:	1e5a      	subs	r2, r3, #1
 800d8f6:	bf45      	ittet	mi
 800d8f8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d8fc:	9300      	strmi	r3, [sp, #0]
 800d8fe:	2300      	movpl	r3, #0
 800d900:	2300      	movmi	r3, #0
 800d902:	9206      	str	r2, [sp, #24]
 800d904:	bf54      	ite	pl
 800d906:	9300      	strpl	r3, [sp, #0]
 800d908:	9306      	strmi	r3, [sp, #24]
 800d90a:	2f00      	cmp	r7, #0
 800d90c:	db39      	blt.n	800d982 <_dtoa_r+0x21a>
 800d90e:	9b06      	ldr	r3, [sp, #24]
 800d910:	970d      	str	r7, [sp, #52]	@ 0x34
 800d912:	443b      	add	r3, r7
 800d914:	9306      	str	r3, [sp, #24]
 800d916:	2300      	movs	r3, #0
 800d918:	9308      	str	r3, [sp, #32]
 800d91a:	9b07      	ldr	r3, [sp, #28]
 800d91c:	2b09      	cmp	r3, #9
 800d91e:	d863      	bhi.n	800d9e8 <_dtoa_r+0x280>
 800d920:	2b05      	cmp	r3, #5
 800d922:	bfc4      	itt	gt
 800d924:	3b04      	subgt	r3, #4
 800d926:	9307      	strgt	r3, [sp, #28]
 800d928:	9b07      	ldr	r3, [sp, #28]
 800d92a:	f1a3 0302 	sub.w	r3, r3, #2
 800d92e:	bfcc      	ite	gt
 800d930:	2400      	movgt	r4, #0
 800d932:	2401      	movle	r4, #1
 800d934:	2b03      	cmp	r3, #3
 800d936:	d863      	bhi.n	800da00 <_dtoa_r+0x298>
 800d938:	e8df f003 	tbb	[pc, r3]
 800d93c:	2b375452 	.word	0x2b375452
 800d940:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d944:	441e      	add	r6, r3
 800d946:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d94a:	2b20      	cmp	r3, #32
 800d94c:	bfc1      	itttt	gt
 800d94e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d952:	409f      	lslgt	r7, r3
 800d954:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d958:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d95c:	bfd6      	itet	le
 800d95e:	f1c3 0320 	rsble	r3, r3, #32
 800d962:	ea47 0003 	orrgt.w	r0, r7, r3
 800d966:	fa04 f003 	lslle.w	r0, r4, r3
 800d96a:	f7f2 fdf3 	bl	8000554 <__aeabi_ui2d>
 800d96e:	2201      	movs	r2, #1
 800d970:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d974:	3e01      	subs	r6, #1
 800d976:	9212      	str	r2, [sp, #72]	@ 0x48
 800d978:	e776      	b.n	800d868 <_dtoa_r+0x100>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e7b7      	b.n	800d8ee <_dtoa_r+0x186>
 800d97e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d980:	e7b6      	b.n	800d8f0 <_dtoa_r+0x188>
 800d982:	9b00      	ldr	r3, [sp, #0]
 800d984:	1bdb      	subs	r3, r3, r7
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	427b      	negs	r3, r7
 800d98a:	9308      	str	r3, [sp, #32]
 800d98c:	2300      	movs	r3, #0
 800d98e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d990:	e7c3      	b.n	800d91a <_dtoa_r+0x1b2>
 800d992:	2301      	movs	r3, #1
 800d994:	9309      	str	r3, [sp, #36]	@ 0x24
 800d996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d998:	eb07 0b03 	add.w	fp, r7, r3
 800d99c:	f10b 0301 	add.w	r3, fp, #1
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	9303      	str	r3, [sp, #12]
 800d9a4:	bfb8      	it	lt
 800d9a6:	2301      	movlt	r3, #1
 800d9a8:	e006      	b.n	800d9b8 <_dtoa_r+0x250>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	dd28      	ble.n	800da06 <_dtoa_r+0x29e>
 800d9b4:	469b      	mov	fp, r3
 800d9b6:	9303      	str	r3, [sp, #12]
 800d9b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d9bc:	2100      	movs	r1, #0
 800d9be:	2204      	movs	r2, #4
 800d9c0:	f102 0514 	add.w	r5, r2, #20
 800d9c4:	429d      	cmp	r5, r3
 800d9c6:	d926      	bls.n	800da16 <_dtoa_r+0x2ae>
 800d9c8:	6041      	str	r1, [r0, #4]
 800d9ca:	4648      	mov	r0, r9
 800d9cc:	f000 fd9c 	bl	800e508 <_Balloc>
 800d9d0:	4682      	mov	sl, r0
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d142      	bne.n	800da5c <_dtoa_r+0x2f4>
 800d9d6:	4b1e      	ldr	r3, [pc, #120]	@ (800da50 <_dtoa_r+0x2e8>)
 800d9d8:	4602      	mov	r2, r0
 800d9da:	f240 11af 	movw	r1, #431	@ 0x1af
 800d9de:	e6da      	b.n	800d796 <_dtoa_r+0x2e>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	e7e3      	b.n	800d9ac <_dtoa_r+0x244>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e7d5      	b.n	800d994 <_dtoa_r+0x22c>
 800d9e8:	2401      	movs	r4, #1
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9307      	str	r3, [sp, #28]
 800d9ee:	9409      	str	r4, [sp, #36]	@ 0x24
 800d9f0:	f04f 3bff 	mov.w	fp, #4294967295
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d9fa:	2312      	movs	r3, #18
 800d9fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d9fe:	e7db      	b.n	800d9b8 <_dtoa_r+0x250>
 800da00:	2301      	movs	r3, #1
 800da02:	9309      	str	r3, [sp, #36]	@ 0x24
 800da04:	e7f4      	b.n	800d9f0 <_dtoa_r+0x288>
 800da06:	f04f 0b01 	mov.w	fp, #1
 800da0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800da0e:	465b      	mov	r3, fp
 800da10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800da14:	e7d0      	b.n	800d9b8 <_dtoa_r+0x250>
 800da16:	3101      	adds	r1, #1
 800da18:	0052      	lsls	r2, r2, #1
 800da1a:	e7d1      	b.n	800d9c0 <_dtoa_r+0x258>
 800da1c:	f3af 8000 	nop.w
 800da20:	636f4361 	.word	0x636f4361
 800da24:	3fd287a7 	.word	0x3fd287a7
 800da28:	8b60c8b3 	.word	0x8b60c8b3
 800da2c:	3fc68a28 	.word	0x3fc68a28
 800da30:	509f79fb 	.word	0x509f79fb
 800da34:	3fd34413 	.word	0x3fd34413
 800da38:	0801060d 	.word	0x0801060d
 800da3c:	08010624 	.word	0x08010624
 800da40:	7ff00000 	.word	0x7ff00000
 800da44:	080105dd 	.word	0x080105dd
 800da48:	3ff80000 	.word	0x3ff80000
 800da4c:	08010778 	.word	0x08010778
 800da50:	0801067c 	.word	0x0801067c
 800da54:	08010609 	.word	0x08010609
 800da58:	080105dc 	.word	0x080105dc
 800da5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800da60:	6018      	str	r0, [r3, #0]
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	2b0e      	cmp	r3, #14
 800da66:	f200 80a1 	bhi.w	800dbac <_dtoa_r+0x444>
 800da6a:	2c00      	cmp	r4, #0
 800da6c:	f000 809e 	beq.w	800dbac <_dtoa_r+0x444>
 800da70:	2f00      	cmp	r7, #0
 800da72:	dd33      	ble.n	800dadc <_dtoa_r+0x374>
 800da74:	4b9c      	ldr	r3, [pc, #624]	@ (800dce8 <_dtoa_r+0x580>)
 800da76:	f007 020f 	and.w	r2, r7, #15
 800da7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da7e:	ed93 7b00 	vldr	d7, [r3]
 800da82:	05f8      	lsls	r0, r7, #23
 800da84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800da88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800da8c:	d516      	bpl.n	800dabc <_dtoa_r+0x354>
 800da8e:	4b97      	ldr	r3, [pc, #604]	@ (800dcec <_dtoa_r+0x584>)
 800da90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da98:	f7f2 ff00 	bl	800089c <__aeabi_ddiv>
 800da9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800daa0:	f004 040f 	and.w	r4, r4, #15
 800daa4:	2603      	movs	r6, #3
 800daa6:	4d91      	ldr	r5, [pc, #580]	@ (800dcec <_dtoa_r+0x584>)
 800daa8:	b954      	cbnz	r4, 800dac0 <_dtoa_r+0x358>
 800daaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800daae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dab2:	f7f2 fef3 	bl	800089c <__aeabi_ddiv>
 800dab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800daba:	e028      	b.n	800db0e <_dtoa_r+0x3a6>
 800dabc:	2602      	movs	r6, #2
 800dabe:	e7f2      	b.n	800daa6 <_dtoa_r+0x33e>
 800dac0:	07e1      	lsls	r1, r4, #31
 800dac2:	d508      	bpl.n	800dad6 <_dtoa_r+0x36e>
 800dac4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dacc:	f7f2 fdbc 	bl	8000648 <__aeabi_dmul>
 800dad0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dad4:	3601      	adds	r6, #1
 800dad6:	1064      	asrs	r4, r4, #1
 800dad8:	3508      	adds	r5, #8
 800dada:	e7e5      	b.n	800daa8 <_dtoa_r+0x340>
 800dadc:	f000 80af 	beq.w	800dc3e <_dtoa_r+0x4d6>
 800dae0:	427c      	negs	r4, r7
 800dae2:	4b81      	ldr	r3, [pc, #516]	@ (800dce8 <_dtoa_r+0x580>)
 800dae4:	4d81      	ldr	r5, [pc, #516]	@ (800dcec <_dtoa_r+0x584>)
 800dae6:	f004 020f 	and.w	r2, r4, #15
 800daea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800daf6:	f7f2 fda7 	bl	8000648 <__aeabi_dmul>
 800dafa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dafe:	1124      	asrs	r4, r4, #4
 800db00:	2300      	movs	r3, #0
 800db02:	2602      	movs	r6, #2
 800db04:	2c00      	cmp	r4, #0
 800db06:	f040 808f 	bne.w	800dc28 <_dtoa_r+0x4c0>
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1d3      	bne.n	800dab6 <_dtoa_r+0x34e>
 800db0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 8094 	beq.w	800dc42 <_dtoa_r+0x4da>
 800db1a:	4b75      	ldr	r3, [pc, #468]	@ (800dcf0 <_dtoa_r+0x588>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	4620      	mov	r0, r4
 800db20:	4629      	mov	r1, r5
 800db22:	f7f3 f803 	bl	8000b2c <__aeabi_dcmplt>
 800db26:	2800      	cmp	r0, #0
 800db28:	f000 808b 	beq.w	800dc42 <_dtoa_r+0x4da>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f000 8087 	beq.w	800dc42 <_dtoa_r+0x4da>
 800db34:	f1bb 0f00 	cmp.w	fp, #0
 800db38:	dd34      	ble.n	800dba4 <_dtoa_r+0x43c>
 800db3a:	4620      	mov	r0, r4
 800db3c:	4b6d      	ldr	r3, [pc, #436]	@ (800dcf4 <_dtoa_r+0x58c>)
 800db3e:	2200      	movs	r2, #0
 800db40:	4629      	mov	r1, r5
 800db42:	f7f2 fd81 	bl	8000648 <__aeabi_dmul>
 800db46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db4a:	f107 38ff 	add.w	r8, r7, #4294967295
 800db4e:	3601      	adds	r6, #1
 800db50:	465c      	mov	r4, fp
 800db52:	4630      	mov	r0, r6
 800db54:	f7f2 fd0e 	bl	8000574 <__aeabi_i2d>
 800db58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db5c:	f7f2 fd74 	bl	8000648 <__aeabi_dmul>
 800db60:	4b65      	ldr	r3, [pc, #404]	@ (800dcf8 <_dtoa_r+0x590>)
 800db62:	2200      	movs	r2, #0
 800db64:	f7f2 fbba 	bl	80002dc <__adddf3>
 800db68:	4605      	mov	r5, r0
 800db6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800db6e:	2c00      	cmp	r4, #0
 800db70:	d16a      	bne.n	800dc48 <_dtoa_r+0x4e0>
 800db72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db76:	4b61      	ldr	r3, [pc, #388]	@ (800dcfc <_dtoa_r+0x594>)
 800db78:	2200      	movs	r2, #0
 800db7a:	f7f2 fbad 	bl	80002d8 <__aeabi_dsub>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db86:	462a      	mov	r2, r5
 800db88:	4633      	mov	r3, r6
 800db8a:	f7f2 ffed 	bl	8000b68 <__aeabi_dcmpgt>
 800db8e:	2800      	cmp	r0, #0
 800db90:	f040 8298 	bne.w	800e0c4 <_dtoa_r+0x95c>
 800db94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db98:	462a      	mov	r2, r5
 800db9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800db9e:	f7f2 ffc5 	bl	8000b2c <__aeabi_dcmplt>
 800dba2:	bb38      	cbnz	r0, 800dbf4 <_dtoa_r+0x48c>
 800dba4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dba8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dbac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f2c0 8157 	blt.w	800de62 <_dtoa_r+0x6fa>
 800dbb4:	2f0e      	cmp	r7, #14
 800dbb6:	f300 8154 	bgt.w	800de62 <_dtoa_r+0x6fa>
 800dbba:	4b4b      	ldr	r3, [pc, #300]	@ (800dce8 <_dtoa_r+0x580>)
 800dbbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dbc0:	ed93 7b00 	vldr	d7, [r3]
 800dbc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	ed8d 7b00 	vstr	d7, [sp]
 800dbcc:	f280 80e5 	bge.w	800dd9a <_dtoa_r+0x632>
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f300 80e1 	bgt.w	800dd9a <_dtoa_r+0x632>
 800dbd8:	d10c      	bne.n	800dbf4 <_dtoa_r+0x48c>
 800dbda:	4b48      	ldr	r3, [pc, #288]	@ (800dcfc <_dtoa_r+0x594>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	ec51 0b17 	vmov	r0, r1, d7
 800dbe2:	f7f2 fd31 	bl	8000648 <__aeabi_dmul>
 800dbe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbea:	f7f2 ffb3 	bl	8000b54 <__aeabi_dcmpge>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f000 8266 	beq.w	800e0c0 <_dtoa_r+0x958>
 800dbf4:	2400      	movs	r4, #0
 800dbf6:	4625      	mov	r5, r4
 800dbf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbfa:	4656      	mov	r6, sl
 800dbfc:	ea6f 0803 	mvn.w	r8, r3
 800dc00:	2700      	movs	r7, #0
 800dc02:	4621      	mov	r1, r4
 800dc04:	4648      	mov	r0, r9
 800dc06:	f000 fcbf 	bl	800e588 <_Bfree>
 800dc0a:	2d00      	cmp	r5, #0
 800dc0c:	f000 80bd 	beq.w	800dd8a <_dtoa_r+0x622>
 800dc10:	b12f      	cbz	r7, 800dc1e <_dtoa_r+0x4b6>
 800dc12:	42af      	cmp	r7, r5
 800dc14:	d003      	beq.n	800dc1e <_dtoa_r+0x4b6>
 800dc16:	4639      	mov	r1, r7
 800dc18:	4648      	mov	r0, r9
 800dc1a:	f000 fcb5 	bl	800e588 <_Bfree>
 800dc1e:	4629      	mov	r1, r5
 800dc20:	4648      	mov	r0, r9
 800dc22:	f000 fcb1 	bl	800e588 <_Bfree>
 800dc26:	e0b0      	b.n	800dd8a <_dtoa_r+0x622>
 800dc28:	07e2      	lsls	r2, r4, #31
 800dc2a:	d505      	bpl.n	800dc38 <_dtoa_r+0x4d0>
 800dc2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc30:	f7f2 fd0a 	bl	8000648 <__aeabi_dmul>
 800dc34:	3601      	adds	r6, #1
 800dc36:	2301      	movs	r3, #1
 800dc38:	1064      	asrs	r4, r4, #1
 800dc3a:	3508      	adds	r5, #8
 800dc3c:	e762      	b.n	800db04 <_dtoa_r+0x39c>
 800dc3e:	2602      	movs	r6, #2
 800dc40:	e765      	b.n	800db0e <_dtoa_r+0x3a6>
 800dc42:	9c03      	ldr	r4, [sp, #12]
 800dc44:	46b8      	mov	r8, r7
 800dc46:	e784      	b.n	800db52 <_dtoa_r+0x3ea>
 800dc48:	4b27      	ldr	r3, [pc, #156]	@ (800dce8 <_dtoa_r+0x580>)
 800dc4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc54:	4454      	add	r4, sl
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d054      	beq.n	800dd04 <_dtoa_r+0x59c>
 800dc5a:	4929      	ldr	r1, [pc, #164]	@ (800dd00 <_dtoa_r+0x598>)
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	f7f2 fe1d 	bl	800089c <__aeabi_ddiv>
 800dc62:	4633      	mov	r3, r6
 800dc64:	462a      	mov	r2, r5
 800dc66:	f7f2 fb37 	bl	80002d8 <__aeabi_dsub>
 800dc6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc6e:	4656      	mov	r6, sl
 800dc70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc74:	f7f2 ff98 	bl	8000ba8 <__aeabi_d2iz>
 800dc78:	4605      	mov	r5, r0
 800dc7a:	f7f2 fc7b 	bl	8000574 <__aeabi_i2d>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	460b      	mov	r3, r1
 800dc82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc86:	f7f2 fb27 	bl	80002d8 <__aeabi_dsub>
 800dc8a:	3530      	adds	r5, #48	@ 0x30
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dc94:	f806 5b01 	strb.w	r5, [r6], #1
 800dc98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc9c:	f7f2 ff46 	bl	8000b2c <__aeabi_dcmplt>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d172      	bne.n	800dd8a <_dtoa_r+0x622>
 800dca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dca8:	4911      	ldr	r1, [pc, #68]	@ (800dcf0 <_dtoa_r+0x588>)
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f7f2 fb14 	bl	80002d8 <__aeabi_dsub>
 800dcb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dcb4:	f7f2 ff3a 	bl	8000b2c <__aeabi_dcmplt>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	f040 80b4 	bne.w	800de26 <_dtoa_r+0x6be>
 800dcbe:	42a6      	cmp	r6, r4
 800dcc0:	f43f af70 	beq.w	800dba4 <_dtoa_r+0x43c>
 800dcc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dcf4 <_dtoa_r+0x58c>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	f7f2 fcbc 	bl	8000648 <__aeabi_dmul>
 800dcd0:	4b08      	ldr	r3, [pc, #32]	@ (800dcf4 <_dtoa_r+0x58c>)
 800dcd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcdc:	f7f2 fcb4 	bl	8000648 <__aeabi_dmul>
 800dce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dce4:	e7c4      	b.n	800dc70 <_dtoa_r+0x508>
 800dce6:	bf00      	nop
 800dce8:	08010778 	.word	0x08010778
 800dcec:	08010750 	.word	0x08010750
 800dcf0:	3ff00000 	.word	0x3ff00000
 800dcf4:	40240000 	.word	0x40240000
 800dcf8:	401c0000 	.word	0x401c0000
 800dcfc:	40140000 	.word	0x40140000
 800dd00:	3fe00000 	.word	0x3fe00000
 800dd04:	4631      	mov	r1, r6
 800dd06:	4628      	mov	r0, r5
 800dd08:	f7f2 fc9e 	bl	8000648 <__aeabi_dmul>
 800dd0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dd10:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dd12:	4656      	mov	r6, sl
 800dd14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd18:	f7f2 ff46 	bl	8000ba8 <__aeabi_d2iz>
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	f7f2 fc29 	bl	8000574 <__aeabi_i2d>
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd2a:	f7f2 fad5 	bl	80002d8 <__aeabi_dsub>
 800dd2e:	3530      	adds	r5, #48	@ 0x30
 800dd30:	f806 5b01 	strb.w	r5, [r6], #1
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	42a6      	cmp	r6, r4
 800dd3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd3e:	f04f 0200 	mov.w	r2, #0
 800dd42:	d124      	bne.n	800dd8e <_dtoa_r+0x626>
 800dd44:	4baf      	ldr	r3, [pc, #700]	@ (800e004 <_dtoa_r+0x89c>)
 800dd46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dd4a:	f7f2 fac7 	bl	80002dc <__adddf3>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd56:	f7f2 ff07 	bl	8000b68 <__aeabi_dcmpgt>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d163      	bne.n	800de26 <_dtoa_r+0x6be>
 800dd5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dd62:	49a8      	ldr	r1, [pc, #672]	@ (800e004 <_dtoa_r+0x89c>)
 800dd64:	2000      	movs	r0, #0
 800dd66:	f7f2 fab7 	bl	80002d8 <__aeabi_dsub>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd72:	f7f2 fedb 	bl	8000b2c <__aeabi_dcmplt>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f43f af14 	beq.w	800dba4 <_dtoa_r+0x43c>
 800dd7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800dd7e:	1e73      	subs	r3, r6, #1
 800dd80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd86:	2b30      	cmp	r3, #48	@ 0x30
 800dd88:	d0f8      	beq.n	800dd7c <_dtoa_r+0x614>
 800dd8a:	4647      	mov	r7, r8
 800dd8c:	e03b      	b.n	800de06 <_dtoa_r+0x69e>
 800dd8e:	4b9e      	ldr	r3, [pc, #632]	@ (800e008 <_dtoa_r+0x8a0>)
 800dd90:	f7f2 fc5a 	bl	8000648 <__aeabi_dmul>
 800dd94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd98:	e7bc      	b.n	800dd14 <_dtoa_r+0x5ac>
 800dd9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dd9e:	4656      	mov	r6, sl
 800dda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda4:	4620      	mov	r0, r4
 800dda6:	4629      	mov	r1, r5
 800dda8:	f7f2 fd78 	bl	800089c <__aeabi_ddiv>
 800ddac:	f7f2 fefc 	bl	8000ba8 <__aeabi_d2iz>
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	f7f2 fbdf 	bl	8000574 <__aeabi_i2d>
 800ddb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddba:	f7f2 fc45 	bl	8000648 <__aeabi_dmul>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ddca:	f7f2 fa85 	bl	80002d8 <__aeabi_dsub>
 800ddce:	f806 4b01 	strb.w	r4, [r6], #1
 800ddd2:	9d03      	ldr	r5, [sp, #12]
 800ddd4:	eba6 040a 	sub.w	r4, r6, sl
 800ddd8:	42a5      	cmp	r5, r4
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	d133      	bne.n	800de48 <_dtoa_r+0x6e0>
 800dde0:	f7f2 fa7c 	bl	80002dc <__adddf3>
 800dde4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dde8:	4604      	mov	r4, r0
 800ddea:	460d      	mov	r5, r1
 800ddec:	f7f2 febc 	bl	8000b68 <__aeabi_dcmpgt>
 800ddf0:	b9c0      	cbnz	r0, 800de24 <_dtoa_r+0x6bc>
 800ddf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	f7f2 fe8d 	bl	8000b18 <__aeabi_dcmpeq>
 800ddfe:	b110      	cbz	r0, 800de06 <_dtoa_r+0x69e>
 800de00:	f018 0f01 	tst.w	r8, #1
 800de04:	d10e      	bne.n	800de24 <_dtoa_r+0x6bc>
 800de06:	9902      	ldr	r1, [sp, #8]
 800de08:	4648      	mov	r0, r9
 800de0a:	f000 fbbd 	bl	800e588 <_Bfree>
 800de0e:	2300      	movs	r3, #0
 800de10:	7033      	strb	r3, [r6, #0]
 800de12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de14:	3701      	adds	r7, #1
 800de16:	601f      	str	r7, [r3, #0]
 800de18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 824b 	beq.w	800e2b6 <_dtoa_r+0xb4e>
 800de20:	601e      	str	r6, [r3, #0]
 800de22:	e248      	b.n	800e2b6 <_dtoa_r+0xb4e>
 800de24:	46b8      	mov	r8, r7
 800de26:	4633      	mov	r3, r6
 800de28:	461e      	mov	r6, r3
 800de2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de2e:	2a39      	cmp	r2, #57	@ 0x39
 800de30:	d106      	bne.n	800de40 <_dtoa_r+0x6d8>
 800de32:	459a      	cmp	sl, r3
 800de34:	d1f8      	bne.n	800de28 <_dtoa_r+0x6c0>
 800de36:	2230      	movs	r2, #48	@ 0x30
 800de38:	f108 0801 	add.w	r8, r8, #1
 800de3c:	f88a 2000 	strb.w	r2, [sl]
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	3201      	adds	r2, #1
 800de44:	701a      	strb	r2, [r3, #0]
 800de46:	e7a0      	b.n	800dd8a <_dtoa_r+0x622>
 800de48:	4b6f      	ldr	r3, [pc, #444]	@ (800e008 <_dtoa_r+0x8a0>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	f7f2 fbfc 	bl	8000648 <__aeabi_dmul>
 800de50:	2200      	movs	r2, #0
 800de52:	2300      	movs	r3, #0
 800de54:	4604      	mov	r4, r0
 800de56:	460d      	mov	r5, r1
 800de58:	f7f2 fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d09f      	beq.n	800dda0 <_dtoa_r+0x638>
 800de60:	e7d1      	b.n	800de06 <_dtoa_r+0x69e>
 800de62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de64:	2a00      	cmp	r2, #0
 800de66:	f000 80ea 	beq.w	800e03e <_dtoa_r+0x8d6>
 800de6a:	9a07      	ldr	r2, [sp, #28]
 800de6c:	2a01      	cmp	r2, #1
 800de6e:	f300 80cd 	bgt.w	800e00c <_dtoa_r+0x8a4>
 800de72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800de74:	2a00      	cmp	r2, #0
 800de76:	f000 80c1 	beq.w	800dffc <_dtoa_r+0x894>
 800de7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800de7e:	9c08      	ldr	r4, [sp, #32]
 800de80:	9e00      	ldr	r6, [sp, #0]
 800de82:	9a00      	ldr	r2, [sp, #0]
 800de84:	441a      	add	r2, r3
 800de86:	9200      	str	r2, [sp, #0]
 800de88:	9a06      	ldr	r2, [sp, #24]
 800de8a:	2101      	movs	r1, #1
 800de8c:	441a      	add	r2, r3
 800de8e:	4648      	mov	r0, r9
 800de90:	9206      	str	r2, [sp, #24]
 800de92:	f000 fc2d 	bl	800e6f0 <__i2b>
 800de96:	4605      	mov	r5, r0
 800de98:	b166      	cbz	r6, 800deb4 <_dtoa_r+0x74c>
 800de9a:	9b06      	ldr	r3, [sp, #24]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	dd09      	ble.n	800deb4 <_dtoa_r+0x74c>
 800dea0:	42b3      	cmp	r3, r6
 800dea2:	9a00      	ldr	r2, [sp, #0]
 800dea4:	bfa8      	it	ge
 800dea6:	4633      	movge	r3, r6
 800dea8:	1ad2      	subs	r2, r2, r3
 800deaa:	9200      	str	r2, [sp, #0]
 800deac:	9a06      	ldr	r2, [sp, #24]
 800deae:	1af6      	subs	r6, r6, r3
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	9306      	str	r3, [sp, #24]
 800deb4:	9b08      	ldr	r3, [sp, #32]
 800deb6:	b30b      	cbz	r3, 800defc <_dtoa_r+0x794>
 800deb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deba:	2b00      	cmp	r3, #0
 800debc:	f000 80c6 	beq.w	800e04c <_dtoa_r+0x8e4>
 800dec0:	2c00      	cmp	r4, #0
 800dec2:	f000 80c0 	beq.w	800e046 <_dtoa_r+0x8de>
 800dec6:	4629      	mov	r1, r5
 800dec8:	4622      	mov	r2, r4
 800deca:	4648      	mov	r0, r9
 800decc:	f000 fcc8 	bl	800e860 <__pow5mult>
 800ded0:	9a02      	ldr	r2, [sp, #8]
 800ded2:	4601      	mov	r1, r0
 800ded4:	4605      	mov	r5, r0
 800ded6:	4648      	mov	r0, r9
 800ded8:	f000 fc20 	bl	800e71c <__multiply>
 800dedc:	9902      	ldr	r1, [sp, #8]
 800dede:	4680      	mov	r8, r0
 800dee0:	4648      	mov	r0, r9
 800dee2:	f000 fb51 	bl	800e588 <_Bfree>
 800dee6:	9b08      	ldr	r3, [sp, #32]
 800dee8:	1b1b      	subs	r3, r3, r4
 800deea:	9308      	str	r3, [sp, #32]
 800deec:	f000 80b1 	beq.w	800e052 <_dtoa_r+0x8ea>
 800def0:	9a08      	ldr	r2, [sp, #32]
 800def2:	4641      	mov	r1, r8
 800def4:	4648      	mov	r0, r9
 800def6:	f000 fcb3 	bl	800e860 <__pow5mult>
 800defa:	9002      	str	r0, [sp, #8]
 800defc:	2101      	movs	r1, #1
 800defe:	4648      	mov	r0, r9
 800df00:	f000 fbf6 	bl	800e6f0 <__i2b>
 800df04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df06:	4604      	mov	r4, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 81d8 	beq.w	800e2be <_dtoa_r+0xb56>
 800df0e:	461a      	mov	r2, r3
 800df10:	4601      	mov	r1, r0
 800df12:	4648      	mov	r0, r9
 800df14:	f000 fca4 	bl	800e860 <__pow5mult>
 800df18:	9b07      	ldr	r3, [sp, #28]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	4604      	mov	r4, r0
 800df1e:	f300 809f 	bgt.w	800e060 <_dtoa_r+0x8f8>
 800df22:	9b04      	ldr	r3, [sp, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f040 8097 	bne.w	800e058 <_dtoa_r+0x8f0>
 800df2a:	9b05      	ldr	r3, [sp, #20]
 800df2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df30:	2b00      	cmp	r3, #0
 800df32:	f040 8093 	bne.w	800e05c <_dtoa_r+0x8f4>
 800df36:	9b05      	ldr	r3, [sp, #20]
 800df38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df3c:	0d1b      	lsrs	r3, r3, #20
 800df3e:	051b      	lsls	r3, r3, #20
 800df40:	b133      	cbz	r3, 800df50 <_dtoa_r+0x7e8>
 800df42:	9b00      	ldr	r3, [sp, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	9b06      	ldr	r3, [sp, #24]
 800df4a:	3301      	adds	r3, #1
 800df4c:	9306      	str	r3, [sp, #24]
 800df4e:	2301      	movs	r3, #1
 800df50:	9308      	str	r3, [sp, #32]
 800df52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 81b8 	beq.w	800e2ca <_dtoa_r+0xb62>
 800df5a:	6923      	ldr	r3, [r4, #16]
 800df5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df60:	6918      	ldr	r0, [r3, #16]
 800df62:	f000 fb79 	bl	800e658 <__hi0bits>
 800df66:	f1c0 0020 	rsb	r0, r0, #32
 800df6a:	9b06      	ldr	r3, [sp, #24]
 800df6c:	4418      	add	r0, r3
 800df6e:	f010 001f 	ands.w	r0, r0, #31
 800df72:	f000 8082 	beq.w	800e07a <_dtoa_r+0x912>
 800df76:	f1c0 0320 	rsb	r3, r0, #32
 800df7a:	2b04      	cmp	r3, #4
 800df7c:	dd73      	ble.n	800e066 <_dtoa_r+0x8fe>
 800df7e:	9b00      	ldr	r3, [sp, #0]
 800df80:	f1c0 001c 	rsb	r0, r0, #28
 800df84:	4403      	add	r3, r0
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	9b06      	ldr	r3, [sp, #24]
 800df8a:	4403      	add	r3, r0
 800df8c:	4406      	add	r6, r0
 800df8e:	9306      	str	r3, [sp, #24]
 800df90:	9b00      	ldr	r3, [sp, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	dd05      	ble.n	800dfa2 <_dtoa_r+0x83a>
 800df96:	9902      	ldr	r1, [sp, #8]
 800df98:	461a      	mov	r2, r3
 800df9a:	4648      	mov	r0, r9
 800df9c:	f000 fcba 	bl	800e914 <__lshift>
 800dfa0:	9002      	str	r0, [sp, #8]
 800dfa2:	9b06      	ldr	r3, [sp, #24]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dd05      	ble.n	800dfb4 <_dtoa_r+0x84c>
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	461a      	mov	r2, r3
 800dfac:	4648      	mov	r0, r9
 800dfae:	f000 fcb1 	bl	800e914 <__lshift>
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d061      	beq.n	800e07e <_dtoa_r+0x916>
 800dfba:	9802      	ldr	r0, [sp, #8]
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f000 fd15 	bl	800e9ec <__mcmp>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	da5b      	bge.n	800e07e <_dtoa_r+0x916>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	9902      	ldr	r1, [sp, #8]
 800dfca:	220a      	movs	r2, #10
 800dfcc:	4648      	mov	r0, r9
 800dfce:	f000 fafd 	bl	800e5cc <__multadd>
 800dfd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfd4:	9002      	str	r0, [sp, #8]
 800dfd6:	f107 38ff 	add.w	r8, r7, #4294967295
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 8177 	beq.w	800e2ce <_dtoa_r+0xb66>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	220a      	movs	r2, #10
 800dfe6:	4648      	mov	r0, r9
 800dfe8:	f000 faf0 	bl	800e5cc <__multadd>
 800dfec:	f1bb 0f00 	cmp.w	fp, #0
 800dff0:	4605      	mov	r5, r0
 800dff2:	dc6f      	bgt.n	800e0d4 <_dtoa_r+0x96c>
 800dff4:	9b07      	ldr	r3, [sp, #28]
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	dc49      	bgt.n	800e08e <_dtoa_r+0x926>
 800dffa:	e06b      	b.n	800e0d4 <_dtoa_r+0x96c>
 800dffc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dffe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e002:	e73c      	b.n	800de7e <_dtoa_r+0x716>
 800e004:	3fe00000 	.word	0x3fe00000
 800e008:	40240000 	.word	0x40240000
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	1e5c      	subs	r4, r3, #1
 800e010:	9b08      	ldr	r3, [sp, #32]
 800e012:	42a3      	cmp	r3, r4
 800e014:	db09      	blt.n	800e02a <_dtoa_r+0x8c2>
 800e016:	1b1c      	subs	r4, r3, r4
 800e018:	9b03      	ldr	r3, [sp, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f6bf af30 	bge.w	800de80 <_dtoa_r+0x718>
 800e020:	9b00      	ldr	r3, [sp, #0]
 800e022:	9a03      	ldr	r2, [sp, #12]
 800e024:	1a9e      	subs	r6, r3, r2
 800e026:	2300      	movs	r3, #0
 800e028:	e72b      	b.n	800de82 <_dtoa_r+0x71a>
 800e02a:	9b08      	ldr	r3, [sp, #32]
 800e02c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e02e:	9408      	str	r4, [sp, #32]
 800e030:	1ae3      	subs	r3, r4, r3
 800e032:	441a      	add	r2, r3
 800e034:	9e00      	ldr	r6, [sp, #0]
 800e036:	9b03      	ldr	r3, [sp, #12]
 800e038:	920d      	str	r2, [sp, #52]	@ 0x34
 800e03a:	2400      	movs	r4, #0
 800e03c:	e721      	b.n	800de82 <_dtoa_r+0x71a>
 800e03e:	9c08      	ldr	r4, [sp, #32]
 800e040:	9e00      	ldr	r6, [sp, #0]
 800e042:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e044:	e728      	b.n	800de98 <_dtoa_r+0x730>
 800e046:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e04a:	e751      	b.n	800def0 <_dtoa_r+0x788>
 800e04c:	9a08      	ldr	r2, [sp, #32]
 800e04e:	9902      	ldr	r1, [sp, #8]
 800e050:	e750      	b.n	800def4 <_dtoa_r+0x78c>
 800e052:	f8cd 8008 	str.w	r8, [sp, #8]
 800e056:	e751      	b.n	800defc <_dtoa_r+0x794>
 800e058:	2300      	movs	r3, #0
 800e05a:	e779      	b.n	800df50 <_dtoa_r+0x7e8>
 800e05c:	9b04      	ldr	r3, [sp, #16]
 800e05e:	e777      	b.n	800df50 <_dtoa_r+0x7e8>
 800e060:	2300      	movs	r3, #0
 800e062:	9308      	str	r3, [sp, #32]
 800e064:	e779      	b.n	800df5a <_dtoa_r+0x7f2>
 800e066:	d093      	beq.n	800df90 <_dtoa_r+0x828>
 800e068:	9a00      	ldr	r2, [sp, #0]
 800e06a:	331c      	adds	r3, #28
 800e06c:	441a      	add	r2, r3
 800e06e:	9200      	str	r2, [sp, #0]
 800e070:	9a06      	ldr	r2, [sp, #24]
 800e072:	441a      	add	r2, r3
 800e074:	441e      	add	r6, r3
 800e076:	9206      	str	r2, [sp, #24]
 800e078:	e78a      	b.n	800df90 <_dtoa_r+0x828>
 800e07a:	4603      	mov	r3, r0
 800e07c:	e7f4      	b.n	800e068 <_dtoa_r+0x900>
 800e07e:	9b03      	ldr	r3, [sp, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	46b8      	mov	r8, r7
 800e084:	dc20      	bgt.n	800e0c8 <_dtoa_r+0x960>
 800e086:	469b      	mov	fp, r3
 800e088:	9b07      	ldr	r3, [sp, #28]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	dd1e      	ble.n	800e0cc <_dtoa_r+0x964>
 800e08e:	f1bb 0f00 	cmp.w	fp, #0
 800e092:	f47f adb1 	bne.w	800dbf8 <_dtoa_r+0x490>
 800e096:	4621      	mov	r1, r4
 800e098:	465b      	mov	r3, fp
 800e09a:	2205      	movs	r2, #5
 800e09c:	4648      	mov	r0, r9
 800e09e:	f000 fa95 	bl	800e5cc <__multadd>
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	9802      	ldr	r0, [sp, #8]
 800e0a8:	f000 fca0 	bl	800e9ec <__mcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	f77f ada3 	ble.w	800dbf8 <_dtoa_r+0x490>
 800e0b2:	4656      	mov	r6, sl
 800e0b4:	2331      	movs	r3, #49	@ 0x31
 800e0b6:	f806 3b01 	strb.w	r3, [r6], #1
 800e0ba:	f108 0801 	add.w	r8, r8, #1
 800e0be:	e59f      	b.n	800dc00 <_dtoa_r+0x498>
 800e0c0:	9c03      	ldr	r4, [sp, #12]
 800e0c2:	46b8      	mov	r8, r7
 800e0c4:	4625      	mov	r5, r4
 800e0c6:	e7f4      	b.n	800e0b2 <_dtoa_r+0x94a>
 800e0c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 8101 	beq.w	800e2d6 <_dtoa_r+0xb6e>
 800e0d4:	2e00      	cmp	r6, #0
 800e0d6:	dd05      	ble.n	800e0e4 <_dtoa_r+0x97c>
 800e0d8:	4629      	mov	r1, r5
 800e0da:	4632      	mov	r2, r6
 800e0dc:	4648      	mov	r0, r9
 800e0de:	f000 fc19 	bl	800e914 <__lshift>
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	9b08      	ldr	r3, [sp, #32]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d05c      	beq.n	800e1a4 <_dtoa_r+0xa3c>
 800e0ea:	6869      	ldr	r1, [r5, #4]
 800e0ec:	4648      	mov	r0, r9
 800e0ee:	f000 fa0b 	bl	800e508 <_Balloc>
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	b928      	cbnz	r0, 800e102 <_dtoa_r+0x99a>
 800e0f6:	4b82      	ldr	r3, [pc, #520]	@ (800e300 <_dtoa_r+0xb98>)
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e0fe:	f7ff bb4a 	b.w	800d796 <_dtoa_r+0x2e>
 800e102:	692a      	ldr	r2, [r5, #16]
 800e104:	3202      	adds	r2, #2
 800e106:	0092      	lsls	r2, r2, #2
 800e108:	f105 010c 	add.w	r1, r5, #12
 800e10c:	300c      	adds	r0, #12
 800e10e:	f7ff fa94 	bl	800d63a <memcpy>
 800e112:	2201      	movs	r2, #1
 800e114:	4631      	mov	r1, r6
 800e116:	4648      	mov	r0, r9
 800e118:	f000 fbfc 	bl	800e914 <__lshift>
 800e11c:	f10a 0301 	add.w	r3, sl, #1
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	eb0a 030b 	add.w	r3, sl, fp
 800e126:	9308      	str	r3, [sp, #32]
 800e128:	9b04      	ldr	r3, [sp, #16]
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	462f      	mov	r7, r5
 800e130:	9306      	str	r3, [sp, #24]
 800e132:	4605      	mov	r5, r0
 800e134:	9b00      	ldr	r3, [sp, #0]
 800e136:	9802      	ldr	r0, [sp, #8]
 800e138:	4621      	mov	r1, r4
 800e13a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e13e:	f7ff fa8a 	bl	800d656 <quorem>
 800e142:	4603      	mov	r3, r0
 800e144:	3330      	adds	r3, #48	@ 0x30
 800e146:	9003      	str	r0, [sp, #12]
 800e148:	4639      	mov	r1, r7
 800e14a:	9802      	ldr	r0, [sp, #8]
 800e14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e14e:	f000 fc4d 	bl	800e9ec <__mcmp>
 800e152:	462a      	mov	r2, r5
 800e154:	9004      	str	r0, [sp, #16]
 800e156:	4621      	mov	r1, r4
 800e158:	4648      	mov	r0, r9
 800e15a:	f000 fc63 	bl	800ea24 <__mdiff>
 800e15e:	68c2      	ldr	r2, [r0, #12]
 800e160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e162:	4606      	mov	r6, r0
 800e164:	bb02      	cbnz	r2, 800e1a8 <_dtoa_r+0xa40>
 800e166:	4601      	mov	r1, r0
 800e168:	9802      	ldr	r0, [sp, #8]
 800e16a:	f000 fc3f 	bl	800e9ec <__mcmp>
 800e16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e170:	4602      	mov	r2, r0
 800e172:	4631      	mov	r1, r6
 800e174:	4648      	mov	r0, r9
 800e176:	920c      	str	r2, [sp, #48]	@ 0x30
 800e178:	9309      	str	r3, [sp, #36]	@ 0x24
 800e17a:	f000 fa05 	bl	800e588 <_Bfree>
 800e17e:	9b07      	ldr	r3, [sp, #28]
 800e180:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e182:	9e00      	ldr	r6, [sp, #0]
 800e184:	ea42 0103 	orr.w	r1, r2, r3
 800e188:	9b06      	ldr	r3, [sp, #24]
 800e18a:	4319      	orrs	r1, r3
 800e18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e18e:	d10d      	bne.n	800e1ac <_dtoa_r+0xa44>
 800e190:	2b39      	cmp	r3, #57	@ 0x39
 800e192:	d027      	beq.n	800e1e4 <_dtoa_r+0xa7c>
 800e194:	9a04      	ldr	r2, [sp, #16]
 800e196:	2a00      	cmp	r2, #0
 800e198:	dd01      	ble.n	800e19e <_dtoa_r+0xa36>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	3331      	adds	r3, #49	@ 0x31
 800e19e:	f88b 3000 	strb.w	r3, [fp]
 800e1a2:	e52e      	b.n	800dc02 <_dtoa_r+0x49a>
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	e7b9      	b.n	800e11c <_dtoa_r+0x9b4>
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	e7e2      	b.n	800e172 <_dtoa_r+0xa0a>
 800e1ac:	9904      	ldr	r1, [sp, #16]
 800e1ae:	2900      	cmp	r1, #0
 800e1b0:	db04      	blt.n	800e1bc <_dtoa_r+0xa54>
 800e1b2:	9807      	ldr	r0, [sp, #28]
 800e1b4:	4301      	orrs	r1, r0
 800e1b6:	9806      	ldr	r0, [sp, #24]
 800e1b8:	4301      	orrs	r1, r0
 800e1ba:	d120      	bne.n	800e1fe <_dtoa_r+0xa96>
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	ddee      	ble.n	800e19e <_dtoa_r+0xa36>
 800e1c0:	9902      	ldr	r1, [sp, #8]
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	4648      	mov	r0, r9
 800e1c8:	f000 fba4 	bl	800e914 <__lshift>
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	9002      	str	r0, [sp, #8]
 800e1d0:	f000 fc0c 	bl	800e9ec <__mcmp>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	9b00      	ldr	r3, [sp, #0]
 800e1d8:	dc02      	bgt.n	800e1e0 <_dtoa_r+0xa78>
 800e1da:	d1e0      	bne.n	800e19e <_dtoa_r+0xa36>
 800e1dc:	07da      	lsls	r2, r3, #31
 800e1de:	d5de      	bpl.n	800e19e <_dtoa_r+0xa36>
 800e1e0:	2b39      	cmp	r3, #57	@ 0x39
 800e1e2:	d1da      	bne.n	800e19a <_dtoa_r+0xa32>
 800e1e4:	2339      	movs	r3, #57	@ 0x39
 800e1e6:	f88b 3000 	strb.w	r3, [fp]
 800e1ea:	4633      	mov	r3, r6
 800e1ec:	461e      	mov	r6, r3
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e1f4:	2a39      	cmp	r2, #57	@ 0x39
 800e1f6:	d04e      	beq.n	800e296 <_dtoa_r+0xb2e>
 800e1f8:	3201      	adds	r2, #1
 800e1fa:	701a      	strb	r2, [r3, #0]
 800e1fc:	e501      	b.n	800dc02 <_dtoa_r+0x49a>
 800e1fe:	2a00      	cmp	r2, #0
 800e200:	dd03      	ble.n	800e20a <_dtoa_r+0xaa2>
 800e202:	2b39      	cmp	r3, #57	@ 0x39
 800e204:	d0ee      	beq.n	800e1e4 <_dtoa_r+0xa7c>
 800e206:	3301      	adds	r3, #1
 800e208:	e7c9      	b.n	800e19e <_dtoa_r+0xa36>
 800e20a:	9a00      	ldr	r2, [sp, #0]
 800e20c:	9908      	ldr	r1, [sp, #32]
 800e20e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e212:	428a      	cmp	r2, r1
 800e214:	d028      	beq.n	800e268 <_dtoa_r+0xb00>
 800e216:	9902      	ldr	r1, [sp, #8]
 800e218:	2300      	movs	r3, #0
 800e21a:	220a      	movs	r2, #10
 800e21c:	4648      	mov	r0, r9
 800e21e:	f000 f9d5 	bl	800e5cc <__multadd>
 800e222:	42af      	cmp	r7, r5
 800e224:	9002      	str	r0, [sp, #8]
 800e226:	f04f 0300 	mov.w	r3, #0
 800e22a:	f04f 020a 	mov.w	r2, #10
 800e22e:	4639      	mov	r1, r7
 800e230:	4648      	mov	r0, r9
 800e232:	d107      	bne.n	800e244 <_dtoa_r+0xadc>
 800e234:	f000 f9ca 	bl	800e5cc <__multadd>
 800e238:	4607      	mov	r7, r0
 800e23a:	4605      	mov	r5, r0
 800e23c:	9b00      	ldr	r3, [sp, #0]
 800e23e:	3301      	adds	r3, #1
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	e777      	b.n	800e134 <_dtoa_r+0x9cc>
 800e244:	f000 f9c2 	bl	800e5cc <__multadd>
 800e248:	4629      	mov	r1, r5
 800e24a:	4607      	mov	r7, r0
 800e24c:	2300      	movs	r3, #0
 800e24e:	220a      	movs	r2, #10
 800e250:	4648      	mov	r0, r9
 800e252:	f000 f9bb 	bl	800e5cc <__multadd>
 800e256:	4605      	mov	r5, r0
 800e258:	e7f0      	b.n	800e23c <_dtoa_r+0xad4>
 800e25a:	f1bb 0f00 	cmp.w	fp, #0
 800e25e:	bfcc      	ite	gt
 800e260:	465e      	movgt	r6, fp
 800e262:	2601      	movle	r6, #1
 800e264:	4456      	add	r6, sl
 800e266:	2700      	movs	r7, #0
 800e268:	9902      	ldr	r1, [sp, #8]
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	2201      	movs	r2, #1
 800e26e:	4648      	mov	r0, r9
 800e270:	f000 fb50 	bl	800e914 <__lshift>
 800e274:	4621      	mov	r1, r4
 800e276:	9002      	str	r0, [sp, #8]
 800e278:	f000 fbb8 	bl	800e9ec <__mcmp>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	dcb4      	bgt.n	800e1ea <_dtoa_r+0xa82>
 800e280:	d102      	bne.n	800e288 <_dtoa_r+0xb20>
 800e282:	9b00      	ldr	r3, [sp, #0]
 800e284:	07db      	lsls	r3, r3, #31
 800e286:	d4b0      	bmi.n	800e1ea <_dtoa_r+0xa82>
 800e288:	4633      	mov	r3, r6
 800e28a:	461e      	mov	r6, r3
 800e28c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e290:	2a30      	cmp	r2, #48	@ 0x30
 800e292:	d0fa      	beq.n	800e28a <_dtoa_r+0xb22>
 800e294:	e4b5      	b.n	800dc02 <_dtoa_r+0x49a>
 800e296:	459a      	cmp	sl, r3
 800e298:	d1a8      	bne.n	800e1ec <_dtoa_r+0xa84>
 800e29a:	2331      	movs	r3, #49	@ 0x31
 800e29c:	f108 0801 	add.w	r8, r8, #1
 800e2a0:	f88a 3000 	strb.w	r3, [sl]
 800e2a4:	e4ad      	b.n	800dc02 <_dtoa_r+0x49a>
 800e2a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e2a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e304 <_dtoa_r+0xb9c>
 800e2ac:	b11b      	cbz	r3, 800e2b6 <_dtoa_r+0xb4e>
 800e2ae:	f10a 0308 	add.w	r3, sl, #8
 800e2b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e2b4:	6013      	str	r3, [r2, #0]
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	b017      	add	sp, #92	@ 0x5c
 800e2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2be:	9b07      	ldr	r3, [sp, #28]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	f77f ae2e 	ble.w	800df22 <_dtoa_r+0x7ba>
 800e2c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2c8:	9308      	str	r3, [sp, #32]
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	e64d      	b.n	800df6a <_dtoa_r+0x802>
 800e2ce:	f1bb 0f00 	cmp.w	fp, #0
 800e2d2:	f77f aed9 	ble.w	800e088 <_dtoa_r+0x920>
 800e2d6:	4656      	mov	r6, sl
 800e2d8:	9802      	ldr	r0, [sp, #8]
 800e2da:	4621      	mov	r1, r4
 800e2dc:	f7ff f9bb 	bl	800d656 <quorem>
 800e2e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e2e4:	f806 3b01 	strb.w	r3, [r6], #1
 800e2e8:	eba6 020a 	sub.w	r2, r6, sl
 800e2ec:	4593      	cmp	fp, r2
 800e2ee:	ddb4      	ble.n	800e25a <_dtoa_r+0xaf2>
 800e2f0:	9902      	ldr	r1, [sp, #8]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	220a      	movs	r2, #10
 800e2f6:	4648      	mov	r0, r9
 800e2f8:	f000 f968 	bl	800e5cc <__multadd>
 800e2fc:	9002      	str	r0, [sp, #8]
 800e2fe:	e7eb      	b.n	800e2d8 <_dtoa_r+0xb70>
 800e300:	0801067c 	.word	0x0801067c
 800e304:	08010600 	.word	0x08010600

0800e308 <_free_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4605      	mov	r5, r0
 800e30c:	2900      	cmp	r1, #0
 800e30e:	d041      	beq.n	800e394 <_free_r+0x8c>
 800e310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e314:	1f0c      	subs	r4, r1, #4
 800e316:	2b00      	cmp	r3, #0
 800e318:	bfb8      	it	lt
 800e31a:	18e4      	addlt	r4, r4, r3
 800e31c:	f000 f8e8 	bl	800e4f0 <__malloc_lock>
 800e320:	4a1d      	ldr	r2, [pc, #116]	@ (800e398 <_free_r+0x90>)
 800e322:	6813      	ldr	r3, [r2, #0]
 800e324:	b933      	cbnz	r3, 800e334 <_free_r+0x2c>
 800e326:	6063      	str	r3, [r4, #4]
 800e328:	6014      	str	r4, [r2, #0]
 800e32a:	4628      	mov	r0, r5
 800e32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e330:	f000 b8e4 	b.w	800e4fc <__malloc_unlock>
 800e334:	42a3      	cmp	r3, r4
 800e336:	d908      	bls.n	800e34a <_free_r+0x42>
 800e338:	6820      	ldr	r0, [r4, #0]
 800e33a:	1821      	adds	r1, r4, r0
 800e33c:	428b      	cmp	r3, r1
 800e33e:	bf01      	itttt	eq
 800e340:	6819      	ldreq	r1, [r3, #0]
 800e342:	685b      	ldreq	r3, [r3, #4]
 800e344:	1809      	addeq	r1, r1, r0
 800e346:	6021      	streq	r1, [r4, #0]
 800e348:	e7ed      	b.n	800e326 <_free_r+0x1e>
 800e34a:	461a      	mov	r2, r3
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	b10b      	cbz	r3, 800e354 <_free_r+0x4c>
 800e350:	42a3      	cmp	r3, r4
 800e352:	d9fa      	bls.n	800e34a <_free_r+0x42>
 800e354:	6811      	ldr	r1, [r2, #0]
 800e356:	1850      	adds	r0, r2, r1
 800e358:	42a0      	cmp	r0, r4
 800e35a:	d10b      	bne.n	800e374 <_free_r+0x6c>
 800e35c:	6820      	ldr	r0, [r4, #0]
 800e35e:	4401      	add	r1, r0
 800e360:	1850      	adds	r0, r2, r1
 800e362:	4283      	cmp	r3, r0
 800e364:	6011      	str	r1, [r2, #0]
 800e366:	d1e0      	bne.n	800e32a <_free_r+0x22>
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	6053      	str	r3, [r2, #4]
 800e36e:	4408      	add	r0, r1
 800e370:	6010      	str	r0, [r2, #0]
 800e372:	e7da      	b.n	800e32a <_free_r+0x22>
 800e374:	d902      	bls.n	800e37c <_free_r+0x74>
 800e376:	230c      	movs	r3, #12
 800e378:	602b      	str	r3, [r5, #0]
 800e37a:	e7d6      	b.n	800e32a <_free_r+0x22>
 800e37c:	6820      	ldr	r0, [r4, #0]
 800e37e:	1821      	adds	r1, r4, r0
 800e380:	428b      	cmp	r3, r1
 800e382:	bf04      	itt	eq
 800e384:	6819      	ldreq	r1, [r3, #0]
 800e386:	685b      	ldreq	r3, [r3, #4]
 800e388:	6063      	str	r3, [r4, #4]
 800e38a:	bf04      	itt	eq
 800e38c:	1809      	addeq	r1, r1, r0
 800e38e:	6021      	streq	r1, [r4, #0]
 800e390:	6054      	str	r4, [r2, #4]
 800e392:	e7ca      	b.n	800e32a <_free_r+0x22>
 800e394:	bd38      	pop	{r3, r4, r5, pc}
 800e396:	bf00      	nop
 800e398:	20002ef4 	.word	0x20002ef4

0800e39c <malloc>:
 800e39c:	4b02      	ldr	r3, [pc, #8]	@ (800e3a8 <malloc+0xc>)
 800e39e:	4601      	mov	r1, r0
 800e3a0:	6818      	ldr	r0, [r3, #0]
 800e3a2:	f000 b825 	b.w	800e3f0 <_malloc_r>
 800e3a6:	bf00      	nop
 800e3a8:	20000058 	.word	0x20000058

0800e3ac <sbrk_aligned>:
 800e3ac:	b570      	push	{r4, r5, r6, lr}
 800e3ae:	4e0f      	ldr	r6, [pc, #60]	@ (800e3ec <sbrk_aligned+0x40>)
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	6831      	ldr	r1, [r6, #0]
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	b911      	cbnz	r1, 800e3be <sbrk_aligned+0x12>
 800e3b8:	f000 fccc 	bl	800ed54 <_sbrk_r>
 800e3bc:	6030      	str	r0, [r6, #0]
 800e3be:	4621      	mov	r1, r4
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f000 fcc7 	bl	800ed54 <_sbrk_r>
 800e3c6:	1c43      	adds	r3, r0, #1
 800e3c8:	d103      	bne.n	800e3d2 <sbrk_aligned+0x26>
 800e3ca:	f04f 34ff 	mov.w	r4, #4294967295
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	bd70      	pop	{r4, r5, r6, pc}
 800e3d2:	1cc4      	adds	r4, r0, #3
 800e3d4:	f024 0403 	bic.w	r4, r4, #3
 800e3d8:	42a0      	cmp	r0, r4
 800e3da:	d0f8      	beq.n	800e3ce <sbrk_aligned+0x22>
 800e3dc:	1a21      	subs	r1, r4, r0
 800e3de:	4628      	mov	r0, r5
 800e3e0:	f000 fcb8 	bl	800ed54 <_sbrk_r>
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	d1f2      	bne.n	800e3ce <sbrk_aligned+0x22>
 800e3e8:	e7ef      	b.n	800e3ca <sbrk_aligned+0x1e>
 800e3ea:	bf00      	nop
 800e3ec:	20002ef0 	.word	0x20002ef0

0800e3f0 <_malloc_r>:
 800e3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f4:	1ccd      	adds	r5, r1, #3
 800e3f6:	f025 0503 	bic.w	r5, r5, #3
 800e3fa:	3508      	adds	r5, #8
 800e3fc:	2d0c      	cmp	r5, #12
 800e3fe:	bf38      	it	cc
 800e400:	250c      	movcc	r5, #12
 800e402:	2d00      	cmp	r5, #0
 800e404:	4606      	mov	r6, r0
 800e406:	db01      	blt.n	800e40c <_malloc_r+0x1c>
 800e408:	42a9      	cmp	r1, r5
 800e40a:	d904      	bls.n	800e416 <_malloc_r+0x26>
 800e40c:	230c      	movs	r3, #12
 800e40e:	6033      	str	r3, [r6, #0]
 800e410:	2000      	movs	r0, #0
 800e412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4ec <_malloc_r+0xfc>
 800e41a:	f000 f869 	bl	800e4f0 <__malloc_lock>
 800e41e:	f8d8 3000 	ldr.w	r3, [r8]
 800e422:	461c      	mov	r4, r3
 800e424:	bb44      	cbnz	r4, 800e478 <_malloc_r+0x88>
 800e426:	4629      	mov	r1, r5
 800e428:	4630      	mov	r0, r6
 800e42a:	f7ff ffbf 	bl	800e3ac <sbrk_aligned>
 800e42e:	1c43      	adds	r3, r0, #1
 800e430:	4604      	mov	r4, r0
 800e432:	d158      	bne.n	800e4e6 <_malloc_r+0xf6>
 800e434:	f8d8 4000 	ldr.w	r4, [r8]
 800e438:	4627      	mov	r7, r4
 800e43a:	2f00      	cmp	r7, #0
 800e43c:	d143      	bne.n	800e4c6 <_malloc_r+0xd6>
 800e43e:	2c00      	cmp	r4, #0
 800e440:	d04b      	beq.n	800e4da <_malloc_r+0xea>
 800e442:	6823      	ldr	r3, [r4, #0]
 800e444:	4639      	mov	r1, r7
 800e446:	4630      	mov	r0, r6
 800e448:	eb04 0903 	add.w	r9, r4, r3
 800e44c:	f000 fc82 	bl	800ed54 <_sbrk_r>
 800e450:	4581      	cmp	r9, r0
 800e452:	d142      	bne.n	800e4da <_malloc_r+0xea>
 800e454:	6821      	ldr	r1, [r4, #0]
 800e456:	1a6d      	subs	r5, r5, r1
 800e458:	4629      	mov	r1, r5
 800e45a:	4630      	mov	r0, r6
 800e45c:	f7ff ffa6 	bl	800e3ac <sbrk_aligned>
 800e460:	3001      	adds	r0, #1
 800e462:	d03a      	beq.n	800e4da <_malloc_r+0xea>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	442b      	add	r3, r5
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	f8d8 3000 	ldr.w	r3, [r8]
 800e46e:	685a      	ldr	r2, [r3, #4]
 800e470:	bb62      	cbnz	r2, 800e4cc <_malloc_r+0xdc>
 800e472:	f8c8 7000 	str.w	r7, [r8]
 800e476:	e00f      	b.n	800e498 <_malloc_r+0xa8>
 800e478:	6822      	ldr	r2, [r4, #0]
 800e47a:	1b52      	subs	r2, r2, r5
 800e47c:	d420      	bmi.n	800e4c0 <_malloc_r+0xd0>
 800e47e:	2a0b      	cmp	r2, #11
 800e480:	d917      	bls.n	800e4b2 <_malloc_r+0xc2>
 800e482:	1961      	adds	r1, r4, r5
 800e484:	42a3      	cmp	r3, r4
 800e486:	6025      	str	r5, [r4, #0]
 800e488:	bf18      	it	ne
 800e48a:	6059      	strne	r1, [r3, #4]
 800e48c:	6863      	ldr	r3, [r4, #4]
 800e48e:	bf08      	it	eq
 800e490:	f8c8 1000 	streq.w	r1, [r8]
 800e494:	5162      	str	r2, [r4, r5]
 800e496:	604b      	str	r3, [r1, #4]
 800e498:	4630      	mov	r0, r6
 800e49a:	f000 f82f 	bl	800e4fc <__malloc_unlock>
 800e49e:	f104 000b 	add.w	r0, r4, #11
 800e4a2:	1d23      	adds	r3, r4, #4
 800e4a4:	f020 0007 	bic.w	r0, r0, #7
 800e4a8:	1ac2      	subs	r2, r0, r3
 800e4aa:	bf1c      	itt	ne
 800e4ac:	1a1b      	subne	r3, r3, r0
 800e4ae:	50a3      	strne	r3, [r4, r2]
 800e4b0:	e7af      	b.n	800e412 <_malloc_r+0x22>
 800e4b2:	6862      	ldr	r2, [r4, #4]
 800e4b4:	42a3      	cmp	r3, r4
 800e4b6:	bf0c      	ite	eq
 800e4b8:	f8c8 2000 	streq.w	r2, [r8]
 800e4bc:	605a      	strne	r2, [r3, #4]
 800e4be:	e7eb      	b.n	800e498 <_malloc_r+0xa8>
 800e4c0:	4623      	mov	r3, r4
 800e4c2:	6864      	ldr	r4, [r4, #4]
 800e4c4:	e7ae      	b.n	800e424 <_malloc_r+0x34>
 800e4c6:	463c      	mov	r4, r7
 800e4c8:	687f      	ldr	r7, [r7, #4]
 800e4ca:	e7b6      	b.n	800e43a <_malloc_r+0x4a>
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	d1fb      	bne.n	800e4cc <_malloc_r+0xdc>
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	6053      	str	r3, [r2, #4]
 800e4d8:	e7de      	b.n	800e498 <_malloc_r+0xa8>
 800e4da:	230c      	movs	r3, #12
 800e4dc:	6033      	str	r3, [r6, #0]
 800e4de:	4630      	mov	r0, r6
 800e4e0:	f000 f80c 	bl	800e4fc <__malloc_unlock>
 800e4e4:	e794      	b.n	800e410 <_malloc_r+0x20>
 800e4e6:	6005      	str	r5, [r0, #0]
 800e4e8:	e7d6      	b.n	800e498 <_malloc_r+0xa8>
 800e4ea:	bf00      	nop
 800e4ec:	20002ef4 	.word	0x20002ef4

0800e4f0 <__malloc_lock>:
 800e4f0:	4801      	ldr	r0, [pc, #4]	@ (800e4f8 <__malloc_lock+0x8>)
 800e4f2:	f7ff b8a0 	b.w	800d636 <__retarget_lock_acquire_recursive>
 800e4f6:	bf00      	nop
 800e4f8:	20002eec 	.word	0x20002eec

0800e4fc <__malloc_unlock>:
 800e4fc:	4801      	ldr	r0, [pc, #4]	@ (800e504 <__malloc_unlock+0x8>)
 800e4fe:	f7ff b89b 	b.w	800d638 <__retarget_lock_release_recursive>
 800e502:	bf00      	nop
 800e504:	20002eec 	.word	0x20002eec

0800e508 <_Balloc>:
 800e508:	b570      	push	{r4, r5, r6, lr}
 800e50a:	69c6      	ldr	r6, [r0, #28]
 800e50c:	4604      	mov	r4, r0
 800e50e:	460d      	mov	r5, r1
 800e510:	b976      	cbnz	r6, 800e530 <_Balloc+0x28>
 800e512:	2010      	movs	r0, #16
 800e514:	f7ff ff42 	bl	800e39c <malloc>
 800e518:	4602      	mov	r2, r0
 800e51a:	61e0      	str	r0, [r4, #28]
 800e51c:	b920      	cbnz	r0, 800e528 <_Balloc+0x20>
 800e51e:	4b18      	ldr	r3, [pc, #96]	@ (800e580 <_Balloc+0x78>)
 800e520:	4818      	ldr	r0, [pc, #96]	@ (800e584 <_Balloc+0x7c>)
 800e522:	216b      	movs	r1, #107	@ 0x6b
 800e524:	f000 fc26 	bl	800ed74 <__assert_func>
 800e528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e52c:	6006      	str	r6, [r0, #0]
 800e52e:	60c6      	str	r6, [r0, #12]
 800e530:	69e6      	ldr	r6, [r4, #28]
 800e532:	68f3      	ldr	r3, [r6, #12]
 800e534:	b183      	cbz	r3, 800e558 <_Balloc+0x50>
 800e536:	69e3      	ldr	r3, [r4, #28]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e53e:	b9b8      	cbnz	r0, 800e570 <_Balloc+0x68>
 800e540:	2101      	movs	r1, #1
 800e542:	fa01 f605 	lsl.w	r6, r1, r5
 800e546:	1d72      	adds	r2, r6, #5
 800e548:	0092      	lsls	r2, r2, #2
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 fc30 	bl	800edb0 <_calloc_r>
 800e550:	b160      	cbz	r0, 800e56c <_Balloc+0x64>
 800e552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e556:	e00e      	b.n	800e576 <_Balloc+0x6e>
 800e558:	2221      	movs	r2, #33	@ 0x21
 800e55a:	2104      	movs	r1, #4
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 fc27 	bl	800edb0 <_calloc_r>
 800e562:	69e3      	ldr	r3, [r4, #28]
 800e564:	60f0      	str	r0, [r6, #12]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1e4      	bne.n	800e536 <_Balloc+0x2e>
 800e56c:	2000      	movs	r0, #0
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	6802      	ldr	r2, [r0, #0]
 800e572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e576:	2300      	movs	r3, #0
 800e578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e57c:	e7f7      	b.n	800e56e <_Balloc+0x66>
 800e57e:	bf00      	nop
 800e580:	0801060d 	.word	0x0801060d
 800e584:	0801068d 	.word	0x0801068d

0800e588 <_Bfree>:
 800e588:	b570      	push	{r4, r5, r6, lr}
 800e58a:	69c6      	ldr	r6, [r0, #28]
 800e58c:	4605      	mov	r5, r0
 800e58e:	460c      	mov	r4, r1
 800e590:	b976      	cbnz	r6, 800e5b0 <_Bfree+0x28>
 800e592:	2010      	movs	r0, #16
 800e594:	f7ff ff02 	bl	800e39c <malloc>
 800e598:	4602      	mov	r2, r0
 800e59a:	61e8      	str	r0, [r5, #28]
 800e59c:	b920      	cbnz	r0, 800e5a8 <_Bfree+0x20>
 800e59e:	4b09      	ldr	r3, [pc, #36]	@ (800e5c4 <_Bfree+0x3c>)
 800e5a0:	4809      	ldr	r0, [pc, #36]	@ (800e5c8 <_Bfree+0x40>)
 800e5a2:	218f      	movs	r1, #143	@ 0x8f
 800e5a4:	f000 fbe6 	bl	800ed74 <__assert_func>
 800e5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5ac:	6006      	str	r6, [r0, #0]
 800e5ae:	60c6      	str	r6, [r0, #12]
 800e5b0:	b13c      	cbz	r4, 800e5c2 <_Bfree+0x3a>
 800e5b2:	69eb      	ldr	r3, [r5, #28]
 800e5b4:	6862      	ldr	r2, [r4, #4]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5bc:	6021      	str	r1, [r4, #0]
 800e5be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}
 800e5c4:	0801060d 	.word	0x0801060d
 800e5c8:	0801068d 	.word	0x0801068d

0800e5cc <__multadd>:
 800e5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d0:	690d      	ldr	r5, [r1, #16]
 800e5d2:	4607      	mov	r7, r0
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	461e      	mov	r6, r3
 800e5d8:	f101 0c14 	add.w	ip, r1, #20
 800e5dc:	2000      	movs	r0, #0
 800e5de:	f8dc 3000 	ldr.w	r3, [ip]
 800e5e2:	b299      	uxth	r1, r3
 800e5e4:	fb02 6101 	mla	r1, r2, r1, r6
 800e5e8:	0c1e      	lsrs	r6, r3, #16
 800e5ea:	0c0b      	lsrs	r3, r1, #16
 800e5ec:	fb02 3306 	mla	r3, r2, r6, r3
 800e5f0:	b289      	uxth	r1, r1
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5f8:	4285      	cmp	r5, r0
 800e5fa:	f84c 1b04 	str.w	r1, [ip], #4
 800e5fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e602:	dcec      	bgt.n	800e5de <__multadd+0x12>
 800e604:	b30e      	cbz	r6, 800e64a <__multadd+0x7e>
 800e606:	68a3      	ldr	r3, [r4, #8]
 800e608:	42ab      	cmp	r3, r5
 800e60a:	dc19      	bgt.n	800e640 <__multadd+0x74>
 800e60c:	6861      	ldr	r1, [r4, #4]
 800e60e:	4638      	mov	r0, r7
 800e610:	3101      	adds	r1, #1
 800e612:	f7ff ff79 	bl	800e508 <_Balloc>
 800e616:	4680      	mov	r8, r0
 800e618:	b928      	cbnz	r0, 800e626 <__multadd+0x5a>
 800e61a:	4602      	mov	r2, r0
 800e61c:	4b0c      	ldr	r3, [pc, #48]	@ (800e650 <__multadd+0x84>)
 800e61e:	480d      	ldr	r0, [pc, #52]	@ (800e654 <__multadd+0x88>)
 800e620:	21ba      	movs	r1, #186	@ 0xba
 800e622:	f000 fba7 	bl	800ed74 <__assert_func>
 800e626:	6922      	ldr	r2, [r4, #16]
 800e628:	3202      	adds	r2, #2
 800e62a:	f104 010c 	add.w	r1, r4, #12
 800e62e:	0092      	lsls	r2, r2, #2
 800e630:	300c      	adds	r0, #12
 800e632:	f7ff f802 	bl	800d63a <memcpy>
 800e636:	4621      	mov	r1, r4
 800e638:	4638      	mov	r0, r7
 800e63a:	f7ff ffa5 	bl	800e588 <_Bfree>
 800e63e:	4644      	mov	r4, r8
 800e640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e644:	3501      	adds	r5, #1
 800e646:	615e      	str	r6, [r3, #20]
 800e648:	6125      	str	r5, [r4, #16]
 800e64a:	4620      	mov	r0, r4
 800e64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e650:	0801067c 	.word	0x0801067c
 800e654:	0801068d 	.word	0x0801068d

0800e658 <__hi0bits>:
 800e658:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e65c:	4603      	mov	r3, r0
 800e65e:	bf36      	itet	cc
 800e660:	0403      	lslcc	r3, r0, #16
 800e662:	2000      	movcs	r0, #0
 800e664:	2010      	movcc	r0, #16
 800e666:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e66a:	bf3c      	itt	cc
 800e66c:	021b      	lslcc	r3, r3, #8
 800e66e:	3008      	addcc	r0, #8
 800e670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e674:	bf3c      	itt	cc
 800e676:	011b      	lslcc	r3, r3, #4
 800e678:	3004      	addcc	r0, #4
 800e67a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e67e:	bf3c      	itt	cc
 800e680:	009b      	lslcc	r3, r3, #2
 800e682:	3002      	addcc	r0, #2
 800e684:	2b00      	cmp	r3, #0
 800e686:	db05      	blt.n	800e694 <__hi0bits+0x3c>
 800e688:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e68c:	f100 0001 	add.w	r0, r0, #1
 800e690:	bf08      	it	eq
 800e692:	2020      	moveq	r0, #32
 800e694:	4770      	bx	lr

0800e696 <__lo0bits>:
 800e696:	6803      	ldr	r3, [r0, #0]
 800e698:	4602      	mov	r2, r0
 800e69a:	f013 0007 	ands.w	r0, r3, #7
 800e69e:	d00b      	beq.n	800e6b8 <__lo0bits+0x22>
 800e6a0:	07d9      	lsls	r1, r3, #31
 800e6a2:	d421      	bmi.n	800e6e8 <__lo0bits+0x52>
 800e6a4:	0798      	lsls	r0, r3, #30
 800e6a6:	bf49      	itett	mi
 800e6a8:	085b      	lsrmi	r3, r3, #1
 800e6aa:	089b      	lsrpl	r3, r3, #2
 800e6ac:	2001      	movmi	r0, #1
 800e6ae:	6013      	strmi	r3, [r2, #0]
 800e6b0:	bf5c      	itt	pl
 800e6b2:	6013      	strpl	r3, [r2, #0]
 800e6b4:	2002      	movpl	r0, #2
 800e6b6:	4770      	bx	lr
 800e6b8:	b299      	uxth	r1, r3
 800e6ba:	b909      	cbnz	r1, 800e6c0 <__lo0bits+0x2a>
 800e6bc:	0c1b      	lsrs	r3, r3, #16
 800e6be:	2010      	movs	r0, #16
 800e6c0:	b2d9      	uxtb	r1, r3
 800e6c2:	b909      	cbnz	r1, 800e6c8 <__lo0bits+0x32>
 800e6c4:	3008      	adds	r0, #8
 800e6c6:	0a1b      	lsrs	r3, r3, #8
 800e6c8:	0719      	lsls	r1, r3, #28
 800e6ca:	bf04      	itt	eq
 800e6cc:	091b      	lsreq	r3, r3, #4
 800e6ce:	3004      	addeq	r0, #4
 800e6d0:	0799      	lsls	r1, r3, #30
 800e6d2:	bf04      	itt	eq
 800e6d4:	089b      	lsreq	r3, r3, #2
 800e6d6:	3002      	addeq	r0, #2
 800e6d8:	07d9      	lsls	r1, r3, #31
 800e6da:	d403      	bmi.n	800e6e4 <__lo0bits+0x4e>
 800e6dc:	085b      	lsrs	r3, r3, #1
 800e6de:	f100 0001 	add.w	r0, r0, #1
 800e6e2:	d003      	beq.n	800e6ec <__lo0bits+0x56>
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	4770      	bx	lr
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	4770      	bx	lr
 800e6ec:	2020      	movs	r0, #32
 800e6ee:	4770      	bx	lr

0800e6f0 <__i2b>:
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	f7ff ff07 	bl	800e508 <_Balloc>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	b928      	cbnz	r0, 800e70a <__i2b+0x1a>
 800e6fe:	4b05      	ldr	r3, [pc, #20]	@ (800e714 <__i2b+0x24>)
 800e700:	4805      	ldr	r0, [pc, #20]	@ (800e718 <__i2b+0x28>)
 800e702:	f240 1145 	movw	r1, #325	@ 0x145
 800e706:	f000 fb35 	bl	800ed74 <__assert_func>
 800e70a:	2301      	movs	r3, #1
 800e70c:	6144      	str	r4, [r0, #20]
 800e70e:	6103      	str	r3, [r0, #16]
 800e710:	bd10      	pop	{r4, pc}
 800e712:	bf00      	nop
 800e714:	0801067c 	.word	0x0801067c
 800e718:	0801068d 	.word	0x0801068d

0800e71c <__multiply>:
 800e71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e720:	4617      	mov	r7, r2
 800e722:	690a      	ldr	r2, [r1, #16]
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	429a      	cmp	r2, r3
 800e728:	bfa8      	it	ge
 800e72a:	463b      	movge	r3, r7
 800e72c:	4689      	mov	r9, r1
 800e72e:	bfa4      	itt	ge
 800e730:	460f      	movge	r7, r1
 800e732:	4699      	movge	r9, r3
 800e734:	693d      	ldr	r5, [r7, #16]
 800e736:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	6879      	ldr	r1, [r7, #4]
 800e73e:	eb05 060a 	add.w	r6, r5, sl
 800e742:	42b3      	cmp	r3, r6
 800e744:	b085      	sub	sp, #20
 800e746:	bfb8      	it	lt
 800e748:	3101      	addlt	r1, #1
 800e74a:	f7ff fedd 	bl	800e508 <_Balloc>
 800e74e:	b930      	cbnz	r0, 800e75e <__multiply+0x42>
 800e750:	4602      	mov	r2, r0
 800e752:	4b41      	ldr	r3, [pc, #260]	@ (800e858 <__multiply+0x13c>)
 800e754:	4841      	ldr	r0, [pc, #260]	@ (800e85c <__multiply+0x140>)
 800e756:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e75a:	f000 fb0b 	bl	800ed74 <__assert_func>
 800e75e:	f100 0414 	add.w	r4, r0, #20
 800e762:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e766:	4623      	mov	r3, r4
 800e768:	2200      	movs	r2, #0
 800e76a:	4573      	cmp	r3, lr
 800e76c:	d320      	bcc.n	800e7b0 <__multiply+0x94>
 800e76e:	f107 0814 	add.w	r8, r7, #20
 800e772:	f109 0114 	add.w	r1, r9, #20
 800e776:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e77a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e77e:	9302      	str	r3, [sp, #8]
 800e780:	1beb      	subs	r3, r5, r7
 800e782:	3b15      	subs	r3, #21
 800e784:	f023 0303 	bic.w	r3, r3, #3
 800e788:	3304      	adds	r3, #4
 800e78a:	3715      	adds	r7, #21
 800e78c:	42bd      	cmp	r5, r7
 800e78e:	bf38      	it	cc
 800e790:	2304      	movcc	r3, #4
 800e792:	9301      	str	r3, [sp, #4]
 800e794:	9b02      	ldr	r3, [sp, #8]
 800e796:	9103      	str	r1, [sp, #12]
 800e798:	428b      	cmp	r3, r1
 800e79a:	d80c      	bhi.n	800e7b6 <__multiply+0x9a>
 800e79c:	2e00      	cmp	r6, #0
 800e79e:	dd03      	ble.n	800e7a8 <__multiply+0x8c>
 800e7a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d055      	beq.n	800e854 <__multiply+0x138>
 800e7a8:	6106      	str	r6, [r0, #16]
 800e7aa:	b005      	add	sp, #20
 800e7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b0:	f843 2b04 	str.w	r2, [r3], #4
 800e7b4:	e7d9      	b.n	800e76a <__multiply+0x4e>
 800e7b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e7ba:	f1ba 0f00 	cmp.w	sl, #0
 800e7be:	d01f      	beq.n	800e800 <__multiply+0xe4>
 800e7c0:	46c4      	mov	ip, r8
 800e7c2:	46a1      	mov	r9, r4
 800e7c4:	2700      	movs	r7, #0
 800e7c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7ca:	f8d9 3000 	ldr.w	r3, [r9]
 800e7ce:	fa1f fb82 	uxth.w	fp, r2
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e7d8:	443b      	add	r3, r7
 800e7da:	f8d9 7000 	ldr.w	r7, [r9]
 800e7de:	0c12      	lsrs	r2, r2, #16
 800e7e0:	0c3f      	lsrs	r7, r7, #16
 800e7e2:	fb0a 7202 	mla	r2, sl, r2, r7
 800e7e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7f0:	4565      	cmp	r5, ip
 800e7f2:	f849 3b04 	str.w	r3, [r9], #4
 800e7f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e7fa:	d8e4      	bhi.n	800e7c6 <__multiply+0xaa>
 800e7fc:	9b01      	ldr	r3, [sp, #4]
 800e7fe:	50e7      	str	r7, [r4, r3]
 800e800:	9b03      	ldr	r3, [sp, #12]
 800e802:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e806:	3104      	adds	r1, #4
 800e808:	f1b9 0f00 	cmp.w	r9, #0
 800e80c:	d020      	beq.n	800e850 <__multiply+0x134>
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	4647      	mov	r7, r8
 800e812:	46a4      	mov	ip, r4
 800e814:	f04f 0a00 	mov.w	sl, #0
 800e818:	f8b7 b000 	ldrh.w	fp, [r7]
 800e81c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e820:	fb09 220b 	mla	r2, r9, fp, r2
 800e824:	4452      	add	r2, sl
 800e826:	b29b      	uxth	r3, r3
 800e828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e82c:	f84c 3b04 	str.w	r3, [ip], #4
 800e830:	f857 3b04 	ldr.w	r3, [r7], #4
 800e834:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e838:	f8bc 3000 	ldrh.w	r3, [ip]
 800e83c:	fb09 330a 	mla	r3, r9, sl, r3
 800e840:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e844:	42bd      	cmp	r5, r7
 800e846:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e84a:	d8e5      	bhi.n	800e818 <__multiply+0xfc>
 800e84c:	9a01      	ldr	r2, [sp, #4]
 800e84e:	50a3      	str	r3, [r4, r2]
 800e850:	3404      	adds	r4, #4
 800e852:	e79f      	b.n	800e794 <__multiply+0x78>
 800e854:	3e01      	subs	r6, #1
 800e856:	e7a1      	b.n	800e79c <__multiply+0x80>
 800e858:	0801067c 	.word	0x0801067c
 800e85c:	0801068d 	.word	0x0801068d

0800e860 <__pow5mult>:
 800e860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e864:	4615      	mov	r5, r2
 800e866:	f012 0203 	ands.w	r2, r2, #3
 800e86a:	4607      	mov	r7, r0
 800e86c:	460e      	mov	r6, r1
 800e86e:	d007      	beq.n	800e880 <__pow5mult+0x20>
 800e870:	4c25      	ldr	r4, [pc, #148]	@ (800e908 <__pow5mult+0xa8>)
 800e872:	3a01      	subs	r2, #1
 800e874:	2300      	movs	r3, #0
 800e876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e87a:	f7ff fea7 	bl	800e5cc <__multadd>
 800e87e:	4606      	mov	r6, r0
 800e880:	10ad      	asrs	r5, r5, #2
 800e882:	d03d      	beq.n	800e900 <__pow5mult+0xa0>
 800e884:	69fc      	ldr	r4, [r7, #28]
 800e886:	b97c      	cbnz	r4, 800e8a8 <__pow5mult+0x48>
 800e888:	2010      	movs	r0, #16
 800e88a:	f7ff fd87 	bl	800e39c <malloc>
 800e88e:	4602      	mov	r2, r0
 800e890:	61f8      	str	r0, [r7, #28]
 800e892:	b928      	cbnz	r0, 800e8a0 <__pow5mult+0x40>
 800e894:	4b1d      	ldr	r3, [pc, #116]	@ (800e90c <__pow5mult+0xac>)
 800e896:	481e      	ldr	r0, [pc, #120]	@ (800e910 <__pow5mult+0xb0>)
 800e898:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e89c:	f000 fa6a 	bl	800ed74 <__assert_func>
 800e8a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8a4:	6004      	str	r4, [r0, #0]
 800e8a6:	60c4      	str	r4, [r0, #12]
 800e8a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e8ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8b0:	b94c      	cbnz	r4, 800e8c6 <__pow5mult+0x66>
 800e8b2:	f240 2171 	movw	r1, #625	@ 0x271
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	f7ff ff1a 	bl	800e6f0 <__i2b>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	6003      	str	r3, [r0, #0]
 800e8c6:	f04f 0900 	mov.w	r9, #0
 800e8ca:	07eb      	lsls	r3, r5, #31
 800e8cc:	d50a      	bpl.n	800e8e4 <__pow5mult+0x84>
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	4638      	mov	r0, r7
 800e8d4:	f7ff ff22 	bl	800e71c <__multiply>
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4680      	mov	r8, r0
 800e8dc:	4638      	mov	r0, r7
 800e8de:	f7ff fe53 	bl	800e588 <_Bfree>
 800e8e2:	4646      	mov	r6, r8
 800e8e4:	106d      	asrs	r5, r5, #1
 800e8e6:	d00b      	beq.n	800e900 <__pow5mult+0xa0>
 800e8e8:	6820      	ldr	r0, [r4, #0]
 800e8ea:	b938      	cbnz	r0, 800e8fc <__pow5mult+0x9c>
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	f7ff ff13 	bl	800e71c <__multiply>
 800e8f6:	6020      	str	r0, [r4, #0]
 800e8f8:	f8c0 9000 	str.w	r9, [r0]
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	e7e4      	b.n	800e8ca <__pow5mult+0x6a>
 800e900:	4630      	mov	r0, r6
 800e902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e906:	bf00      	nop
 800e908:	08010740 	.word	0x08010740
 800e90c:	0801060d 	.word	0x0801060d
 800e910:	0801068d 	.word	0x0801068d

0800e914 <__lshift>:
 800e914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e918:	460c      	mov	r4, r1
 800e91a:	6849      	ldr	r1, [r1, #4]
 800e91c:	6923      	ldr	r3, [r4, #16]
 800e91e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e922:	68a3      	ldr	r3, [r4, #8]
 800e924:	4607      	mov	r7, r0
 800e926:	4691      	mov	r9, r2
 800e928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e92c:	f108 0601 	add.w	r6, r8, #1
 800e930:	42b3      	cmp	r3, r6
 800e932:	db0b      	blt.n	800e94c <__lshift+0x38>
 800e934:	4638      	mov	r0, r7
 800e936:	f7ff fde7 	bl	800e508 <_Balloc>
 800e93a:	4605      	mov	r5, r0
 800e93c:	b948      	cbnz	r0, 800e952 <__lshift+0x3e>
 800e93e:	4602      	mov	r2, r0
 800e940:	4b28      	ldr	r3, [pc, #160]	@ (800e9e4 <__lshift+0xd0>)
 800e942:	4829      	ldr	r0, [pc, #164]	@ (800e9e8 <__lshift+0xd4>)
 800e944:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e948:	f000 fa14 	bl	800ed74 <__assert_func>
 800e94c:	3101      	adds	r1, #1
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	e7ee      	b.n	800e930 <__lshift+0x1c>
 800e952:	2300      	movs	r3, #0
 800e954:	f100 0114 	add.w	r1, r0, #20
 800e958:	f100 0210 	add.w	r2, r0, #16
 800e95c:	4618      	mov	r0, r3
 800e95e:	4553      	cmp	r3, sl
 800e960:	db33      	blt.n	800e9ca <__lshift+0xb6>
 800e962:	6920      	ldr	r0, [r4, #16]
 800e964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e968:	f104 0314 	add.w	r3, r4, #20
 800e96c:	f019 091f 	ands.w	r9, r9, #31
 800e970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e974:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e978:	d02b      	beq.n	800e9d2 <__lshift+0xbe>
 800e97a:	f1c9 0e20 	rsb	lr, r9, #32
 800e97e:	468a      	mov	sl, r1
 800e980:	2200      	movs	r2, #0
 800e982:	6818      	ldr	r0, [r3, #0]
 800e984:	fa00 f009 	lsl.w	r0, r0, r9
 800e988:	4310      	orrs	r0, r2
 800e98a:	f84a 0b04 	str.w	r0, [sl], #4
 800e98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e992:	459c      	cmp	ip, r3
 800e994:	fa22 f20e 	lsr.w	r2, r2, lr
 800e998:	d8f3      	bhi.n	800e982 <__lshift+0x6e>
 800e99a:	ebac 0304 	sub.w	r3, ip, r4
 800e99e:	3b15      	subs	r3, #21
 800e9a0:	f023 0303 	bic.w	r3, r3, #3
 800e9a4:	3304      	adds	r3, #4
 800e9a6:	f104 0015 	add.w	r0, r4, #21
 800e9aa:	4560      	cmp	r0, ip
 800e9ac:	bf88      	it	hi
 800e9ae:	2304      	movhi	r3, #4
 800e9b0:	50ca      	str	r2, [r1, r3]
 800e9b2:	b10a      	cbz	r2, 800e9b8 <__lshift+0xa4>
 800e9b4:	f108 0602 	add.w	r6, r8, #2
 800e9b8:	3e01      	subs	r6, #1
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	612e      	str	r6, [r5, #16]
 800e9be:	4621      	mov	r1, r4
 800e9c0:	f7ff fde2 	bl	800e588 <_Bfree>
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	e7c5      	b.n	800e95e <__lshift+0x4a>
 800e9d2:	3904      	subs	r1, #4
 800e9d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9dc:	459c      	cmp	ip, r3
 800e9de:	d8f9      	bhi.n	800e9d4 <__lshift+0xc0>
 800e9e0:	e7ea      	b.n	800e9b8 <__lshift+0xa4>
 800e9e2:	bf00      	nop
 800e9e4:	0801067c 	.word	0x0801067c
 800e9e8:	0801068d 	.word	0x0801068d

0800e9ec <__mcmp>:
 800e9ec:	690a      	ldr	r2, [r1, #16]
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	6900      	ldr	r0, [r0, #16]
 800e9f2:	1a80      	subs	r0, r0, r2
 800e9f4:	b530      	push	{r4, r5, lr}
 800e9f6:	d10e      	bne.n	800ea16 <__mcmp+0x2a>
 800e9f8:	3314      	adds	r3, #20
 800e9fa:	3114      	adds	r1, #20
 800e9fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ea00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ea04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea0c:	4295      	cmp	r5, r2
 800ea0e:	d003      	beq.n	800ea18 <__mcmp+0x2c>
 800ea10:	d205      	bcs.n	800ea1e <__mcmp+0x32>
 800ea12:	f04f 30ff 	mov.w	r0, #4294967295
 800ea16:	bd30      	pop	{r4, r5, pc}
 800ea18:	42a3      	cmp	r3, r4
 800ea1a:	d3f3      	bcc.n	800ea04 <__mcmp+0x18>
 800ea1c:	e7fb      	b.n	800ea16 <__mcmp+0x2a>
 800ea1e:	2001      	movs	r0, #1
 800ea20:	e7f9      	b.n	800ea16 <__mcmp+0x2a>
	...

0800ea24 <__mdiff>:
 800ea24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea28:	4689      	mov	r9, r1
 800ea2a:	4606      	mov	r6, r0
 800ea2c:	4611      	mov	r1, r2
 800ea2e:	4648      	mov	r0, r9
 800ea30:	4614      	mov	r4, r2
 800ea32:	f7ff ffdb 	bl	800e9ec <__mcmp>
 800ea36:	1e05      	subs	r5, r0, #0
 800ea38:	d112      	bne.n	800ea60 <__mdiff+0x3c>
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7ff fd63 	bl	800e508 <_Balloc>
 800ea42:	4602      	mov	r2, r0
 800ea44:	b928      	cbnz	r0, 800ea52 <__mdiff+0x2e>
 800ea46:	4b3f      	ldr	r3, [pc, #252]	@ (800eb44 <__mdiff+0x120>)
 800ea48:	f240 2137 	movw	r1, #567	@ 0x237
 800ea4c:	483e      	ldr	r0, [pc, #248]	@ (800eb48 <__mdiff+0x124>)
 800ea4e:	f000 f991 	bl	800ed74 <__assert_func>
 800ea52:	2301      	movs	r3, #1
 800ea54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea58:	4610      	mov	r0, r2
 800ea5a:	b003      	add	sp, #12
 800ea5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea60:	bfbc      	itt	lt
 800ea62:	464b      	movlt	r3, r9
 800ea64:	46a1      	movlt	r9, r4
 800ea66:	4630      	mov	r0, r6
 800ea68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea6c:	bfba      	itte	lt
 800ea6e:	461c      	movlt	r4, r3
 800ea70:	2501      	movlt	r5, #1
 800ea72:	2500      	movge	r5, #0
 800ea74:	f7ff fd48 	bl	800e508 <_Balloc>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	b918      	cbnz	r0, 800ea84 <__mdiff+0x60>
 800ea7c:	4b31      	ldr	r3, [pc, #196]	@ (800eb44 <__mdiff+0x120>)
 800ea7e:	f240 2145 	movw	r1, #581	@ 0x245
 800ea82:	e7e3      	b.n	800ea4c <__mdiff+0x28>
 800ea84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea88:	6926      	ldr	r6, [r4, #16]
 800ea8a:	60c5      	str	r5, [r0, #12]
 800ea8c:	f109 0310 	add.w	r3, r9, #16
 800ea90:	f109 0514 	add.w	r5, r9, #20
 800ea94:	f104 0e14 	add.w	lr, r4, #20
 800ea98:	f100 0b14 	add.w	fp, r0, #20
 800ea9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eaa0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	46d9      	mov	r9, fp
 800eaa8:	f04f 0c00 	mov.w	ip, #0
 800eaac:	9b01      	ldr	r3, [sp, #4]
 800eaae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eab2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eab6:	9301      	str	r3, [sp, #4]
 800eab8:	fa1f f38a 	uxth.w	r3, sl
 800eabc:	4619      	mov	r1, r3
 800eabe:	b283      	uxth	r3, r0
 800eac0:	1acb      	subs	r3, r1, r3
 800eac2:	0c00      	lsrs	r0, r0, #16
 800eac4:	4463      	add	r3, ip
 800eac6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eaca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eace:	b29b      	uxth	r3, r3
 800ead0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ead4:	4576      	cmp	r6, lr
 800ead6:	f849 3b04 	str.w	r3, [r9], #4
 800eada:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eade:	d8e5      	bhi.n	800eaac <__mdiff+0x88>
 800eae0:	1b33      	subs	r3, r6, r4
 800eae2:	3b15      	subs	r3, #21
 800eae4:	f023 0303 	bic.w	r3, r3, #3
 800eae8:	3415      	adds	r4, #21
 800eaea:	3304      	adds	r3, #4
 800eaec:	42a6      	cmp	r6, r4
 800eaee:	bf38      	it	cc
 800eaf0:	2304      	movcc	r3, #4
 800eaf2:	441d      	add	r5, r3
 800eaf4:	445b      	add	r3, fp
 800eaf6:	461e      	mov	r6, r3
 800eaf8:	462c      	mov	r4, r5
 800eafa:	4544      	cmp	r4, r8
 800eafc:	d30e      	bcc.n	800eb1c <__mdiff+0xf8>
 800eafe:	f108 0103 	add.w	r1, r8, #3
 800eb02:	1b49      	subs	r1, r1, r5
 800eb04:	f021 0103 	bic.w	r1, r1, #3
 800eb08:	3d03      	subs	r5, #3
 800eb0a:	45a8      	cmp	r8, r5
 800eb0c:	bf38      	it	cc
 800eb0e:	2100      	movcc	r1, #0
 800eb10:	440b      	add	r3, r1
 800eb12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb16:	b191      	cbz	r1, 800eb3e <__mdiff+0x11a>
 800eb18:	6117      	str	r7, [r2, #16]
 800eb1a:	e79d      	b.n	800ea58 <__mdiff+0x34>
 800eb1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800eb20:	46e6      	mov	lr, ip
 800eb22:	0c08      	lsrs	r0, r1, #16
 800eb24:	fa1c fc81 	uxtah	ip, ip, r1
 800eb28:	4471      	add	r1, lr
 800eb2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eb2e:	b289      	uxth	r1, r1
 800eb30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb34:	f846 1b04 	str.w	r1, [r6], #4
 800eb38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb3c:	e7dd      	b.n	800eafa <__mdiff+0xd6>
 800eb3e:	3f01      	subs	r7, #1
 800eb40:	e7e7      	b.n	800eb12 <__mdiff+0xee>
 800eb42:	bf00      	nop
 800eb44:	0801067c 	.word	0x0801067c
 800eb48:	0801068d 	.word	0x0801068d

0800eb4c <__d2b>:
 800eb4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb50:	460f      	mov	r7, r1
 800eb52:	2101      	movs	r1, #1
 800eb54:	ec59 8b10 	vmov	r8, r9, d0
 800eb58:	4616      	mov	r6, r2
 800eb5a:	f7ff fcd5 	bl	800e508 <_Balloc>
 800eb5e:	4604      	mov	r4, r0
 800eb60:	b930      	cbnz	r0, 800eb70 <__d2b+0x24>
 800eb62:	4602      	mov	r2, r0
 800eb64:	4b23      	ldr	r3, [pc, #140]	@ (800ebf4 <__d2b+0xa8>)
 800eb66:	4824      	ldr	r0, [pc, #144]	@ (800ebf8 <__d2b+0xac>)
 800eb68:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb6c:	f000 f902 	bl	800ed74 <__assert_func>
 800eb70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb78:	b10d      	cbz	r5, 800eb7e <__d2b+0x32>
 800eb7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb7e:	9301      	str	r3, [sp, #4]
 800eb80:	f1b8 0300 	subs.w	r3, r8, #0
 800eb84:	d023      	beq.n	800ebce <__d2b+0x82>
 800eb86:	4668      	mov	r0, sp
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	f7ff fd84 	bl	800e696 <__lo0bits>
 800eb8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb92:	b1d0      	cbz	r0, 800ebca <__d2b+0x7e>
 800eb94:	f1c0 0320 	rsb	r3, r0, #32
 800eb98:	fa02 f303 	lsl.w	r3, r2, r3
 800eb9c:	430b      	orrs	r3, r1
 800eb9e:	40c2      	lsrs	r2, r0
 800eba0:	6163      	str	r3, [r4, #20]
 800eba2:	9201      	str	r2, [sp, #4]
 800eba4:	9b01      	ldr	r3, [sp, #4]
 800eba6:	61a3      	str	r3, [r4, #24]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	bf0c      	ite	eq
 800ebac:	2201      	moveq	r2, #1
 800ebae:	2202      	movne	r2, #2
 800ebb0:	6122      	str	r2, [r4, #16]
 800ebb2:	b1a5      	cbz	r5, 800ebde <__d2b+0x92>
 800ebb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ebb8:	4405      	add	r5, r0
 800ebba:	603d      	str	r5, [r7, #0]
 800ebbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ebc0:	6030      	str	r0, [r6, #0]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	b003      	add	sp, #12
 800ebc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebca:	6161      	str	r1, [r4, #20]
 800ebcc:	e7ea      	b.n	800eba4 <__d2b+0x58>
 800ebce:	a801      	add	r0, sp, #4
 800ebd0:	f7ff fd61 	bl	800e696 <__lo0bits>
 800ebd4:	9b01      	ldr	r3, [sp, #4]
 800ebd6:	6163      	str	r3, [r4, #20]
 800ebd8:	3020      	adds	r0, #32
 800ebda:	2201      	movs	r2, #1
 800ebdc:	e7e8      	b.n	800ebb0 <__d2b+0x64>
 800ebde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ebe6:	6038      	str	r0, [r7, #0]
 800ebe8:	6918      	ldr	r0, [r3, #16]
 800ebea:	f7ff fd35 	bl	800e658 <__hi0bits>
 800ebee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebf2:	e7e5      	b.n	800ebc0 <__d2b+0x74>
 800ebf4:	0801067c 	.word	0x0801067c
 800ebf8:	0801068d 	.word	0x0801068d

0800ebfc <__sflush_r>:
 800ebfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec04:	0716      	lsls	r6, r2, #28
 800ec06:	4605      	mov	r5, r0
 800ec08:	460c      	mov	r4, r1
 800ec0a:	d454      	bmi.n	800ecb6 <__sflush_r+0xba>
 800ec0c:	684b      	ldr	r3, [r1, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	dc02      	bgt.n	800ec18 <__sflush_r+0x1c>
 800ec12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	dd48      	ble.n	800ecaa <__sflush_r+0xae>
 800ec18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec1a:	2e00      	cmp	r6, #0
 800ec1c:	d045      	beq.n	800ecaa <__sflush_r+0xae>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec24:	682f      	ldr	r7, [r5, #0]
 800ec26:	6a21      	ldr	r1, [r4, #32]
 800ec28:	602b      	str	r3, [r5, #0]
 800ec2a:	d030      	beq.n	800ec8e <__sflush_r+0x92>
 800ec2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	0759      	lsls	r1, r3, #29
 800ec32:	d505      	bpl.n	800ec40 <__sflush_r+0x44>
 800ec34:	6863      	ldr	r3, [r4, #4]
 800ec36:	1ad2      	subs	r2, r2, r3
 800ec38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec3a:	b10b      	cbz	r3, 800ec40 <__sflush_r+0x44>
 800ec3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec3e:	1ad2      	subs	r2, r2, r3
 800ec40:	2300      	movs	r3, #0
 800ec42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec44:	6a21      	ldr	r1, [r4, #32]
 800ec46:	4628      	mov	r0, r5
 800ec48:	47b0      	blx	r6
 800ec4a:	1c43      	adds	r3, r0, #1
 800ec4c:	89a3      	ldrh	r3, [r4, #12]
 800ec4e:	d106      	bne.n	800ec5e <__sflush_r+0x62>
 800ec50:	6829      	ldr	r1, [r5, #0]
 800ec52:	291d      	cmp	r1, #29
 800ec54:	d82b      	bhi.n	800ecae <__sflush_r+0xb2>
 800ec56:	4a2a      	ldr	r2, [pc, #168]	@ (800ed00 <__sflush_r+0x104>)
 800ec58:	40ca      	lsrs	r2, r1
 800ec5a:	07d6      	lsls	r6, r2, #31
 800ec5c:	d527      	bpl.n	800ecae <__sflush_r+0xb2>
 800ec5e:	2200      	movs	r2, #0
 800ec60:	6062      	str	r2, [r4, #4]
 800ec62:	04d9      	lsls	r1, r3, #19
 800ec64:	6922      	ldr	r2, [r4, #16]
 800ec66:	6022      	str	r2, [r4, #0]
 800ec68:	d504      	bpl.n	800ec74 <__sflush_r+0x78>
 800ec6a:	1c42      	adds	r2, r0, #1
 800ec6c:	d101      	bne.n	800ec72 <__sflush_r+0x76>
 800ec6e:	682b      	ldr	r3, [r5, #0]
 800ec70:	b903      	cbnz	r3, 800ec74 <__sflush_r+0x78>
 800ec72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec76:	602f      	str	r7, [r5, #0]
 800ec78:	b1b9      	cbz	r1, 800ecaa <__sflush_r+0xae>
 800ec7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec7e:	4299      	cmp	r1, r3
 800ec80:	d002      	beq.n	800ec88 <__sflush_r+0x8c>
 800ec82:	4628      	mov	r0, r5
 800ec84:	f7ff fb40 	bl	800e308 <_free_r>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec8c:	e00d      	b.n	800ecaa <__sflush_r+0xae>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	4628      	mov	r0, r5
 800ec92:	47b0      	blx	r6
 800ec94:	4602      	mov	r2, r0
 800ec96:	1c50      	adds	r0, r2, #1
 800ec98:	d1c9      	bne.n	800ec2e <__sflush_r+0x32>
 800ec9a:	682b      	ldr	r3, [r5, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d0c6      	beq.n	800ec2e <__sflush_r+0x32>
 800eca0:	2b1d      	cmp	r3, #29
 800eca2:	d001      	beq.n	800eca8 <__sflush_r+0xac>
 800eca4:	2b16      	cmp	r3, #22
 800eca6:	d11e      	bne.n	800ece6 <__sflush_r+0xea>
 800eca8:	602f      	str	r7, [r5, #0]
 800ecaa:	2000      	movs	r0, #0
 800ecac:	e022      	b.n	800ecf4 <__sflush_r+0xf8>
 800ecae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecb2:	b21b      	sxth	r3, r3
 800ecb4:	e01b      	b.n	800ecee <__sflush_r+0xf2>
 800ecb6:	690f      	ldr	r7, [r1, #16]
 800ecb8:	2f00      	cmp	r7, #0
 800ecba:	d0f6      	beq.n	800ecaa <__sflush_r+0xae>
 800ecbc:	0793      	lsls	r3, r2, #30
 800ecbe:	680e      	ldr	r6, [r1, #0]
 800ecc0:	bf08      	it	eq
 800ecc2:	694b      	ldreq	r3, [r1, #20]
 800ecc4:	600f      	str	r7, [r1, #0]
 800ecc6:	bf18      	it	ne
 800ecc8:	2300      	movne	r3, #0
 800ecca:	eba6 0807 	sub.w	r8, r6, r7
 800ecce:	608b      	str	r3, [r1, #8]
 800ecd0:	f1b8 0f00 	cmp.w	r8, #0
 800ecd4:	dde9      	ble.n	800ecaa <__sflush_r+0xae>
 800ecd6:	6a21      	ldr	r1, [r4, #32]
 800ecd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecda:	4643      	mov	r3, r8
 800ecdc:	463a      	mov	r2, r7
 800ecde:	4628      	mov	r0, r5
 800ece0:	47b0      	blx	r6
 800ece2:	2800      	cmp	r0, #0
 800ece4:	dc08      	bgt.n	800ecf8 <__sflush_r+0xfc>
 800ece6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecee:	81a3      	strh	r3, [r4, #12]
 800ecf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf8:	4407      	add	r7, r0
 800ecfa:	eba8 0800 	sub.w	r8, r8, r0
 800ecfe:	e7e7      	b.n	800ecd0 <__sflush_r+0xd4>
 800ed00:	20400001 	.word	0x20400001

0800ed04 <_fflush_r>:
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	690b      	ldr	r3, [r1, #16]
 800ed08:	4605      	mov	r5, r0
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	b913      	cbnz	r3, 800ed14 <_fflush_r+0x10>
 800ed0e:	2500      	movs	r5, #0
 800ed10:	4628      	mov	r0, r5
 800ed12:	bd38      	pop	{r3, r4, r5, pc}
 800ed14:	b118      	cbz	r0, 800ed1e <_fflush_r+0x1a>
 800ed16:	6a03      	ldr	r3, [r0, #32]
 800ed18:	b90b      	cbnz	r3, 800ed1e <_fflush_r+0x1a>
 800ed1a:	f7fe fb95 	bl	800d448 <__sinit>
 800ed1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d0f3      	beq.n	800ed0e <_fflush_r+0xa>
 800ed26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed28:	07d0      	lsls	r0, r2, #31
 800ed2a:	d404      	bmi.n	800ed36 <_fflush_r+0x32>
 800ed2c:	0599      	lsls	r1, r3, #22
 800ed2e:	d402      	bmi.n	800ed36 <_fflush_r+0x32>
 800ed30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed32:	f7fe fc80 	bl	800d636 <__retarget_lock_acquire_recursive>
 800ed36:	4628      	mov	r0, r5
 800ed38:	4621      	mov	r1, r4
 800ed3a:	f7ff ff5f 	bl	800ebfc <__sflush_r>
 800ed3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed40:	07da      	lsls	r2, r3, #31
 800ed42:	4605      	mov	r5, r0
 800ed44:	d4e4      	bmi.n	800ed10 <_fflush_r+0xc>
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	059b      	lsls	r3, r3, #22
 800ed4a:	d4e1      	bmi.n	800ed10 <_fflush_r+0xc>
 800ed4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed4e:	f7fe fc73 	bl	800d638 <__retarget_lock_release_recursive>
 800ed52:	e7dd      	b.n	800ed10 <_fflush_r+0xc>

0800ed54 <_sbrk_r>:
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	4d06      	ldr	r5, [pc, #24]	@ (800ed70 <_sbrk_r+0x1c>)
 800ed58:	2300      	movs	r3, #0
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	602b      	str	r3, [r5, #0]
 800ed60:	f7f4 fc52 	bl	8003608 <_sbrk>
 800ed64:	1c43      	adds	r3, r0, #1
 800ed66:	d102      	bne.n	800ed6e <_sbrk_r+0x1a>
 800ed68:	682b      	ldr	r3, [r5, #0]
 800ed6a:	b103      	cbz	r3, 800ed6e <_sbrk_r+0x1a>
 800ed6c:	6023      	str	r3, [r4, #0]
 800ed6e:	bd38      	pop	{r3, r4, r5, pc}
 800ed70:	20002ee8 	.word	0x20002ee8

0800ed74 <__assert_func>:
 800ed74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed76:	4614      	mov	r4, r2
 800ed78:	461a      	mov	r2, r3
 800ed7a:	4b09      	ldr	r3, [pc, #36]	@ (800eda0 <__assert_func+0x2c>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4605      	mov	r5, r0
 800ed80:	68d8      	ldr	r0, [r3, #12]
 800ed82:	b14c      	cbz	r4, 800ed98 <__assert_func+0x24>
 800ed84:	4b07      	ldr	r3, [pc, #28]	@ (800eda4 <__assert_func+0x30>)
 800ed86:	9100      	str	r1, [sp, #0]
 800ed88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed8c:	4906      	ldr	r1, [pc, #24]	@ (800eda8 <__assert_func+0x34>)
 800ed8e:	462b      	mov	r3, r5
 800ed90:	f000 f842 	bl	800ee18 <fiprintf>
 800ed94:	f000 f852 	bl	800ee3c <abort>
 800ed98:	4b04      	ldr	r3, [pc, #16]	@ (800edac <__assert_func+0x38>)
 800ed9a:	461c      	mov	r4, r3
 800ed9c:	e7f3      	b.n	800ed86 <__assert_func+0x12>
 800ed9e:	bf00      	nop
 800eda0:	20000058 	.word	0x20000058
 800eda4:	080106f0 	.word	0x080106f0
 800eda8:	080106fd 	.word	0x080106fd
 800edac:	0801072b 	.word	0x0801072b

0800edb0 <_calloc_r>:
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	fba1 5402 	umull	r5, r4, r1, r2
 800edb6:	b934      	cbnz	r4, 800edc6 <_calloc_r+0x16>
 800edb8:	4629      	mov	r1, r5
 800edba:	f7ff fb19 	bl	800e3f0 <_malloc_r>
 800edbe:	4606      	mov	r6, r0
 800edc0:	b928      	cbnz	r0, 800edce <_calloc_r+0x1e>
 800edc2:	4630      	mov	r0, r6
 800edc4:	bd70      	pop	{r4, r5, r6, pc}
 800edc6:	220c      	movs	r2, #12
 800edc8:	6002      	str	r2, [r0, #0]
 800edca:	2600      	movs	r6, #0
 800edcc:	e7f9      	b.n	800edc2 <_calloc_r+0x12>
 800edce:	462a      	mov	r2, r5
 800edd0:	4621      	mov	r1, r4
 800edd2:	f7fe fbb2 	bl	800d53a <memset>
 800edd6:	e7f4      	b.n	800edc2 <_calloc_r+0x12>

0800edd8 <__ascii_mbtowc>:
 800edd8:	b082      	sub	sp, #8
 800edda:	b901      	cbnz	r1, 800edde <__ascii_mbtowc+0x6>
 800eddc:	a901      	add	r1, sp, #4
 800edde:	b142      	cbz	r2, 800edf2 <__ascii_mbtowc+0x1a>
 800ede0:	b14b      	cbz	r3, 800edf6 <__ascii_mbtowc+0x1e>
 800ede2:	7813      	ldrb	r3, [r2, #0]
 800ede4:	600b      	str	r3, [r1, #0]
 800ede6:	7812      	ldrb	r2, [r2, #0]
 800ede8:	1e10      	subs	r0, r2, #0
 800edea:	bf18      	it	ne
 800edec:	2001      	movne	r0, #1
 800edee:	b002      	add	sp, #8
 800edf0:	4770      	bx	lr
 800edf2:	4610      	mov	r0, r2
 800edf4:	e7fb      	b.n	800edee <__ascii_mbtowc+0x16>
 800edf6:	f06f 0001 	mvn.w	r0, #1
 800edfa:	e7f8      	b.n	800edee <__ascii_mbtowc+0x16>

0800edfc <__ascii_wctomb>:
 800edfc:	4603      	mov	r3, r0
 800edfe:	4608      	mov	r0, r1
 800ee00:	b141      	cbz	r1, 800ee14 <__ascii_wctomb+0x18>
 800ee02:	2aff      	cmp	r2, #255	@ 0xff
 800ee04:	d904      	bls.n	800ee10 <__ascii_wctomb+0x14>
 800ee06:	228a      	movs	r2, #138	@ 0x8a
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0e:	4770      	bx	lr
 800ee10:	700a      	strb	r2, [r1, #0]
 800ee12:	2001      	movs	r0, #1
 800ee14:	4770      	bx	lr
	...

0800ee18 <fiprintf>:
 800ee18:	b40e      	push	{r1, r2, r3}
 800ee1a:	b503      	push	{r0, r1, lr}
 800ee1c:	4601      	mov	r1, r0
 800ee1e:	ab03      	add	r3, sp, #12
 800ee20:	4805      	ldr	r0, [pc, #20]	@ (800ee38 <fiprintf+0x20>)
 800ee22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee26:	6800      	ldr	r0, [r0, #0]
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	f000 f837 	bl	800ee9c <_vfiprintf_r>
 800ee2e:	b002      	add	sp, #8
 800ee30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee34:	b003      	add	sp, #12
 800ee36:	4770      	bx	lr
 800ee38:	20000058 	.word	0x20000058

0800ee3c <abort>:
 800ee3c:	b508      	push	{r3, lr}
 800ee3e:	2006      	movs	r0, #6
 800ee40:	f000 fa00 	bl	800f244 <raise>
 800ee44:	2001      	movs	r0, #1
 800ee46:	f7f4 fb67 	bl	8003518 <_exit>

0800ee4a <__sfputc_r>:
 800ee4a:	6893      	ldr	r3, [r2, #8]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	b410      	push	{r4}
 800ee52:	6093      	str	r3, [r2, #8]
 800ee54:	da08      	bge.n	800ee68 <__sfputc_r+0x1e>
 800ee56:	6994      	ldr	r4, [r2, #24]
 800ee58:	42a3      	cmp	r3, r4
 800ee5a:	db01      	blt.n	800ee60 <__sfputc_r+0x16>
 800ee5c:	290a      	cmp	r1, #10
 800ee5e:	d103      	bne.n	800ee68 <__sfputc_r+0x1e>
 800ee60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee64:	f000 b932 	b.w	800f0cc <__swbuf_r>
 800ee68:	6813      	ldr	r3, [r2, #0]
 800ee6a:	1c58      	adds	r0, r3, #1
 800ee6c:	6010      	str	r0, [r2, #0]
 800ee6e:	7019      	strb	r1, [r3, #0]
 800ee70:	4608      	mov	r0, r1
 800ee72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <__sfputs_r>:
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460f      	mov	r7, r1
 800ee7e:	4614      	mov	r4, r2
 800ee80:	18d5      	adds	r5, r2, r3
 800ee82:	42ac      	cmp	r4, r5
 800ee84:	d101      	bne.n	800ee8a <__sfputs_r+0x12>
 800ee86:	2000      	movs	r0, #0
 800ee88:	e007      	b.n	800ee9a <__sfputs_r+0x22>
 800ee8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee8e:	463a      	mov	r2, r7
 800ee90:	4630      	mov	r0, r6
 800ee92:	f7ff ffda 	bl	800ee4a <__sfputc_r>
 800ee96:	1c43      	adds	r3, r0, #1
 800ee98:	d1f3      	bne.n	800ee82 <__sfputs_r+0xa>
 800ee9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee9c <_vfiprintf_r>:
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	460d      	mov	r5, r1
 800eea2:	b09d      	sub	sp, #116	@ 0x74
 800eea4:	4614      	mov	r4, r2
 800eea6:	4698      	mov	r8, r3
 800eea8:	4606      	mov	r6, r0
 800eeaa:	b118      	cbz	r0, 800eeb4 <_vfiprintf_r+0x18>
 800eeac:	6a03      	ldr	r3, [r0, #32]
 800eeae:	b90b      	cbnz	r3, 800eeb4 <_vfiprintf_r+0x18>
 800eeb0:	f7fe faca 	bl	800d448 <__sinit>
 800eeb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eeb6:	07d9      	lsls	r1, r3, #31
 800eeb8:	d405      	bmi.n	800eec6 <_vfiprintf_r+0x2a>
 800eeba:	89ab      	ldrh	r3, [r5, #12]
 800eebc:	059a      	lsls	r2, r3, #22
 800eebe:	d402      	bmi.n	800eec6 <_vfiprintf_r+0x2a>
 800eec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eec2:	f7fe fbb8 	bl	800d636 <__retarget_lock_acquire_recursive>
 800eec6:	89ab      	ldrh	r3, [r5, #12]
 800eec8:	071b      	lsls	r3, r3, #28
 800eeca:	d501      	bpl.n	800eed0 <_vfiprintf_r+0x34>
 800eecc:	692b      	ldr	r3, [r5, #16]
 800eece:	b99b      	cbnz	r3, 800eef8 <_vfiprintf_r+0x5c>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4630      	mov	r0, r6
 800eed4:	f000 f938 	bl	800f148 <__swsetup_r>
 800eed8:	b170      	cbz	r0, 800eef8 <_vfiprintf_r+0x5c>
 800eeda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eedc:	07dc      	lsls	r4, r3, #31
 800eede:	d504      	bpl.n	800eeea <_vfiprintf_r+0x4e>
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	b01d      	add	sp, #116	@ 0x74
 800eee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeea:	89ab      	ldrh	r3, [r5, #12]
 800eeec:	0598      	lsls	r0, r3, #22
 800eeee:	d4f7      	bmi.n	800eee0 <_vfiprintf_r+0x44>
 800eef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eef2:	f7fe fba1 	bl	800d638 <__retarget_lock_release_recursive>
 800eef6:	e7f3      	b.n	800eee0 <_vfiprintf_r+0x44>
 800eef8:	2300      	movs	r3, #0
 800eefa:	9309      	str	r3, [sp, #36]	@ 0x24
 800eefc:	2320      	movs	r3, #32
 800eefe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef06:	2330      	movs	r3, #48	@ 0x30
 800ef08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f0b8 <_vfiprintf_r+0x21c>
 800ef0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef10:	f04f 0901 	mov.w	r9, #1
 800ef14:	4623      	mov	r3, r4
 800ef16:	469a      	mov	sl, r3
 800ef18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef1c:	b10a      	cbz	r2, 800ef22 <_vfiprintf_r+0x86>
 800ef1e:	2a25      	cmp	r2, #37	@ 0x25
 800ef20:	d1f9      	bne.n	800ef16 <_vfiprintf_r+0x7a>
 800ef22:	ebba 0b04 	subs.w	fp, sl, r4
 800ef26:	d00b      	beq.n	800ef40 <_vfiprintf_r+0xa4>
 800ef28:	465b      	mov	r3, fp
 800ef2a:	4622      	mov	r2, r4
 800ef2c:	4629      	mov	r1, r5
 800ef2e:	4630      	mov	r0, r6
 800ef30:	f7ff ffa2 	bl	800ee78 <__sfputs_r>
 800ef34:	3001      	adds	r0, #1
 800ef36:	f000 80a7 	beq.w	800f088 <_vfiprintf_r+0x1ec>
 800ef3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef3c:	445a      	add	r2, fp
 800ef3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef40:	f89a 3000 	ldrb.w	r3, [sl]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 809f 	beq.w	800f088 <_vfiprintf_r+0x1ec>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef54:	f10a 0a01 	add.w	sl, sl, #1
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	9307      	str	r3, [sp, #28]
 800ef5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef60:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef62:	4654      	mov	r4, sl
 800ef64:	2205      	movs	r2, #5
 800ef66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef6a:	4853      	ldr	r0, [pc, #332]	@ (800f0b8 <_vfiprintf_r+0x21c>)
 800ef6c:	f7f1 f958 	bl	8000220 <memchr>
 800ef70:	9a04      	ldr	r2, [sp, #16]
 800ef72:	b9d8      	cbnz	r0, 800efac <_vfiprintf_r+0x110>
 800ef74:	06d1      	lsls	r1, r2, #27
 800ef76:	bf44      	itt	mi
 800ef78:	2320      	movmi	r3, #32
 800ef7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef7e:	0713      	lsls	r3, r2, #28
 800ef80:	bf44      	itt	mi
 800ef82:	232b      	movmi	r3, #43	@ 0x2b
 800ef84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef88:	f89a 3000 	ldrb.w	r3, [sl]
 800ef8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef8e:	d015      	beq.n	800efbc <_vfiprintf_r+0x120>
 800ef90:	9a07      	ldr	r2, [sp, #28]
 800ef92:	4654      	mov	r4, sl
 800ef94:	2000      	movs	r0, #0
 800ef96:	f04f 0c0a 	mov.w	ip, #10
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efa0:	3b30      	subs	r3, #48	@ 0x30
 800efa2:	2b09      	cmp	r3, #9
 800efa4:	d94b      	bls.n	800f03e <_vfiprintf_r+0x1a2>
 800efa6:	b1b0      	cbz	r0, 800efd6 <_vfiprintf_r+0x13a>
 800efa8:	9207      	str	r2, [sp, #28]
 800efaa:	e014      	b.n	800efd6 <_vfiprintf_r+0x13a>
 800efac:	eba0 0308 	sub.w	r3, r0, r8
 800efb0:	fa09 f303 	lsl.w	r3, r9, r3
 800efb4:	4313      	orrs	r3, r2
 800efb6:	9304      	str	r3, [sp, #16]
 800efb8:	46a2      	mov	sl, r4
 800efba:	e7d2      	b.n	800ef62 <_vfiprintf_r+0xc6>
 800efbc:	9b03      	ldr	r3, [sp, #12]
 800efbe:	1d19      	adds	r1, r3, #4
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	9103      	str	r1, [sp, #12]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bfbb      	ittet	lt
 800efc8:	425b      	neglt	r3, r3
 800efca:	f042 0202 	orrlt.w	r2, r2, #2
 800efce:	9307      	strge	r3, [sp, #28]
 800efd0:	9307      	strlt	r3, [sp, #28]
 800efd2:	bfb8      	it	lt
 800efd4:	9204      	strlt	r2, [sp, #16]
 800efd6:	7823      	ldrb	r3, [r4, #0]
 800efd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800efda:	d10a      	bne.n	800eff2 <_vfiprintf_r+0x156>
 800efdc:	7863      	ldrb	r3, [r4, #1]
 800efde:	2b2a      	cmp	r3, #42	@ 0x2a
 800efe0:	d132      	bne.n	800f048 <_vfiprintf_r+0x1ac>
 800efe2:	9b03      	ldr	r3, [sp, #12]
 800efe4:	1d1a      	adds	r2, r3, #4
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	9203      	str	r2, [sp, #12]
 800efea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efee:	3402      	adds	r4, #2
 800eff0:	9305      	str	r3, [sp, #20]
 800eff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f0c8 <_vfiprintf_r+0x22c>
 800eff6:	7821      	ldrb	r1, [r4, #0]
 800eff8:	2203      	movs	r2, #3
 800effa:	4650      	mov	r0, sl
 800effc:	f7f1 f910 	bl	8000220 <memchr>
 800f000:	b138      	cbz	r0, 800f012 <_vfiprintf_r+0x176>
 800f002:	9b04      	ldr	r3, [sp, #16]
 800f004:	eba0 000a 	sub.w	r0, r0, sl
 800f008:	2240      	movs	r2, #64	@ 0x40
 800f00a:	4082      	lsls	r2, r0
 800f00c:	4313      	orrs	r3, r2
 800f00e:	3401      	adds	r4, #1
 800f010:	9304      	str	r3, [sp, #16]
 800f012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f016:	4829      	ldr	r0, [pc, #164]	@ (800f0bc <_vfiprintf_r+0x220>)
 800f018:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f01c:	2206      	movs	r2, #6
 800f01e:	f7f1 f8ff 	bl	8000220 <memchr>
 800f022:	2800      	cmp	r0, #0
 800f024:	d03f      	beq.n	800f0a6 <_vfiprintf_r+0x20a>
 800f026:	4b26      	ldr	r3, [pc, #152]	@ (800f0c0 <_vfiprintf_r+0x224>)
 800f028:	bb1b      	cbnz	r3, 800f072 <_vfiprintf_r+0x1d6>
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	3307      	adds	r3, #7
 800f02e:	f023 0307 	bic.w	r3, r3, #7
 800f032:	3308      	adds	r3, #8
 800f034:	9303      	str	r3, [sp, #12]
 800f036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f038:	443b      	add	r3, r7
 800f03a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f03c:	e76a      	b.n	800ef14 <_vfiprintf_r+0x78>
 800f03e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f042:	460c      	mov	r4, r1
 800f044:	2001      	movs	r0, #1
 800f046:	e7a8      	b.n	800ef9a <_vfiprintf_r+0xfe>
 800f048:	2300      	movs	r3, #0
 800f04a:	3401      	adds	r4, #1
 800f04c:	9305      	str	r3, [sp, #20]
 800f04e:	4619      	mov	r1, r3
 800f050:	f04f 0c0a 	mov.w	ip, #10
 800f054:	4620      	mov	r0, r4
 800f056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f05a:	3a30      	subs	r2, #48	@ 0x30
 800f05c:	2a09      	cmp	r2, #9
 800f05e:	d903      	bls.n	800f068 <_vfiprintf_r+0x1cc>
 800f060:	2b00      	cmp	r3, #0
 800f062:	d0c6      	beq.n	800eff2 <_vfiprintf_r+0x156>
 800f064:	9105      	str	r1, [sp, #20]
 800f066:	e7c4      	b.n	800eff2 <_vfiprintf_r+0x156>
 800f068:	fb0c 2101 	mla	r1, ip, r1, r2
 800f06c:	4604      	mov	r4, r0
 800f06e:	2301      	movs	r3, #1
 800f070:	e7f0      	b.n	800f054 <_vfiprintf_r+0x1b8>
 800f072:	ab03      	add	r3, sp, #12
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	462a      	mov	r2, r5
 800f078:	4b12      	ldr	r3, [pc, #72]	@ (800f0c4 <_vfiprintf_r+0x228>)
 800f07a:	a904      	add	r1, sp, #16
 800f07c:	4630      	mov	r0, r6
 800f07e:	f7fd fda1 	bl	800cbc4 <_printf_float>
 800f082:	4607      	mov	r7, r0
 800f084:	1c78      	adds	r0, r7, #1
 800f086:	d1d6      	bne.n	800f036 <_vfiprintf_r+0x19a>
 800f088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f08a:	07d9      	lsls	r1, r3, #31
 800f08c:	d405      	bmi.n	800f09a <_vfiprintf_r+0x1fe>
 800f08e:	89ab      	ldrh	r3, [r5, #12]
 800f090:	059a      	lsls	r2, r3, #22
 800f092:	d402      	bmi.n	800f09a <_vfiprintf_r+0x1fe>
 800f094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f096:	f7fe facf 	bl	800d638 <__retarget_lock_release_recursive>
 800f09a:	89ab      	ldrh	r3, [r5, #12]
 800f09c:	065b      	lsls	r3, r3, #25
 800f09e:	f53f af1f 	bmi.w	800eee0 <_vfiprintf_r+0x44>
 800f0a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0a4:	e71e      	b.n	800eee4 <_vfiprintf_r+0x48>
 800f0a6:	ab03      	add	r3, sp, #12
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	462a      	mov	r2, r5
 800f0ac:	4b05      	ldr	r3, [pc, #20]	@ (800f0c4 <_vfiprintf_r+0x228>)
 800f0ae:	a904      	add	r1, sp, #16
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f7fe f81f 	bl	800d0f4 <_printf_i>
 800f0b6:	e7e4      	b.n	800f082 <_vfiprintf_r+0x1e6>
 800f0b8:	0801072c 	.word	0x0801072c
 800f0bc:	08010736 	.word	0x08010736
 800f0c0:	0800cbc5 	.word	0x0800cbc5
 800f0c4:	0800ee79 	.word	0x0800ee79
 800f0c8:	08010732 	.word	0x08010732

0800f0cc <__swbuf_r>:
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ce:	460e      	mov	r6, r1
 800f0d0:	4614      	mov	r4, r2
 800f0d2:	4605      	mov	r5, r0
 800f0d4:	b118      	cbz	r0, 800f0de <__swbuf_r+0x12>
 800f0d6:	6a03      	ldr	r3, [r0, #32]
 800f0d8:	b90b      	cbnz	r3, 800f0de <__swbuf_r+0x12>
 800f0da:	f7fe f9b5 	bl	800d448 <__sinit>
 800f0de:	69a3      	ldr	r3, [r4, #24]
 800f0e0:	60a3      	str	r3, [r4, #8]
 800f0e2:	89a3      	ldrh	r3, [r4, #12]
 800f0e4:	071a      	lsls	r2, r3, #28
 800f0e6:	d501      	bpl.n	800f0ec <__swbuf_r+0x20>
 800f0e8:	6923      	ldr	r3, [r4, #16]
 800f0ea:	b943      	cbnz	r3, 800f0fe <__swbuf_r+0x32>
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 f82a 	bl	800f148 <__swsetup_r>
 800f0f4:	b118      	cbz	r0, 800f0fe <__swbuf_r+0x32>
 800f0f6:	f04f 37ff 	mov.w	r7, #4294967295
 800f0fa:	4638      	mov	r0, r7
 800f0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	6922      	ldr	r2, [r4, #16]
 800f102:	1a98      	subs	r0, r3, r2
 800f104:	6963      	ldr	r3, [r4, #20]
 800f106:	b2f6      	uxtb	r6, r6
 800f108:	4283      	cmp	r3, r0
 800f10a:	4637      	mov	r7, r6
 800f10c:	dc05      	bgt.n	800f11a <__swbuf_r+0x4e>
 800f10e:	4621      	mov	r1, r4
 800f110:	4628      	mov	r0, r5
 800f112:	f7ff fdf7 	bl	800ed04 <_fflush_r>
 800f116:	2800      	cmp	r0, #0
 800f118:	d1ed      	bne.n	800f0f6 <__swbuf_r+0x2a>
 800f11a:	68a3      	ldr	r3, [r4, #8]
 800f11c:	3b01      	subs	r3, #1
 800f11e:	60a3      	str	r3, [r4, #8]
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	6022      	str	r2, [r4, #0]
 800f126:	701e      	strb	r6, [r3, #0]
 800f128:	6962      	ldr	r2, [r4, #20]
 800f12a:	1c43      	adds	r3, r0, #1
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d004      	beq.n	800f13a <__swbuf_r+0x6e>
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	07db      	lsls	r3, r3, #31
 800f134:	d5e1      	bpl.n	800f0fa <__swbuf_r+0x2e>
 800f136:	2e0a      	cmp	r6, #10
 800f138:	d1df      	bne.n	800f0fa <__swbuf_r+0x2e>
 800f13a:	4621      	mov	r1, r4
 800f13c:	4628      	mov	r0, r5
 800f13e:	f7ff fde1 	bl	800ed04 <_fflush_r>
 800f142:	2800      	cmp	r0, #0
 800f144:	d0d9      	beq.n	800f0fa <__swbuf_r+0x2e>
 800f146:	e7d6      	b.n	800f0f6 <__swbuf_r+0x2a>

0800f148 <__swsetup_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	4b29      	ldr	r3, [pc, #164]	@ (800f1f0 <__swsetup_r+0xa8>)
 800f14c:	4605      	mov	r5, r0
 800f14e:	6818      	ldr	r0, [r3, #0]
 800f150:	460c      	mov	r4, r1
 800f152:	b118      	cbz	r0, 800f15c <__swsetup_r+0x14>
 800f154:	6a03      	ldr	r3, [r0, #32]
 800f156:	b90b      	cbnz	r3, 800f15c <__swsetup_r+0x14>
 800f158:	f7fe f976 	bl	800d448 <__sinit>
 800f15c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f160:	0719      	lsls	r1, r3, #28
 800f162:	d422      	bmi.n	800f1aa <__swsetup_r+0x62>
 800f164:	06da      	lsls	r2, r3, #27
 800f166:	d407      	bmi.n	800f178 <__swsetup_r+0x30>
 800f168:	2209      	movs	r2, #9
 800f16a:	602a      	str	r2, [r5, #0]
 800f16c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f170:	81a3      	strh	r3, [r4, #12]
 800f172:	f04f 30ff 	mov.w	r0, #4294967295
 800f176:	e033      	b.n	800f1e0 <__swsetup_r+0x98>
 800f178:	0758      	lsls	r0, r3, #29
 800f17a:	d512      	bpl.n	800f1a2 <__swsetup_r+0x5a>
 800f17c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f17e:	b141      	cbz	r1, 800f192 <__swsetup_r+0x4a>
 800f180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f184:	4299      	cmp	r1, r3
 800f186:	d002      	beq.n	800f18e <__swsetup_r+0x46>
 800f188:	4628      	mov	r0, r5
 800f18a:	f7ff f8bd 	bl	800e308 <_free_r>
 800f18e:	2300      	movs	r3, #0
 800f190:	6363      	str	r3, [r4, #52]	@ 0x34
 800f192:	89a3      	ldrh	r3, [r4, #12]
 800f194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f198:	81a3      	strh	r3, [r4, #12]
 800f19a:	2300      	movs	r3, #0
 800f19c:	6063      	str	r3, [r4, #4]
 800f19e:	6923      	ldr	r3, [r4, #16]
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	89a3      	ldrh	r3, [r4, #12]
 800f1a4:	f043 0308 	orr.w	r3, r3, #8
 800f1a8:	81a3      	strh	r3, [r4, #12]
 800f1aa:	6923      	ldr	r3, [r4, #16]
 800f1ac:	b94b      	cbnz	r3, 800f1c2 <__swsetup_r+0x7a>
 800f1ae:	89a3      	ldrh	r3, [r4, #12]
 800f1b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1b8:	d003      	beq.n	800f1c2 <__swsetup_r+0x7a>
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	4628      	mov	r0, r5
 800f1be:	f000 f883 	bl	800f2c8 <__smakebuf_r>
 800f1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1c6:	f013 0201 	ands.w	r2, r3, #1
 800f1ca:	d00a      	beq.n	800f1e2 <__swsetup_r+0x9a>
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	60a2      	str	r2, [r4, #8]
 800f1d0:	6962      	ldr	r2, [r4, #20]
 800f1d2:	4252      	negs	r2, r2
 800f1d4:	61a2      	str	r2, [r4, #24]
 800f1d6:	6922      	ldr	r2, [r4, #16]
 800f1d8:	b942      	cbnz	r2, 800f1ec <__swsetup_r+0xa4>
 800f1da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1de:	d1c5      	bne.n	800f16c <__swsetup_r+0x24>
 800f1e0:	bd38      	pop	{r3, r4, r5, pc}
 800f1e2:	0799      	lsls	r1, r3, #30
 800f1e4:	bf58      	it	pl
 800f1e6:	6962      	ldrpl	r2, [r4, #20]
 800f1e8:	60a2      	str	r2, [r4, #8]
 800f1ea:	e7f4      	b.n	800f1d6 <__swsetup_r+0x8e>
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	e7f7      	b.n	800f1e0 <__swsetup_r+0x98>
 800f1f0:	20000058 	.word	0x20000058

0800f1f4 <_raise_r>:
 800f1f4:	291f      	cmp	r1, #31
 800f1f6:	b538      	push	{r3, r4, r5, lr}
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	d904      	bls.n	800f208 <_raise_r+0x14>
 800f1fe:	2316      	movs	r3, #22
 800f200:	6003      	str	r3, [r0, #0]
 800f202:	f04f 30ff 	mov.w	r0, #4294967295
 800f206:	bd38      	pop	{r3, r4, r5, pc}
 800f208:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f20a:	b112      	cbz	r2, 800f212 <_raise_r+0x1e>
 800f20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f210:	b94b      	cbnz	r3, 800f226 <_raise_r+0x32>
 800f212:	4628      	mov	r0, r5
 800f214:	f000 f830 	bl	800f278 <_getpid_r>
 800f218:	4622      	mov	r2, r4
 800f21a:	4601      	mov	r1, r0
 800f21c:	4628      	mov	r0, r5
 800f21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f222:	f000 b817 	b.w	800f254 <_kill_r>
 800f226:	2b01      	cmp	r3, #1
 800f228:	d00a      	beq.n	800f240 <_raise_r+0x4c>
 800f22a:	1c59      	adds	r1, r3, #1
 800f22c:	d103      	bne.n	800f236 <_raise_r+0x42>
 800f22e:	2316      	movs	r3, #22
 800f230:	6003      	str	r3, [r0, #0]
 800f232:	2001      	movs	r0, #1
 800f234:	e7e7      	b.n	800f206 <_raise_r+0x12>
 800f236:	2100      	movs	r1, #0
 800f238:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f23c:	4620      	mov	r0, r4
 800f23e:	4798      	blx	r3
 800f240:	2000      	movs	r0, #0
 800f242:	e7e0      	b.n	800f206 <_raise_r+0x12>

0800f244 <raise>:
 800f244:	4b02      	ldr	r3, [pc, #8]	@ (800f250 <raise+0xc>)
 800f246:	4601      	mov	r1, r0
 800f248:	6818      	ldr	r0, [r3, #0]
 800f24a:	f7ff bfd3 	b.w	800f1f4 <_raise_r>
 800f24e:	bf00      	nop
 800f250:	20000058 	.word	0x20000058

0800f254 <_kill_r>:
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4d07      	ldr	r5, [pc, #28]	@ (800f274 <_kill_r+0x20>)
 800f258:	2300      	movs	r3, #0
 800f25a:	4604      	mov	r4, r0
 800f25c:	4608      	mov	r0, r1
 800f25e:	4611      	mov	r1, r2
 800f260:	602b      	str	r3, [r5, #0]
 800f262:	f7f4 f949 	bl	80034f8 <_kill>
 800f266:	1c43      	adds	r3, r0, #1
 800f268:	d102      	bne.n	800f270 <_kill_r+0x1c>
 800f26a:	682b      	ldr	r3, [r5, #0]
 800f26c:	b103      	cbz	r3, 800f270 <_kill_r+0x1c>
 800f26e:	6023      	str	r3, [r4, #0]
 800f270:	bd38      	pop	{r3, r4, r5, pc}
 800f272:	bf00      	nop
 800f274:	20002ee8 	.word	0x20002ee8

0800f278 <_getpid_r>:
 800f278:	f7f4 b936 	b.w	80034e8 <_getpid>

0800f27c <__swhatbuf_r>:
 800f27c:	b570      	push	{r4, r5, r6, lr}
 800f27e:	460c      	mov	r4, r1
 800f280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f284:	2900      	cmp	r1, #0
 800f286:	b096      	sub	sp, #88	@ 0x58
 800f288:	4615      	mov	r5, r2
 800f28a:	461e      	mov	r6, r3
 800f28c:	da0d      	bge.n	800f2aa <__swhatbuf_r+0x2e>
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f294:	f04f 0100 	mov.w	r1, #0
 800f298:	bf14      	ite	ne
 800f29a:	2340      	movne	r3, #64	@ 0x40
 800f29c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	6031      	str	r1, [r6, #0]
 800f2a4:	602b      	str	r3, [r5, #0]
 800f2a6:	b016      	add	sp, #88	@ 0x58
 800f2a8:	bd70      	pop	{r4, r5, r6, pc}
 800f2aa:	466a      	mov	r2, sp
 800f2ac:	f000 f848 	bl	800f340 <_fstat_r>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	dbec      	blt.n	800f28e <__swhatbuf_r+0x12>
 800f2b4:	9901      	ldr	r1, [sp, #4]
 800f2b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f2ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f2be:	4259      	negs	r1, r3
 800f2c0:	4159      	adcs	r1, r3
 800f2c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2c6:	e7eb      	b.n	800f2a0 <__swhatbuf_r+0x24>

0800f2c8 <__smakebuf_r>:
 800f2c8:	898b      	ldrh	r3, [r1, #12]
 800f2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2cc:	079d      	lsls	r5, r3, #30
 800f2ce:	4606      	mov	r6, r0
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	d507      	bpl.n	800f2e4 <__smakebuf_r+0x1c>
 800f2d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f2d8:	6023      	str	r3, [r4, #0]
 800f2da:	6123      	str	r3, [r4, #16]
 800f2dc:	2301      	movs	r3, #1
 800f2de:	6163      	str	r3, [r4, #20]
 800f2e0:	b003      	add	sp, #12
 800f2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2e4:	ab01      	add	r3, sp, #4
 800f2e6:	466a      	mov	r2, sp
 800f2e8:	f7ff ffc8 	bl	800f27c <__swhatbuf_r>
 800f2ec:	9f00      	ldr	r7, [sp, #0]
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	4639      	mov	r1, r7
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	f7ff f87c 	bl	800e3f0 <_malloc_r>
 800f2f8:	b948      	cbnz	r0, 800f30e <__smakebuf_r+0x46>
 800f2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2fe:	059a      	lsls	r2, r3, #22
 800f300:	d4ee      	bmi.n	800f2e0 <__smakebuf_r+0x18>
 800f302:	f023 0303 	bic.w	r3, r3, #3
 800f306:	f043 0302 	orr.w	r3, r3, #2
 800f30a:	81a3      	strh	r3, [r4, #12]
 800f30c:	e7e2      	b.n	800f2d4 <__smakebuf_r+0xc>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	6020      	str	r0, [r4, #0]
 800f312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f316:	81a3      	strh	r3, [r4, #12]
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f31e:	b15b      	cbz	r3, 800f338 <__smakebuf_r+0x70>
 800f320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f324:	4630      	mov	r0, r6
 800f326:	f000 f81d 	bl	800f364 <_isatty_r>
 800f32a:	b128      	cbz	r0, 800f338 <__smakebuf_r+0x70>
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	f023 0303 	bic.w	r3, r3, #3
 800f332:	f043 0301 	orr.w	r3, r3, #1
 800f336:	81a3      	strh	r3, [r4, #12]
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	431d      	orrs	r5, r3
 800f33c:	81a5      	strh	r5, [r4, #12]
 800f33e:	e7cf      	b.n	800f2e0 <__smakebuf_r+0x18>

0800f340 <_fstat_r>:
 800f340:	b538      	push	{r3, r4, r5, lr}
 800f342:	4d07      	ldr	r5, [pc, #28]	@ (800f360 <_fstat_r+0x20>)
 800f344:	2300      	movs	r3, #0
 800f346:	4604      	mov	r4, r0
 800f348:	4608      	mov	r0, r1
 800f34a:	4611      	mov	r1, r2
 800f34c:	602b      	str	r3, [r5, #0]
 800f34e:	f7f4 f933 	bl	80035b8 <_fstat>
 800f352:	1c43      	adds	r3, r0, #1
 800f354:	d102      	bne.n	800f35c <_fstat_r+0x1c>
 800f356:	682b      	ldr	r3, [r5, #0]
 800f358:	b103      	cbz	r3, 800f35c <_fstat_r+0x1c>
 800f35a:	6023      	str	r3, [r4, #0]
 800f35c:	bd38      	pop	{r3, r4, r5, pc}
 800f35e:	bf00      	nop
 800f360:	20002ee8 	.word	0x20002ee8

0800f364 <_isatty_r>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	4d06      	ldr	r5, [pc, #24]	@ (800f380 <_isatty_r+0x1c>)
 800f368:	2300      	movs	r3, #0
 800f36a:	4604      	mov	r4, r0
 800f36c:	4608      	mov	r0, r1
 800f36e:	602b      	str	r3, [r5, #0]
 800f370:	f7f4 f932 	bl	80035d8 <_isatty>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d102      	bne.n	800f37e <_isatty_r+0x1a>
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	b103      	cbz	r3, 800f37e <_isatty_r+0x1a>
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	bd38      	pop	{r3, r4, r5, pc}
 800f380:	20002ee8 	.word	0x20002ee8
 800f384:	00000000 	.word	0x00000000

0800f388 <tan>:
 800f388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f38a:	ec53 2b10 	vmov	r2, r3, d0
 800f38e:	4816      	ldr	r0, [pc, #88]	@ (800f3e8 <tan+0x60>)
 800f390:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f394:	4281      	cmp	r1, r0
 800f396:	d807      	bhi.n	800f3a8 <tan+0x20>
 800f398:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 800f3e0 <tan+0x58>
 800f39c:	2001      	movs	r0, #1
 800f39e:	b005      	add	sp, #20
 800f3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3a4:	f000 b824 	b.w	800f3f0 <__kernel_tan>
 800f3a8:	4810      	ldr	r0, [pc, #64]	@ (800f3ec <tan+0x64>)
 800f3aa:	4281      	cmp	r1, r0
 800f3ac:	d908      	bls.n	800f3c0 <tan+0x38>
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	f7f0 ff91 	bl	80002d8 <__aeabi_dsub>
 800f3b6:	ec41 0b10 	vmov	d0, r0, r1
 800f3ba:	b005      	add	sp, #20
 800f3bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3c0:	4668      	mov	r0, sp
 800f3c2:	f000 fa19 	bl	800f7f8 <__ieee754_rem_pio2>
 800f3c6:	0040      	lsls	r0, r0, #1
 800f3c8:	f000 0002 	and.w	r0, r0, #2
 800f3cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f3d0:	ed9d 0b00 	vldr	d0, [sp]
 800f3d4:	f1c0 0001 	rsb	r0, r0, #1
 800f3d8:	f000 f80a 	bl	800f3f0 <__kernel_tan>
 800f3dc:	e7ed      	b.n	800f3ba <tan+0x32>
 800f3de:	bf00      	nop
	...
 800f3e8:	3fe921fb 	.word	0x3fe921fb
 800f3ec:	7fefffff 	.word	0x7fefffff

0800f3f0 <__kernel_tan>:
 800f3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	ec5b ab10 	vmov	sl, fp, d0
 800f3f8:	4bdb      	ldr	r3, [pc, #876]	@ (800f768 <__kernel_tan+0x378>)
 800f3fa:	b089      	sub	sp, #36	@ 0x24
 800f3fc:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 800f400:	429f      	cmp	r7, r3
 800f402:	ec59 8b11 	vmov	r8, r9, d1
 800f406:	4606      	mov	r6, r0
 800f408:	f8cd b008 	str.w	fp, [sp, #8]
 800f40c:	d85d      	bhi.n	800f4ca <__kernel_tan+0xda>
 800f40e:	4650      	mov	r0, sl
 800f410:	4659      	mov	r1, fp
 800f412:	f7f1 fbc9 	bl	8000ba8 <__aeabi_d2iz>
 800f416:	4605      	mov	r5, r0
 800f418:	2800      	cmp	r0, #0
 800f41a:	d17c      	bne.n	800f516 <__kernel_tan+0x126>
 800f41c:	1c73      	adds	r3, r6, #1
 800f41e:	4652      	mov	r2, sl
 800f420:	4313      	orrs	r3, r2
 800f422:	433b      	orrs	r3, r7
 800f424:	d110      	bne.n	800f448 <__kernel_tan+0x58>
 800f426:	ec4b ab10 	vmov	d0, sl, fp
 800f42a:	f000 fbe1 	bl	800fbf0 <fabs>
 800f42e:	49cf      	ldr	r1, [pc, #828]	@ (800f76c <__kernel_tan+0x37c>)
 800f430:	ec53 2b10 	vmov	r2, r3, d0
 800f434:	2000      	movs	r0, #0
 800f436:	f7f1 fa31 	bl	800089c <__aeabi_ddiv>
 800f43a:	4682      	mov	sl, r0
 800f43c:	468b      	mov	fp, r1
 800f43e:	ec4b ab10 	vmov	d0, sl, fp
 800f442:	b009      	add	sp, #36	@ 0x24
 800f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f448:	2e01      	cmp	r6, #1
 800f44a:	d0f8      	beq.n	800f43e <__kernel_tan+0x4e>
 800f44c:	4642      	mov	r2, r8
 800f44e:	464b      	mov	r3, r9
 800f450:	4650      	mov	r0, sl
 800f452:	4659      	mov	r1, fp
 800f454:	f7f0 ff42 	bl	80002dc <__adddf3>
 800f458:	4602      	mov	r2, r0
 800f45a:	460b      	mov	r3, r1
 800f45c:	460f      	mov	r7, r1
 800f45e:	2000      	movs	r0, #0
 800f460:	49c3      	ldr	r1, [pc, #780]	@ (800f770 <__kernel_tan+0x380>)
 800f462:	f7f1 fa1b 	bl	800089c <__aeabi_ddiv>
 800f466:	e9cd 0100 	strd	r0, r1, [sp]
 800f46a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f46e:	462e      	mov	r6, r5
 800f470:	4652      	mov	r2, sl
 800f472:	462c      	mov	r4, r5
 800f474:	4630      	mov	r0, r6
 800f476:	461d      	mov	r5, r3
 800f478:	4639      	mov	r1, r7
 800f47a:	465b      	mov	r3, fp
 800f47c:	f7f0 ff2c 	bl	80002d8 <__aeabi_dsub>
 800f480:	4602      	mov	r2, r0
 800f482:	460b      	mov	r3, r1
 800f484:	4640      	mov	r0, r8
 800f486:	4649      	mov	r1, r9
 800f488:	f7f0 ff26 	bl	80002d8 <__aeabi_dsub>
 800f48c:	4632      	mov	r2, r6
 800f48e:	462b      	mov	r3, r5
 800f490:	f7f1 f8da 	bl	8000648 <__aeabi_dmul>
 800f494:	4632      	mov	r2, r6
 800f496:	4682      	mov	sl, r0
 800f498:	468b      	mov	fp, r1
 800f49a:	462b      	mov	r3, r5
 800f49c:	4630      	mov	r0, r6
 800f49e:	4639      	mov	r1, r7
 800f4a0:	f7f1 f8d2 	bl	8000648 <__aeabi_dmul>
 800f4a4:	4bb1      	ldr	r3, [pc, #708]	@ (800f76c <__kernel_tan+0x37c>)
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f7f0 ff18 	bl	80002dc <__adddf3>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	4650      	mov	r0, sl
 800f4b2:	4659      	mov	r1, fp
 800f4b4:	f7f0 ff12 	bl	80002dc <__adddf3>
 800f4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4bc:	f7f1 f8c4 	bl	8000648 <__aeabi_dmul>
 800f4c0:	4622      	mov	r2, r4
 800f4c2:	462b      	mov	r3, r5
 800f4c4:	f7f0 ff0a 	bl	80002dc <__adddf3>
 800f4c8:	e7b7      	b.n	800f43a <__kernel_tan+0x4a>
 800f4ca:	4baa      	ldr	r3, [pc, #680]	@ (800f774 <__kernel_tan+0x384>)
 800f4cc:	429f      	cmp	r7, r3
 800f4ce:	d922      	bls.n	800f516 <__kernel_tan+0x126>
 800f4d0:	9b02      	ldr	r3, [sp, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	da05      	bge.n	800f4e2 <__kernel_tan+0xf2>
 800f4d6:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f4da:	469b      	mov	fp, r3
 800f4dc:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f4e0:	4699      	mov	r9, r3
 800f4e2:	4652      	mov	r2, sl
 800f4e4:	465b      	mov	r3, fp
 800f4e6:	a182      	add	r1, pc, #520	@ (adr r1, 800f6f0 <__kernel_tan+0x300>)
 800f4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ec:	f7f0 fef4 	bl	80002d8 <__aeabi_dsub>
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	464b      	mov	r3, r9
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	460d      	mov	r5, r1
 800f4f8:	a17f      	add	r1, pc, #508	@ (adr r1, 800f6f8 <__kernel_tan+0x308>)
 800f4fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4fe:	f7f0 feeb 	bl	80002d8 <__aeabi_dsub>
 800f502:	4622      	mov	r2, r4
 800f504:	462b      	mov	r3, r5
 800f506:	f7f0 fee9 	bl	80002dc <__adddf3>
 800f50a:	f04f 0800 	mov.w	r8, #0
 800f50e:	4682      	mov	sl, r0
 800f510:	468b      	mov	fp, r1
 800f512:	f04f 0900 	mov.w	r9, #0
 800f516:	4652      	mov	r2, sl
 800f518:	465b      	mov	r3, fp
 800f51a:	4650      	mov	r0, sl
 800f51c:	4659      	mov	r1, fp
 800f51e:	f7f1 f893 	bl	8000648 <__aeabi_dmul>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	e9cd 2300 	strd	r2, r3, [sp]
 800f52a:	f7f1 f88d 	bl	8000648 <__aeabi_dmul>
 800f52e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f532:	4604      	mov	r4, r0
 800f534:	460d      	mov	r5, r1
 800f536:	4650      	mov	r0, sl
 800f538:	4659      	mov	r1, fp
 800f53a:	f7f1 f885 	bl	8000648 <__aeabi_dmul>
 800f53e:	a370      	add	r3, pc, #448	@ (adr r3, 800f700 <__kernel_tan+0x310>)
 800f540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f548:	4620      	mov	r0, r4
 800f54a:	4629      	mov	r1, r5
 800f54c:	f7f1 f87c 	bl	8000648 <__aeabi_dmul>
 800f550:	a36d      	add	r3, pc, #436	@ (adr r3, 800f708 <__kernel_tan+0x318>)
 800f552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f556:	f7f0 fec1 	bl	80002dc <__adddf3>
 800f55a:	4622      	mov	r2, r4
 800f55c:	462b      	mov	r3, r5
 800f55e:	f7f1 f873 	bl	8000648 <__aeabi_dmul>
 800f562:	a36b      	add	r3, pc, #428	@ (adr r3, 800f710 <__kernel_tan+0x320>)
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	f7f0 feb8 	bl	80002dc <__adddf3>
 800f56c:	4622      	mov	r2, r4
 800f56e:	462b      	mov	r3, r5
 800f570:	f7f1 f86a 	bl	8000648 <__aeabi_dmul>
 800f574:	a368      	add	r3, pc, #416	@ (adr r3, 800f718 <__kernel_tan+0x328>)
 800f576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57a:	f7f0 feaf 	bl	80002dc <__adddf3>
 800f57e:	4622      	mov	r2, r4
 800f580:	462b      	mov	r3, r5
 800f582:	f7f1 f861 	bl	8000648 <__aeabi_dmul>
 800f586:	a366      	add	r3, pc, #408	@ (adr r3, 800f720 <__kernel_tan+0x330>)
 800f588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58c:	f7f0 fea6 	bl	80002dc <__adddf3>
 800f590:	4622      	mov	r2, r4
 800f592:	462b      	mov	r3, r5
 800f594:	f7f1 f858 	bl	8000648 <__aeabi_dmul>
 800f598:	a363      	add	r3, pc, #396	@ (adr r3, 800f728 <__kernel_tan+0x338>)
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	f7f0 fe9d 	bl	80002dc <__adddf3>
 800f5a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5a6:	f7f1 f84f 	bl	8000648 <__aeabi_dmul>
 800f5aa:	a361      	add	r3, pc, #388	@ (adr r3, 800f730 <__kernel_tan+0x340>)
 800f5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	4629      	mov	r1, r5
 800f5b8:	f7f1 f846 	bl	8000648 <__aeabi_dmul>
 800f5bc:	a35e      	add	r3, pc, #376	@ (adr r3, 800f738 <__kernel_tan+0x348>)
 800f5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c2:	f7f0 fe8b 	bl	80002dc <__adddf3>
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	462b      	mov	r3, r5
 800f5ca:	f7f1 f83d 	bl	8000648 <__aeabi_dmul>
 800f5ce:	a35c      	add	r3, pc, #368	@ (adr r3, 800f740 <__kernel_tan+0x350>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	f7f0 fe82 	bl	80002dc <__adddf3>
 800f5d8:	4622      	mov	r2, r4
 800f5da:	462b      	mov	r3, r5
 800f5dc:	f7f1 f834 	bl	8000648 <__aeabi_dmul>
 800f5e0:	a359      	add	r3, pc, #356	@ (adr r3, 800f748 <__kernel_tan+0x358>)
 800f5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e6:	f7f0 fe79 	bl	80002dc <__adddf3>
 800f5ea:	4622      	mov	r2, r4
 800f5ec:	462b      	mov	r3, r5
 800f5ee:	f7f1 f82b 	bl	8000648 <__aeabi_dmul>
 800f5f2:	a357      	add	r3, pc, #348	@ (adr r3, 800f750 <__kernel_tan+0x360>)
 800f5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f8:	f7f0 fe70 	bl	80002dc <__adddf3>
 800f5fc:	4622      	mov	r2, r4
 800f5fe:	462b      	mov	r3, r5
 800f600:	f7f1 f822 	bl	8000648 <__aeabi_dmul>
 800f604:	a354      	add	r3, pc, #336	@ (adr r3, 800f758 <__kernel_tan+0x368>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	f7f0 fe67 	bl	80002dc <__adddf3>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f616:	f7f0 fe61 	bl	80002dc <__adddf3>
 800f61a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f61e:	f7f1 f813 	bl	8000648 <__aeabi_dmul>
 800f622:	4642      	mov	r2, r8
 800f624:	464b      	mov	r3, r9
 800f626:	f7f0 fe59 	bl	80002dc <__adddf3>
 800f62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f62e:	f7f1 f80b 	bl	8000648 <__aeabi_dmul>
 800f632:	4642      	mov	r2, r8
 800f634:	464b      	mov	r3, r9
 800f636:	f7f0 fe51 	bl	80002dc <__adddf3>
 800f63a:	a349      	add	r3, pc, #292	@ (adr r3, 800f760 <__kernel_tan+0x370>)
 800f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f640:	4604      	mov	r4, r0
 800f642:	460d      	mov	r5, r1
 800f644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f648:	f7f0 fffe 	bl	8000648 <__aeabi_dmul>
 800f64c:	4622      	mov	r2, r4
 800f64e:	462b      	mov	r3, r5
 800f650:	f7f0 fe44 	bl	80002dc <__adddf3>
 800f654:	e9cd 0100 	strd	r0, r1, [sp]
 800f658:	460b      	mov	r3, r1
 800f65a:	4602      	mov	r2, r0
 800f65c:	4659      	mov	r1, fp
 800f65e:	4650      	mov	r0, sl
 800f660:	f7f0 fe3c 	bl	80002dc <__adddf3>
 800f664:	4b43      	ldr	r3, [pc, #268]	@ (800f774 <__kernel_tan+0x384>)
 800f666:	429f      	cmp	r7, r3
 800f668:	4604      	mov	r4, r0
 800f66a:	460d      	mov	r5, r1
 800f66c:	f240 8084 	bls.w	800f778 <__kernel_tan+0x388>
 800f670:	4630      	mov	r0, r6
 800f672:	f7f0 ff7f 	bl	8000574 <__aeabi_i2d>
 800f676:	4622      	mov	r2, r4
 800f678:	4680      	mov	r8, r0
 800f67a:	4689      	mov	r9, r1
 800f67c:	462b      	mov	r3, r5
 800f67e:	4620      	mov	r0, r4
 800f680:	4629      	mov	r1, r5
 800f682:	f7f0 ffe1 	bl	8000648 <__aeabi_dmul>
 800f686:	4642      	mov	r2, r8
 800f688:	4606      	mov	r6, r0
 800f68a:	460f      	mov	r7, r1
 800f68c:	464b      	mov	r3, r9
 800f68e:	4620      	mov	r0, r4
 800f690:	4629      	mov	r1, r5
 800f692:	f7f0 fe23 	bl	80002dc <__adddf3>
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	4630      	mov	r0, r6
 800f69c:	4639      	mov	r1, r7
 800f69e:	f7f1 f8fd 	bl	800089c <__aeabi_ddiv>
 800f6a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6a6:	f7f0 fe17 	bl	80002d8 <__aeabi_dsub>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	4650      	mov	r0, sl
 800f6b0:	4659      	mov	r1, fp
 800f6b2:	f7f0 fe11 	bl	80002d8 <__aeabi_dsub>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	f7f0 fe0f 	bl	80002dc <__adddf3>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4640      	mov	r0, r8
 800f6c4:	4649      	mov	r1, r9
 800f6c6:	f7f0 fe07 	bl	80002d8 <__aeabi_dsub>
 800f6ca:	9b02      	ldr	r3, [sp, #8]
 800f6cc:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f6d0:	f00a 0a02 	and.w	sl, sl, #2
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	f1ca 0001 	rsb	r0, sl, #1
 800f6da:	460d      	mov	r5, r1
 800f6dc:	f7f0 ff4a 	bl	8000574 <__aeabi_i2d>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	f7f0 ffae 	bl	8000648 <__aeabi_dmul>
 800f6ec:	e6a5      	b.n	800f43a <__kernel_tan+0x4a>
 800f6ee:	bf00      	nop
 800f6f0:	54442d18 	.word	0x54442d18
 800f6f4:	3fe921fb 	.word	0x3fe921fb
 800f6f8:	33145c07 	.word	0x33145c07
 800f6fc:	3c81a626 	.word	0x3c81a626
 800f700:	74bf7ad4 	.word	0x74bf7ad4
 800f704:	3efb2a70 	.word	0x3efb2a70
 800f708:	32f0a7e9 	.word	0x32f0a7e9
 800f70c:	3f12b80f 	.word	0x3f12b80f
 800f710:	1a8d1068 	.word	0x1a8d1068
 800f714:	3f3026f7 	.word	0x3f3026f7
 800f718:	fee08315 	.word	0xfee08315
 800f71c:	3f57dbc8 	.word	0x3f57dbc8
 800f720:	e96e8493 	.word	0xe96e8493
 800f724:	3f8226e3 	.word	0x3f8226e3
 800f728:	1bb341fe 	.word	0x1bb341fe
 800f72c:	3faba1ba 	.word	0x3faba1ba
 800f730:	db605373 	.word	0xdb605373
 800f734:	bef375cb 	.word	0xbef375cb
 800f738:	a03792a6 	.word	0xa03792a6
 800f73c:	3f147e88 	.word	0x3f147e88
 800f740:	f2f26501 	.word	0xf2f26501
 800f744:	3f4344d8 	.word	0x3f4344d8
 800f748:	c9560328 	.word	0xc9560328
 800f74c:	3f6d6d22 	.word	0x3f6d6d22
 800f750:	8406d637 	.word	0x8406d637
 800f754:	3f9664f4 	.word	0x3f9664f4
 800f758:	1110fe7a 	.word	0x1110fe7a
 800f75c:	3fc11111 	.word	0x3fc11111
 800f760:	55555563 	.word	0x55555563
 800f764:	3fd55555 	.word	0x3fd55555
 800f768:	3e2fffff 	.word	0x3e2fffff
 800f76c:	3ff00000 	.word	0x3ff00000
 800f770:	bff00000 	.word	0xbff00000
 800f774:	3fe59427 	.word	0x3fe59427
 800f778:	2e01      	cmp	r6, #1
 800f77a:	d033      	beq.n	800f7e4 <__kernel_tan+0x3f4>
 800f77c:	f04f 0800 	mov.w	r8, #0
 800f780:	4689      	mov	r9, r1
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	2000      	movs	r0, #0
 800f788:	4918      	ldr	r1, [pc, #96]	@ (800f7ec <__kernel_tan+0x3fc>)
 800f78a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f78e:	f7f1 f885 	bl	800089c <__aeabi_ddiv>
 800f792:	4652      	mov	r2, sl
 800f794:	460f      	mov	r7, r1
 800f796:	465b      	mov	r3, fp
 800f798:	4606      	mov	r6, r0
 800f79a:	460d      	mov	r5, r1
 800f79c:	4640      	mov	r0, r8
 800f79e:	4649      	mov	r1, r9
 800f7a0:	f7f0 fd9a 	bl	80002d8 <__aeabi_dsub>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7ac:	f7f0 fd94 	bl	80002d8 <__aeabi_dsub>
 800f7b0:	4642      	mov	r2, r8
 800f7b2:	463b      	mov	r3, r7
 800f7b4:	f7f0 ff48 	bl	8000648 <__aeabi_dmul>
 800f7b8:	4642      	mov	r2, r8
 800f7ba:	4682      	mov	sl, r0
 800f7bc:	468b      	mov	fp, r1
 800f7be:	463b      	mov	r3, r7
 800f7c0:	4640      	mov	r0, r8
 800f7c2:	4649      	mov	r1, r9
 800f7c4:	f7f0 ff40 	bl	8000648 <__aeabi_dmul>
 800f7c8:	4b09      	ldr	r3, [pc, #36]	@ (800f7f0 <__kernel_tan+0x400>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f7f0 fd86 	bl	80002dc <__adddf3>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	4650      	mov	r0, sl
 800f7d6:	4659      	mov	r1, fp
 800f7d8:	f7f0 fd80 	bl	80002dc <__adddf3>
 800f7dc:	4644      	mov	r4, r8
 800f7de:	4632      	mov	r2, r6
 800f7e0:	463b      	mov	r3, r7
 800f7e2:	e66b      	b.n	800f4bc <__kernel_tan+0xcc>
 800f7e4:	4682      	mov	sl, r0
 800f7e6:	468b      	mov	fp, r1
 800f7e8:	e629      	b.n	800f43e <__kernel_tan+0x4e>
 800f7ea:	bf00      	nop
 800f7ec:	bff00000 	.word	0xbff00000
 800f7f0:	3ff00000 	.word	0x3ff00000
 800f7f4:	00000000 	.word	0x00000000

0800f7f8 <__ieee754_rem_pio2>:
 800f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fc:	ec57 6b10 	vmov	r6, r7, d0
 800f800:	4bc5      	ldr	r3, [pc, #788]	@ (800fb18 <__ieee754_rem_pio2+0x320>)
 800f802:	b08d      	sub	sp, #52	@ 0x34
 800f804:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f808:	4598      	cmp	r8, r3
 800f80a:	4604      	mov	r4, r0
 800f80c:	9704      	str	r7, [sp, #16]
 800f80e:	d807      	bhi.n	800f820 <__ieee754_rem_pio2+0x28>
 800f810:	2200      	movs	r2, #0
 800f812:	2300      	movs	r3, #0
 800f814:	ed80 0b00 	vstr	d0, [r0]
 800f818:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f81c:	2500      	movs	r5, #0
 800f81e:	e028      	b.n	800f872 <__ieee754_rem_pio2+0x7a>
 800f820:	4bbe      	ldr	r3, [pc, #760]	@ (800fb1c <__ieee754_rem_pio2+0x324>)
 800f822:	4598      	cmp	r8, r3
 800f824:	d878      	bhi.n	800f918 <__ieee754_rem_pio2+0x120>
 800f826:	9b04      	ldr	r3, [sp, #16]
 800f828:	4dbd      	ldr	r5, [pc, #756]	@ (800fb20 <__ieee754_rem_pio2+0x328>)
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	4630      	mov	r0, r6
 800f82e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800fae0 <__ieee754_rem_pio2+0x2e8>)
 800f830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f834:	4639      	mov	r1, r7
 800f836:	dd38      	ble.n	800f8aa <__ieee754_rem_pio2+0xb2>
 800f838:	f7f0 fd4e 	bl	80002d8 <__aeabi_dsub>
 800f83c:	45a8      	cmp	r8, r5
 800f83e:	4606      	mov	r6, r0
 800f840:	460f      	mov	r7, r1
 800f842:	d01a      	beq.n	800f87a <__ieee754_rem_pio2+0x82>
 800f844:	a3a8      	add	r3, pc, #672	@ (adr r3, 800fae8 <__ieee754_rem_pio2+0x2f0>)
 800f846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84a:	f7f0 fd45 	bl	80002d8 <__aeabi_dsub>
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	4680      	mov	r8, r0
 800f854:	4689      	mov	r9, r1
 800f856:	4630      	mov	r0, r6
 800f858:	4639      	mov	r1, r7
 800f85a:	f7f0 fd3d 	bl	80002d8 <__aeabi_dsub>
 800f85e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800fae8 <__ieee754_rem_pio2+0x2f0>)
 800f860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f864:	f7f0 fd38 	bl	80002d8 <__aeabi_dsub>
 800f868:	e9c4 8900 	strd	r8, r9, [r4]
 800f86c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f870:	2501      	movs	r5, #1
 800f872:	4628      	mov	r0, r5
 800f874:	b00d      	add	sp, #52	@ 0x34
 800f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87a:	a39d      	add	r3, pc, #628	@ (adr r3, 800faf0 <__ieee754_rem_pio2+0x2f8>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	f7f0 fd2a 	bl	80002d8 <__aeabi_dsub>
 800f884:	a39c      	add	r3, pc, #624	@ (adr r3, 800faf8 <__ieee754_rem_pio2+0x300>)
 800f886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88a:	4606      	mov	r6, r0
 800f88c:	460f      	mov	r7, r1
 800f88e:	f7f0 fd23 	bl	80002d8 <__aeabi_dsub>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	4680      	mov	r8, r0
 800f898:	4689      	mov	r9, r1
 800f89a:	4630      	mov	r0, r6
 800f89c:	4639      	mov	r1, r7
 800f89e:	f7f0 fd1b 	bl	80002d8 <__aeabi_dsub>
 800f8a2:	a395      	add	r3, pc, #596	@ (adr r3, 800faf8 <__ieee754_rem_pio2+0x300>)
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	e7dc      	b.n	800f864 <__ieee754_rem_pio2+0x6c>
 800f8aa:	f7f0 fd17 	bl	80002dc <__adddf3>
 800f8ae:	45a8      	cmp	r8, r5
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	460f      	mov	r7, r1
 800f8b4:	d018      	beq.n	800f8e8 <__ieee754_rem_pio2+0xf0>
 800f8b6:	a38c      	add	r3, pc, #560	@ (adr r3, 800fae8 <__ieee754_rem_pio2+0x2f0>)
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	f7f0 fd0e 	bl	80002dc <__adddf3>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	4680      	mov	r8, r0
 800f8c6:	4689      	mov	r9, r1
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	4639      	mov	r1, r7
 800f8cc:	f7f0 fd04 	bl	80002d8 <__aeabi_dsub>
 800f8d0:	a385      	add	r3, pc, #532	@ (adr r3, 800fae8 <__ieee754_rem_pio2+0x2f0>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fd01 	bl	80002dc <__adddf3>
 800f8da:	f04f 35ff 	mov.w	r5, #4294967295
 800f8de:	e9c4 8900 	strd	r8, r9, [r4]
 800f8e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f8e6:	e7c4      	b.n	800f872 <__ieee754_rem_pio2+0x7a>
 800f8e8:	a381      	add	r3, pc, #516	@ (adr r3, 800faf0 <__ieee754_rem_pio2+0x2f8>)
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	f7f0 fcf5 	bl	80002dc <__adddf3>
 800f8f2:	a381      	add	r3, pc, #516	@ (adr r3, 800faf8 <__ieee754_rem_pio2+0x300>)
 800f8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f8:	4606      	mov	r6, r0
 800f8fa:	460f      	mov	r7, r1
 800f8fc:	f7f0 fcee 	bl	80002dc <__adddf3>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4680      	mov	r8, r0
 800f906:	4689      	mov	r9, r1
 800f908:	4630      	mov	r0, r6
 800f90a:	4639      	mov	r1, r7
 800f90c:	f7f0 fce4 	bl	80002d8 <__aeabi_dsub>
 800f910:	a379      	add	r3, pc, #484	@ (adr r3, 800faf8 <__ieee754_rem_pio2+0x300>)
 800f912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f916:	e7de      	b.n	800f8d6 <__ieee754_rem_pio2+0xde>
 800f918:	4b82      	ldr	r3, [pc, #520]	@ (800fb24 <__ieee754_rem_pio2+0x32c>)
 800f91a:	4598      	cmp	r8, r3
 800f91c:	f200 80d1 	bhi.w	800fac2 <__ieee754_rem_pio2+0x2ca>
 800f920:	f000 f966 	bl	800fbf0 <fabs>
 800f924:	ec57 6b10 	vmov	r6, r7, d0
 800f928:	a375      	add	r3, pc, #468	@ (adr r3, 800fb00 <__ieee754_rem_pio2+0x308>)
 800f92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92e:	4630      	mov	r0, r6
 800f930:	4639      	mov	r1, r7
 800f932:	f7f0 fe89 	bl	8000648 <__aeabi_dmul>
 800f936:	4b7c      	ldr	r3, [pc, #496]	@ (800fb28 <__ieee754_rem_pio2+0x330>)
 800f938:	2200      	movs	r2, #0
 800f93a:	f7f0 fccf 	bl	80002dc <__adddf3>
 800f93e:	f7f1 f933 	bl	8000ba8 <__aeabi_d2iz>
 800f942:	4605      	mov	r5, r0
 800f944:	f7f0 fe16 	bl	8000574 <__aeabi_i2d>
 800f948:	4602      	mov	r2, r0
 800f94a:	460b      	mov	r3, r1
 800f94c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f950:	a363      	add	r3, pc, #396	@ (adr r3, 800fae0 <__ieee754_rem_pio2+0x2e8>)
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	f7f0 fe77 	bl	8000648 <__aeabi_dmul>
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	4630      	mov	r0, r6
 800f960:	4639      	mov	r1, r7
 800f962:	f7f0 fcb9 	bl	80002d8 <__aeabi_dsub>
 800f966:	a360      	add	r3, pc, #384	@ (adr r3, 800fae8 <__ieee754_rem_pio2+0x2f0>)
 800f968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96c:	4682      	mov	sl, r0
 800f96e:	468b      	mov	fp, r1
 800f970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f974:	f7f0 fe68 	bl	8000648 <__aeabi_dmul>
 800f978:	2d1f      	cmp	r5, #31
 800f97a:	4606      	mov	r6, r0
 800f97c:	460f      	mov	r7, r1
 800f97e:	dc0c      	bgt.n	800f99a <__ieee754_rem_pio2+0x1a2>
 800f980:	4b6a      	ldr	r3, [pc, #424]	@ (800fb2c <__ieee754_rem_pio2+0x334>)
 800f982:	1e6a      	subs	r2, r5, #1
 800f984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f988:	4543      	cmp	r3, r8
 800f98a:	d006      	beq.n	800f99a <__ieee754_rem_pio2+0x1a2>
 800f98c:	4632      	mov	r2, r6
 800f98e:	463b      	mov	r3, r7
 800f990:	4650      	mov	r0, sl
 800f992:	4659      	mov	r1, fp
 800f994:	f7f0 fca0 	bl	80002d8 <__aeabi_dsub>
 800f998:	e00e      	b.n	800f9b8 <__ieee754_rem_pio2+0x1c0>
 800f99a:	463b      	mov	r3, r7
 800f99c:	4632      	mov	r2, r6
 800f99e:	4650      	mov	r0, sl
 800f9a0:	4659      	mov	r1, fp
 800f9a2:	f7f0 fc99 	bl	80002d8 <__aeabi_dsub>
 800f9a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f9aa:	9305      	str	r3, [sp, #20]
 800f9ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f9b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f9b4:	2b10      	cmp	r3, #16
 800f9b6:	dc02      	bgt.n	800f9be <__ieee754_rem_pio2+0x1c6>
 800f9b8:	e9c4 0100 	strd	r0, r1, [r4]
 800f9bc:	e039      	b.n	800fa32 <__ieee754_rem_pio2+0x23a>
 800f9be:	a34c      	add	r3, pc, #304	@ (adr r3, 800faf0 <__ieee754_rem_pio2+0x2f8>)
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9c8:	f7f0 fe3e 	bl	8000648 <__aeabi_dmul>
 800f9cc:	4606      	mov	r6, r0
 800f9ce:	460f      	mov	r7, r1
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	4650      	mov	r0, sl
 800f9d6:	4659      	mov	r1, fp
 800f9d8:	f7f0 fc7e 	bl	80002d8 <__aeabi_dsub>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4680      	mov	r8, r0
 800f9e2:	4689      	mov	r9, r1
 800f9e4:	4650      	mov	r0, sl
 800f9e6:	4659      	mov	r1, fp
 800f9e8:	f7f0 fc76 	bl	80002d8 <__aeabi_dsub>
 800f9ec:	4632      	mov	r2, r6
 800f9ee:	463b      	mov	r3, r7
 800f9f0:	f7f0 fc72 	bl	80002d8 <__aeabi_dsub>
 800f9f4:	a340      	add	r3, pc, #256	@ (adr r3, 800faf8 <__ieee754_rem_pio2+0x300>)
 800f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fa:	4606      	mov	r6, r0
 800f9fc:	460f      	mov	r7, r1
 800f9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa02:	f7f0 fe21 	bl	8000648 <__aeabi_dmul>
 800fa06:	4632      	mov	r2, r6
 800fa08:	463b      	mov	r3, r7
 800fa0a:	f7f0 fc65 	bl	80002d8 <__aeabi_dsub>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	460b      	mov	r3, r1
 800fa12:	4606      	mov	r6, r0
 800fa14:	460f      	mov	r7, r1
 800fa16:	4640      	mov	r0, r8
 800fa18:	4649      	mov	r1, r9
 800fa1a:	f7f0 fc5d 	bl	80002d8 <__aeabi_dsub>
 800fa1e:	9a05      	ldr	r2, [sp, #20]
 800fa20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa24:	1ad3      	subs	r3, r2, r3
 800fa26:	2b31      	cmp	r3, #49	@ 0x31
 800fa28:	dc20      	bgt.n	800fa6c <__ieee754_rem_pio2+0x274>
 800fa2a:	e9c4 0100 	strd	r0, r1, [r4]
 800fa2e:	46c2      	mov	sl, r8
 800fa30:	46cb      	mov	fp, r9
 800fa32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fa36:	4650      	mov	r0, sl
 800fa38:	4642      	mov	r2, r8
 800fa3a:	464b      	mov	r3, r9
 800fa3c:	4659      	mov	r1, fp
 800fa3e:	f7f0 fc4b 	bl	80002d8 <__aeabi_dsub>
 800fa42:	463b      	mov	r3, r7
 800fa44:	4632      	mov	r2, r6
 800fa46:	f7f0 fc47 	bl	80002d8 <__aeabi_dsub>
 800fa4a:	9b04      	ldr	r3, [sp, #16]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fa52:	f6bf af0e 	bge.w	800f872 <__ieee754_rem_pio2+0x7a>
 800fa56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fa5a:	6063      	str	r3, [r4, #4]
 800fa5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa60:	f8c4 8000 	str.w	r8, [r4]
 800fa64:	60a0      	str	r0, [r4, #8]
 800fa66:	60e3      	str	r3, [r4, #12]
 800fa68:	426d      	negs	r5, r5
 800fa6a:	e702      	b.n	800f872 <__ieee754_rem_pio2+0x7a>
 800fa6c:	a326      	add	r3, pc, #152	@ (adr r3, 800fb08 <__ieee754_rem_pio2+0x310>)
 800fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa76:	f7f0 fde7 	bl	8000648 <__aeabi_dmul>
 800fa7a:	4606      	mov	r6, r0
 800fa7c:	460f      	mov	r7, r1
 800fa7e:	4602      	mov	r2, r0
 800fa80:	460b      	mov	r3, r1
 800fa82:	4640      	mov	r0, r8
 800fa84:	4649      	mov	r1, r9
 800fa86:	f7f0 fc27 	bl	80002d8 <__aeabi_dsub>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	4682      	mov	sl, r0
 800fa90:	468b      	mov	fp, r1
 800fa92:	4640      	mov	r0, r8
 800fa94:	4649      	mov	r1, r9
 800fa96:	f7f0 fc1f 	bl	80002d8 <__aeabi_dsub>
 800fa9a:	4632      	mov	r2, r6
 800fa9c:	463b      	mov	r3, r7
 800fa9e:	f7f0 fc1b 	bl	80002d8 <__aeabi_dsub>
 800faa2:	a31b      	add	r3, pc, #108	@ (adr r3, 800fb10 <__ieee754_rem_pio2+0x318>)
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	4606      	mov	r6, r0
 800faaa:	460f      	mov	r7, r1
 800faac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fab0:	f7f0 fdca 	bl	8000648 <__aeabi_dmul>
 800fab4:	4632      	mov	r2, r6
 800fab6:	463b      	mov	r3, r7
 800fab8:	f7f0 fc0e 	bl	80002d8 <__aeabi_dsub>
 800fabc:	4606      	mov	r6, r0
 800fabe:	460f      	mov	r7, r1
 800fac0:	e764      	b.n	800f98c <__ieee754_rem_pio2+0x194>
 800fac2:	4b1b      	ldr	r3, [pc, #108]	@ (800fb30 <__ieee754_rem_pio2+0x338>)
 800fac4:	4598      	cmp	r8, r3
 800fac6:	d935      	bls.n	800fb34 <__ieee754_rem_pio2+0x33c>
 800fac8:	4632      	mov	r2, r6
 800faca:	463b      	mov	r3, r7
 800facc:	4630      	mov	r0, r6
 800face:	4639      	mov	r1, r7
 800fad0:	f7f0 fc02 	bl	80002d8 <__aeabi_dsub>
 800fad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fad8:	e9c4 0100 	strd	r0, r1, [r4]
 800fadc:	e69e      	b.n	800f81c <__ieee754_rem_pio2+0x24>
 800fade:	bf00      	nop
 800fae0:	54400000 	.word	0x54400000
 800fae4:	3ff921fb 	.word	0x3ff921fb
 800fae8:	1a626331 	.word	0x1a626331
 800faec:	3dd0b461 	.word	0x3dd0b461
 800faf0:	1a600000 	.word	0x1a600000
 800faf4:	3dd0b461 	.word	0x3dd0b461
 800faf8:	2e037073 	.word	0x2e037073
 800fafc:	3ba3198a 	.word	0x3ba3198a
 800fb00:	6dc9c883 	.word	0x6dc9c883
 800fb04:	3fe45f30 	.word	0x3fe45f30
 800fb08:	2e000000 	.word	0x2e000000
 800fb0c:	3ba3198a 	.word	0x3ba3198a
 800fb10:	252049c1 	.word	0x252049c1
 800fb14:	397b839a 	.word	0x397b839a
 800fb18:	3fe921fb 	.word	0x3fe921fb
 800fb1c:	4002d97b 	.word	0x4002d97b
 800fb20:	3ff921fb 	.word	0x3ff921fb
 800fb24:	413921fb 	.word	0x413921fb
 800fb28:	3fe00000 	.word	0x3fe00000
 800fb2c:	08010944 	.word	0x08010944
 800fb30:	7fefffff 	.word	0x7fefffff
 800fb34:	ea4f 5528 	mov.w	r5, r8, asr #20
 800fb38:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800fb3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800fb40:	4630      	mov	r0, r6
 800fb42:	460f      	mov	r7, r1
 800fb44:	f7f1 f830 	bl	8000ba8 <__aeabi_d2iz>
 800fb48:	f7f0 fd14 	bl	8000574 <__aeabi_i2d>
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	460b      	mov	r3, r1
 800fb50:	4630      	mov	r0, r6
 800fb52:	4639      	mov	r1, r7
 800fb54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fb58:	f7f0 fbbe 	bl	80002d8 <__aeabi_dsub>
 800fb5c:	4b22      	ldr	r3, [pc, #136]	@ (800fbe8 <__ieee754_rem_pio2+0x3f0>)
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f7f0 fd72 	bl	8000648 <__aeabi_dmul>
 800fb64:	460f      	mov	r7, r1
 800fb66:	4606      	mov	r6, r0
 800fb68:	f7f1 f81e 	bl	8000ba8 <__aeabi_d2iz>
 800fb6c:	f7f0 fd02 	bl	8000574 <__aeabi_i2d>
 800fb70:	4602      	mov	r2, r0
 800fb72:	460b      	mov	r3, r1
 800fb74:	4630      	mov	r0, r6
 800fb76:	4639      	mov	r1, r7
 800fb78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fb7c:	f7f0 fbac 	bl	80002d8 <__aeabi_dsub>
 800fb80:	4b19      	ldr	r3, [pc, #100]	@ (800fbe8 <__ieee754_rem_pio2+0x3f0>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	f7f0 fd60 	bl	8000648 <__aeabi_dmul>
 800fb88:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800fb8c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800fb90:	f04f 0803 	mov.w	r8, #3
 800fb94:	2600      	movs	r6, #0
 800fb96:	2700      	movs	r7, #0
 800fb98:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800fb9c:	4632      	mov	r2, r6
 800fb9e:	463b      	mov	r3, r7
 800fba0:	46c2      	mov	sl, r8
 800fba2:	f108 38ff 	add.w	r8, r8, #4294967295
 800fba6:	f7f0 ffb7 	bl	8000b18 <__aeabi_dcmpeq>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d1f4      	bne.n	800fb98 <__ieee754_rem_pio2+0x3a0>
 800fbae:	4b0f      	ldr	r3, [pc, #60]	@ (800fbec <__ieee754_rem_pio2+0x3f4>)
 800fbb0:	9301      	str	r3, [sp, #4]
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	462a      	mov	r2, r5
 800fbb8:	4653      	mov	r3, sl
 800fbba:	4621      	mov	r1, r4
 800fbbc:	a806      	add	r0, sp, #24
 800fbbe:	f000 f81f 	bl	800fc00 <__kernel_rem_pio2>
 800fbc2:	9b04      	ldr	r3, [sp, #16]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	f6bf ae53 	bge.w	800f872 <__ieee754_rem_pio2+0x7a>
 800fbcc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800fbd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbd4:	e9c4 2300 	strd	r2, r3, [r4]
 800fbd8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800fbdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbe0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800fbe4:	e740      	b.n	800fa68 <__ieee754_rem_pio2+0x270>
 800fbe6:	bf00      	nop
 800fbe8:	41700000 	.word	0x41700000
 800fbec:	080109c4 	.word	0x080109c4

0800fbf0 <fabs>:
 800fbf0:	ec51 0b10 	vmov	r0, r1, d0
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fbfa:	ec43 2b10 	vmov	d0, r2, r3
 800fbfe:	4770      	bx	lr

0800fc00 <__kernel_rem_pio2>:
 800fc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc04:	ed2d 8b02 	vpush	{d8}
 800fc08:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800fc0c:	f112 0f14 	cmn.w	r2, #20
 800fc10:	9306      	str	r3, [sp, #24]
 800fc12:	9104      	str	r1, [sp, #16]
 800fc14:	4bc2      	ldr	r3, [pc, #776]	@ (800ff20 <__kernel_rem_pio2+0x320>)
 800fc16:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800fc18:	9008      	str	r0, [sp, #32]
 800fc1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc1e:	9300      	str	r3, [sp, #0]
 800fc20:	9b06      	ldr	r3, [sp, #24]
 800fc22:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc26:	bfa8      	it	ge
 800fc28:	1ed4      	subge	r4, r2, #3
 800fc2a:	9305      	str	r3, [sp, #20]
 800fc2c:	bfb2      	itee	lt
 800fc2e:	2400      	movlt	r4, #0
 800fc30:	2318      	movge	r3, #24
 800fc32:	fb94 f4f3 	sdivge	r4, r4, r3
 800fc36:	f06f 0317 	mvn.w	r3, #23
 800fc3a:	fb04 3303 	mla	r3, r4, r3, r3
 800fc3e:	eb03 0b02 	add.w	fp, r3, r2
 800fc42:	9b00      	ldr	r3, [sp, #0]
 800fc44:	9a05      	ldr	r2, [sp, #20]
 800fc46:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800ff10 <__kernel_rem_pio2+0x310>
 800fc4a:	eb03 0802 	add.w	r8, r3, r2
 800fc4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fc50:	1aa7      	subs	r7, r4, r2
 800fc52:	ae20      	add	r6, sp, #128	@ 0x80
 800fc54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fc58:	2500      	movs	r5, #0
 800fc5a:	4545      	cmp	r5, r8
 800fc5c:	dd12      	ble.n	800fc84 <__kernel_rem_pio2+0x84>
 800fc5e:	9b06      	ldr	r3, [sp, #24]
 800fc60:	aa20      	add	r2, sp, #128	@ 0x80
 800fc62:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fc66:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800fc6a:	2700      	movs	r7, #0
 800fc6c:	9b00      	ldr	r3, [sp, #0]
 800fc6e:	429f      	cmp	r7, r3
 800fc70:	dc2e      	bgt.n	800fcd0 <__kernel_rem_pio2+0xd0>
 800fc72:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800ff10 <__kernel_rem_pio2+0x310>
 800fc76:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc7a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc7e:	46a8      	mov	r8, r5
 800fc80:	2600      	movs	r6, #0
 800fc82:	e01b      	b.n	800fcbc <__kernel_rem_pio2+0xbc>
 800fc84:	42ef      	cmn	r7, r5
 800fc86:	d407      	bmi.n	800fc98 <__kernel_rem_pio2+0x98>
 800fc88:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fc8c:	f7f0 fc72 	bl	8000574 <__aeabi_i2d>
 800fc90:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc94:	3501      	adds	r5, #1
 800fc96:	e7e0      	b.n	800fc5a <__kernel_rem_pio2+0x5a>
 800fc98:	ec51 0b18 	vmov	r0, r1, d8
 800fc9c:	e7f8      	b.n	800fc90 <__kernel_rem_pio2+0x90>
 800fc9e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800fca2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fca6:	f7f0 fccf 	bl	8000648 <__aeabi_dmul>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcb2:	f7f0 fb13 	bl	80002dc <__adddf3>
 800fcb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcba:	3601      	adds	r6, #1
 800fcbc:	9b05      	ldr	r3, [sp, #20]
 800fcbe:	429e      	cmp	r6, r3
 800fcc0:	dded      	ble.n	800fc9e <__kernel_rem_pio2+0x9e>
 800fcc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fcc6:	3701      	adds	r7, #1
 800fcc8:	ecaa 7b02 	vstmia	sl!, {d7}
 800fccc:	3508      	adds	r5, #8
 800fcce:	e7cd      	b.n	800fc6c <__kernel_rem_pio2+0x6c>
 800fcd0:	9b00      	ldr	r3, [sp, #0]
 800fcd2:	f8dd 8000 	ldr.w	r8, [sp]
 800fcd6:	aa0c      	add	r2, sp, #48	@ 0x30
 800fcd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcdc:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcde:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fce0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fce4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800fcea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcec:	ab98      	add	r3, sp, #608	@ 0x260
 800fcee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fcf2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800fcf6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fcfa:	ac0c      	add	r4, sp, #48	@ 0x30
 800fcfc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fcfe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800fd02:	46a1      	mov	r9, r4
 800fd04:	46c2      	mov	sl, r8
 800fd06:	f1ba 0f00 	cmp.w	sl, #0
 800fd0a:	dc77      	bgt.n	800fdfc <__kernel_rem_pio2+0x1fc>
 800fd0c:	4658      	mov	r0, fp
 800fd0e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800fd12:	f000 fac5 	bl	80102a0 <scalbn>
 800fd16:	ec57 6b10 	vmov	r6, r7, d0
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800fd20:	4630      	mov	r0, r6
 800fd22:	4639      	mov	r1, r7
 800fd24:	f7f0 fc90 	bl	8000648 <__aeabi_dmul>
 800fd28:	ec41 0b10 	vmov	d0, r0, r1
 800fd2c:	f000 fb34 	bl	8010398 <floor>
 800fd30:	4b7c      	ldr	r3, [pc, #496]	@ (800ff24 <__kernel_rem_pio2+0x324>)
 800fd32:	ec51 0b10 	vmov	r0, r1, d0
 800fd36:	2200      	movs	r2, #0
 800fd38:	f7f0 fc86 	bl	8000648 <__aeabi_dmul>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	4630      	mov	r0, r6
 800fd42:	4639      	mov	r1, r7
 800fd44:	f7f0 fac8 	bl	80002d8 <__aeabi_dsub>
 800fd48:	460f      	mov	r7, r1
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	f7f0 ff2c 	bl	8000ba8 <__aeabi_d2iz>
 800fd50:	9002      	str	r0, [sp, #8]
 800fd52:	f7f0 fc0f 	bl	8000574 <__aeabi_i2d>
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	4639      	mov	r1, r7
 800fd5e:	f7f0 fabb 	bl	80002d8 <__aeabi_dsub>
 800fd62:	f1bb 0f00 	cmp.w	fp, #0
 800fd66:	4606      	mov	r6, r0
 800fd68:	460f      	mov	r7, r1
 800fd6a:	dd6c      	ble.n	800fe46 <__kernel_rem_pio2+0x246>
 800fd6c:	f108 31ff 	add.w	r1, r8, #4294967295
 800fd70:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd72:	9d02      	ldr	r5, [sp, #8]
 800fd74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd78:	f1cb 0018 	rsb	r0, fp, #24
 800fd7c:	fa43 f200 	asr.w	r2, r3, r0
 800fd80:	4415      	add	r5, r2
 800fd82:	4082      	lsls	r2, r0
 800fd84:	1a9b      	subs	r3, r3, r2
 800fd86:	aa0c      	add	r2, sp, #48	@ 0x30
 800fd88:	9502      	str	r5, [sp, #8]
 800fd8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fd8e:	f1cb 0217 	rsb	r2, fp, #23
 800fd92:	fa43 f902 	asr.w	r9, r3, r2
 800fd96:	f1b9 0f00 	cmp.w	r9, #0
 800fd9a:	dd64      	ble.n	800fe66 <__kernel_rem_pio2+0x266>
 800fd9c:	9b02      	ldr	r3, [sp, #8]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	3301      	adds	r3, #1
 800fda2:	9302      	str	r3, [sp, #8]
 800fda4:	4615      	mov	r5, r2
 800fda6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800fdaa:	4590      	cmp	r8, r2
 800fdac:	f300 80a1 	bgt.w	800fef2 <__kernel_rem_pio2+0x2f2>
 800fdb0:	f1bb 0f00 	cmp.w	fp, #0
 800fdb4:	dd07      	ble.n	800fdc6 <__kernel_rem_pio2+0x1c6>
 800fdb6:	f1bb 0f01 	cmp.w	fp, #1
 800fdba:	f000 80c1 	beq.w	800ff40 <__kernel_rem_pio2+0x340>
 800fdbe:	f1bb 0f02 	cmp.w	fp, #2
 800fdc2:	f000 80c8 	beq.w	800ff56 <__kernel_rem_pio2+0x356>
 800fdc6:	f1b9 0f02 	cmp.w	r9, #2
 800fdca:	d14c      	bne.n	800fe66 <__kernel_rem_pio2+0x266>
 800fdcc:	4632      	mov	r2, r6
 800fdce:	463b      	mov	r3, r7
 800fdd0:	4955      	ldr	r1, [pc, #340]	@ (800ff28 <__kernel_rem_pio2+0x328>)
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	f7f0 fa80 	bl	80002d8 <__aeabi_dsub>
 800fdd8:	4606      	mov	r6, r0
 800fdda:	460f      	mov	r7, r1
 800fddc:	2d00      	cmp	r5, #0
 800fdde:	d042      	beq.n	800fe66 <__kernel_rem_pio2+0x266>
 800fde0:	4658      	mov	r0, fp
 800fde2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800ff18 <__kernel_rem_pio2+0x318>
 800fde6:	f000 fa5b 	bl	80102a0 <scalbn>
 800fdea:	4630      	mov	r0, r6
 800fdec:	4639      	mov	r1, r7
 800fdee:	ec53 2b10 	vmov	r2, r3, d0
 800fdf2:	f7f0 fa71 	bl	80002d8 <__aeabi_dsub>
 800fdf6:	4606      	mov	r6, r0
 800fdf8:	460f      	mov	r7, r1
 800fdfa:	e034      	b.n	800fe66 <__kernel_rem_pio2+0x266>
 800fdfc:	4b4b      	ldr	r3, [pc, #300]	@ (800ff2c <__kernel_rem_pio2+0x32c>)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe04:	f7f0 fc20 	bl	8000648 <__aeabi_dmul>
 800fe08:	f7f0 fece 	bl	8000ba8 <__aeabi_d2iz>
 800fe0c:	f7f0 fbb2 	bl	8000574 <__aeabi_i2d>
 800fe10:	4b47      	ldr	r3, [pc, #284]	@ (800ff30 <__kernel_rem_pio2+0x330>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	4606      	mov	r6, r0
 800fe16:	460f      	mov	r7, r1
 800fe18:	f7f0 fc16 	bl	8000648 <__aeabi_dmul>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe24:	f7f0 fa58 	bl	80002d8 <__aeabi_dsub>
 800fe28:	f7f0 febe 	bl	8000ba8 <__aeabi_d2iz>
 800fe2c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fe30:	f849 0b04 	str.w	r0, [r9], #4
 800fe34:	4639      	mov	r1, r7
 800fe36:	4630      	mov	r0, r6
 800fe38:	f7f0 fa50 	bl	80002dc <__adddf3>
 800fe3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe44:	e75f      	b.n	800fd06 <__kernel_rem_pio2+0x106>
 800fe46:	d107      	bne.n	800fe58 <__kernel_rem_pio2+0x258>
 800fe48:	f108 33ff 	add.w	r3, r8, #4294967295
 800fe4c:	aa0c      	add	r2, sp, #48	@ 0x30
 800fe4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe52:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800fe56:	e79e      	b.n	800fd96 <__kernel_rem_pio2+0x196>
 800fe58:	4b36      	ldr	r3, [pc, #216]	@ (800ff34 <__kernel_rem_pio2+0x334>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f7f0 fe7a 	bl	8000b54 <__aeabi_dcmpge>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d143      	bne.n	800feec <__kernel_rem_pio2+0x2ec>
 800fe64:	4681      	mov	r9, r0
 800fe66:	2200      	movs	r2, #0
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	4639      	mov	r1, r7
 800fe6e:	f7f0 fe53 	bl	8000b18 <__aeabi_dcmpeq>
 800fe72:	2800      	cmp	r0, #0
 800fe74:	f000 80c1 	beq.w	800fffa <__kernel_rem_pio2+0x3fa>
 800fe78:	f108 33ff 	add.w	r3, r8, #4294967295
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	9900      	ldr	r1, [sp, #0]
 800fe80:	428b      	cmp	r3, r1
 800fe82:	da70      	bge.n	800ff66 <__kernel_rem_pio2+0x366>
 800fe84:	2a00      	cmp	r2, #0
 800fe86:	f000 808b 	beq.w	800ffa0 <__kernel_rem_pio2+0x3a0>
 800fe8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe8e:	ab0c      	add	r3, sp, #48	@ 0x30
 800fe90:	f1ab 0b18 	sub.w	fp, fp, #24
 800fe94:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d0f6      	beq.n	800fe8a <__kernel_rem_pio2+0x28a>
 800fe9c:	4658      	mov	r0, fp
 800fe9e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800ff18 <__kernel_rem_pio2+0x318>
 800fea2:	f000 f9fd 	bl	80102a0 <scalbn>
 800fea6:	f108 0301 	add.w	r3, r8, #1
 800feaa:	00da      	lsls	r2, r3, #3
 800feac:	9205      	str	r2, [sp, #20]
 800feae:	ec55 4b10 	vmov	r4, r5, d0
 800feb2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800feb4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800ff2c <__kernel_rem_pio2+0x32c>
 800feb8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800febc:	4646      	mov	r6, r8
 800febe:	f04f 0a00 	mov.w	sl, #0
 800fec2:	2e00      	cmp	r6, #0
 800fec4:	f280 80d1 	bge.w	801006a <__kernel_rem_pio2+0x46a>
 800fec8:	4644      	mov	r4, r8
 800feca:	2c00      	cmp	r4, #0
 800fecc:	f2c0 80ff 	blt.w	80100ce <__kernel_rem_pio2+0x4ce>
 800fed0:	4b19      	ldr	r3, [pc, #100]	@ (800ff38 <__kernel_rem_pio2+0x338>)
 800fed2:	461f      	mov	r7, r3
 800fed4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fed6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800feda:	9306      	str	r3, [sp, #24]
 800fedc:	f04f 0a00 	mov.w	sl, #0
 800fee0:	f04f 0b00 	mov.w	fp, #0
 800fee4:	2600      	movs	r6, #0
 800fee6:	eba8 0504 	sub.w	r5, r8, r4
 800feea:	e0e4      	b.n	80100b6 <__kernel_rem_pio2+0x4b6>
 800feec:	f04f 0902 	mov.w	r9, #2
 800fef0:	e754      	b.n	800fd9c <__kernel_rem_pio2+0x19c>
 800fef2:	f854 3b04 	ldr.w	r3, [r4], #4
 800fef6:	bb0d      	cbnz	r5, 800ff3c <__kernel_rem_pio2+0x33c>
 800fef8:	b123      	cbz	r3, 800ff04 <__kernel_rem_pio2+0x304>
 800fefa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800fefe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff02:	2301      	movs	r3, #1
 800ff04:	3201      	adds	r2, #1
 800ff06:	461d      	mov	r5, r3
 800ff08:	e74f      	b.n	800fdaa <__kernel_rem_pio2+0x1aa>
 800ff0a:	bf00      	nop
 800ff0c:	f3af 8000 	nop.w
	...
 800ff1c:	3ff00000 	.word	0x3ff00000
 800ff20:	08010b10 	.word	0x08010b10
 800ff24:	40200000 	.word	0x40200000
 800ff28:	3ff00000 	.word	0x3ff00000
 800ff2c:	3e700000 	.word	0x3e700000
 800ff30:	41700000 	.word	0x41700000
 800ff34:	3fe00000 	.word	0x3fe00000
 800ff38:	08010ad0 	.word	0x08010ad0
 800ff3c:	1acb      	subs	r3, r1, r3
 800ff3e:	e7de      	b.n	800fefe <__kernel_rem_pio2+0x2fe>
 800ff40:	f108 32ff 	add.w	r2, r8, #4294967295
 800ff44:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ff4e:	a90c      	add	r1, sp, #48	@ 0x30
 800ff50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ff54:	e737      	b.n	800fdc6 <__kernel_rem_pio2+0x1c6>
 800ff56:	f108 32ff 	add.w	r2, r8, #4294967295
 800ff5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ff64:	e7f3      	b.n	800ff4e <__kernel_rem_pio2+0x34e>
 800ff66:	a90c      	add	r1, sp, #48	@ 0x30
 800ff68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	430a      	orrs	r2, r1
 800ff70:	e785      	b.n	800fe7e <__kernel_rem_pio2+0x27e>
 800ff72:	3401      	adds	r4, #1
 800ff74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ff78:	2a00      	cmp	r2, #0
 800ff7a:	d0fa      	beq.n	800ff72 <__kernel_rem_pio2+0x372>
 800ff7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ff82:	eb0d 0503 	add.w	r5, sp, r3
 800ff86:	9b06      	ldr	r3, [sp, #24]
 800ff88:	aa20      	add	r2, sp, #128	@ 0x80
 800ff8a:	4443      	add	r3, r8
 800ff8c:	f108 0701 	add.w	r7, r8, #1
 800ff90:	3d98      	subs	r5, #152	@ 0x98
 800ff92:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ff96:	4444      	add	r4, r8
 800ff98:	42bc      	cmp	r4, r7
 800ff9a:	da04      	bge.n	800ffa6 <__kernel_rem_pio2+0x3a6>
 800ff9c:	46a0      	mov	r8, r4
 800ff9e:	e6a2      	b.n	800fce6 <__kernel_rem_pio2+0xe6>
 800ffa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffa2:	2401      	movs	r4, #1
 800ffa4:	e7e6      	b.n	800ff74 <__kernel_rem_pio2+0x374>
 800ffa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffa8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ffac:	f7f0 fae2 	bl	8000574 <__aeabi_i2d>
 800ffb0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8010270 <__kernel_rem_pio2+0x670>
 800ffb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ffb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffc0:	46b2      	mov	sl, r6
 800ffc2:	f04f 0800 	mov.w	r8, #0
 800ffc6:	9b05      	ldr	r3, [sp, #20]
 800ffc8:	4598      	cmp	r8, r3
 800ffca:	dd05      	ble.n	800ffd8 <__kernel_rem_pio2+0x3d8>
 800ffcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffd0:	3701      	adds	r7, #1
 800ffd2:	eca5 7b02 	vstmia	r5!, {d7}
 800ffd6:	e7df      	b.n	800ff98 <__kernel_rem_pio2+0x398>
 800ffd8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ffdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ffe0:	f7f0 fb32 	bl	8000648 <__aeabi_dmul>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffec:	f7f0 f976 	bl	80002dc <__adddf3>
 800fff0:	f108 0801 	add.w	r8, r8, #1
 800fff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fff8:	e7e5      	b.n	800ffc6 <__kernel_rem_pio2+0x3c6>
 800fffa:	f1cb 0000 	rsb	r0, fp, #0
 800fffe:	ec47 6b10 	vmov	d0, r6, r7
 8010002:	f000 f94d 	bl	80102a0 <scalbn>
 8010006:	ec55 4b10 	vmov	r4, r5, d0
 801000a:	4b9b      	ldr	r3, [pc, #620]	@ (8010278 <__kernel_rem_pio2+0x678>)
 801000c:	2200      	movs	r2, #0
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 fd9f 	bl	8000b54 <__aeabi_dcmpge>
 8010016:	b300      	cbz	r0, 801005a <__kernel_rem_pio2+0x45a>
 8010018:	4b98      	ldr	r3, [pc, #608]	@ (801027c <__kernel_rem_pio2+0x67c>)
 801001a:	2200      	movs	r2, #0
 801001c:	4620      	mov	r0, r4
 801001e:	4629      	mov	r1, r5
 8010020:	f7f0 fb12 	bl	8000648 <__aeabi_dmul>
 8010024:	f7f0 fdc0 	bl	8000ba8 <__aeabi_d2iz>
 8010028:	4606      	mov	r6, r0
 801002a:	f7f0 faa3 	bl	8000574 <__aeabi_i2d>
 801002e:	4b92      	ldr	r3, [pc, #584]	@ (8010278 <__kernel_rem_pio2+0x678>)
 8010030:	2200      	movs	r2, #0
 8010032:	f7f0 fb09 	bl	8000648 <__aeabi_dmul>
 8010036:	460b      	mov	r3, r1
 8010038:	4602      	mov	r2, r0
 801003a:	4629      	mov	r1, r5
 801003c:	4620      	mov	r0, r4
 801003e:	f7f0 f94b 	bl	80002d8 <__aeabi_dsub>
 8010042:	f7f0 fdb1 	bl	8000ba8 <__aeabi_d2iz>
 8010046:	ab0c      	add	r3, sp, #48	@ 0x30
 8010048:	f10b 0b18 	add.w	fp, fp, #24
 801004c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010050:	f108 0801 	add.w	r8, r8, #1
 8010054:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010058:	e720      	b.n	800fe9c <__kernel_rem_pio2+0x29c>
 801005a:	4620      	mov	r0, r4
 801005c:	4629      	mov	r1, r5
 801005e:	f7f0 fda3 	bl	8000ba8 <__aeabi_d2iz>
 8010062:	ab0c      	add	r3, sp, #48	@ 0x30
 8010064:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010068:	e718      	b.n	800fe9c <__kernel_rem_pio2+0x29c>
 801006a:	ab0c      	add	r3, sp, #48	@ 0x30
 801006c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010070:	f7f0 fa80 	bl	8000574 <__aeabi_i2d>
 8010074:	4622      	mov	r2, r4
 8010076:	462b      	mov	r3, r5
 8010078:	f7f0 fae6 	bl	8000648 <__aeabi_dmul>
 801007c:	4652      	mov	r2, sl
 801007e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010082:	465b      	mov	r3, fp
 8010084:	4620      	mov	r0, r4
 8010086:	4629      	mov	r1, r5
 8010088:	f7f0 fade 	bl	8000648 <__aeabi_dmul>
 801008c:	3e01      	subs	r6, #1
 801008e:	4604      	mov	r4, r0
 8010090:	460d      	mov	r5, r1
 8010092:	e716      	b.n	800fec2 <__kernel_rem_pio2+0x2c2>
 8010094:	9906      	ldr	r1, [sp, #24]
 8010096:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801009a:	9106      	str	r1, [sp, #24]
 801009c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80100a0:	f7f0 fad2 	bl	8000648 <__aeabi_dmul>
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	4650      	mov	r0, sl
 80100aa:	4659      	mov	r1, fp
 80100ac:	f7f0 f916 	bl	80002dc <__adddf3>
 80100b0:	3601      	adds	r6, #1
 80100b2:	4682      	mov	sl, r0
 80100b4:	468b      	mov	fp, r1
 80100b6:	9b00      	ldr	r3, [sp, #0]
 80100b8:	429e      	cmp	r6, r3
 80100ba:	dc01      	bgt.n	80100c0 <__kernel_rem_pio2+0x4c0>
 80100bc:	42ae      	cmp	r6, r5
 80100be:	dde9      	ble.n	8010094 <__kernel_rem_pio2+0x494>
 80100c0:	ab48      	add	r3, sp, #288	@ 0x120
 80100c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80100c6:	e9c5 ab00 	strd	sl, fp, [r5]
 80100ca:	3c01      	subs	r4, #1
 80100cc:	e6fd      	b.n	800feca <__kernel_rem_pio2+0x2ca>
 80100ce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	dc0b      	bgt.n	80100ec <__kernel_rem_pio2+0x4ec>
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	dc35      	bgt.n	8010144 <__kernel_rem_pio2+0x544>
 80100d8:	d059      	beq.n	801018e <__kernel_rem_pio2+0x58e>
 80100da:	9b02      	ldr	r3, [sp, #8]
 80100dc:	f003 0007 	and.w	r0, r3, #7
 80100e0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80100e4:	ecbd 8b02 	vpop	{d8}
 80100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80100ee:	2b03      	cmp	r3, #3
 80100f0:	d1f3      	bne.n	80100da <__kernel_rem_pio2+0x4da>
 80100f2:	9b05      	ldr	r3, [sp, #20]
 80100f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80100f8:	eb0d 0403 	add.w	r4, sp, r3
 80100fc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010100:	4625      	mov	r5, r4
 8010102:	46c2      	mov	sl, r8
 8010104:	f1ba 0f00 	cmp.w	sl, #0
 8010108:	dc69      	bgt.n	80101de <__kernel_rem_pio2+0x5de>
 801010a:	4645      	mov	r5, r8
 801010c:	2d01      	cmp	r5, #1
 801010e:	f300 8087 	bgt.w	8010220 <__kernel_rem_pio2+0x620>
 8010112:	9c05      	ldr	r4, [sp, #20]
 8010114:	ab48      	add	r3, sp, #288	@ 0x120
 8010116:	441c      	add	r4, r3
 8010118:	2000      	movs	r0, #0
 801011a:	2100      	movs	r1, #0
 801011c:	f1b8 0f01 	cmp.w	r8, #1
 8010120:	f300 809c 	bgt.w	801025c <__kernel_rem_pio2+0x65c>
 8010124:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8010128:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801012c:	f1b9 0f00 	cmp.w	r9, #0
 8010130:	f040 80a6 	bne.w	8010280 <__kernel_rem_pio2+0x680>
 8010134:	9b04      	ldr	r3, [sp, #16]
 8010136:	e9c3 5600 	strd	r5, r6, [r3]
 801013a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801013e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010142:	e7ca      	b.n	80100da <__kernel_rem_pio2+0x4da>
 8010144:	9d05      	ldr	r5, [sp, #20]
 8010146:	ab48      	add	r3, sp, #288	@ 0x120
 8010148:	441d      	add	r5, r3
 801014a:	4644      	mov	r4, r8
 801014c:	2000      	movs	r0, #0
 801014e:	2100      	movs	r1, #0
 8010150:	2c00      	cmp	r4, #0
 8010152:	da35      	bge.n	80101c0 <__kernel_rem_pio2+0x5c0>
 8010154:	f1b9 0f00 	cmp.w	r9, #0
 8010158:	d038      	beq.n	80101cc <__kernel_rem_pio2+0x5cc>
 801015a:	4602      	mov	r2, r0
 801015c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010160:	9c04      	ldr	r4, [sp, #16]
 8010162:	e9c4 2300 	strd	r2, r3, [r4]
 8010166:	4602      	mov	r2, r0
 8010168:	460b      	mov	r3, r1
 801016a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801016e:	f7f0 f8b3 	bl	80002d8 <__aeabi_dsub>
 8010172:	ad4a      	add	r5, sp, #296	@ 0x128
 8010174:	2401      	movs	r4, #1
 8010176:	45a0      	cmp	r8, r4
 8010178:	da2b      	bge.n	80101d2 <__kernel_rem_pio2+0x5d2>
 801017a:	f1b9 0f00 	cmp.w	r9, #0
 801017e:	d002      	beq.n	8010186 <__kernel_rem_pio2+0x586>
 8010180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010184:	4619      	mov	r1, r3
 8010186:	9b04      	ldr	r3, [sp, #16]
 8010188:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801018c:	e7a5      	b.n	80100da <__kernel_rem_pio2+0x4da>
 801018e:	9c05      	ldr	r4, [sp, #20]
 8010190:	ab48      	add	r3, sp, #288	@ 0x120
 8010192:	441c      	add	r4, r3
 8010194:	2000      	movs	r0, #0
 8010196:	2100      	movs	r1, #0
 8010198:	f1b8 0f00 	cmp.w	r8, #0
 801019c:	da09      	bge.n	80101b2 <__kernel_rem_pio2+0x5b2>
 801019e:	f1b9 0f00 	cmp.w	r9, #0
 80101a2:	d002      	beq.n	80101aa <__kernel_rem_pio2+0x5aa>
 80101a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80101a8:	4619      	mov	r1, r3
 80101aa:	9b04      	ldr	r3, [sp, #16]
 80101ac:	e9c3 0100 	strd	r0, r1, [r3]
 80101b0:	e793      	b.n	80100da <__kernel_rem_pio2+0x4da>
 80101b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80101b6:	f7f0 f891 	bl	80002dc <__adddf3>
 80101ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80101be:	e7eb      	b.n	8010198 <__kernel_rem_pio2+0x598>
 80101c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80101c4:	f7f0 f88a 	bl	80002dc <__adddf3>
 80101c8:	3c01      	subs	r4, #1
 80101ca:	e7c1      	b.n	8010150 <__kernel_rem_pio2+0x550>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	e7c6      	b.n	8010160 <__kernel_rem_pio2+0x560>
 80101d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80101d6:	f7f0 f881 	bl	80002dc <__adddf3>
 80101da:	3401      	adds	r4, #1
 80101dc:	e7cb      	b.n	8010176 <__kernel_rem_pio2+0x576>
 80101de:	ed35 7b02 	vldmdb	r5!, {d7}
 80101e2:	ed8d 7b00 	vstr	d7, [sp]
 80101e6:	ed95 7b02 	vldr	d7, [r5, #8]
 80101ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101ee:	ec53 2b17 	vmov	r2, r3, d7
 80101f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101f6:	f7f0 f871 	bl	80002dc <__adddf3>
 80101fa:	4602      	mov	r2, r0
 80101fc:	460b      	mov	r3, r1
 80101fe:	4606      	mov	r6, r0
 8010200:	460f      	mov	r7, r1
 8010202:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010206:	f7f0 f867 	bl	80002d8 <__aeabi_dsub>
 801020a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801020e:	f7f0 f865 	bl	80002dc <__adddf3>
 8010212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010216:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801021a:	e9c5 6700 	strd	r6, r7, [r5]
 801021e:	e771      	b.n	8010104 <__kernel_rem_pio2+0x504>
 8010220:	ed34 7b02 	vldmdb	r4!, {d7}
 8010224:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010228:	ec51 0b17 	vmov	r0, r1, d7
 801022c:	4652      	mov	r2, sl
 801022e:	465b      	mov	r3, fp
 8010230:	ed8d 7b00 	vstr	d7, [sp]
 8010234:	f7f0 f852 	bl	80002dc <__adddf3>
 8010238:	4602      	mov	r2, r0
 801023a:	460b      	mov	r3, r1
 801023c:	4606      	mov	r6, r0
 801023e:	460f      	mov	r7, r1
 8010240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010244:	f7f0 f848 	bl	80002d8 <__aeabi_dsub>
 8010248:	4652      	mov	r2, sl
 801024a:	465b      	mov	r3, fp
 801024c:	f7f0 f846 	bl	80002dc <__adddf3>
 8010250:	3d01      	subs	r5, #1
 8010252:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010256:	e9c4 6700 	strd	r6, r7, [r4]
 801025a:	e757      	b.n	801010c <__kernel_rem_pio2+0x50c>
 801025c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010260:	f7f0 f83c 	bl	80002dc <__adddf3>
 8010264:	f108 38ff 	add.w	r8, r8, #4294967295
 8010268:	e758      	b.n	801011c <__kernel_rem_pio2+0x51c>
 801026a:	bf00      	nop
 801026c:	f3af 8000 	nop.w
	...
 8010278:	41700000 	.word	0x41700000
 801027c:	3e700000 	.word	0x3e700000
 8010280:	9b04      	ldr	r3, [sp, #16]
 8010282:	9a04      	ldr	r2, [sp, #16]
 8010284:	601d      	str	r5, [r3, #0]
 8010286:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801028a:	605c      	str	r4, [r3, #4]
 801028c:	609f      	str	r7, [r3, #8]
 801028e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8010292:	60d3      	str	r3, [r2, #12]
 8010294:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010298:	6110      	str	r0, [r2, #16]
 801029a:	6153      	str	r3, [r2, #20]
 801029c:	e71d      	b.n	80100da <__kernel_rem_pio2+0x4da>
 801029e:	bf00      	nop

080102a0 <scalbn>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	ec55 4b10 	vmov	r4, r5, d0
 80102a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80102aa:	4606      	mov	r6, r0
 80102ac:	462b      	mov	r3, r5
 80102ae:	b991      	cbnz	r1, 80102d6 <scalbn+0x36>
 80102b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80102b4:	4323      	orrs	r3, r4
 80102b6:	d03b      	beq.n	8010330 <scalbn+0x90>
 80102b8:	4b33      	ldr	r3, [pc, #204]	@ (8010388 <scalbn+0xe8>)
 80102ba:	4620      	mov	r0, r4
 80102bc:	4629      	mov	r1, r5
 80102be:	2200      	movs	r2, #0
 80102c0:	f7f0 f9c2 	bl	8000648 <__aeabi_dmul>
 80102c4:	4b31      	ldr	r3, [pc, #196]	@ (801038c <scalbn+0xec>)
 80102c6:	429e      	cmp	r6, r3
 80102c8:	4604      	mov	r4, r0
 80102ca:	460d      	mov	r5, r1
 80102cc:	da0f      	bge.n	80102ee <scalbn+0x4e>
 80102ce:	a326      	add	r3, pc, #152	@ (adr r3, 8010368 <scalbn+0xc8>)
 80102d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d4:	e01e      	b.n	8010314 <scalbn+0x74>
 80102d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80102da:	4291      	cmp	r1, r2
 80102dc:	d10b      	bne.n	80102f6 <scalbn+0x56>
 80102de:	4622      	mov	r2, r4
 80102e0:	4620      	mov	r0, r4
 80102e2:	4629      	mov	r1, r5
 80102e4:	f7ef fffa 	bl	80002dc <__adddf3>
 80102e8:	4604      	mov	r4, r0
 80102ea:	460d      	mov	r5, r1
 80102ec:	e020      	b.n	8010330 <scalbn+0x90>
 80102ee:	460b      	mov	r3, r1
 80102f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80102f4:	3936      	subs	r1, #54	@ 0x36
 80102f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80102fa:	4296      	cmp	r6, r2
 80102fc:	dd0d      	ble.n	801031a <scalbn+0x7a>
 80102fe:	2d00      	cmp	r5, #0
 8010300:	a11b      	add	r1, pc, #108	@ (adr r1, 8010370 <scalbn+0xd0>)
 8010302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010306:	da02      	bge.n	801030e <scalbn+0x6e>
 8010308:	a11b      	add	r1, pc, #108	@ (adr r1, 8010378 <scalbn+0xd8>)
 801030a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801030e:	a318      	add	r3, pc, #96	@ (adr r3, 8010370 <scalbn+0xd0>)
 8010310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010314:	f7f0 f998 	bl	8000648 <__aeabi_dmul>
 8010318:	e7e6      	b.n	80102e8 <scalbn+0x48>
 801031a:	1872      	adds	r2, r6, r1
 801031c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010320:	428a      	cmp	r2, r1
 8010322:	dcec      	bgt.n	80102fe <scalbn+0x5e>
 8010324:	2a00      	cmp	r2, #0
 8010326:	dd06      	ble.n	8010336 <scalbn+0x96>
 8010328:	f36f 531e 	bfc	r3, #20, #11
 801032c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010330:	ec45 4b10 	vmov	d0, r4, r5
 8010334:	bd70      	pop	{r4, r5, r6, pc}
 8010336:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801033a:	da08      	bge.n	801034e <scalbn+0xae>
 801033c:	2d00      	cmp	r5, #0
 801033e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010368 <scalbn+0xc8>)
 8010340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010344:	dac3      	bge.n	80102ce <scalbn+0x2e>
 8010346:	a10e      	add	r1, pc, #56	@ (adr r1, 8010380 <scalbn+0xe0>)
 8010348:	e9d1 0100 	ldrd	r0, r1, [r1]
 801034c:	e7bf      	b.n	80102ce <scalbn+0x2e>
 801034e:	3236      	adds	r2, #54	@ 0x36
 8010350:	f36f 531e 	bfc	r3, #20, #11
 8010354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010358:	4620      	mov	r0, r4
 801035a:	4b0d      	ldr	r3, [pc, #52]	@ (8010390 <scalbn+0xf0>)
 801035c:	4629      	mov	r1, r5
 801035e:	2200      	movs	r2, #0
 8010360:	e7d8      	b.n	8010314 <scalbn+0x74>
 8010362:	bf00      	nop
 8010364:	f3af 8000 	nop.w
 8010368:	c2f8f359 	.word	0xc2f8f359
 801036c:	01a56e1f 	.word	0x01a56e1f
 8010370:	8800759c 	.word	0x8800759c
 8010374:	7e37e43c 	.word	0x7e37e43c
 8010378:	8800759c 	.word	0x8800759c
 801037c:	fe37e43c 	.word	0xfe37e43c
 8010380:	c2f8f359 	.word	0xc2f8f359
 8010384:	81a56e1f 	.word	0x81a56e1f
 8010388:	43500000 	.word	0x43500000
 801038c:	ffff3cb0 	.word	0xffff3cb0
 8010390:	3c900000 	.word	0x3c900000
 8010394:	00000000 	.word	0x00000000

08010398 <floor>:
 8010398:	ec51 0b10 	vmov	r0, r1, d0
 801039c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80103a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80103a8:	2e13      	cmp	r6, #19
 80103aa:	460c      	mov	r4, r1
 80103ac:	4605      	mov	r5, r0
 80103ae:	4680      	mov	r8, r0
 80103b0:	dc34      	bgt.n	801041c <floor+0x84>
 80103b2:	2e00      	cmp	r6, #0
 80103b4:	da17      	bge.n	80103e6 <floor+0x4e>
 80103b6:	a332      	add	r3, pc, #200	@ (adr r3, 8010480 <floor+0xe8>)
 80103b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103bc:	f7ef ff8e 	bl	80002dc <__adddf3>
 80103c0:	2200      	movs	r2, #0
 80103c2:	2300      	movs	r3, #0
 80103c4:	f7f0 fbd0 	bl	8000b68 <__aeabi_dcmpgt>
 80103c8:	b150      	cbz	r0, 80103e0 <floor+0x48>
 80103ca:	2c00      	cmp	r4, #0
 80103cc:	da55      	bge.n	801047a <floor+0xe2>
 80103ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80103d2:	432c      	orrs	r4, r5
 80103d4:	2500      	movs	r5, #0
 80103d6:	42ac      	cmp	r4, r5
 80103d8:	4c2b      	ldr	r4, [pc, #172]	@ (8010488 <floor+0xf0>)
 80103da:	bf08      	it	eq
 80103dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80103e0:	4621      	mov	r1, r4
 80103e2:	4628      	mov	r0, r5
 80103e4:	e023      	b.n	801042e <floor+0x96>
 80103e6:	4f29      	ldr	r7, [pc, #164]	@ (801048c <floor+0xf4>)
 80103e8:	4137      	asrs	r7, r6
 80103ea:	ea01 0307 	and.w	r3, r1, r7
 80103ee:	4303      	orrs	r3, r0
 80103f0:	d01d      	beq.n	801042e <floor+0x96>
 80103f2:	a323      	add	r3, pc, #140	@ (adr r3, 8010480 <floor+0xe8>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	f7ef ff70 	bl	80002dc <__adddf3>
 80103fc:	2200      	movs	r2, #0
 80103fe:	2300      	movs	r3, #0
 8010400:	f7f0 fbb2 	bl	8000b68 <__aeabi_dcmpgt>
 8010404:	2800      	cmp	r0, #0
 8010406:	d0eb      	beq.n	80103e0 <floor+0x48>
 8010408:	2c00      	cmp	r4, #0
 801040a:	bfbe      	ittt	lt
 801040c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010410:	4133      	asrlt	r3, r6
 8010412:	18e4      	addlt	r4, r4, r3
 8010414:	ea24 0407 	bic.w	r4, r4, r7
 8010418:	2500      	movs	r5, #0
 801041a:	e7e1      	b.n	80103e0 <floor+0x48>
 801041c:	2e33      	cmp	r6, #51	@ 0x33
 801041e:	dd0a      	ble.n	8010436 <floor+0x9e>
 8010420:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010424:	d103      	bne.n	801042e <floor+0x96>
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	f7ef ff57 	bl	80002dc <__adddf3>
 801042e:	ec41 0b10 	vmov	d0, r0, r1
 8010432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010436:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801043a:	f04f 37ff 	mov.w	r7, #4294967295
 801043e:	40df      	lsrs	r7, r3
 8010440:	4207      	tst	r7, r0
 8010442:	d0f4      	beq.n	801042e <floor+0x96>
 8010444:	a30e      	add	r3, pc, #56	@ (adr r3, 8010480 <floor+0xe8>)
 8010446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044a:	f7ef ff47 	bl	80002dc <__adddf3>
 801044e:	2200      	movs	r2, #0
 8010450:	2300      	movs	r3, #0
 8010452:	f7f0 fb89 	bl	8000b68 <__aeabi_dcmpgt>
 8010456:	2800      	cmp	r0, #0
 8010458:	d0c2      	beq.n	80103e0 <floor+0x48>
 801045a:	2c00      	cmp	r4, #0
 801045c:	da0a      	bge.n	8010474 <floor+0xdc>
 801045e:	2e14      	cmp	r6, #20
 8010460:	d101      	bne.n	8010466 <floor+0xce>
 8010462:	3401      	adds	r4, #1
 8010464:	e006      	b.n	8010474 <floor+0xdc>
 8010466:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801046a:	2301      	movs	r3, #1
 801046c:	40b3      	lsls	r3, r6
 801046e:	441d      	add	r5, r3
 8010470:	4545      	cmp	r5, r8
 8010472:	d3f6      	bcc.n	8010462 <floor+0xca>
 8010474:	ea25 0507 	bic.w	r5, r5, r7
 8010478:	e7b2      	b.n	80103e0 <floor+0x48>
 801047a:	2500      	movs	r5, #0
 801047c:	462c      	mov	r4, r5
 801047e:	e7af      	b.n	80103e0 <floor+0x48>
 8010480:	8800759c 	.word	0x8800759c
 8010484:	7e37e43c 	.word	0x7e37e43c
 8010488:	bff00000 	.word	0xbff00000
 801048c:	000fffff 	.word	0x000fffff

08010490 <_init>:
 8010490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010492:	bf00      	nop
 8010494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010496:	bc08      	pop	{r3}
 8010498:	469e      	mov	lr, r3
 801049a:	4770      	bx	lr

0801049c <_fini>:
 801049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049e:	bf00      	nop
 80104a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104a2:	bc08      	pop	{r3}
 80104a4:	469e      	mov	lr, r3
 80104a6:	4770      	bx	lr
