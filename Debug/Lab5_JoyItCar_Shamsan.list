
Lab5_JoyItCar_Shamsan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800dfd0  0800dfd0  0000efd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e474  0800e474  00010200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e474  0800e474  0000f474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e47c  0800e47c  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e47c  0800e47c  0000f47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e480  0800e480  0000f480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800e484  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029cc  20000200  0800e684  00010200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bcc  0800e684  00010bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026397  00000000  00000000  00010230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a50  00000000  00000000  000365c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  0003c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017c1  00000000  00000000  0003dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a8a8  00000000  00000000  0003f6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d6fb  00000000  00000000  00049f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e397e  00000000  00000000  0007764c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015afca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f44  00000000  00000000  0015b010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00163f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dfb4 	.word	0x0800dfb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800dfb4 	.word	0x0800dfb4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <xTraceDiagnosticsAdd+0x34>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <xTraceDiagnosticsAdd+0x34>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	4401      	add	r1, r0
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TRC_SUCCESS;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000021c 	.word	0x2000021c

08000f5c <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	return xTraceDiagnosticsAdd(xType, 1);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ffda 	bl	8000f24 <xTraceDiagnosticsAdd>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <xTraceDiagnosticsSetIfHigher+0x38>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dd05      	ble.n	8000fa4 <xTraceDiagnosticsSetIfHigher+0x28>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <xTraceDiagnosticsSetIfHigher+0x38>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	6839      	ldr	r1, [r7, #0]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return TRC_SUCCESS;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000021c 	.word	0x2000021c

08000fb8 <xTraceEntryCreate>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <xTraceEntryCreate+0xb8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <xTraceEntryCreate+0x18>
	{
		return TRC_FAIL;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e04b      	b.n	8001068 <xTraceEntryCreate+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8000fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8000fd6:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	f383 8810 	msr	PRIMASK, r3
}
 8000fe4:	bf00      	nop

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 8000fe6:	f107 030b 	add.w	r3, r7, #11
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f8e2 	bl	80011b4 <prvEntryIndexTake>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <xTraceEntryCreate+0x54>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff ffb0 	bl	8000f5c <xTraceDiagnosticsIncrease>
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f383 8810 	msr	PRIMASK, r3
}
 8001006:	bf00      	nop

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 8001008:	2301      	movs	r3, #1
 800100a:	e02d      	b.n	8001068 <xTraceEntryCreate+0xb0>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 800100c:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <xTraceEntryCreate+0xbc>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	4619      	mov	r1, r3
 8001014:	460b      	mov	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	440b      	add	r3, r1
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	3308      	adds	r3, #8
 800101e:	4413      	add	r3, r2
 8001020:	3304      	adds	r3, #4
 8001022:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
 800102e:	e008      	b.n	8001042 <xTraceEntryCreate+0x8a>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	3301      	adds	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	2b02      	cmp	r3, #2
 8001046:	d9f3      	bls.n	8001030 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	2200      	movs	r2, #0
 8001052:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f383 8810 	msr	PRIMASK, r3
}
 8001064:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3728      	adds	r7, #40	@ 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000238 	.word	0x20000238
 8001074:	20000220 	.word	0x20000220

08001078 <xTraceEntryDelete>:

traceResult xTraceEntryDelete(TraceEntryHandle_t xEntryHandle)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* Calculate the index based on the entry address */
	/* Does not need to be locked. */
	/* This should never fail */
	xIndex = CALCULATE_ENTRY_INDEX(xEntryHandle); /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion from pointer to integer check*/ /*cstat !MISRAC2004-17.2 !MISRAC2012-Rule-18.2 !MISRAC2012-Rule-18.4 Suppress pointer comparison check*/
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a1e      	ldr	r2, [pc, #120]	@ (80010fc <xTraceEntryDelete+0x84>)
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	320c      	adds	r2, #12
 8001088:	1a9b      	subs	r3, r3, r2
 800108a:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <xTraceEntryDelete+0x88>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	095b      	lsrs	r3, r3, #5
 8001092:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001094:	f3ef 8310 	mrs	r3, PRIMASK
 8001098:	613b      	str	r3, [r7, #16]
  return(result);
 800109a:	693b      	ldr	r3, [r7, #16]

	TRC_ASSERT((uint32_t)xIndex < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	TRACE_ENTER_CRITICAL_SECTION();
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f383 8810 	msr	PRIMASK, r3
}
 80010a8:	bf00      	nop

	if (((TraceEntry_t*)xEntryHandle)->pvAddress == 0)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d107      	bne.n	80010c2 <xTraceEntryDelete+0x4a>
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f383 8810 	msr	PRIMASK, r3
}
 80010bc:	bf00      	nop
	{
		/* Someone else has deleted this already? */
		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 80010be:	2301      	movs	r3, #1
 80010c0:	e015      	b.n	80010ee <xTraceEntryDelete+0x76>
	}

	/* A valid address, so we assume it is OK. */
	/* We clear the address field which is used on host to see if entries are active. */
	((TraceEntry_t*)xEntryHandle)->pvAddress = 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

	/* Give back the index */
	GIVE_ENTRY_INDEX(xIndex);
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <xTraceEntryDelete+0x8c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <xTraceEntryDelete+0x8c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d2:	7ff9      	ldrb	r1, [r7, #31]
 80010d4:	54d1      	strb	r1, [r2, r3]
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <xTraceEntryDelete+0x8c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010dc:	3201      	adds	r2, #1
 80010de:	639a      	str	r2, [r3, #56]	@ 0x38
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f383 8810 	msr	PRIMASK, r3
}
 80010ea:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000220 	.word	0x20000220
 8001100:	aaaaaaab 	.word	0xaaaaaaab
 8001104:	20000224 	.word	0x20000224

08001108 <xTraceEntryFind>:

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e017      	b.n	8001148 <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <xTraceEntryFind+0x54>)
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	3308      	adds	r3, #8
 8001128:	440b      	add	r3, r1
 800112a:	3304      	adds	r3, #4
 800112c:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	d104      	bne.n	8001142 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 800113e:	2300      	movs	r3, #0
 8001140:	e006      	b.n	8001150 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b37      	cmp	r3, #55	@ 0x37
 800114c:	d9e4      	bls.n	8001118 <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000220 	.word	0x20000220

08001160 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <xTraceEntrySetSymbol+0x50>)
 8001174:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4619      	mov	r1, r3
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fefc 	bl	8000f7c <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b1b      	cmp	r3, #27
 8001188:	d902      	bls.n	8001190 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800118a:	231c      	movs	r3, #28
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	e002      	b.n	8001196 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3301      	adds	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3314      	adds	r3, #20
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	4618      	mov	r0, r3
 80011a0:	f00b f863 	bl	800c26a <memcpy>

	return TRC_SUCCESS;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800dfd0 	.word	0x0800dfd0

080011b4 <prvEntryIndexTake>:

	return TRC_SUCCESS;
}

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e01c      	b.n	8001204 <prvEntryIndexTake+0x50>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	73fb      	strb	r3, [r7, #15]
	pxIndexTable->uiFreeIndexCount--;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011d8:	3a01      	subs	r2, #1
 80011da:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	5c8a      	ldrb	r2, [r1, r2]
 80011ec:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <prvEntryIndexTake+0x5c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f8:	21ff      	movs	r1, #255	@ 0xff
 80011fa:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000224 	.word	0x20000224

08001214 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
	int32_t iBytesCommitted = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8001226:	4b32      	ldr	r3, [pc, #200]	@ (80012f0 <xTraceEventCreate1+0xdc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <xTraceEventCreate1+0x28>
 8001232:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <xTraceEventCreate1+0xe0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <xTraceEventCreate1+0x2c>
 800123c:	2301      	movs	r3, #1
 800123e:	e053      	b.n	80012e8 <xTraceEventCreate1+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001240:	f3ef 8310 	mrs	r3, PRIMASK
 8001244:	61fb      	str	r3, [r7, #28]
  return(result);
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
 800124a:	2301      	movs	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	f383 8810 	msr	PRIMASK, r3
}
 8001254:	bf00      	nop
 8001256:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <xTraceEventCreate1+0xe4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	3201      	adds	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	200c      	movs	r0, #12
 8001268:	f000 fc38 	bl	8001adc <xTraceInternalEventBufferAlloc>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <xTraceEventCreate1+0x6e>
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f383 8810 	msr	PRIMASK, r3
}
 800127c:	bf00      	nop
 800127e:	2301      	movs	r3, #1
 8001280:	e032      	b.n	80012e8 <xTraceEventCreate1+0xd4>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	b29a      	uxth	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800128c:	b292      	uxth	r2, r2
 800128e:	801a      	strh	r2, [r3, #0]
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <xTraceEventCreate1+0xe4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	b292      	uxth	r2, r2
 800129a:	805a      	strh	r2, [r3, #2]
 800129c:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <xTraceEventCreate1+0xe8>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <xTraceEventCreate1+0xec>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d204      	bcs.n	80012bc <xTraceEventCreate1+0xa8>
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <xTraceEventCreate1+0xec>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	3201      	adds	r2, #1
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <xTraceEventCreate1+0xec>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6852      	ldr	r2, [r2, #4]
 80012c4:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	210c      	movs	r1, #12
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fc15 	bl	8001b04 <xTraceInternalEventBufferAllocCommit>
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f383 8810 	msr	PRIMASK, r3
}
 80012e4:	bf00      	nop

	return TRC_SUCCESS;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000238 	.word	0x20000238
 80012f4:	20000234 	.word	0x20000234
 80012f8:	20000228 	.word	0x20000228
 80012fc:	e0001004 	.word	0xe0001004
 8001300:	20000240 	.word	0x20000240

08001304 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8001318:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <xTraceEventCreate2+0xe4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <xTraceEventCreate2+0x2a>
 8001324:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <xTraceEventCreate2+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <xTraceEventCreate2+0x2e>
 800132e:	2301      	movs	r3, #1
 8001330:	e056      	b.n	80013e0 <xTraceEventCreate2+0xdc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001332:	f3ef 8310 	mrs	r3, PRIMASK
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001342:	f383 8810 	msr	PRIMASK, r3
}
 8001346:	bf00      	nop
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <xTraceEventCreate2+0xec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	3201      	adds	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	4619      	mov	r1, r3
 8001358:	2010      	movs	r0, #16
 800135a:	f000 fbbf 	bl	8001adc <xTraceInternalEventBufferAlloc>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <xTraceEventCreate2+0x70>
 8001364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001366:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	f383 8810 	msr	PRIMASK, r3
}
 800136e:	bf00      	nop
 8001370:	2301      	movs	r3, #1
 8001372:	e035      	b.n	80013e0 <xTraceEventCreate2+0xdc>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	b29a      	uxth	r2, r3
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800137e:	b292      	uxth	r2, r2
 8001380:	801a      	strh	r2, [r3, #0]
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <xTraceEventCreate2+0xec>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	b292      	uxth	r2, r2
 800138c:	805a      	strh	r2, [r3, #2]
 800138e:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <xTraceEventCreate2+0xf0>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <xTraceEventCreate2+0xf4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d204      	bcs.n	80013ae <xTraceEventCreate2+0xaa>
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <xTraceEventCreate2+0xf4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	3201      	adds	r2, #1
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <xTraceEventCreate2+0xf4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6852      	ldr	r2, [r2, #4]
 80013b6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f107 0214 	add.w	r2, r7, #20
 80013ca:	2110      	movs	r1, #16
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fb99 	bl	8001b04 <xTraceInternalEventBufferAllocCommit>
 80013d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f383 8810 	msr	PRIMASK, r3
}
 80013dc:	bf00      	nop

	return TRC_SUCCESS;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3730      	adds	r7, #48	@ 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000238 	.word	0x20000238
 80013ec:	20000234 	.word	0x20000234
 80013f0:	20000228 	.word	0x20000228
 80013f4:	e0001004 	.word	0xe0001004
 80013f8:	20000240 	.word	0x20000240

080013fc <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	@ 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 8001412:	4b35      	ldr	r3, [pc, #212]	@ (80014e8 <xTraceEventCreate3+0xec>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <xTraceEventCreate3+0x2c>
 800141e:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <xTraceEventCreate3+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <xTraceEventCreate3+0x30>
 8001428:	2301      	movs	r3, #1
 800142a:	e059      	b.n	80014e0 <xTraceEventCreate3+0xe4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800142c:	f3ef 8310 	mrs	r3, PRIMASK
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001436:	2301      	movs	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800143a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143c:	f383 8810 	msr	PRIMASK, r3
}
 8001440:	bf00      	nop
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <xTraceEventCreate3+0xf4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	3201      	adds	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4619      	mov	r1, r3
 8001452:	2014      	movs	r0, #20
 8001454:	f000 fb42 	bl	8001adc <xTraceInternalEventBufferAlloc>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <xTraceEventCreate3+0x72>
 800145e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001460:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f383 8810 	msr	PRIMASK, r3
}
 8001468:	bf00      	nop
 800146a:	2301      	movs	r3, #1
 800146c:	e038      	b.n	80014e0 <xTraceEventCreate3+0xe4>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	b29a      	uxth	r2, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 8001478:	b292      	uxth	r2, r2
 800147a:	801a      	strh	r2, [r3, #0]
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <xTraceEventCreate3+0xf4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	b292      	uxth	r2, r2
 8001486:	805a      	strh	r2, [r3, #2]
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <xTraceEventCreate3+0xf8>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <xTraceEventCreate3+0xfc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	429a      	cmp	r2, r3
 800149c:	d204      	bcs.n	80014a8 <xTraceEventCreate3+0xac>
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <xTraceEventCreate3+0xfc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	3201      	adds	r2, #1
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <xTraceEventCreate3+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6852      	ldr	r2, [r2, #4]
 80014b0:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f107 0214 	add.w	r2, r7, #20
 80014ca:	2114      	movs	r1, #20
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fb19 	bl	8001b04 <xTraceInternalEventBufferAllocCommit>
 80014d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f383 8810 	msr	PRIMASK, r3
}
 80014dc:	bf00      	nop

	return TRC_SUCCESS;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3730      	adds	r7, #48	@ 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000238 	.word	0x20000238
 80014ec:	20000234 	.word	0x20000234
 80014f0:	20000228 	.word	0x20000228
 80014f4:	e0001004 	.word	0xe0001004
 80014f8:	20000240 	.word	0x20000240

080014fc <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	@ 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 8001512:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <xTraceEventCreate4+0xf4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <xTraceEventCreate4+0x2c>
 800151e:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <xTraceEventCreate4+0xf8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <xTraceEventCreate4+0x30>
 8001528:	2301      	movs	r3, #1
 800152a:	e05c      	b.n	80015e6 <xTraceEventCreate4+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800152c:	f3ef 8310 	mrs	r3, PRIMASK
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153c:	f383 8810 	msr	PRIMASK, r3
}
 8001540:	bf00      	nop
 8001542:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <xTraceEventCreate4+0xfc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	3201      	adds	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4619      	mov	r1, r3
 8001552:	2018      	movs	r0, #24
 8001554:	f000 fac2 	bl	8001adc <xTraceInternalEventBufferAlloc>
 8001558:	4603      	mov	r3, r0
 800155a:	2b01      	cmp	r3, #1
 800155c:	d107      	bne.n	800156e <xTraceEventCreate4+0x72>
 800155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001560:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	f383 8810 	msr	PRIMASK, r3
}
 8001568:	bf00      	nop
 800156a:	2301      	movs	r3, #1
 800156c:	e03b      	b.n	80015e6 <xTraceEventCreate4+0xea>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	b29a      	uxth	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001578:	b292      	uxth	r2, r2
 800157a:	801a      	strh	r2, [r3, #0]
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <xTraceEventCreate4+0xfc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	b292      	uxth	r2, r2
 8001586:	805a      	strh	r2, [r3, #2]
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <xTraceEventCreate4+0x100>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <xTraceEventCreate4+0x104>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	429a      	cmp	r2, r3
 800159c:	d204      	bcs.n	80015a8 <xTraceEventCreate4+0xac>
 800159e:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <xTraceEventCreate4+0x104>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	3201      	adds	r2, #1
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <xTraceEventCreate4+0x104>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6852      	ldr	r2, [r2, #4]
 80015b0:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015c8:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f107 0214 	add.w	r2, r7, #20
 80015d0:	2118      	movs	r1, #24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fa96 	bl	8001b04 <xTraceInternalEventBufferAllocCommit>
 80015d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f383 8810 	msr	PRIMASK, r3
}
 80015e2:	bf00      	nop

	return TRC_SUCCESS;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3730      	adds	r7, #48	@ 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000238 	.word	0x20000238
 80015f4:	20000234 	.word	0x20000234
 80015f8:	20000228 	.word	0x20000228
 80015fc:	e0001004 	.word	0xe0001004
 8001600:	20000240 	.word	0x20000240

08001604 <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	@ 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3303      	adds	r3, #3
 800161e:	f023 0303 	bic.w	r3, r3, #3
 8001622:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	330c      	adds	r3, #12
 8001628:	2b40      	cmp	r3, #64	@ 0x40
 800162a:	d901      	bls.n	8001630 <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 800162c:	2334      	movs	r3, #52	@ 0x34
 800162e:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8001630:	4b3a      	ldr	r3, [pc, #232]	@ (800171c <xTraceEventCreateData1+0x118>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <xTraceEventCreateData1+0x42>
 800163c:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <xTraceEventCreateData1+0x11c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <xTraceEventCreateData1+0x46>
 8001646:	2301      	movs	r3, #1
 8001648:	e063      	b.n	8001712 <xTraceEventCreateData1+0x10e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800164a:	f3ef 8310 	mrs	r3, PRIMASK
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165a:	f383 8810 	msr	PRIMASK, r3
}
 800165e:	bf00      	nop
 8001660:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <xTraceEventCreateData1+0x120>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	3201      	adds	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	330c      	adds	r3, #12
 800166e:	f107 0218 	add.w	r2, r7, #24
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fa31 	bl	8001adc <xTraceInternalEventBufferAlloc>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d107      	bne.n	8001690 <xTraceEventCreateData1+0x8c>
 8001680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001682:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f383 8810 	msr	PRIMASK, r3
}
 800168a:	bf00      	nop
 800168c:	2301      	movs	r3, #1
 800168e:	e040      	b.n	8001712 <xTraceEventCreateData1+0x10e>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	b21a      	sxth	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3304      	adds	r3, #4
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	b21b      	sxth	r3, r3
 800169c:	031b      	lsls	r3, r3, #12
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	b292      	uxth	r2, r2
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <xTraceEventCreateData1+0x120>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	b292      	uxth	r2, r2
 80016b4:	805a      	strh	r2, [r3, #2]
 80016b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001728 <xTraceEventCreateData1+0x124>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <xTraceEventCreateData1+0x128>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d204      	bcs.n	80016d6 <xTraceEventCreateData1+0xd2>
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <xTraceEventCreateData1+0x128>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	3201      	adds	r2, #1
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <xTraceEventCreateData1+0x128>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6852      	ldr	r2, [r2, #4]
 80016de:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	330c      	adds	r3, #12
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00a fdbb 	bl	800c26a <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 80016f4:	69b8      	ldr	r0, [r7, #24]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	330c      	adds	r3, #12
 80016fa:	f107 0214 	add.w	r2, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	f000 fa00 	bl	8001b04 <xTraceInternalEventBufferAllocCommit>
 8001704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001706:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f383 8810 	msr	PRIMASK, r3
}
 800170e:	bf00      	nop

	return TRC_SUCCESS;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000238 	.word	0x20000238
 8001720:	20000234 	.word	0x20000234
 8001724:	20000228 	.word	0x20000228
 8001728:	e0001004 	.word	0xe0001004
 800172c:	20000240 	.word	0x20000240

08001730 <xTraceEventGetSize>:

	return TRC_SUCCESS;
}

traceResult xTraceEventGetSize(const void* const pvAddress, uint32_t* puiSize)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(puiSize != (void*)0);

	/* This should never fail */
	TRC_ASSERT((sizeof(TraceEvent0_t) + ((uint32_t)(uint16_t)(TRC_EVENT_GET_PARAM_COUNT(((const TraceEvent0_t*)pvAddress)->EventID)) * sizeof(TraceUnsignedBaseType_t))) <= (uint32_t)(TRC_MAX_BLOB_SIZE)); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
	
	return TRC_EVENT_GET_SIZE(pvAddress, puiSize);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	0b1b      	lsrs	r3, r3, #12
 8001740:	b29b      	uxth	r3, r3
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3302      	adds	r3, #2
 8001748:	009a      	lsls	r2, r3, #2
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <prvTraceEventBufferAllocPop>:

	return TRC_SUCCESS;
}

static traceResult prvTraceEventBufferAllocPop(TraceEventBuffer_t *pxTraceEventBuffer)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	uint32_t uiFreeSize = 0u;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

	/* Check if tail is in, or at the start of the slack area. We do not want to call
	 * a free when in the slack area since it would read garbage data and free would
	 * become undefined.
	 */
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	1acb      	subs	r3, r1, r3
 8001776:	429a      	cmp	r2, r3
 8001778:	d303      	bcc.n	8001782 <prvTraceEventBufferAllocPop+0x26>
	{
		/* Tail was in the slack area, wrap back to the start of the buffer. */
		pxTraceEventBuffer->uiTail = 0u;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e017      	b.n	80017b2 <prvTraceEventBufferAllocPop+0x56>
	}
	else
	{
		/* Get size of event we are freeing (this should never fail) */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4413      	add	r3, r2
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ffcc 	bl	8001730 <xTraceEventGetSize>

		/* Update tail to point to the new last event */
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6892      	ldr	r2, [r2, #8]
 80017a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80017a8:	fb01 f202 	mul.w	r2, r1, r2
 80017ac:	1a9a      	subs	r2, r3, r2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	605a      	str	r2, [r3, #4]
	}

	return TRC_SUCCESS;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <xTraceEventBufferAlloc>:

traceResult xTraceEventBufferAlloc(TraceEventBuffer_t *pxTraceEventBuffer, uint32_t uiSize, void **ppvData)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);
	
	/* This should never fail */
	TRC_ASSERT(ppvData != (void*)0);

	uiBufferSize = pxTraceEventBuffer->uiSize;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	61fb      	str	r3, [r7, #28]

	/* Handle overwrite buffer allocation, since this kind of allocation modifies
	 * both head and tail it should only be used for internal buffers without any
	 * flushing calls (Streaming Ringbuffer)
	 */
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	f040 8093 	bne.w	80018fe <xTraceEventBufferAlloc+0x142>
	{
		if (pxTraceEventBuffer->uiHead >= pxTraceEventBuffer->uiTail)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d341      	bcc.n	8001868 <xTraceEventBufferAlloc+0xac>
		{
			/* Do we have enough space to directly allocate from the buffer? */
			if ((uiBufferSize - pxTraceEventBuffer->uiHead) > uiSize)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d214      	bcs.n	800181c <xTraceEventBufferAlloc+0x60>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	441a      	add	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	fbb3 f2f2 	udiv	r2, r3, r2
 800180e:	69f9      	ldr	r1, [r7, #28]
 8001810:	fb01 f202 	mul.w	r2, r1, r2
 8001814:	1a9a      	subs	r2, r3, r2
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	61da      	str	r2, [r3, #28]
 800181a:	e0e2      	b.n	80019e2 <xTraceEventBufferAlloc+0x226>
			{
				/* Free space until there is enough space for a contiguous
				 * allocation */
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff ff9d 	bl	800175c <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - sizeof(uint32_t);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	3b04      	subs	r3, #4
 8001828:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	429a      	cmp	r2, r3
 8001830:	d3f4      	bcc.n	800181c <xTraceEventBufferAlloc+0x60>

				/* Calculate slack from the wrapping */
				pxTraceEventBuffer->uiSlack = uiBufferSize - pxTraceEventBuffer->uiHead;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	1ad2      	subs	r2, r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	619a      	str	r2, [r3, #24]

				/* Wrap head */
				pxTraceEventBuffer->uiHead = 0u;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

				/* Allocate data */
				*ppvData = pxTraceEventBuffer->puiBuffer;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	fbb3 f2f2 	udiv	r2, r3, r2
 800185a:	69f9      	ldr	r1, [r7, #28]
 800185c:	fb01 f202 	mul.w	r2, r1, r2
 8001860:	1a9a      	subs	r2, r3, r2
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	61da      	str	r2, [r3, #28]
 8001866:	e0bc      	b.n	80019e2 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	3b04      	subs	r3, #4
 8001874:	613b      	str	r3, [r7, #16]

			/* Check if we have to free space */
			if (uiFreeSpace < uiSize)
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d231      	bcs.n	80018e2 <xTraceEventBufferAlloc+0x126>
			{
				/* Check if this is a wrapping alloc */
				if ((pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead) < uiSize)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	d910      	bls.n	80018b0 <xTraceEventBufferAlloc+0xf4>
					/* To avoid uiHead and uiTail from becoming the same we want to
					 * pop any events that would make uiTail equal uiHead before
					 * wrapping the head. */
					do
					{
						(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff ff64 	bl	800175c <prvTraceEventBufferAllocPop>
					} while (pxTraceEventBuffer->uiTail == 0u);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f8      	beq.n	800188e <xTraceEventBufferAlloc+0xd2>

					pxTraceEventBuffer->uiSlack = pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1ad2      	subs	r2, r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	619a      	str	r2, [r3, #24]
					pxTraceEventBuffer->uiHead = 0u;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
				}
				
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff ff53 	bl	800175c <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	3b04      	subs	r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d3f1      	bcc.n	80018b0 <xTraceEventBufferAlloc+0xf4>

				if (pxTraceEventBuffer->uiTail == 0u)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d106      	bne.n	80018e2 <xTraceEventBufferAlloc+0x126>
				{
					*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	441a      	add	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	441a      	add	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead + uiSize);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	441a      	add	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	61da      	str	r2, [r3, #28]
 80018fc:	e071      	b.n	80019e2 <xTraceEventBufferAlloc+0x226>
	else
	{
		/* Since a consumer could potentially update tail (free) during the procedure
		 * we have to save it here to avoid problems with it changing during this call.
		 */
		uiHead = pxTraceEventBuffer->uiHead;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	61bb      	str	r3, [r7, #24]
		uiTail = pxTraceEventBuffer->uiTail;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	617b      	str	r3, [r7, #20]

		if (uiHead >= uiTail)
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	429a      	cmp	r2, r3
 8001910:	d34d      	bcc.n	80019ae <xTraceEventBufferAlloc+0x1f2>
		{
			uiFreeSpace = (uiBufferSize - uiHead - sizeof(uint32_t)) + uiTail;
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad2      	subs	r2, r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	4413      	add	r3, r2
 800191c:	3b04      	subs	r3, #4
 800191e:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	429a      	cmp	r2, r3
 8001926:	d204      	bcs.n	8001932 <xTraceEventBufferAlloc+0x176>
			{
				*ppvData = 0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 800192e:	2301      	movs	r3, #1
 8001930:	e058      	b.n	80019e4 <xTraceEventBufferAlloc+0x228>
			}

			/* Copy data */
			if ((uiBufferSize - uiHead) > uiSize)
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	429a      	cmp	r2, r3
 800193c:	d213      	bcs.n	8001966 <xTraceEventBufferAlloc+0x1aa>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	441a      	add	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4413      	add	r3, r2
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	fbb3 f2f2 	udiv	r2, r3, r2
 8001958:	69f9      	ldr	r1, [r7, #28]
 800195a:	fb01 f202 	mul.w	r2, r1, r2
 800195e:	1a9a      	subs	r2, r3, r2
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	61da      	str	r2, [r3, #28]
 8001964:	e03d      	b.n	80019e2 <xTraceEventBufferAlloc+0x226>
			}
			else
			{
				uiFreeSpace = uiTail;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	613b      	str	r3, [r7, #16]

				if (uiFreeSpace < uiSize)
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	429a      	cmp	r2, r3
 8001970:	d204      	bcs.n	800197c <xTraceEventBufferAlloc+0x1c0>
				{
					*ppvData = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

					return TRC_FAIL;
 8001978:	2301      	movs	r3, #1
 800197a:	e033      	b.n	80019e4 <xTraceEventBufferAlloc+0x228>
				}

				/* Calculate slack */
				pxTraceEventBuffer->uiSlack = uiBufferSize - uiHead;
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad2      	subs	r2, r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	619a      	str	r2, [r3, #24]

				*ppvData = pxTraceEventBuffer->puiBuffer;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	441a      	add	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4413      	add	r3, r2
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	fbb3 f2f2 	udiv	r2, r3, r2
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	fb01 f202 	mul.w	r2, r1, r2
 80019a6:	1a9a      	subs	r2, r3, r2
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	61da      	str	r2, [r3, #28]
 80019ac:	e019      	b.n	80019e2 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = uiTail - uiHead - sizeof(uint32_t);
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	3b04      	subs	r3, #4
 80019b6:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d204      	bcs.n	80019ca <xTraceEventBufferAlloc+0x20e>
			{
				*ppvData = 0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00c      	b.n	80019e4 <xTraceEventBufferAlloc+0x228>
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	441a      	add	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (uiHead + uiSize);
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	441a      	add	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	61da      	str	r2, [r3, #28]
		}
	}

	return TRC_SUCCESS;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <xTraceEventBufferAllocCommit>:

traceResult xTraceEventBufferAllocCommit(TraceEventBuffer_t *pxTraceEventBuffer, const void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <xTraceEventBufferAllocCommit+0x34>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	621a      	str	r2, [r3, #32]

	/* Advance head location */
	pxTraceEventBuffer->uiHead = pxTraceEventBuffer->uiNextHead;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	601a      	str	r2, [r3, #0]

	/* Update bytes written */
	*piBytesWritten = (int32_t)uiSize;
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000240 	.word	0x20000240

08001a24 <xTraceHeapAlloc>:

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
}

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e024      	b.n	8001a84 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d015      	beq.n	8001a6c <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d904      	bls.n	8001a66 <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <xTraceHeapAlloc+0x52>
 8001a72:	2338      	movs	r3, #56	@ 0x38
 8001a74:	e000      	b.n	8001a78 <xTraceHeapAlloc+0x54>
 8001a76:	23e9      	movs	r3, #233	@ 0xe9
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fc41 	bl	8001304 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <xTraceHeapFree>:

traceResult xTraceHeapFree(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent;

	if (xHeapHandle == 0)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <xTraceHeapFree+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e018      	b.n	8001ad4 <xTraceHeapFree+0x48>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <xTraceHeapFree+0x30>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	617b      	str	r3, [r7, #20]

		uxCurrent -= uxSize;
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <xTraceHeapFree+0x3a>
 8001ac2:	2339      	movs	r3, #57	@ 0x39
 8001ac4:	e000      	b.n	8001ac8 <xTraceHeapFree+0x3c>
 8001ac6:	23ea      	movs	r3, #234	@ 0xea
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fc19 	bl	8001304 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <xTraceInternalEventBufferAlloc>:

	return TRC_SUCCESS;
}

traceResult xTraceInternalEventBufferAlloc(uint32_t uiSize, void **ppvData)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));

	return xTraceMultiCoreEventBufferAlloc(pxInternalEventBuffer, uiSize, ppvData);
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <xTraceInternalEventBufferAlloc+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fe63 	bl	80017bc <xTraceEventBufferAlloc>
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	2000022c 	.word	0x2000022c

08001b04 <xTraceInternalEventBufferAllocCommit>:

traceResult xTraceInternalEventBufferAllocCommit(void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));

	return xTraceMultiCoreEventBufferAllocCommit(pxInternalEventBuffer, pvData, uiSize, piBytesWritten);
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <xTraceInternalEventBufferAllocCommit+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	f7ff ff66 	bl	80019ec <xTraceEventBufferAllocCommit>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000022c 	.word	0x2000022c

08001b30 <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <xTraceKernelPortGetSystemHeapHandle+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000230 	.word	0x20000230

08001b48 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b090      	sub	sp, #64	@ 0x40
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b56:	f3ef 8310 	mrs	r3, PRIMASK
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8001b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8001b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b60:	2301      	movs	r3, #1
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b66:	f383 8810 	msr	PRIMASK, r3
}
 8001b6a:	bf00      	nop

	if (pvObject != (void*)0)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01a      	beq.n	8001ba8 <xTraceObjectRegisterInternal+0x60>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8001b72:	f107 0318 	add.w	r3, r7, #24
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fa1e 	bl	8000fb8 <xTraceEntryCreate>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d104      	bne.n	8001b8c <xTraceObjectRegisterInternal+0x44>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e000      	b.n	8001b8e <xTraceObjectRegisterInternal+0x46>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <xTraceObjectRegisterInternal+0x5a>
 8001b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	f383 8810 	msr	PRIMASK, r3
}
 8001b9c:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e080      	b.n	8001ca4 <xTraceObjectRegisterInternal+0x15c>
		}
		
		pvAddress = pvObject;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e012      	b.n	8001bce <xTraceObjectRegisterInternal+0x86>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fa03 	bl	8000fb8 <xTraceEntryCreate>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <xTraceObjectRegisterInternal+0x80>
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f383 8810 	msr	PRIMASK, r3
}
 8001bc2:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e06d      	b.n	8001ca4 <xTraceObjectRegisterInternal+0x15c>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bd2:	e00c      	b.n	8001bee <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bda:	4413      	add	r3, r2
 8001bdc:	69b9      	ldr	r1, [r7, #24]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < uxStateCount; i++)
 8001be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bea:	3301      	adds	r3, #1
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3ee      	bcc.n	8001bd4 <xTraceObjectRegisterInternal+0x8c>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	6919      	ldr	r1, [r3, #16]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f383 8810 	msr	PRIMASK, r3
}
 8001c12:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <xTraceObjectRegisterInternal+0xe4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <xTraceObjectRegisterInternal+0xe4>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f85e 	bl	8001ce8 <xTraceObjectSetName>
	}

	switch (uxStateCount)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d835      	bhi.n	8001c9e <xTraceObjectRegisterInternal+0x156>
 8001c32:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <xTraceObjectRegisterInternal+0xf0>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c67 	.word	0x08001c67
 8001c44:	08001c7d 	.word	0x08001c7d
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fae1 	bl	8001214 <xTraceEventCreate1>
			break;
 8001c52:	e026      	b.n	8001ca2 <xTraceObjectRegisterInternal+0x15a>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4619      	mov	r1, r3
 8001c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7ff fb50 	bl	8001304 <xTraceEventCreate2>
			break;
 8001c64:	e01d      	b.n	8001ca2 <xTraceObjectRegisterInternal+0x15a>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c70:	3304      	adds	r3, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff fbc1 	bl	80013fc <xTraceEventCreate3>
			break;
 8001c7a:	e012      	b.n	8001ca2 <xTraceObjectRegisterInternal+0x15a>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c86:	3304      	adds	r3, #4
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	460b      	mov	r3, r1
 8001c94:	4601      	mov	r1, r0
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff fc30 	bl	80014fc <xTraceEventCreate4>
			break;
 8001c9c:	e001      	b.n	8001ca2 <xTraceObjectRegisterInternal+0x15a>
		default:
			return TRC_FAIL;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <xTraceObjectRegisterInternal+0x15c>
			break;
	}

	return TRC_SUCCESS;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3738      	adds	r7, #56	@ 0x38
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <xTraceObjectUnregister>:
	TraceUnsignedBaseType_t auxStates[2] = { uxState1, uxState2 };
	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 2u, auxStates, 0u, pxObjectHandle);
}

traceResult xTraceObjectUnregister(TraceObjectHandle_t xObjectHandle, uint32_t uiEventCode, TraceUnsignedBaseType_t uxState)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	void* pvObject = (void*)0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
	const char *szName = (void*)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]

	/* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)szName;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	617b      	str	r3, [r7, #20]

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetSymbol((TraceEntryHandle_t)xObjectHandle, &szName) == TRC_SUCCESS);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3314      	adds	r3, #20
 8001cca:	613b      	str	r3, [r7, #16]
	/* Send the name event, if possible */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 1) */

	/* Send the delete event, if possible */
	(void)xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)(pvObject), uxState);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f7ff fb16 	bl	8001304 <xTraceEventCreate2>

	return xTraceEntryDelete(xObjectHandle);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff f9cd 	bl	8001078 <xTraceEntryDelete>
 8001cde:	4603      	mov	r3, r0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <xTraceObjectSetName>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <xTraceObjectSetName+0x64>)
 8001cfe:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e002      	b.n	8001d12 <xTraceObjectSetName+0x2a>
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <xTraceObjectSetName+0x3c>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d22:	d9f3      	bls.n	8001d0c <xTraceObjectSetName+0x24>

	uiLength = i;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	2003      	movs	r0, #3
 8001d34:	f7ff fc66 	bl	8001604 <xTraceEventCreateData1>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fa0f 	bl	8001160 <xTraceEntrySetSymbol>
 8001d42:	4603      	mov	r3, r0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0800dfd4 	.word	0x0800dfd4

08001d50 <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af04      	add	r7, sp, #16
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	463b      	mov	r3, r7
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff fee8 	bl	8001b48 <xTraceObjectRegisterInternal>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <xTraceObjectUnregisterWithoutHandle>:
	
	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 2u, auxStates, 0u, &xObjectHandle);
}

traceResult xTraceObjectUnregisterWithoutHandle(uint32_t uiEventCode, void* pvObject, TraceUnsignedBaseType_t uxState)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b08c      	sub	sp, #48	@ 0x30
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d92:	623b      	str	r3, [r7, #32]
  return(result);
 8001d94:	6a3b      	ldr	r3, [r7, #32]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	f383 8810 	msr	PRIMASK, r3
}
 8001da2:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f7ff f9ac 	bl	8001108 <xTraceEntryFind>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <xTraceObjectUnregisterWithoutHandle+0x44>
 8001db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f383 8810 	msr	PRIMASK, r3
}
 8001dc0:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00d      	b.n	8001de2 <xTraceObjectUnregisterWithoutHandle+0x60>
	}

	xResult = xTraceObjectUnregister((TraceObjectHandle_t)xEntryHandle, uiEventCode, uxState);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff6d 	bl	8001cac <xTraceObjectUnregister>
 8001dd2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f383 8810 	msr	PRIMASK, r3
}
 8001dde:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8001de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3730      	adds	r7, #48	@ 0x30
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <xTraceObjectSetNameWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b08a      	sub	sp, #40	@ 0x28
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001df4:	f3ef 8310 	mrs	r3, PRIMASK
 8001df8:	61bb      	str	r3, [r7, #24]
  return(result);
 8001dfa:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f383 8810 	msr	PRIMASK, r3
}
 8001e08:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff f979 	bl	8001108 <xTraceEntryFind>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d117      	bne.n	8001e4c <xTraceObjectSetNameWithoutHandle+0x62>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f8c9 	bl	8000fb8 <xTraceEntryCreate>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <xTraceObjectSetNameWithoutHandle+0x4c>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <xTraceObjectSetNameWithoutHandle+0x4e>
 8001e36:	2301      	movs	r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <xTraceObjectSetNameWithoutHandle+0x62>
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f383 8810 	msr	PRIMASK, r3
}
 8001e46:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e00c      	b.n	8001e66 <xTraceObjectSetNameWithoutHandle+0x7c>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff49 	bl	8001ce8 <xTraceObjectSetName>
 8001e56:	6238      	str	r0, [r7, #32]
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f383 8810 	msr	PRIMASK, r3
}
 8001e62:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8001e64:	6a3b      	ldr	r3, [r7, #32]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3728      	adds	r7, #40	@ 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8001e7e:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <xTraceTaskSwitch+0x94>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <xTraceTaskSwitch+0x1e>
	{
		return xResult;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	e035      	b.n	8001efa <xTraceTaskSwitch+0x8a>
	}

	if (!xTraceIsRecorderEnabled())
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <xTraceTaskSwitch+0x94>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <xTraceTaskSwitch+0x34>
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <xTraceTaskSwitch+0x98>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <xTraceTaskSwitch+0x40>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		(void)xTraceTaskSetCurrent(pvTask);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <xTraceTaskSwitch+0x9c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	601a      	str	r2, [r3, #0]

		return xResult;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	e024      	b.n	8001efa <xTraceTaskSwitch+0x8a>
	}

	(void)xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <xTraceTaskSwitch+0x98>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8001ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ebe:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f383 8810 	msr	PRIMASK, r3
}
 8001ecc:	bf00      	nop
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	(void)xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		(void)xTraceTaskSetCurrent(pvTask);
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <xTraceTaskSwitch+0x9c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	2037      	movs	r0, #55	@ 0x37
 8001ede:	f7ff fa11 	bl	8001304 <xTraceEventCreate2>
 8001ee2:	61f8      	str	r0, [r7, #28]
	}

	(void)xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <xTraceTaskSwitch+0x98>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f383 8810 	msr	PRIMASK, r3
}
 8001ef6:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000238 	.word	0x20000238
 8001f08:	20000234 	.word	0x20000234
 8001f0c:	2000023c 	.word	0x2000023c

08001f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f14:	f001 fe57 	bl	8003bc6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f18:	f000 f850 	bl	8001fbc <SystemClock_Config>
  //xTraceInitialize();
  //xTraceEnable(TRC_START);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f1c:	f000 fc10 	bl	8002740 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f20:	f000 fbe4 	bl	80026ec <MX_DMA_Init>
  MX_TIM3_Init();
 8001f24:	f000 f972 	bl	800220c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001f28:	f000 fa2a 	bl	8002380 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001f2c:	f000 f8ec 	bl	8002108 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001f30:	f000 fb16 	bl	8002560 <MX_TIM17_Init>
  MX_TIM1_Init();
 8001f34:	f000 f88e 	bl	8002054 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001f38:	f000 f9ea 	bl	8002310 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001f3c:	f000 fb8a 	bl	8002654 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001f40:	f000 fa94 	bl	800246c <MX_TIM16_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f44:	f006 f94e 	bl	80081e4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of gEncMtx */
  gEncMtxHandle = osSemaphoreNew(1, 1, &gEncMtx_attributes);
 8001f48:	4a11      	ldr	r2, [pc, #68]	@ (8001f90 <main+0x80>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f006 fa25 	bl	800839c <osSemaphoreNew>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a0f      	ldr	r2, [pc, #60]	@ (8001f94 <main+0x84>)
 8001f56:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LineFollower_Ta */
  LineFollower_TaHandle = osThreadNew(vLineFollowerTask, NULL, &LineFollower_Ta_attributes);
 8001f58:	4a0f      	ldr	r2, [pc, #60]	@ (8001f98 <main+0x88>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	480f      	ldr	r0, [pc, #60]	@ (8001f9c <main+0x8c>)
 8001f5e:	f006 f98b 	bl	8008278 <osThreadNew>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <main+0x90>)
 8001f66:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(vRGBLightTask, NULL, &RGB_Task_attributes);
 8001f68:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa4 <main+0x94>)
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	480e      	ldr	r0, [pc, #56]	@ (8001fa8 <main+0x98>)
 8001f6e:	f006 f983 	bl	8008278 <osThreadNew>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <main+0x9c>)
 8001f76:	6013      	str	r3, [r2, #0]

  /* creation of StatsPrint_Task */
  StatsPrint_TaskHandle = osThreadNew(vStatusPrintTask, NULL, &StatsPrint_Task_attributes);
 8001f78:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb0 <main+0xa0>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <main+0xa4>)
 8001f7e:	f006 f97b 	bl	8008278 <osThreadNew>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb8 <main+0xa8>)
 8001f86:	6013      	str	r3, [r2, #0]
	*/

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f88:	f006 f950 	bl	800822c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <main+0x7c>
 8001f90:	0800e0ac 	.word	0x0800e0ac
 8001f94:	20000558 	.word	0x20000558
 8001f98:	0800e040 	.word	0x0800e040
 8001f9c:	08002939 	.word	0x08002939
 8001fa0:	2000054c 	.word	0x2000054c
 8001fa4:	0800e064 	.word	0x0800e064
 8001fa8:	080029dd 	.word	0x080029dd
 8001fac:	20000550 	.word	0x20000550
 8001fb0:	0800e088 	.word	0x0800e088
 8001fb4:	080029fd 	.word	0x080029fd
 8001fb8:	20000554 	.word	0x20000554

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b094      	sub	sp, #80	@ 0x50
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	2238      	movs	r2, #56	@ 0x38
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00a f8cd 	bl	800c16a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f002 fa5c 	bl	800449c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fee:	2340      	movs	r3, #64	@ 0x40
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ffe:	2355      	movs	r3, #85	@ 0x55
 8002000:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002002:	2302      	movs	r3, #2
 8002004:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002006:	2302      	movs	r3, #2
 8002008:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800200a:	2302      	movs	r3, #2
 800200c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0318 	add.w	r3, r7, #24
 8002012:	4618      	mov	r0, r3
 8002014:	f002 faf6 	bl	8004604 <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800201e:	f000 fd2d 	bl	8002a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002026:	2303      	movs	r3, #3
 8002028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2104      	movs	r1, #4
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fdf4 	bl	8004c28 <HAL_RCC_ClockConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002046:	f000 fd19 	bl	8002a7c <Error_Handler>
  }
}
 800204a:	bf00      	nop
 800204c:	3750      	adds	r7, #80	@ 0x50
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	@ 0x30
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	2224      	movs	r2, #36	@ 0x24
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f00a f881 	bl	800c16a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002072:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <MX_TIM1_Init+0xac>)
 8002074:	4a23      	ldr	r2, [pc, #140]	@ (8002104 <MX_TIM1_Init+0xb0>)
 8002076:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002078:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <MX_TIM1_Init+0xac>)
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207e:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <MX_TIM1_Init+0xac>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002084:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <MX_TIM1_Init+0xac>)
 8002086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800208a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <MX_TIM1_Init+0xac>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002092:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <MX_TIM1_Init+0xac>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <MX_TIM1_Init+0xac>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800209e:	2301      	movs	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020a6:	2301      	movs	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 80020ae:	2306      	movs	r3, #6
 80020b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020b6:	2301      	movs	r3, #1
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 6;
 80020be:	2306      	movs	r3, #6
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4619      	mov	r1, r3
 80020c8:	480d      	ldr	r0, [pc, #52]	@ (8002100 <MX_TIM1_Init+0xac>)
 80020ca:	f003 fdb3 	bl	8005c34 <HAL_TIM_Encoder_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80020d4:	f000 fcd2 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	@ (8002100 <MX_TIM1_Init+0xac>)
 80020ea:	f005 f817 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80020f4:	f000 fcc2 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	3730      	adds	r7, #48	@ 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000244 	.word	0x20000244
 8002104:	40012c00 	.word	0x40012c00

08002108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	@ 0x38
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002128:	463b      	mov	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	615a      	str	r2, [r3, #20]
 8002138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800213a:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <MX_TIM2_Init+0x100>)
 800213c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8002142:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <MX_TIM2_Init+0x100>)
 8002144:	2210      	movs	r2, #16
 8002146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002148:	4b2f      	ldr	r3, [pc, #188]	@ (8002208 <MX_TIM2_Init+0x100>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800214e:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <MX_TIM2_Init+0x100>)
 8002150:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002156:	4b2c      	ldr	r3, [pc, #176]	@ (8002208 <MX_TIM2_Init+0x100>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215c:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <MX_TIM2_Init+0x100>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002162:	4829      	ldr	r0, [pc, #164]	@ (8002208 <MX_TIM2_Init+0x100>)
 8002164:	f003 f99e 	bl	80054a4 <HAL_TIM_Base_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800216e:	f000 fc85 	bl	8002a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002178:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800217c:	4619      	mov	r1, r3
 800217e:	4822      	ldr	r0, [pc, #136]	@ (8002208 <MX_TIM2_Init+0x100>)
 8002180:	f004 f8fe 	bl	8006380 <HAL_TIM_ConfigClockSource>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800218a:	f000 fc77 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800218e:	481e      	ldr	r0, [pc, #120]	@ (8002208 <MX_TIM2_Init+0x100>)
 8002190:	f003 fa4a 	bl	8005628 <HAL_TIM_PWM_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800219a:	f000 fc6f 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	4816      	ldr	r0, [pc, #88]	@ (8002208 <MX_TIM2_Init+0x100>)
 80021ae:	f004 ffb5 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021b8:	f000 fc60 	bl	8002a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021bc:	2360      	movs	r3, #96	@ 0x60
 80021be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021cc:	463b      	mov	r3, r7
 80021ce:	2200      	movs	r2, #0
 80021d0:	4619      	mov	r1, r3
 80021d2:	480d      	ldr	r0, [pc, #52]	@ (8002208 <MX_TIM2_Init+0x100>)
 80021d4:	f003 ffc0 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80021de:	f000 fc4d 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	2204      	movs	r2, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4807      	ldr	r0, [pc, #28]	@ (8002208 <MX_TIM2_Init+0x100>)
 80021ea:	f003 ffb5 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80021f4:	f000 fc42 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021f8:	4803      	ldr	r0, [pc, #12]	@ (8002208 <MX_TIM2_Init+0x100>)
 80021fa:	f000 fd71 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 80021fe:	bf00      	nop
 8002200:	3738      	adds	r7, #56	@ 0x38
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000290 	.word	0x20000290

0800220c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	@ 0x38
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	615a      	str	r2, [r3, #20]
 800223c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800223e:	4b32      	ldr	r3, [pc, #200]	@ (8002308 <MX_TIM3_Init+0xfc>)
 8002240:	4a32      	ldr	r2, [pc, #200]	@ (800230c <MX_TIM3_Init+0x100>)
 8002242:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17;
 8002244:	4b30      	ldr	r3, [pc, #192]	@ (8002308 <MX_TIM3_Init+0xfc>)
 8002246:	2211      	movs	r2, #17
 8002248:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224a:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <MX_TIM3_Init+0xfc>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002250:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <MX_TIM3_Init+0xfc>)
 8002252:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002258:	4b2b      	ldr	r3, [pc, #172]	@ (8002308 <MX_TIM3_Init+0xfc>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225e:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <MX_TIM3_Init+0xfc>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002264:	4828      	ldr	r0, [pc, #160]	@ (8002308 <MX_TIM3_Init+0xfc>)
 8002266:	f003 f91d 	bl	80054a4 <HAL_TIM_Base_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002270:	f000 fc04 	bl	8002a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800227a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800227e:	4619      	mov	r1, r3
 8002280:	4821      	ldr	r0, [pc, #132]	@ (8002308 <MX_TIM3_Init+0xfc>)
 8002282:	f004 f87d 	bl	8006380 <HAL_TIM_ConfigClockSource>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800228c:	f000 fbf6 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002290:	481d      	ldr	r0, [pc, #116]	@ (8002308 <MX_TIM3_Init+0xfc>)
 8002292:	f003 f9c9 	bl	8005628 <HAL_TIM_PWM_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800229c:	f000 fbee 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4816      	ldr	r0, [pc, #88]	@ (8002308 <MX_TIM3_Init+0xfc>)
 80022b0:	f004 ff34 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022ba:	f000 fbdf 	bl	8002a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022be:	2360      	movs	r3, #96	@ 0x60
 80022c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ce:	463b      	mov	r3, r7
 80022d0:	2200      	movs	r2, #0
 80022d2:	4619      	mov	r1, r3
 80022d4:	480c      	ldr	r0, [pc, #48]	@ (8002308 <MX_TIM3_Init+0xfc>)
 80022d6:	f003 ff3f 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80022e0:	f000 fbcc 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022e4:	463b      	mov	r3, r7
 80022e6:	2204      	movs	r2, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4807      	ldr	r0, [pc, #28]	@ (8002308 <MX_TIM3_Init+0xfc>)
 80022ec:	f003 ff34 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80022f6:	f000 fbc1 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022fa:	4803      	ldr	r0, [pc, #12]	@ (8002308 <MX_TIM3_Init+0xfc>)
 80022fc:	f000 fcf0 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 8002300:	bf00      	nop
 8002302:	3738      	adds	r7, #56	@ 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200002dc 	.word	0x200002dc
 800230c:	40000400 	.word	0x40000400

08002310 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_TIM6_Init+0x68>)
 8002322:	4a16      	ldr	r2, [pc, #88]	@ (800237c <MX_TIM6_Init+0x6c>)
 8002324:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42499;
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_TIM6_Init+0x68>)
 8002328:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800232c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <MX_TIM6_Init+0x68>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3999;
 8002334:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <MX_TIM6_Init+0x68>)
 8002336:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800233a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_TIM6_Init+0x68>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002342:	480d      	ldr	r0, [pc, #52]	@ (8002378 <MX_TIM6_Init+0x68>)
 8002344:	f003 f8ae 	bl	80054a4 <HAL_TIM_Base_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800234e:	f000 fb95 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4806      	ldr	r0, [pc, #24]	@ (8002378 <MX_TIM6_Init+0x68>)
 8002360:	f004 fedc 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800236a:	f000 fb87 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000328 	.word	0x20000328
 800237c:	40001000 	.word	0x40001000

08002380 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	@ 0x30
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f107 0320 	add.w	r3, r7, #32
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002468 <MX_TIM8_Init+0xe8>)
 80023b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 80023b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023b4:	2210      	movs	r2, #16
 80023b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80023be:	4b29      	ldr	r3, [pc, #164]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80023d8:	4822      	ldr	r0, [pc, #136]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023da:	f003 f863 	bl	80054a4 <HAL_TIM_Base_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80023e4:	f000 fb4a 	bl	8002a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	4619      	mov	r1, r3
 80023f4:	481b      	ldr	r0, [pc, #108]	@ (8002464 <MX_TIM8_Init+0xe4>)
 80023f6:	f003 ffc3 	bl	8006380 <HAL_TIM_ConfigClockSource>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002400:	f000 fb3c 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002404:	4817      	ldr	r0, [pc, #92]	@ (8002464 <MX_TIM8_Init+0xe4>)
 8002406:	f003 fa71 	bl	80058ec <HAL_TIM_IC_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002410:	f000 fb34 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	480f      	ldr	r0, [pc, #60]	@ (8002464 <MX_TIM8_Init+0xe4>)
 8002428:	f004 fe78 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8002432:	f000 fb23 	bl	8002a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800243a:	2301      	movs	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 7;
 8002442:	2307      	movs	r3, #7
 8002444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	4805      	ldr	r0, [pc, #20]	@ (8002464 <MX_TIM8_Init+0xe4>)
 800244e:	f003 fde6 	bl	800601e <HAL_TIM_IC_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002458:	f000 fb10 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	3730      	adds	r7, #48	@ 0x30
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000374 	.word	0x20000374
 8002468:	40013400 	.word	0x40013400

0800246c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b094      	sub	sp, #80	@ 0x50
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002472:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	615a      	str	r2, [r3, #20]
 8002484:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002486:	463b      	mov	r3, r7
 8002488:	2234      	movs	r2, #52	@ 0x34
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f009 fe6c 	bl	800c16a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <MX_TIM16_Init+0xec>)
 8002494:	4a31      	ldr	r2, [pc, #196]	@ (800255c <MX_TIM16_Init+0xf0>)
 8002496:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8002498:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <MX_TIM16_Init+0xec>)
 800249a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800249e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <MX_TIM16_Init+0xec>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1999;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <MX_TIM16_Init+0xec>)
 80024a8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80024ac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <MX_TIM16_Init+0xec>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80024b4:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <MX_TIM16_Init+0xec>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <MX_TIM16_Init+0xec>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80024c0:	4825      	ldr	r0, [pc, #148]	@ (8002558 <MX_TIM16_Init+0xec>)
 80024c2:	f002 ffef 	bl	80054a4 <HAL_TIM_Base_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80024cc:	f000 fad6 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80024d0:	4821      	ldr	r0, [pc, #132]	@ (8002558 <MX_TIM16_Init+0xec>)
 80024d2:	f003 f8a9 	bl	8005628 <HAL_TIM_PWM_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80024dc:	f000 face 	bl	8002a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e0:	2360      	movs	r3, #96	@ 0x60
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024ec:	2300      	movs	r3, #0
 80024ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	4814      	ldr	r0, [pc, #80]	@ (8002558 <MX_TIM16_Init+0xec>)
 8002506:	f003 fe27 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002510:	f000 fab4 	bl	8002a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800252c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002536:	463b      	mov	r3, r7
 8002538:	4619      	mov	r1, r3
 800253a:	4807      	ldr	r0, [pc, #28]	@ (8002558 <MX_TIM16_Init+0xec>)
 800253c:	f004 fe70 	bl	8007220 <HAL_TIMEx_ConfigBreakDeadTime>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002546:	f000 fa99 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800254a:	4803      	ldr	r0, [pc, #12]	@ (8002558 <MX_TIM16_Init+0xec>)
 800254c:	f000 fbc8 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 8002550:	bf00      	nop
 8002552:	3750      	adds	r7, #80	@ 0x50
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200003c0 	.word	0x200003c0
 800255c:	40014400 	.word	0x40014400

08002560 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b094      	sub	sp, #80	@ 0x50
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002566:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800257a:	463b      	mov	r3, r7
 800257c:	2234      	movs	r2, #52	@ 0x34
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f009 fdf2 	bl	800c16a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002586:	4b31      	ldr	r3, [pc, #196]	@ (800264c <MX_TIM17_Init+0xec>)
 8002588:	4a31      	ldr	r2, [pc, #196]	@ (8002650 <MX_TIM17_Init+0xf0>)
 800258a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1699;
 800258c:	4b2f      	ldr	r3, [pc, #188]	@ (800264c <MX_TIM17_Init+0xec>)
 800258e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002592:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002594:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <MX_TIM17_Init+0xec>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 7499;
 800259a:	4b2c      	ldr	r3, [pc, #176]	@ (800264c <MX_TIM17_Init+0xec>)
 800259c:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 80025a0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <MX_TIM17_Init+0xec>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025a8:	4b28      	ldr	r3, [pc, #160]	@ (800264c <MX_TIM17_Init+0xec>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b27      	ldr	r3, [pc, #156]	@ (800264c <MX_TIM17_Init+0xec>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025b4:	4825      	ldr	r0, [pc, #148]	@ (800264c <MX_TIM17_Init+0xec>)
 80025b6:	f002 ff75 	bl	80054a4 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80025c0:	f000 fa5c 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80025c4:	4821      	ldr	r0, [pc, #132]	@ (800264c <MX_TIM17_Init+0xec>)
 80025c6:	f003 f82f 	bl	8005628 <HAL_TIM_PWM_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80025d0:	f000 fa54 	bl	8002a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d4:	2360      	movs	r3, #96	@ 0x60
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1;
 80025d8:	2301      	movs	r3, #1
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025dc:	2300      	movs	r3, #0
 80025de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025e0:	2300      	movs	r3, #0
 80025e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4814      	ldr	r0, [pc, #80]	@ (800264c <MX_TIM17_Init+0xec>)
 80025fa:	f003 fdad 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002604:	f000 fa3a 	bl	8002a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800261c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002620:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800262a:	463b      	mov	r3, r7
 800262c:	4619      	mov	r1, r3
 800262e:	4807      	ldr	r0, [pc, #28]	@ (800264c <MX_TIM17_Init+0xec>)
 8002630:	f004 fdf6 	bl	8007220 <HAL_TIMEx_ConfigBreakDeadTime>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 800263a:	f000 fa1f 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800263e:	4803      	ldr	r0, [pc, #12]	@ (800264c <MX_TIM17_Init+0xec>)
 8002640:	f000 fb4e 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 8002644:	bf00      	nop
 8002646:	3750      	adds	r7, #80	@ 0x50
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	2000040c 	.word	0x2000040c
 8002650:	40014800 	.word	0x40014800

08002654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002658:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 800265a:	4a23      	ldr	r2, [pc, #140]	@ (80026e8 <MX_USART3_UART_Init+0x94>)
 800265c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 8002660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b1f      	ldr	r3, [pc, #124]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 8002698:	2200      	movs	r2, #0
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 800269e:	f004 fe91 	bl	80073c4 <HAL_UART_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026a8:	f000 f9e8 	bl	8002a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ac:	2100      	movs	r1, #0
 80026ae:	480d      	ldr	r0, [pc, #52]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 80026b0:	f005 fc8a 	bl	8007fc8 <HAL_UARTEx_SetTxFifoThreshold>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026ba:	f000 f9df 	bl	8002a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026be:	2100      	movs	r1, #0
 80026c0:	4808      	ldr	r0, [pc, #32]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 80026c2:	f005 fcbf 	bl	8008044 <HAL_UARTEx_SetRxFifoThreshold>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026cc:	f000 f9d6 	bl	8002a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026d0:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <MX_USART3_UART_Init+0x90>)
 80026d2:	f005 fc40 	bl	8007f56 <HAL_UARTEx_DisableFifoMode>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80026dc:	f000 f9ce 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000458 	.word	0x20000458
 80026e8:	40004800 	.word	0x40004800

080026ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <MX_DMA_Init+0x50>)
 80026f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f6:	4a11      	ldr	r2, [pc, #68]	@ (800273c <MX_DMA_Init+0x50>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_DMA_Init+0x50>)
 8002700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800270a:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <MX_DMA_Init+0x50>)
 800270c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270e:	4a0b      	ldr	r2, [pc, #44]	@ (800273c <MX_DMA_Init+0x50>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6493      	str	r3, [r2, #72]	@ 0x48
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <MX_DMA_Init+0x50>)
 8002718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2105      	movs	r1, #5
 8002726:	200b      	movs	r0, #11
 8002728:	f001 fb3c 	bl	8003da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800272c:	200b      	movs	r0, #11
 800272e:	f001 fb53 	bl	8003dd8 <HAL_NVIC_EnableIRQ>

}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000

08002740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002756:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <MX_GPIO_Init+0x118>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	4a3f      	ldr	r2, [pc, #252]	@ (8002858 <MX_GPIO_Init+0x118>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002762:	4b3d      	ldr	r3, [pc, #244]	@ (8002858 <MX_GPIO_Init+0x118>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <MX_GPIO_Init+0x118>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	4a39      	ldr	r2, [pc, #228]	@ (8002858 <MX_GPIO_Init+0x118>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800277a:	4b37      	ldr	r3, [pc, #220]	@ (8002858 <MX_GPIO_Init+0x118>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <MX_GPIO_Init+0x118>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	4a33      	ldr	r2, [pc, #204]	@ (8002858 <MX_GPIO_Init+0x118>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002792:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <MX_GPIO_Init+0x118>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMot_right_ENB_GPO_GPIO_Port, DCMot_right_ENB_GPO_Pin, GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	2102      	movs	r1, #2
 80027a2:	482e      	ldr	r0, [pc, #184]	@ (800285c <MX_GPIO_Init+0x11c>)
 80027a4:	f001 fe62 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMot_left_ENA_GPO_GPIO_Port, DCMot_left_ENA_GPO_Pin, GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b2:	f001 fe5b 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DCMot_right_ENB_GPO_Pin */
  GPIO_InitStruct.Pin = DCMot_right_ENB_GPO_Pin;
 80027b6:	2302      	movs	r3, #2
 80027b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ba:	2301      	movs	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCMot_right_ENB_GPO_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	4823      	ldr	r0, [pc, #140]	@ (800285c <MX_GPIO_Init+0x11c>)
 80027ce:	f001 fccb 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_right_T15C1_ICDM_Pin SS_left_T15C2_ICDM_Pin */
  GPIO_InitStruct.Pin = SS_right_T15C1_ICDM_Pin|SS_left_T15C2_ICDM_Pin;
 80027d2:	230c      	movs	r3, #12
 80027d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80027e2:	2309      	movs	r3, #9
 80027e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	4619      	mov	r1, r3
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f0:	f001 fcba 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMot_left_ENA_GPO_Pin */
  GPIO_InitStruct.Pin = DCMot_left_ENA_GPO_Pin;
 80027f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCMot_left_ENA_GPO_GPIO_Port, &GPIO_InitStruct);
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	4619      	mov	r1, r3
 800280c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002810:	f001 fcaa 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTS_left_GPI_Pin LTS_right_GPI_Pin LTS_middle_GPI_Pin */
  GPIO_InitStruct.Pin = LTS_left_GPI_Pin|LTS_right_GPI_Pin|LTS_middle_GPI_Pin;
 8002814:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	4619      	mov	r1, r3
 8002828:	480c      	ldr	r0, [pc, #48]	@ (800285c <MX_GPIO_Init+0x11c>)
 800282a:	f001 fc9d 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_Lights_T4C4_PWM_Pin */
  GPIO_InitStruct.Pin = RGB_Lights_T4C4_PWM_Pin;
 800282e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002840:	2302      	movs	r3, #2
 8002842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RGB_Lights_T4C4_PWM_GPIO_Port, &GPIO_InitStruct);
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	4619      	mov	r1, r3
 800284a:	4805      	ldr	r0, [pc, #20]	@ (8002860 <MX_GPIO_Init+0x120>)
 800284c:	f001 fc8c 	bl	8004168 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002850:	bf00      	nop
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	48000800 	.word	0x48000800
 8002860:	48000400 	.word	0x48000400

08002864 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

*/

	static uint32_t echo_start = 0, echo_end = 0, edge_state = 0;

    if(htim->Instance == TIM8 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2c      	ldr	r2, [pc, #176]	@ (8002924 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d151      	bne.n	800291a <HAL_TIM_IC_CaptureCallback+0xb6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7f1b      	ldrb	r3, [r3, #28]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d14d      	bne.n	800291a <HAL_TIM_IC_CaptureCallback+0xb6>

        if(edge_state == 0)  { // Rising edge
 800287e:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d11a      	bne.n	80028bc <HAL_TIM_IC_CaptureCallback+0x58>

            echo_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002886:	2100      	movs	r1, #0
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f003 fe73 	bl	8006574 <HAL_TIM_ReadCapturedValue>
 800288e:	4603      	mov	r3, r0
 8002890:	4a26      	ldr	r2, [pc, #152]	@ (800292c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002892:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a1a      	ldr	r2, [r3, #32]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 020a 	bic.w	r2, r2, #10
 80028a2:	621a      	str	r2, [r3, #32]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0202 	orr.w	r2, r2, #2
 80028b2:	621a      	str	r2, [r3, #32]
            edge_state = 1;
 80028b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
            	pulse_ticks = (65536 - echo_start + echo_end);
            }
        }
    }

}
 80028ba:	e02e      	b.n	800291a <HAL_TIM_IC_CaptureCallback+0xb6>
            echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80028bc:	2100      	movs	r1, #0
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f003 fe58 	bl	8006574 <HAL_TIM_ReadCapturedValue>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002930 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80028c8:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 020a 	bic.w	r2, r2, #10
 80028d8:	621a      	str	r2, [r3, #32]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a12      	ldr	r2, [r2, #32]
 80028e4:	621a      	str	r2, [r3, #32]
            edge_state = 0;
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
            if (echo_end >= echo_start) {
 80028ec:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d307      	bcc.n	8002908 <HAL_TIM_IC_CaptureCallback+0xa4>
            	pulse_ticks = (echo_end - echo_start);
 80028f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	4a0c      	ldr	r2, [pc, #48]	@ (8002934 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	e008      	b.n	800291a <HAL_TIM_IC_CaptureCallback+0xb6>
            	pulse_ticks = (65536 - echo_start + echo_end);
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <HAL_TIM_IC_CaptureCallback+0xc8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002916:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002918:	6013      	str	r3, [r2, #0]
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40013400 	.word	0x40013400
 8002928:	20000560 	.word	0x20000560
 800292c:	20000564 	.word	0x20000564
 8002930:	20000568 	.word	0x20000568
 8002934:	2000055c 	.word	0x2000055c

08002938 <vLineFollowerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vLineFollowerTask */
void vLineFollowerTask(void *argument)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	motors_init(&Mot_right, &Mot_left);
 8002940:	4920      	ldr	r1, [pc, #128]	@ (80029c4 <vLineFollowerTask+0x8c>)
 8002942:	4821      	ldr	r0, [pc, #132]	@ (80029c8 <vLineFollowerTask+0x90>)
 8002944:	f000 fcae 	bl	80032a4 <motors_init>
	USS_init(&htim17, TIM_CHANNEL_1, &htim8, TIM_CHANNEL_1);
 8002948:	2300      	movs	r3, #0
 800294a:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <vLineFollowerTask+0x94>)
 800294c:	2100      	movs	r1, #0
 800294e:	4820      	ldr	r0, [pc, #128]	@ (80029d0 <vLineFollowerTask+0x98>)
 8002950:	f001 f8e2 	bl	8003b18 <USS_init>
  /* Infinite loop */
  for(;;)
  {
	  uint32_t uss_d = USS_get_value(pulse_ticks);
 8002954:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <vLineFollowerTask+0x9c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f001 f8f1 	bl	8003b40 <USS_get_value>
 800295e:	60f8      	str	r0, [r7, #12]
	  if(uss_d > 9){
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b09      	cmp	r3, #9
 8002964:	d92b      	bls.n	80029be <vLineFollowerTask+0x86>
		uint8_t state = ((GPIOC->IDR & GPIO_PIN_10) >> 9)| ((GPIOC->IDR & GPIO_PIN_11) >> 11);
 8002966:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <vLineFollowerTask+0xa0>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	0a5b      	lsrs	r3, r3, #9
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <vLineFollowerTask+0xa0>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	0adb      	lsrs	r3, r3, #11
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	72fb      	strb	r3, [r7, #11]
		switch (state) {
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d006      	beq.n	800299a <vLineFollowerTask+0x62>
 800298c:	2b03      	cmp	r3, #3
 800298e:	dc11      	bgt.n	80029b4 <vLineFollowerTask+0x7c>
 8002990:	2b01      	cmp	r3, #1
 8002992:	d00a      	beq.n	80029aa <vLineFollowerTask+0x72>
 8002994:	2b02      	cmp	r3, #2
 8002996:	d003      	beq.n	80029a0 <vLineFollowerTask+0x68>
 8002998:	e00c      	b.n	80029b4 <vLineFollowerTask+0x7c>
			case 0b11: stop_robot(); 				break; 	// both
 800299a:	f000 ffd5 	bl	8003948 <stop_robot>
 800299e:	e010      	b.n	80029c2 <vLineFollowerTask+0x8a>
			case 0b10: move_robot(0,R_PWM_Curve); 	break; 	// left
 80029a0:	213a      	movs	r1, #58	@ 0x3a
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 fdd4 	bl	8003550 <move_robot>
 80029a8:	e00b      	b.n	80029c2 <vLineFollowerTask+0x8a>
			case 0b01: move_robot(L_PWM_Curve,0); 	break; 	// right
 80029aa:	2100      	movs	r1, #0
 80029ac:	2039      	movs	r0, #57	@ 0x39
 80029ae:	f000 fdcf 	bl	8003550 <move_robot>
 80029b2:	e006      	b.n	80029c2 <vLineFollowerTask+0x8a>
			default:   move_robot(L_PWM, R_PWM);  	break;	// none
 80029b4:	2133      	movs	r1, #51	@ 0x33
 80029b6:	2032      	movs	r0, #50	@ 0x32
 80029b8:	f000 fdca 	bl	8003550 <move_robot>
 80029bc:	e001      	b.n	80029c2 <vLineFollowerTask+0x8a>
		}
	  } else {
			stop_robot();
 80029be:	f000 ffc3 	bl	8003948 <stop_robot>
  {
 80029c2:	e7c7      	b.n	8002954 <vLineFollowerTask+0x1c>
 80029c4:	20000014 	.word	0x20000014
 80029c8:	20000000 	.word	0x20000000
 80029cc:	20000374 	.word	0x20000374
 80029d0:	2000040c 	.word	0x2000040c
 80029d4:	2000055c 	.word	0x2000055c
 80029d8:	48000800 	.word	0x48000800

080029dc <vRGBLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vRGBLightTask */
void vRGBLightTask(void *argument)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vRGBLightTask */
	//const TickType_t xPeriod = pdMS_TO_TICKS(500);
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80029e4:	f007 fa26 	bl	8009e34 <xTaskGetTickCount>
 80029e8:	4603      	mov	r3, r0
 80029ea:	60fb      	str	r3, [r7, #12]
		  Set_Brightness(i);
		  WS2812_Send();
		  vTaskDelayUntil( &xLastWakeTime, xPeriod);
	  }
	  */
	  vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(40000));
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	f649 4140 	movw	r1, #40000	@ 0x9c40
 80029f4:	4618      	mov	r0, r3
 80029f6:	f007 f875 	bl	8009ae4 <vTaskDelayUntil>
 80029fa:	e7f7      	b.n	80029ec <vRGBLightTask+0x10>

080029fc <vStatusPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStatusPrintTask */
void vStatusPrintTask(void *argument)
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b08a      	sub	sp, #40	@ 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

	Encoder_Init(&enc1, &cfg1);
*/

	// Test send over UART
	const char msg[] = "Encoder test start\r\n";
 8002a04:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <vStatusPrintTask+0x54>)
 8002a06:	f107 0410 	add.w	r4, r7, #16
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a14:	6020      	str	r0, [r4, #0]
 8002a16:	3404      	adds	r4, #4
 8002a18:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
 8002a1a:	f107 0110 	add.w	r1, r7, #16
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	2214      	movs	r2, #20
 8002a24:	480b      	ldr	r0, [pc, #44]	@ (8002a54 <vStatusPrintTask+0x58>)
 8002a26:	f004 fd1d 	bl	8007464 <HAL_UART_Transmit>

	TickType_t xLastWake = xTaskGetTickCount();
 8002a2a:	f007 fa03 	bl	8009e34 <xTaskGetTickCount>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	60fb      	str	r3, [r7, #12]
	vTaskDelayUntil(&xLastWake,  pdMS_TO_TICKS(1000));
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f007 f852 	bl	8009ae4 <vTaskDelayUntil>
	  // else: previous transfer still running → drop this frame (or add a queue)
	  //ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(5000));


	   */
	  vTaskDelayUntil( &xLastWake, pdMS_TO_TICKS(40000));
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f007 f84b 	bl	8009ae4 <vTaskDelayUntil>
 8002a4e:	e7f7      	b.n	8002a40 <vStatusPrintTask+0x44>
 8002a50:	0800e00c 	.word	0x0800e00c
 8002a54:	20000458 	.word	0x20000458

08002a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	  }
	  */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002a6a:	f001 f8c5 	bl	8003bf8 <HAL_IncTick>

	  g_lts_bits = bits & 0x07;    // publish debounced/raw pattern
  }
  */
  /* USER CODE END Callback 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40001400 	.word	0x40001400

08002a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a80:	b672      	cpsid	i
}
 8002a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <Error_Handler+0x8>

08002a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <HAL_MspInit+0x50>)
 8002a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a92:	4a11      	ldr	r2, [pc, #68]	@ (8002ad8 <HAL_MspInit+0x50>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <HAL_MspInit+0x50>)
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <HAL_MspInit+0x50>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad8 <HAL_MspInit+0x50>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_MspInit+0x50>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	f06f 0001 	mvn.w	r0, #1
 8002ac6:	f001 f96d 	bl	8003da4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002aca:	f001 fd8b 	bl	80045e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <HAL_TIM_Encoder_MspInit+0x90>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d131      	bne.n	8002b62 <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002afe:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b02:	4a1b      	ldr	r2, [pc, #108]	@ (8002b70 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b0a:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	4a15      	ldr	r2, [pc, #84]	@ (8002b70 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b22:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b40:	2306      	movs	r3, #6
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b4e:	f001 fb0b 	bl	8004168 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2105      	movs	r1, #5
 8002b56:	2018      	movs	r0, #24
 8002b58:	f001 f924 	bl	8003da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b5c:	2018      	movs	r0, #24
 8002b5e:	f001 f93b 	bl	8003dd8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002b62:	bf00      	nop
 8002b64:	3728      	adds	r7, #40	@ 0x28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	@ 0x38
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b96:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba2:	4b48      	ldr	r3, [pc, #288]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002bae:	e084      	b.n	8002cba <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a44      	ldr	r2, [pc, #272]	@ (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bba:	4b42      	ldr	r3, [pc, #264]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	4a41      	ldr	r2, [pc, #260]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
}
 8002bd2:	e072      	b.n	8002cba <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <HAL_TIM_Base_MspInit+0x158>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d114      	bne.n	8002c08 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bde:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	4a38      	ldr	r2, [pc, #224]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002be4:	f043 0310 	orr.w	r3, r3, #16
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bea:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2105      	movs	r1, #5
 8002bfa:	2036      	movs	r0, #54	@ 0x36
 8002bfc:	f001 f8d2 	bl	8003da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c00:	2036      	movs	r0, #54	@ 0x36
 8002c02:	f001 f8e9 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
}
 8002c06:	e058      	b.n	8002cba <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <HAL_TIM_Base_MspInit+0x15c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d130      	bne.n	8002c74 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c12:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c16:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c1e:	4b29      	ldr	r3, [pc, #164]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	4b26      	ldr	r3, [pc, #152]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	4a25      	ldr	r2, [pc, #148]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c36:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USS_ECHO_T8C1_ICDM_Pin;
 8002c42:	2340      	movs	r3, #64	@ 0x40
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002c52:	2305      	movs	r3, #5
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(USS_ECHO_T8C1_ICDM_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	481d      	ldr	r0, [pc, #116]	@ (8002cd4 <HAL_TIM_Base_MspInit+0x160>)
 8002c5e:	f001 fa83 	bl	8004168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2105      	movs	r1, #5
 8002c66:	202e      	movs	r0, #46	@ 0x2e
 8002c68:	f001 f89c 	bl	8003da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002c6c:	202e      	movs	r0, #46	@ 0x2e
 8002c6e:	f001 f8b3 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
}
 8002c72:	e022      	b.n	8002cba <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM16)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_TIM_Base_MspInit+0x164>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10c      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c88:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
}
 8002c96:	e010      	b.n	8002cba <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM17)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cdc <HAL_TIM_Base_MspInit+0x168>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10b      	bne.n	8002cba <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ca2:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca6:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cae:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x150>)
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
}
 8002cba:	bf00      	nop
 8002cbc:	3738      	adds	r7, #56	@ 0x38
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40001000 	.word	0x40001000
 8002cd0:	40013400 	.word	0x40013400
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	40014400 	.word	0x40014400
 8002cdc:	40014800 	.word	0x40014800

08002ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	@ 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d00:	d11d      	bne.n	8002d3e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	4b44      	ldr	r3, [pc, #272]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d06:	4a43      	ldr	r2, [pc, #268]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0e:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DCMotor_right_IN1B_T2C1_PWM_Pin|DCMotor_right_IN2B_T2C2_PWM_Pin;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	4619      	mov	r1, r3
 8002d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d38:	f001 fa16 	bl	8004168 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002d3c:	e066      	b.n	8002e0c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a35      	ldr	r2, [pc, #212]	@ (8002e18 <HAL_TIM_MspPostInit+0x138>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d11c      	bne.n	8002d82 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d48:	4b32      	ldr	r3, [pc, #200]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4c:	4a31      	ldr	r2, [pc, #196]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d54:	4b2f      	ldr	r3, [pc, #188]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DCMotor_left_IN1A_T3C1_PWM_Pin|DCMotor_left_IN2A_T3C2_PWM_Pin;
 8002d60:	2330      	movs	r3, #48	@ 0x30
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d70:	2302      	movs	r3, #2
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4828      	ldr	r0, [pc, #160]	@ (8002e1c <HAL_TIM_MspPostInit+0x13c>)
 8002d7c:	f001 f9f4 	bl	8004168 <HAL_GPIO_Init>
}
 8002d80:	e044      	b.n	8002e0c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM16)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <HAL_TIM_MspPostInit+0x140>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11d      	bne.n	8002dc8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b21      	ldr	r3, [pc, #132]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d90:	4a20      	ldr	r2, [pc, #128]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d98:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = uServo_T16C1_PWM_Pin;
 8002da4:	2340      	movs	r3, #64	@ 0x40
 8002da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002db4:	2301      	movs	r3, #1
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(uServo_T16C1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dc2:	f001 f9d1 	bl	8004168 <HAL_GPIO_Init>
}
 8002dc6:	e021      	b.n	8002e0c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM17)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	@ (8002e24 <HAL_TIM_MspPostInit+0x144>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d11c      	bne.n	8002e0c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dde:	4b0d      	ldr	r3, [pc, #52]	@ (8002e14 <HAL_TIM_MspPostInit+0x134>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USS_TRIG_T17C1_PWM_Pin;
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(USS_TRIG_T17C1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	f107 031c 	add.w	r3, r7, #28
 8002e02:	4619      	mov	r1, r3
 8002e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e08:	f001 f9ae 	bl	8004168 <HAL_GPIO_Init>
}
 8002e0c:	bf00      	nop
 8002e0e:	3730      	adds	r7, #48	@ 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	48000400 	.word	0x48000400
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800

08002e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b09a      	sub	sp, #104	@ 0x68
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	2244      	movs	r2, #68	@ 0x44
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f009 f98e 	bl	800c16a <memset>
  if(huart->Instance==USART3)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a34      	ldr	r2, [pc, #208]	@ (8002f24 <HAL_UART_MspInit+0xfc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d160      	bne.n	8002f1a <HAL_UART_MspInit+0xf2>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e58:	2304      	movs	r3, #4
 8002e5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 f92d 	bl	80050c4 <HAL_RCCEx_PeriphCLKConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e70:	f7ff fe04 	bl	8002a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e74:	4b2c      	ldr	r3, [pc, #176]	@ (8002f28 <HAL_UART_MspInit+0x100>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <HAL_UART_MspInit+0x100>)
 8002e7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e80:	4b29      	ldr	r3, [pc, #164]	@ (8002f28 <HAL_UART_MspInit+0x100>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8c:	4b26      	ldr	r3, [pc, #152]	@ (8002f28 <HAL_UART_MspInit+0x100>)
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e90:	4a25      	ldr	r2, [pc, #148]	@ (8002f28 <HAL_UART_MspInit+0x100>)
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e98:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <HAL_UART_MspInit+0x100>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ea4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ea8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	481a      	ldr	r0, [pc, #104]	@ (8002f2c <HAL_UART_MspInit+0x104>)
 8002ec2:	f001 f951 	bl	8004168 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <HAL_UART_MspInit+0x10c>)
 8002eca:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002ece:	221d      	movs	r2, #29
 8002ed0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed2:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed8:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ede:	4b14      	ldr	r3, [pc, #80]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002ee0:	2280      	movs	r2, #128	@ 0x80
 8002ee2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee4:	4b12      	ldr	r3, [pc, #72]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eea:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002ef8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002efe:	480c      	ldr	r0, [pc, #48]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002f00:	f000 ff78 	bl	8003df4 <HAL_DMA_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002f0a:	f7ff fdb7 	bl	8002a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a07      	ldr	r2, [pc, #28]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002f12:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f14:	4a06      	ldr	r2, [pc, #24]	@ (8002f30 <HAL_UART_MspInit+0x108>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002f1a:	bf00      	nop
 8002f1c:	3768      	adds	r7, #104	@ 0x68
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40004800 	.word	0x40004800
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	48000400 	.word	0x48000400
 8002f30:	200004ec 	.word	0x200004ec
 8002f34:	40020008 	.word	0x40020008

08002f38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	@ 0x30
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002f48:	4b2c      	ldr	r3, [pc, #176]	@ (8002ffc <HAL_InitTick+0xc4>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ffc <HAL_InitTick+0xc4>)
 8002f4e:	f043 0320 	orr.w	r3, r3, #32
 8002f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f54:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <HAL_InitTick+0xc4>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f60:	f107 020c 	add.w	r2, r7, #12
 8002f64:	f107 0310 	add.w	r3, r7, #16
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 f832 	bl	8004fd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f70:	f002 f804 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8002f74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	4a21      	ldr	r2, [pc, #132]	@ (8003000 <HAL_InitTick+0xc8>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0c9b      	lsrs	r3, r3, #18
 8002f80:	3b01      	subs	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <HAL_InitTick+0xcc>)
 8002f86:	4a20      	ldr	r2, [pc, #128]	@ (8003008 <HAL_InitTick+0xd0>)
 8002f88:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <HAL_InitTick+0xcc>)
 8002f8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f90:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_InitTick+0xcc>)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <HAL_InitTick+0xcc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <HAL_InitTick+0xcc>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8002fa4:	4817      	ldr	r0, [pc, #92]	@ (8003004 <HAL_InitTick+0xcc>)
 8002fa6:	f002 fa7d 	bl	80054a4 <HAL_TIM_Base_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002fb8:	4812      	ldr	r0, [pc, #72]	@ (8003004 <HAL_InitTick+0xcc>)
 8002fba:	f002 facb 	bl	8005554 <HAL_TIM_Base_Start_IT>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fcc:	2037      	movs	r0, #55	@ 0x37
 8002fce:	f000 ff03 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b0f      	cmp	r3, #15
 8002fd6:	d808      	bhi.n	8002fea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	2037      	movs	r0, #55	@ 0x37
 8002fde:	f000 fee1 	bl	8003da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <HAL_InitTick+0xd4>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e002      	b.n	8002ff0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3730      	adds	r7, #48	@ 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	431bde83 	.word	0x431bde83
 8003004:	2000056c 	.word	0x2000056c
 8003008:	40001400 	.word	0x40001400
 800300c:	2000002c 	.word	0x2000002c

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <NMI_Handler+0x4>

08003018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <HardFault_Handler+0x4>

08003020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <MemManage_Handler+0x4>

08003028 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <BusFault_Handler+0x4>

08003030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <UsageFault_Handler+0x4>

08003038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800304c:	4802      	ldr	r0, [pc, #8]	@ (8003058 <DMA1_Channel1_IRQHandler+0x10>)
 800304e:	f000 ff79 	bl	8003f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200004ec 	.word	0x200004ec

0800305c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003060:	4802      	ldr	r0, [pc, #8]	@ (800306c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003062:	f002 fe8d 	bl	8005d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000244 	.word	0x20000244

08003070 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003074:	4802      	ldr	r0, [pc, #8]	@ (8003080 <TIM8_CC_IRQHandler+0x10>)
 8003076:	f002 fe83 	bl	8005d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000374 	.word	0x20000374

08003084 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003088:	4802      	ldr	r0, [pc, #8]	@ (8003094 <TIM6_DAC_IRQHandler+0x10>)
 800308a:	f002 fe79 	bl	8005d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000328 	.word	0x20000328

08003098 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800309c:	4802      	ldr	r0, [pc, #8]	@ (80030a8 <TIM7_IRQHandler+0x10>)
 800309e:	f002 fe6f 	bl	8005d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000056c 	.word	0x2000056c

080030ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return 1;
 80030b0:	2301      	movs	r3, #1
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_kill>:

int _kill(int pid, int sig)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030c6:	f009 f8a3 	bl	800c210 <__errno>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2216      	movs	r2, #22
 80030ce:	601a      	str	r2, [r3, #0]
  return -1;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <_exit>:

void _exit (int status)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ffe7 	bl	80030bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80030ee:	bf00      	nop
 80030f0:	e7fd      	b.n	80030ee <_exit+0x12>

080030f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e00a      	b.n	800311a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003104:	f3af 8000 	nop.w
 8003108:	4601      	mov	r1, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	60ba      	str	r2, [r7, #8]
 8003110:	b2ca      	uxtb	r2, r1
 8003112:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	dbf0      	blt.n	8003104 <_read+0x12>
  }

  return len;
 8003122:	687b      	ldr	r3, [r7, #4]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e009      	b.n	8003152 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	60ba      	str	r2, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	dbf1      	blt.n	800313e <_write+0x12>
  }
  return len;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_close>:

int _close(int file)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800318c:	605a      	str	r2, [r3, #4]
  return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_isatty>:

int _isatty(int file)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031a4:	2301      	movs	r3, #1
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031d4:	4a14      	ldr	r2, [pc, #80]	@ (8003228 <_sbrk+0x5c>)
 80031d6:	4b15      	ldr	r3, [pc, #84]	@ (800322c <_sbrk+0x60>)
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e0:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <_sbrk+0x64>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d102      	bne.n	80031ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <_sbrk+0x64>)
 80031ea:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <_sbrk+0x68>)
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ee:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <_sbrk+0x64>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d207      	bcs.n	800320c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031fc:	f009 f808 	bl	800c210 <__errno>
 8003200:	4603      	mov	r3, r0
 8003202:	220c      	movs	r2, #12
 8003204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003206:	f04f 33ff 	mov.w	r3, #4294967295
 800320a:	e009      	b.n	8003220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800320c:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <_sbrk+0x64>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <_sbrk+0x64>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	4a05      	ldr	r2, [pc, #20]	@ (8003230 <_sbrk+0x64>)
 800321c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800321e:	68fb      	ldr	r3, [r7, #12]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20008000 	.word	0x20008000
 800322c:	00000400 	.word	0x00000400
 8003230:	200005b8 	.word	0x200005b8
 8003234:	20002bd0 	.word	0x20002bd0

08003238 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <SystemInit+0x20>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <SystemInit+0x20>)
 8003244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <clamp_int>:
#include <stdio.h>


extern TIM_HandleTypeDef htim1;

static inline int8_t clamp_int(int8_t v, int8_t lo, int8_t hi){
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
 8003266:	460b      	mov	r3, r1
 8003268:	71bb      	strb	r3, [r7, #6]
 800326a:	4613      	mov	r3, r2
 800326c:	717b      	strb	r3, [r7, #5]
    if (v < lo) return lo;
 800326e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003272:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003276:	429a      	cmp	r2, r3
 8003278:	da02      	bge.n	8003280 <clamp_int+0x24>
 800327a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800327e:	e00a      	b.n	8003296 <clamp_int+0x3a>
    if (v > hi) return hi;
 8003280:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003284:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003288:	429a      	cmp	r2, r3
 800328a:	dd02      	ble.n	8003292 <clamp_int+0x36>
 800328c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003290:	e001      	b.n	8003296 <clamp_int+0x3a>
    return v;
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <motors_init>:
//extern TIM_HandleTypeDef htim2;
//extern TIM_HandleTypeDef htim3;
//extern UART_HandleTypeDef huart3;

void motors_init(MotorHandle *motor_right, MotorHandle *motor_left)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  	HAL_GPIO_WritePin(motor_right->ena_port, motor_right->ena_pin, GPIO_PIN_SET);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68d8      	ldr	r0, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8a1b      	ldrh	r3, [r3, #16]
 80032b6:	2201      	movs	r2, #1
 80032b8:	4619      	mov	r1, r3
 80032ba:	f001 f8d7 	bl	800446c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_left->ena_port, motor_left->ena_pin, GPIO_PIN_SET);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68d8      	ldr	r0, [r3, #12]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	8a1b      	ldrh	r3, [r3, #16]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4619      	mov	r1, r3
 80032ca:	f001 f8cf 	bl	800446c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(motor_right->htim, motor_right->channel_in1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	f002 fa07 	bl	80056ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor_right->htim, motor_right->channel_in2);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f002 f9ff 	bl	80056ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor_left->htim, motor_left->channel_in1);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f002 f9f7 	bl	80056ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor_left->htim, motor_left->channel_in2);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f002 f9ef 	bl	80056ec <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in2, 0);
 800330e:	4b70      	ldr	r3, [pc, #448]	@ (80034d0 <motors_init+0x22c>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <motors_init+0x7e>
 8003316:	4b6e      	ldr	r3, [pc, #440]	@ (80034d0 <motors_init+0x22c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003320:	e02c      	b.n	800337c <motors_init+0xd8>
 8003322:	4b6b      	ldr	r3, [pc, #428]	@ (80034d0 <motors_init+0x22c>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b04      	cmp	r3, #4
 8003328:	d105      	bne.n	8003336 <motors_init+0x92>
 800332a:	4b69      	ldr	r3, [pc, #420]	@ (80034d0 <motors_init+0x22c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	6393      	str	r3, [r2, #56]	@ 0x38
 8003334:	e022      	b.n	800337c <motors_init+0xd8>
 8003336:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <motors_init+0x22c>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b08      	cmp	r3, #8
 800333c:	d105      	bne.n	800334a <motors_init+0xa6>
 800333e:	4b64      	ldr	r3, [pc, #400]	@ (80034d0 <motors_init+0x22c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003348:	e018      	b.n	800337c <motors_init+0xd8>
 800334a:	4b61      	ldr	r3, [pc, #388]	@ (80034d0 <motors_init+0x22c>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d105      	bne.n	800335e <motors_init+0xba>
 8003352:	4b5f      	ldr	r3, [pc, #380]	@ (80034d0 <motors_init+0x22c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	6413      	str	r3, [r2, #64]	@ 0x40
 800335c:	e00e      	b.n	800337c <motors_init+0xd8>
 800335e:	4b5c      	ldr	r3, [pc, #368]	@ (80034d0 <motors_init+0x22c>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b10      	cmp	r3, #16
 8003364:	d105      	bne.n	8003372 <motors_init+0xce>
 8003366:	4b5a      	ldr	r3, [pc, #360]	@ (80034d0 <motors_init+0x22c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003370:	e004      	b.n	800337c <motors_init+0xd8>
 8003372:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <motors_init+0x22c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in1, 0);
 800337c:	4b54      	ldr	r3, [pc, #336]	@ (80034d0 <motors_init+0x22c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <motors_init+0xec>
 8003384:	4b52      	ldr	r3, [pc, #328]	@ (80034d0 <motors_init+0x22c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	635a      	str	r2, [r3, #52]	@ 0x34
 800338e:	e02c      	b.n	80033ea <motors_init+0x146>
 8003390:	4b4f      	ldr	r3, [pc, #316]	@ (80034d0 <motors_init+0x22c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d105      	bne.n	80033a4 <motors_init+0x100>
 8003398:	4b4d      	ldr	r3, [pc, #308]	@ (80034d0 <motors_init+0x22c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80033a2:	e022      	b.n	80033ea <motors_init+0x146>
 80033a4:	4b4a      	ldr	r3, [pc, #296]	@ (80034d0 <motors_init+0x22c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d105      	bne.n	80033b8 <motors_init+0x114>
 80033ac:	4b48      	ldr	r3, [pc, #288]	@ (80034d0 <motors_init+0x22c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033b6:	e018      	b.n	80033ea <motors_init+0x146>
 80033b8:	4b45      	ldr	r3, [pc, #276]	@ (80034d0 <motors_init+0x22c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d105      	bne.n	80033cc <motors_init+0x128>
 80033c0:	4b43      	ldr	r3, [pc, #268]	@ (80034d0 <motors_init+0x22c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ca:	e00e      	b.n	80033ea <motors_init+0x146>
 80033cc:	4b40      	ldr	r3, [pc, #256]	@ (80034d0 <motors_init+0x22c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d105      	bne.n	80033e0 <motors_init+0x13c>
 80033d4:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <motors_init+0x22c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	2300      	movs	r3, #0
 80033dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80033de:	e004      	b.n	80033ea <motors_init+0x146>
 80033e0:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <motors_init+0x22c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	64d3      	str	r3, [r2, #76]	@ 0x4c

	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, 0);
 80033ea:	4b3a      	ldr	r3, [pc, #232]	@ (80034d4 <motors_init+0x230>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <motors_init+0x15a>
 80033f2:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <motors_init+0x230>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80033fc:	e02c      	b.n	8003458 <motors_init+0x1b4>
 80033fe:	4b35      	ldr	r3, [pc, #212]	@ (80034d4 <motors_init+0x230>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b04      	cmp	r3, #4
 8003404:	d105      	bne.n	8003412 <motors_init+0x16e>
 8003406:	4b33      	ldr	r3, [pc, #204]	@ (80034d4 <motors_init+0x230>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2300      	movs	r3, #0
 800340e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003410:	e022      	b.n	8003458 <motors_init+0x1b4>
 8003412:	4b30      	ldr	r3, [pc, #192]	@ (80034d4 <motors_init+0x230>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b08      	cmp	r3, #8
 8003418:	d105      	bne.n	8003426 <motors_init+0x182>
 800341a:	4b2e      	ldr	r3, [pc, #184]	@ (80034d4 <motors_init+0x230>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2300      	movs	r3, #0
 8003422:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003424:	e018      	b.n	8003458 <motors_init+0x1b4>
 8003426:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <motors_init+0x230>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d105      	bne.n	800343a <motors_init+0x196>
 800342e:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <motors_init+0x230>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2300      	movs	r3, #0
 8003436:	6413      	str	r3, [r2, #64]	@ 0x40
 8003438:	e00e      	b.n	8003458 <motors_init+0x1b4>
 800343a:	4b26      	ldr	r3, [pc, #152]	@ (80034d4 <motors_init+0x230>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d105      	bne.n	800344e <motors_init+0x1aa>
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <motors_init+0x230>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2300      	movs	r3, #0
 800344a:	6493      	str	r3, [r2, #72]	@ 0x48
 800344c:	e004      	b.n	8003458 <motors_init+0x1b4>
 800344e:	4b21      	ldr	r3, [pc, #132]	@ (80034d4 <motors_init+0x230>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003458:	4b1e      	ldr	r3, [pc, #120]	@ (80034d4 <motors_init+0x230>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <motors_init+0x1c8>
 8003460:	4b1c      	ldr	r3, [pc, #112]	@ (80034d4 <motors_init+0x230>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800346a:	e02c      	b.n	80034c6 <motors_init+0x222>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 800346c:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <motors_init+0x230>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d105      	bne.n	8003480 <motors_init+0x1dc>
 8003474:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <motors_init+0x230>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800347e:	e022      	b.n	80034c6 <motors_init+0x222>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003480:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <motors_init+0x230>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d105      	bne.n	8003494 <motors_init+0x1f0>
 8003488:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <motors_init+0x230>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003492:	e018      	b.n	80034c6 <motors_init+0x222>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003494:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <motors_init+0x230>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d105      	bne.n	80034a8 <motors_init+0x204>
 800349c:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <motors_init+0x230>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	2300      	movs	r3, #0
 80034a4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80034a6:	e00e      	b.n	80034c6 <motors_init+0x222>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 80034a8:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <motors_init+0x230>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d105      	bne.n	80034bc <motors_init+0x218>
 80034b0:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <motors_init+0x230>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2300      	movs	r3, #0
 80034b8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80034ba:	e004      	b.n	80034c6 <motors_init+0x222>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <motors_init+0x230>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000014 	.word	0x20000014
 80034d4:	20000000 	.word	0x20000000

080034d8 <timer_period>:


static inline uint32_t timer_period(TIM_HandleTypeDef *htim) {
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_AUTORELOAD(htim); // current ARR
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <speed_to_ccr_motor>:

static inline uint32_t speed_to_ccr_motor(TIM_HandleTypeDef *htim,  uint32_t min_ccr, int8_t v)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	71fb      	strb	r3, [r7, #7]
    uint32_t period = timer_period(htim);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff ffe8 	bl	80034d8 <timer_period>
 8003508:	6178      	str	r0, [r7, #20]
    uint8_t duty_cycle = (uint8_t)(v < 0 ? -v : v);
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	da03      	bge.n	800351a <speed_to_ccr_motor+0x26>
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	425b      	negs	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e000      	b.n	800351c <speed_to_ccr_motor+0x28>
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	74fb      	strb	r3, [r7, #19]
    if (duty_cycle == 0) return 0;
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <speed_to_ccr_motor+0x34>
 8003524:	2300      	movs	r3, #0
 8003526:	e00d      	b.n	8003544 <speed_to_ccr_motor+0x50>
    uint16_t slope = (period - min_ccr)  / (MAX_PWM - MIN_PWM);
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	4a07      	ldr	r2, [pc, #28]	@ (800354c <speed_to_ccr_motor+0x58>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	823b      	strh	r3, [r7, #16]
    return ((uint32_t)slope * (uint32_t)duty_cycle) +  min_ccr; // y = m * x + b  =>  x -> duty cycle, y -> CCR
 8003538:	8a3b      	ldrh	r3, [r7, #16]
 800353a:	7cfa      	ldrb	r2, [r7, #19]
 800353c:	fb03 f202 	mul.w	r2, r3, r2
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4413      	add	r3, r2
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <move_robot>:

void move_robot(int8_t left_speed, int8_t right_speed)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	460a      	mov	r2, r1
 800355a:	71fb      	strb	r3, [r7, #7]
 800355c:	4613      	mov	r3, r2
 800355e:	71bb      	strb	r3, [r7, #6]
	int8_t L = clamp_int(left_speed,  -100, 100);
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	2264      	movs	r2, #100	@ 0x64
 8003566:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fe76 	bl	800325c <clamp_int>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]
	int8_t R = clamp_int(right_speed, -100, 100);
 8003574:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003578:	2264      	movs	r2, #100	@ 0x64
 800357a:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fe6c 	bl	800325c <clamp_int>
 8003584:	4603      	mov	r3, r0
 8003586:	75bb      	strb	r3, [r7, #22]

	uint32_t ccrL = speed_to_ccr_motor(Mot_left.htim,  MIN_CCR_L, L);
 8003588:	4b85      	ldr	r3, [pc, #532]	@ (80037a0 <move_robot+0x250>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003590:	2146      	movs	r1, #70	@ 0x46
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ffae 	bl	80034f4 <speed_to_ccr_motor>
 8003598:	6138      	str	r0, [r7, #16]
	uint32_t ccrR = speed_to_ccr_motor(Mot_right.htim, MIN_CCR_R, R);
 800359a:	4b82      	ldr	r3, [pc, #520]	@ (80037a4 <move_robot+0x254>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80035a2:	2146      	movs	r1, #70	@ 0x46
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ffa5 	bl	80034f4 <speed_to_ccr_motor>
 80035aa:	60f8      	str	r0, [r7, #12]

	if (L >= 0) {
 80035ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	db6e      	blt.n	8003692 <move_robot+0x142>
		__HAL_TIM_SET_COMPARE(Mot_left.htim,  Mot_left.channel_in2, 0);
 80035b4:	4b7a      	ldr	r3, [pc, #488]	@ (80037a0 <move_robot+0x250>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <move_robot+0x78>
 80035bc:	4b78      	ldr	r3, [pc, #480]	@ (80037a0 <move_robot+0x250>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035c6:	e02c      	b.n	8003622 <move_robot+0xd2>
 80035c8:	4b75      	ldr	r3, [pc, #468]	@ (80037a0 <move_robot+0x250>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d105      	bne.n	80035dc <move_robot+0x8c>
 80035d0:	4b73      	ldr	r3, [pc, #460]	@ (80037a0 <move_robot+0x250>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80035da:	e022      	b.n	8003622 <move_robot+0xd2>
 80035dc:	4b70      	ldr	r3, [pc, #448]	@ (80037a0 <move_robot+0x250>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d105      	bne.n	80035f0 <move_robot+0xa0>
 80035e4:	4b6e      	ldr	r3, [pc, #440]	@ (80037a0 <move_robot+0x250>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035ee:	e018      	b.n	8003622 <move_robot+0xd2>
 80035f0:	4b6b      	ldr	r3, [pc, #428]	@ (80037a0 <move_robot+0x250>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d105      	bne.n	8003604 <move_robot+0xb4>
 80035f8:	4b69      	ldr	r3, [pc, #420]	@ (80037a0 <move_robot+0x250>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	6413      	str	r3, [r2, #64]	@ 0x40
 8003602:	e00e      	b.n	8003622 <move_robot+0xd2>
 8003604:	4b66      	ldr	r3, [pc, #408]	@ (80037a0 <move_robot+0x250>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b10      	cmp	r3, #16
 800360a:	d105      	bne.n	8003618 <move_robot+0xc8>
 800360c:	4b64      	ldr	r3, [pc, #400]	@ (80037a0 <move_robot+0x250>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	6493      	str	r3, [r2, #72]	@ 0x48
 8003616:	e004      	b.n	8003622 <move_robot+0xd2>
 8003618:	4b61      	ldr	r3, [pc, #388]	@ (80037a0 <move_robot+0x250>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2300      	movs	r3, #0
 8003620:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_left.htim,  Mot_left.channel_in1, ccrL);
 8003622:	4b5f      	ldr	r3, [pc, #380]	@ (80037a0 <move_robot+0x250>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <move_robot+0xe6>
 800362a:	4b5d      	ldr	r3, [pc, #372]	@ (80037a0 <move_robot+0x250>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	635a      	str	r2, [r3, #52]	@ 0x34
 8003634:	e09b      	b.n	800376e <move_robot+0x21e>
 8003636:	4b5a      	ldr	r3, [pc, #360]	@ (80037a0 <move_robot+0x250>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b04      	cmp	r3, #4
 800363c:	d105      	bne.n	800364a <move_robot+0xfa>
 800363e:	4b58      	ldr	r3, [pc, #352]	@ (80037a0 <move_robot+0x250>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6393      	str	r3, [r2, #56]	@ 0x38
 8003648:	e091      	b.n	800376e <move_robot+0x21e>
 800364a:	4b55      	ldr	r3, [pc, #340]	@ (80037a0 <move_robot+0x250>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b08      	cmp	r3, #8
 8003650:	d105      	bne.n	800365e <move_robot+0x10e>
 8003652:	4b53      	ldr	r3, [pc, #332]	@ (80037a0 <move_robot+0x250>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800365c:	e087      	b.n	800376e <move_robot+0x21e>
 800365e:	4b50      	ldr	r3, [pc, #320]	@ (80037a0 <move_robot+0x250>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d105      	bne.n	8003672 <move_robot+0x122>
 8003666:	4b4e      	ldr	r3, [pc, #312]	@ (80037a0 <move_robot+0x250>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003670:	e07d      	b.n	800376e <move_robot+0x21e>
 8003672:	4b4b      	ldr	r3, [pc, #300]	@ (80037a0 <move_robot+0x250>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b10      	cmp	r3, #16
 8003678:	d105      	bne.n	8003686 <move_robot+0x136>
 800367a:	4b49      	ldr	r3, [pc, #292]	@ (80037a0 <move_robot+0x250>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6493      	str	r3, [r2, #72]	@ 0x48
 8003684:	e073      	b.n	800376e <move_robot+0x21e>
 8003686:	4b46      	ldr	r3, [pc, #280]	@ (80037a0 <move_robot+0x250>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003690:	e06d      	b.n	800376e <move_robot+0x21e>
	} else {
		__HAL_TIM_SET_COMPARE(Mot_left.htim,  Mot_left.channel_in1, 0);
 8003692:	4b43      	ldr	r3, [pc, #268]	@ (80037a0 <move_robot+0x250>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <move_robot+0x156>
 800369a:	4b41      	ldr	r3, [pc, #260]	@ (80037a0 <move_robot+0x250>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80036a4:	e02c      	b.n	8003700 <move_robot+0x1b0>
 80036a6:	4b3e      	ldr	r3, [pc, #248]	@ (80037a0 <move_robot+0x250>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d105      	bne.n	80036ba <move_robot+0x16a>
 80036ae:	4b3c      	ldr	r3, [pc, #240]	@ (80037a0 <move_robot+0x250>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2300      	movs	r3, #0
 80036b6:	6393      	str	r3, [r2, #56]	@ 0x38
 80036b8:	e022      	b.n	8003700 <move_robot+0x1b0>
 80036ba:	4b39      	ldr	r3, [pc, #228]	@ (80037a0 <move_robot+0x250>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d105      	bne.n	80036ce <move_robot+0x17e>
 80036c2:	4b37      	ldr	r3, [pc, #220]	@ (80037a0 <move_robot+0x250>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80036cc:	e018      	b.n	8003700 <move_robot+0x1b0>
 80036ce:	4b34      	ldr	r3, [pc, #208]	@ (80037a0 <move_robot+0x250>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d105      	bne.n	80036e2 <move_robot+0x192>
 80036d6:	4b32      	ldr	r3, [pc, #200]	@ (80037a0 <move_robot+0x250>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2300      	movs	r3, #0
 80036de:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e0:	e00e      	b.n	8003700 <move_robot+0x1b0>
 80036e2:	4b2f      	ldr	r3, [pc, #188]	@ (80037a0 <move_robot+0x250>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d105      	bne.n	80036f6 <move_robot+0x1a6>
 80036ea:	4b2d      	ldr	r3, [pc, #180]	@ (80037a0 <move_robot+0x250>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	6493      	str	r3, [r2, #72]	@ 0x48
 80036f4:	e004      	b.n	8003700 <move_robot+0x1b0>
 80036f6:	4b2a      	ldr	r3, [pc, #168]	@ (80037a0 <move_robot+0x250>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_left.htim,  Mot_left.channel_in2, ccrL);
 8003700:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <move_robot+0x250>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <move_robot+0x1c4>
 8003708:	4b25      	ldr	r3, [pc, #148]	@ (80037a0 <move_robot+0x250>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	635a      	str	r2, [r3, #52]	@ 0x34
 8003712:	e02c      	b.n	800376e <move_robot+0x21e>
 8003714:	4b22      	ldr	r3, [pc, #136]	@ (80037a0 <move_robot+0x250>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d105      	bne.n	8003728 <move_robot+0x1d8>
 800371c:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <move_robot+0x250>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6393      	str	r3, [r2, #56]	@ 0x38
 8003726:	e022      	b.n	800376e <move_robot+0x21e>
 8003728:	4b1d      	ldr	r3, [pc, #116]	@ (80037a0 <move_robot+0x250>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d105      	bne.n	800373c <move_robot+0x1ec>
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <move_robot+0x250>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800373a:	e018      	b.n	800376e <move_robot+0x21e>
 800373c:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <move_robot+0x250>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d105      	bne.n	8003750 <move_robot+0x200>
 8003744:	4b16      	ldr	r3, [pc, #88]	@ (80037a0 <move_robot+0x250>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	6413      	str	r3, [r2, #64]	@ 0x40
 800374e:	e00e      	b.n	800376e <move_robot+0x21e>
 8003750:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <move_robot+0x250>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b10      	cmp	r3, #16
 8003756:	d105      	bne.n	8003764 <move_robot+0x214>
 8003758:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <move_robot+0x250>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	6493      	str	r3, [r2, #72]	@ 0x48
 8003762:	e004      	b.n	800376e <move_robot+0x21e>
 8003764:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <move_robot+0x250>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	}

	if (R >= 0) {
 800376e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003772:	2b00      	cmp	r3, #0
 8003774:	db73      	blt.n	800385e <move_robot+0x30e>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, 0);
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <move_robot+0x254>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <move_robot+0x23a>
 800377e:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <move_robot+0x254>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	635a      	str	r2, [r3, #52]	@ 0x34
 8003788:	e031      	b.n	80037ee <move_robot+0x29e>
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <move_robot+0x254>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b04      	cmp	r3, #4
 8003790:	d10a      	bne.n	80037a8 <move_robot+0x258>
 8003792:	4b04      	ldr	r3, [pc, #16]	@ (80037a4 <move_robot+0x254>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	6393      	str	r3, [r2, #56]	@ 0x38
 800379c:	e027      	b.n	80037ee <move_robot+0x29e>
 800379e:	bf00      	nop
 80037a0:	20000014 	.word	0x20000014
 80037a4:	20000000 	.word	0x20000000
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <move_robot+0x3f4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d105      	bne.n	80037bc <move_robot+0x26c>
 80037b0:	4b64      	ldr	r3, [pc, #400]	@ (8003944 <move_robot+0x3f4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	2300      	movs	r3, #0
 80037b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80037ba:	e018      	b.n	80037ee <move_robot+0x29e>
 80037bc:	4b61      	ldr	r3, [pc, #388]	@ (8003944 <move_robot+0x3f4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d105      	bne.n	80037d0 <move_robot+0x280>
 80037c4:	4b5f      	ldr	r3, [pc, #380]	@ (8003944 <move_robot+0x3f4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	2300      	movs	r3, #0
 80037cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ce:	e00e      	b.n	80037ee <move_robot+0x29e>
 80037d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003944 <move_robot+0x3f4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d105      	bne.n	80037e4 <move_robot+0x294>
 80037d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <move_robot+0x3f4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80037e2:	e004      	b.n	80037ee <move_robot+0x29e>
 80037e4:	4b57      	ldr	r3, [pc, #348]	@ (8003944 <move_robot+0x3f4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, ccrR);
 80037ee:	4b55      	ldr	r3, [pc, #340]	@ (8003944 <move_robot+0x3f4>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <move_robot+0x2b2>
 80037f6:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <move_robot+0x3f4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, ccrR);
	}
}
 8003800:	e09c      	b.n	800393c <move_robot+0x3ec>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, ccrR);
 8003802:	4b50      	ldr	r3, [pc, #320]	@ (8003944 <move_robot+0x3f4>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b04      	cmp	r3, #4
 8003808:	d105      	bne.n	8003816 <move_robot+0x2c6>
 800380a:	4b4e      	ldr	r3, [pc, #312]	@ (8003944 <move_robot+0x3f4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6393      	str	r3, [r2, #56]	@ 0x38
 8003814:	e092      	b.n	800393c <move_robot+0x3ec>
 8003816:	4b4b      	ldr	r3, [pc, #300]	@ (8003944 <move_robot+0x3f4>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b08      	cmp	r3, #8
 800381c:	d105      	bne.n	800382a <move_robot+0x2da>
 800381e:	4b49      	ldr	r3, [pc, #292]	@ (8003944 <move_robot+0x3f4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003828:	e088      	b.n	800393c <move_robot+0x3ec>
 800382a:	4b46      	ldr	r3, [pc, #280]	@ (8003944 <move_robot+0x3f4>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d105      	bne.n	800383e <move_robot+0x2ee>
 8003832:	4b44      	ldr	r3, [pc, #272]	@ (8003944 <move_robot+0x3f4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6413      	str	r3, [r2, #64]	@ 0x40
 800383c:	e07e      	b.n	800393c <move_robot+0x3ec>
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <move_robot+0x3f4>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b10      	cmp	r3, #16
 8003844:	d105      	bne.n	8003852 <move_robot+0x302>
 8003846:	4b3f      	ldr	r3, [pc, #252]	@ (8003944 <move_robot+0x3f4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003850:	e074      	b.n	800393c <move_robot+0x3ec>
 8003852:	4b3c      	ldr	r3, [pc, #240]	@ (8003944 <move_robot+0x3f4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800385c:	e06e      	b.n	800393c <move_robot+0x3ec>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 800385e:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <move_robot+0x3f4>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <move_robot+0x322>
 8003866:	4b37      	ldr	r3, [pc, #220]	@ (8003944 <move_robot+0x3f4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003870:	e02c      	b.n	80038cc <move_robot+0x37c>
 8003872:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <move_robot+0x3f4>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d105      	bne.n	8003886 <move_robot+0x336>
 800387a:	4b32      	ldr	r3, [pc, #200]	@ (8003944 <move_robot+0x3f4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2300      	movs	r3, #0
 8003882:	6393      	str	r3, [r2, #56]	@ 0x38
 8003884:	e022      	b.n	80038cc <move_robot+0x37c>
 8003886:	4b2f      	ldr	r3, [pc, #188]	@ (8003944 <move_robot+0x3f4>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d105      	bne.n	800389a <move_robot+0x34a>
 800388e:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <move_robot+0x3f4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003898:	e018      	b.n	80038cc <move_robot+0x37c>
 800389a:	4b2a      	ldr	r3, [pc, #168]	@ (8003944 <move_robot+0x3f4>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d105      	bne.n	80038ae <move_robot+0x35e>
 80038a2:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <move_robot+0x3f4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ac:	e00e      	b.n	80038cc <move_robot+0x37c>
 80038ae:	4b25      	ldr	r3, [pc, #148]	@ (8003944 <move_robot+0x3f4>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d105      	bne.n	80038c2 <move_robot+0x372>
 80038b6:	4b23      	ldr	r3, [pc, #140]	@ (8003944 <move_robot+0x3f4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2300      	movs	r3, #0
 80038be:	6493      	str	r3, [r2, #72]	@ 0x48
 80038c0:	e004      	b.n	80038cc <move_robot+0x37c>
 80038c2:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <move_robot+0x3f4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, ccrR);
 80038cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <move_robot+0x3f4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <move_robot+0x390>
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <move_robot+0x3f4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80038de:	e02d      	b.n	800393c <move_robot+0x3ec>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, ccrR);
 80038e0:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <move_robot+0x3f4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d105      	bne.n	80038f4 <move_robot+0x3a4>
 80038e8:	4b16      	ldr	r3, [pc, #88]	@ (8003944 <move_robot+0x3f4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80038f2:	e023      	b.n	800393c <move_robot+0x3ec>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, ccrR);
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <move_robot+0x3f4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d105      	bne.n	8003908 <move_robot+0x3b8>
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <move_robot+0x3f4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003906:	e019      	b.n	800393c <move_robot+0x3ec>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, ccrR);
 8003908:	4b0e      	ldr	r3, [pc, #56]	@ (8003944 <move_robot+0x3f4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d105      	bne.n	800391c <move_robot+0x3cc>
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <move_robot+0x3f4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800391a:	e00f      	b.n	800393c <move_robot+0x3ec>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, ccrR);
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <move_robot+0x3f4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b10      	cmp	r3, #16
 8003922:	d105      	bne.n	8003930 <move_robot+0x3e0>
 8003924:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <move_robot+0x3f4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800392e:	e005      	b.n	800393c <move_robot+0x3ec>
		__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, ccrR);
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <move_robot+0x3f4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800393a:	e7ff      	b.n	800393c <move_robot+0x3ec>
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000000 	.word	0x20000000

08003948 <stop_robot>:

void stop_robot(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in2, 0);
 800394c:	4b70      	ldr	r3, [pc, #448]	@ (8003b10 <stop_robot+0x1c8>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <stop_robot+0x18>
 8003954:	4b6e      	ldr	r3, [pc, #440]	@ (8003b10 <stop_robot+0x1c8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	635a      	str	r2, [r3, #52]	@ 0x34
 800395e:	e02c      	b.n	80039ba <stop_robot+0x72>
 8003960:	4b6b      	ldr	r3, [pc, #428]	@ (8003b10 <stop_robot+0x1c8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d105      	bne.n	8003974 <stop_robot+0x2c>
 8003968:	4b69      	ldr	r3, [pc, #420]	@ (8003b10 <stop_robot+0x1c8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2300      	movs	r3, #0
 8003970:	6393      	str	r3, [r2, #56]	@ 0x38
 8003972:	e022      	b.n	80039ba <stop_robot+0x72>
 8003974:	4b66      	ldr	r3, [pc, #408]	@ (8003b10 <stop_robot+0x1c8>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d105      	bne.n	8003988 <stop_robot+0x40>
 800397c:	4b64      	ldr	r3, [pc, #400]	@ (8003b10 <stop_robot+0x1c8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	2300      	movs	r3, #0
 8003984:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003986:	e018      	b.n	80039ba <stop_robot+0x72>
 8003988:	4b61      	ldr	r3, [pc, #388]	@ (8003b10 <stop_robot+0x1c8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d105      	bne.n	800399c <stop_robot+0x54>
 8003990:	4b5f      	ldr	r3, [pc, #380]	@ (8003b10 <stop_robot+0x1c8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	6413      	str	r3, [r2, #64]	@ 0x40
 800399a:	e00e      	b.n	80039ba <stop_robot+0x72>
 800399c:	4b5c      	ldr	r3, [pc, #368]	@ (8003b10 <stop_robot+0x1c8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d105      	bne.n	80039b0 <stop_robot+0x68>
 80039a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b10 <stop_robot+0x1c8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80039ae:	e004      	b.n	80039ba <stop_robot+0x72>
 80039b0:	4b57      	ldr	r3, [pc, #348]	@ (8003b10 <stop_robot+0x1c8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(Mot_left.htim, Mot_left.channel_in1, 0);
 80039ba:	4b55      	ldr	r3, [pc, #340]	@ (8003b10 <stop_robot+0x1c8>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <stop_robot+0x86>
 80039c2:	4b53      	ldr	r3, [pc, #332]	@ (8003b10 <stop_robot+0x1c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2200      	movs	r2, #0
 80039ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80039cc:	e02c      	b.n	8003a28 <stop_robot+0xe0>
 80039ce:	4b50      	ldr	r3, [pc, #320]	@ (8003b10 <stop_robot+0x1c8>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d105      	bne.n	80039e2 <stop_robot+0x9a>
 80039d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003b10 <stop_robot+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	6393      	str	r3, [r2, #56]	@ 0x38
 80039e0:	e022      	b.n	8003a28 <stop_robot+0xe0>
 80039e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b10 <stop_robot+0x1c8>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d105      	bne.n	80039f6 <stop_robot+0xae>
 80039ea:	4b49      	ldr	r3, [pc, #292]	@ (8003b10 <stop_robot+0x1c8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80039f4:	e018      	b.n	8003a28 <stop_robot+0xe0>
 80039f6:	4b46      	ldr	r3, [pc, #280]	@ (8003b10 <stop_robot+0x1c8>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d105      	bne.n	8003a0a <stop_robot+0xc2>
 80039fe:	4b44      	ldr	r3, [pc, #272]	@ (8003b10 <stop_robot+0x1c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	2300      	movs	r3, #0
 8003a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a08:	e00e      	b.n	8003a28 <stop_robot+0xe0>
 8003a0a:	4b41      	ldr	r3, [pc, #260]	@ (8003b10 <stop_robot+0x1c8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d105      	bne.n	8003a1e <stop_robot+0xd6>
 8003a12:	4b3f      	ldr	r3, [pc, #252]	@ (8003b10 <stop_robot+0x1c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a1c:	e004      	b.n	8003a28 <stop_robot+0xe0>
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b10 <stop_robot+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2300      	movs	r3, #0
 8003a26:	64d3      	str	r3, [r2, #76]	@ 0x4c

	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in1, 0);
 8003a28:	4b3a      	ldr	r3, [pc, #232]	@ (8003b14 <stop_robot+0x1cc>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <stop_robot+0xf4>
 8003a30:	4b38      	ldr	r3, [pc, #224]	@ (8003b14 <stop_robot+0x1cc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a3a:	e02c      	b.n	8003a96 <stop_robot+0x14e>
 8003a3c:	4b35      	ldr	r3, [pc, #212]	@ (8003b14 <stop_robot+0x1cc>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d105      	bne.n	8003a50 <stop_robot+0x108>
 8003a44:	4b33      	ldr	r3, [pc, #204]	@ (8003b14 <stop_robot+0x1cc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8003a4e:	e022      	b.n	8003a96 <stop_robot+0x14e>
 8003a50:	4b30      	ldr	r3, [pc, #192]	@ (8003b14 <stop_robot+0x1cc>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d105      	bne.n	8003a64 <stop_robot+0x11c>
 8003a58:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <stop_robot+0x1cc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003a62:	e018      	b.n	8003a96 <stop_robot+0x14e>
 8003a64:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <stop_robot+0x1cc>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d105      	bne.n	8003a78 <stop_robot+0x130>
 8003a6c:	4b29      	ldr	r3, [pc, #164]	@ (8003b14 <stop_robot+0x1cc>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a76:	e00e      	b.n	8003a96 <stop_robot+0x14e>
 8003a78:	4b26      	ldr	r3, [pc, #152]	@ (8003b14 <stop_robot+0x1cc>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d105      	bne.n	8003a8c <stop_robot+0x144>
 8003a80:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <stop_robot+0x1cc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a8a:	e004      	b.n	8003a96 <stop_robot+0x14e>
 8003a8c:	4b21      	ldr	r3, [pc, #132]	@ (8003b14 <stop_robot+0x1cc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003a96:	4b1f      	ldr	r3, [pc, #124]	@ (8003b14 <stop_robot+0x1cc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <stop_robot+0x162>
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <stop_robot+0x1cc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8003aa8:	e02c      	b.n	8003b04 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <stop_robot+0x1cc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d105      	bne.n	8003abe <stop_robot+0x176>
 8003ab2:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <stop_robot+0x1cc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003abc:	e022      	b.n	8003b04 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <stop_robot+0x1cc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d105      	bne.n	8003ad2 <stop_robot+0x18a>
 8003ac6:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <stop_robot+0x1cc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2300      	movs	r3, #0
 8003ace:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003ad0:	e018      	b.n	8003b04 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <stop_robot+0x1cc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d105      	bne.n	8003ae6 <stop_robot+0x19e>
 8003ada:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <stop_robot+0x1cc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003ae4:	e00e      	b.n	8003b04 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <stop_robot+0x1cc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d105      	bne.n	8003afa <stop_robot+0x1b2>
 8003aee:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <stop_robot+0x1cc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	2300      	movs	r3, #0
 8003af6:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003af8:	e004      	b.n	8003b04 <stop_robot+0x1bc>
	__HAL_TIM_SET_COMPARE(Mot_right.htim, Mot_right.channel_in2, 0);
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <stop_robot+0x1cc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000014 	.word	0x20000014
 8003b14:	20000000 	.word	0x20000000

08003b18 <USS_init>:
// ------------------------------------------------------ Ultrasonic Sensor HC-SR04 --------------------------------------
// -----------------------------------------------------------------------------------------------------------------------

void USS_init(TIM_HandleTypeDef *trig_tim, uint32_t trig_channel,
              TIM_HandleTypeDef *echo_tim, uint32_t echo_channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
    HAL_TIM_PWM_Start(trig_tim, trig_channel);
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f001 fddf 	bl	80056ec <HAL_TIM_PWM_Start>
    HAL_TIM_IC_Start_IT(echo_tim, echo_channel);
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f001 ff3d 	bl	80059b0 <HAL_TIM_IC_Start_IT>
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <USS_get_value>:

uint32_t USS_get_value(uint32_t pulse_ticks){
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	if	(pulse_ticks >= 38000) return NO_OBSTACLE;	// NO_OBSTACLE = 0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d902      	bls.n	8003b58 <USS_get_value+0x18>
 8003b52:	f64a 539c 	movw	r3, #44444	@ 0xad9c
 8003b56:	e004      	b.n	8003b62 <USS_get_value+0x22>
	return (uint32_t)pulse_ticks / 580;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a05      	ldr	r2, [pc, #20]	@ (8003b70 <USS_get_value+0x30>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	0a5b      	lsrs	r3, r3, #9
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e1fc780f 	.word	0xe1fc780f

08003b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b74:	480d      	ldr	r0, [pc, #52]	@ (8003bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b78:	f7ff fb5e 	bl	8003238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b7c:	480c      	ldr	r0, [pc, #48]	@ (8003bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b7e:	490d      	ldr	r1, [pc, #52]	@ (8003bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b80:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb8 <LoopForever+0xe>)
  movs r3, #0
 8003b82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b84:	e002      	b.n	8003b8c <LoopCopyDataInit>

08003b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b8a:	3304      	adds	r3, #4

08003b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b90:	d3f9      	bcc.n	8003b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b94:	4c0a      	ldr	r4, [pc, #40]	@ (8003bc0 <LoopForever+0x16>)
  movs r3, #0
 8003b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b98:	e001      	b.n	8003b9e <LoopFillZerobss>

08003b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b9c:	3204      	adds	r2, #4

08003b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba0:	d3fb      	bcc.n	8003b9a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003ba2:	f008 fb3b 	bl	800c21c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ba6:	f7fe f9b3 	bl	8001f10 <main>

08003baa <LoopForever>:

LoopForever:
    b LoopForever
 8003baa:	e7fe      	b.n	8003baa <LoopForever>
  ldr   r0, =_estack
 8003bac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003bb8:	0800e484 	.word	0x0800e484
  ldr r2, =_sbss
 8003bbc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003bc0:	20002bcc 	.word	0x20002bcc

08003bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bc4:	e7fe      	b.n	8003bc4 <ADC1_2_IRQHandler>

08003bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	f000 f8dc 	bl	8003d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bd6:	200f      	movs	r0, #15
 8003bd8:	f7ff f9ae 	bl	8002f38 <HAL_InitTick>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	e001      	b.n	8003bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003be8:	f7fe ff4e 	bl	8002a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bec:	79fb      	ldrb	r3, [r7, #7]

}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_IncTick+0x1c>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_IncTick+0x20>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4413      	add	r3, r2
 8003c06:	4a03      	ldr	r2, [pc, #12]	@ (8003c14 <HAL_IncTick+0x1c>)
 8003c08:	6013      	str	r3, [r2, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	200005bc 	.word	0x200005bc
 8003c18:	20000030 	.word	0x20000030

08003c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c20:	4b03      	ldr	r3, [pc, #12]	@ (8003c30 <HAL_GetTick+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	200005bc 	.word	0x200005bc

08003c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c50:	4013      	ands	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c66:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <__NVIC_GetPriorityGrouping+0x18>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 0307 	and.w	r3, r3, #7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db0b      	blt.n	8003cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	4907      	ldr	r1, [pc, #28]	@ (8003cd0 <__NVIC_EnableIRQ+0x38>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	@ (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	@ (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff4c 	bl	8003c34 <__NVIC_SetPriorityGrouping>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003db2:	f7ff ff63 	bl	8003c7c <__NVIC_GetPriorityGrouping>
 8003db6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	6978      	ldr	r0, [r7, #20]
 8003dbe:	f7ff ffb3 	bl	8003d28 <NVIC_EncodePriority>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff82 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003dd0:	bf00      	nop
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff56 	bl	8003c98 <__NVIC_EnableIRQ>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e08d      	b.n	8003f22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <HAL_DMA_Init+0x138>)
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d80f      	bhi.n	8003e32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b45      	ldr	r3, [pc, #276]	@ (8003f30 <HAL_DMA_Init+0x13c>)
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4a45      	ldr	r2, [pc, #276]	@ (8003f34 <HAL_DMA_Init+0x140>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	009a      	lsls	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a42      	ldr	r2, [pc, #264]	@ (8003f38 <HAL_DMA_Init+0x144>)
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e30:	e00e      	b.n	8003e50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b40      	ldr	r3, [pc, #256]	@ (8003f3c <HAL_DMA_Init+0x148>)
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f34 <HAL_DMA_Init+0x140>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	009a      	lsls	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f40 <HAL_DMA_Init+0x14c>)
 8003e4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8fe 	bl	80040a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb0:	d102      	bne.n	8003eb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ecc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d010      	beq.n	8003ef8 <HAL_DMA_Init+0x104>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d80c      	bhi.n	8003ef8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f91e 	bl	8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e008      	b.n	8003f0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40020407 	.word	0x40020407
 8003f30:	bffdfff8 	.word	0xbffdfff8
 8003f34:	cccccccd 	.word	0xcccccccd
 8003f38:	40020000 	.word	0x40020000
 8003f3c:	bffdfbf8 	.word	0xbffdfbf8
 8003f40:	40020400 	.word	0x40020400

08003f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2204      	movs	r2, #4
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d026      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x7a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d021      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9c:	f003 021f 	and.w	r2, r3, #31
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003faa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d071      	beq.n	8004098 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003fbc:	e06c      	b.n	8004098 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02e      	beq.n	8004030 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d029      	beq.n	8004030 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 020a 	bic.w	r2, r2, #10
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	f003 021f 	and.w	r2, r3, #31
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2102      	movs	r1, #2
 8004010:	fa01 f202 	lsl.w	r2, r1, r2
 8004014:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d038      	beq.n	8004098 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800402e:	e033      	b.n	8004098 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2208      	movs	r2, #8
 800403a:	409a      	lsls	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02a      	beq.n	800409a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d025      	beq.n	800409a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 020e 	bic.w	r2, r2, #14
 800405c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f003 021f 	and.w	r2, r3, #31
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004098:	bf00      	nop
 800409a:	bf00      	nop
}
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b16      	ldr	r3, [pc, #88]	@ (800410c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d802      	bhi.n	80040be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80040b8:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	e001      	b.n	80040c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040c0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3b08      	subs	r3, #8
 80040ce:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	009a      	lsls	r2, r3, #2
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	@ (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2201      	movs	r2, #1
 80040f8:	409a      	lsls	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40020407 	.word	0x40020407
 8004110:	40020800 	.word	0x40020800
 8004114:	40020820 	.word	0x40020820
 8004118:	cccccccd 	.word	0xcccccccd
 800411c:	40020880 	.word	0x40020880

08004120 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	461a      	mov	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a08      	ldr	r2, [pc, #32]	@ (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004142:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2201      	movs	r2, #1
 800414e:	409a      	lsls	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	1000823f 	.word	0x1000823f
 8004164:	40020940 	.word	0x40020940

08004168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004176:	e15a      	b.n	800442e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	4013      	ands	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 814c 	beq.w	8004428 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d005      	beq.n	80041a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d130      	bne.n	800420a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	2203      	movs	r2, #3
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041de:	2201      	movs	r2, #1
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 0201 	and.w	r2, r3, #1
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b03      	cmp	r3, #3
 8004214:	d017      	beq.n	8004246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d123      	bne.n	800429a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	08da      	lsrs	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3208      	adds	r2, #8
 800425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	220f      	movs	r2, #15
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	08da      	lsrs	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3208      	adds	r2, #8
 8004294:	6939      	ldr	r1, [r7, #16]
 8004296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0203 	and.w	r2, r3, #3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80a6 	beq.w	8004428 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042dc:	4b5b      	ldr	r3, [pc, #364]	@ (800444c <HAL_GPIO_Init+0x2e4>)
 80042de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e0:	4a5a      	ldr	r2, [pc, #360]	@ (800444c <HAL_GPIO_Init+0x2e4>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80042e8:	4b58      	ldr	r3, [pc, #352]	@ (800444c <HAL_GPIO_Init+0x2e4>)
 80042ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f4:	4a56      	ldr	r2, [pc, #344]	@ (8004450 <HAL_GPIO_Init+0x2e8>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	220f      	movs	r2, #15
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4013      	ands	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800431e:	d01f      	beq.n	8004360 <HAL_GPIO_Init+0x1f8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a4c      	ldr	r2, [pc, #304]	@ (8004454 <HAL_GPIO_Init+0x2ec>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d019      	beq.n	800435c <HAL_GPIO_Init+0x1f4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <HAL_GPIO_Init+0x2f0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_GPIO_Init+0x1f0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a4a      	ldr	r2, [pc, #296]	@ (800445c <HAL_GPIO_Init+0x2f4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00d      	beq.n	8004354 <HAL_GPIO_Init+0x1ec>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a49      	ldr	r2, [pc, #292]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <HAL_GPIO_Init+0x1e8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a48      	ldr	r2, [pc, #288]	@ (8004464 <HAL_GPIO_Init+0x2fc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d101      	bne.n	800434c <HAL_GPIO_Init+0x1e4>
 8004348:	2305      	movs	r3, #5
 800434a:	e00a      	b.n	8004362 <HAL_GPIO_Init+0x1fa>
 800434c:	2306      	movs	r3, #6
 800434e:	e008      	b.n	8004362 <HAL_GPIO_Init+0x1fa>
 8004350:	2304      	movs	r3, #4
 8004352:	e006      	b.n	8004362 <HAL_GPIO_Init+0x1fa>
 8004354:	2303      	movs	r3, #3
 8004356:	e004      	b.n	8004362 <HAL_GPIO_Init+0x1fa>
 8004358:	2302      	movs	r3, #2
 800435a:	e002      	b.n	8004362 <HAL_GPIO_Init+0x1fa>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_GPIO_Init+0x1fa>
 8004360:	2300      	movs	r3, #0
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	f002 0203 	and.w	r2, r2, #3
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	4093      	lsls	r3, r2
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004372:	4937      	ldr	r1, [pc, #220]	@ (8004450 <HAL_GPIO_Init+0x2e8>)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	3302      	adds	r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004380:	4b39      	ldr	r3, [pc, #228]	@ (8004468 <HAL_GPIO_Init+0x300>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043a4:	4a30      	ldr	r2, [pc, #192]	@ (8004468 <HAL_GPIO_Init+0x300>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004468 <HAL_GPIO_Init+0x300>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043ce:	4a26      	ldr	r2, [pc, #152]	@ (8004468 <HAL_GPIO_Init+0x300>)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80043d4:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <HAL_GPIO_Init+0x300>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	43db      	mvns	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004468 <HAL_GPIO_Init+0x300>)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <HAL_GPIO_Init+0x300>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004422:	4a11      	ldr	r2, [pc, #68]	@ (8004468 <HAL_GPIO_Init+0x300>)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	3301      	adds	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	f47f ae9d 	bne.w	8004178 <HAL_GPIO_Init+0x10>
  }
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40021000 	.word	0x40021000
 8004450:	40010000 	.word	0x40010000
 8004454:	48000400 	.word	0x48000400
 8004458:	48000800 	.word	0x48000800
 800445c:	48000c00 	.word	0x48000c00
 8004460:	48001000 	.word	0x48001000
 8004464:	48001400 	.word	0x48001400
 8004468:	40010400 	.word	0x40010400

0800446c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
 8004478:	4613      	mov	r3, r2
 800447a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800447c:	787b      	ldrb	r3, [r7, #1]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004488:	e002      	b.n	8004490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d141      	bne.n	800452e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044aa:	4b4b      	ldr	r3, [pc, #300]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b6:	d131      	bne.n	800451c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b8:	4b47      	ldr	r3, [pc, #284]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044be:	4a46      	ldr	r2, [pc, #280]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c8:	4b43      	ldr	r3, [pc, #268]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044d0:	4a41      	ldr	r2, [pc, #260]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044d8:	4b40      	ldr	r3, [pc, #256]	@ (80045dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2232      	movs	r2, #50	@ 0x32
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	4a3f      	ldr	r2, [pc, #252]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	0c9b      	lsrs	r3, r3, #18
 80044ea:	3301      	adds	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ee:	e002      	b.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044f6:	4b38      	ldr	r3, [pc, #224]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004502:	d102      	bne.n	800450a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f2      	bne.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800450a:	4b33      	ldr	r3, [pc, #204]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004516:	d158      	bne.n	80045ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e057      	b.n	80045cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800451c:	4b2e      	ldr	r3, [pc, #184]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004522:	4a2d      	ldr	r2, [pc, #180]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800452c:	e04d      	b.n	80045ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004534:	d141      	bne.n	80045ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004536:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800453e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004542:	d131      	bne.n	80045a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004544:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454a:	4a23      	ldr	r2, [pc, #140]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004550:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800455c:	4a1e      	ldr	r2, [pc, #120]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004562:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004564:	4b1d      	ldr	r3, [pc, #116]	@ (80045dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2232      	movs	r2, #50	@ 0x32
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	0c9b      	lsrs	r3, r3, #18
 8004576:	3301      	adds	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457a:	e002      	b.n	8004582 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3b01      	subs	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458e:	d102      	bne.n	8004596 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f2      	bne.n	800457c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004596:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a2:	d112      	bne.n	80045ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e011      	b.n	80045cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ae:	4a0a      	ldr	r2, [pc, #40]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045b8:	e007      	b.n	80045ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045ba:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045c2:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40007000 	.word	0x40007000
 80045dc:	20000028 	.word	0x20000028
 80045e0:	431bde83 	.word	0x431bde83

080045e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a04      	ldr	r2, [pc, #16]	@ (8004600 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045f2:	6093      	str	r3, [r2, #8]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40007000 	.word	0x40007000

08004604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e2fe      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d075      	beq.n	800470e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	4b97      	ldr	r3, [pc, #604]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800462c:	4b94      	ldr	r3, [pc, #592]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d102      	bne.n	8004642 <HAL_RCC_OscConfig+0x3e>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d002      	beq.n	8004648 <HAL_RCC_OscConfig+0x44>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d10b      	bne.n	8004660 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4b8d      	ldr	r3, [pc, #564]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05b      	beq.n	800470c <HAL_RCC_OscConfig+0x108>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d157      	bne.n	800470c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e2d9      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x74>
 800466a:	4b85      	ldr	r3, [pc, #532]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a84      	ldr	r2, [pc, #528]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e01d      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x98>
 8004682:	4b7f      	ldr	r3, [pc, #508]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7e      	ldr	r2, [pc, #504]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b7c      	ldr	r3, [pc, #496]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7b      	ldr	r2, [pc, #492]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 800469c:	4b78      	ldr	r3, [pc, #480]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a77      	ldr	r2, [pc, #476]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b75      	ldr	r3, [pc, #468]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a74      	ldr	r2, [pc, #464]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7ff faae 	bl	8003c1c <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c4:	f7ff faaa 	bl	8003c1c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	@ 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e29e      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0xc0>
 80046e2:	e014      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7ff fa9a 	bl	8003c1c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7ff fa96 	bl	8003c1c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	@ 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e28a      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046fe:	4b60      	ldr	r3, [pc, #384]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0xe8>
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d075      	beq.n	8004806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471a:	4b59      	ldr	r3, [pc, #356]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004724:	4b56      	ldr	r3, [pc, #344]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d102      	bne.n	800473a <HAL_RCC_OscConfig+0x136>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d002      	beq.n	8004740 <HAL_RCC_OscConfig+0x13c>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11f      	bne.n	8004780 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004740:	4b4f      	ldr	r3, [pc, #316]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_OscConfig+0x154>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e25d      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004758:	4b49      	ldr	r3, [pc, #292]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	4946      	ldr	r1, [pc, #280]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800476c:	4b45      	ldr	r3, [pc, #276]	@ (8004884 <HAL_RCC_OscConfig+0x280>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fbe1 	bl	8002f38 <HAL_InitTick>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d043      	beq.n	8004804 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e249      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d023      	beq.n	80047d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004788:	4b3d      	ldr	r3, [pc, #244]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3c      	ldr	r2, [pc, #240]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7ff fa42 	bl	8003c1c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479c:	f7ff fa3e 	bl	8003c1c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e232      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ae:	4b34      	ldr	r3, [pc, #208]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b31      	ldr	r3, [pc, #196]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	492d      	ldr	r1, [pc, #180]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
 80047ce:	e01a      	b.n	8004806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7ff fa1e 	bl	8003c1c <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e4:	f7ff fa1a 	bl	8003c1c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e20e      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047f6:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x1e0>
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004804:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d041      	beq.n	8004896 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01c      	beq.n	8004854 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481a:	4b19      	ldr	r3, [pc, #100]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800481c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004820:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7ff f9f7 	bl	8003c1c <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004832:	f7ff f9f3 	bl	8003c1c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e1e7      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004844:	4b0e      	ldr	r3, [pc, #56]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0ef      	beq.n	8004832 <HAL_RCC_OscConfig+0x22e>
 8004852:	e020      	b.n	8004896 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004854:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800485a:	4a09      	ldr	r2, [pc, #36]	@ (8004880 <HAL_RCC_OscConfig+0x27c>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7ff f9da 	bl	8003c1c <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800486a:	e00d      	b.n	8004888 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486c:	f7ff f9d6 	bl	8003c1c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d906      	bls.n	8004888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1ca      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004888:	4b8c      	ldr	r3, [pc, #560]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ea      	bne.n	800486c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80a6 	beq.w	80049f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048a8:	4b84      	ldr	r3, [pc, #528]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_OscConfig+0x2b4>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x2b6>
 80048b8:	2300      	movs	r3, #0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	4b7f      	ldr	r3, [pc, #508]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	4a7e      	ldr	r2, [pc, #504]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ca:	4b7c      	ldr	r3, [pc, #496]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048da:	4b79      	ldr	r3, [pc, #484]	@ (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d118      	bne.n	8004918 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e6:	4b76      	ldr	r3, [pc, #472]	@ (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a75      	ldr	r2, [pc, #468]	@ (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7ff f993 	bl	8003c1c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fa:	f7ff f98f 	bl	8003c1c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e183      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d108      	bne.n	8004932 <HAL_RCC_OscConfig+0x32e>
 8004920:	4b66      	ldr	r3, [pc, #408]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004926:	4a65      	ldr	r2, [pc, #404]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004930:	e024      	b.n	800497c <HAL_RCC_OscConfig+0x378>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d110      	bne.n	800495c <HAL_RCC_OscConfig+0x358>
 800493a:	4b60      	ldr	r3, [pc, #384]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004940:	4a5e      	ldr	r2, [pc, #376]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800494a:	4b5c      	ldr	r3, [pc, #368]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004950:	4a5a      	ldr	r2, [pc, #360]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800495a:	e00f      	b.n	800497c <HAL_RCC_OscConfig+0x378>
 800495c:	4b57      	ldr	r3, [pc, #348]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	4a56      	ldr	r2, [pc, #344]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800496c:	4b53      	ldr	r3, [pc, #332]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	4a52      	ldr	r2, [pc, #328]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d016      	beq.n	80049b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7ff f94a 	bl	8003c1c <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7ff f946 	bl	8003c1c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e138      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a2:	4b46      	ldr	r3, [pc, #280]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ed      	beq.n	800498c <HAL_RCC_OscConfig+0x388>
 80049b0:	e015      	b.n	80049de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7ff f933 	bl	8003c1c <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7ff f92f 	bl	8003c1c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e121      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049d0:	4b3a      	ldr	r3, [pc, #232]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1ed      	bne.n	80049ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049de:	7ffb      	ldrb	r3, [r7, #31]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e4:	4b35      	ldr	r3, [pc, #212]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	4a34      	ldr	r2, [pc, #208]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d03c      	beq.n	8004a76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a04:	4b2d      	ldr	r3, [pc, #180]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7ff f902 	bl	8003c1c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a1c:	f7ff f8fe 	bl	8003c1c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0f2      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a2e:	4b23      	ldr	r3, [pc, #140]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ef      	beq.n	8004a1c <HAL_RCC_OscConfig+0x418>
 8004a3c:	e01b      	b.n	8004a76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a44:	4a1d      	ldr	r2, [pc, #116]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7ff f8e5 	bl	8003c1c <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a56:	f7ff f8e1 	bl	8003c1c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0d5      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a68:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ef      	bne.n	8004a56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80c9 	beq.w	8004c12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a80:	4b0e      	ldr	r3, [pc, #56]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	f000 8083 	beq.w	8004b94 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d15e      	bne.n	8004b54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a96:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7ff f8bb 	bl	8003c1c <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa8:	e00c      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7ff f8b7 	bl	8003c1c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d905      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e0ab      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac4:	4b55      	ldr	r3, [pc, #340]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ec      	bne.n	8004aaa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad0:	4b52      	ldr	r3, [pc, #328]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	4b52      	ldr	r3, [pc, #328]	@ (8004c20 <HAL_RCC_OscConfig+0x61c>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6a11      	ldr	r1, [r2, #32]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ae0:	3a01      	subs	r2, #1
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	4311      	orrs	r1, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004aea:	0212      	lsls	r2, r2, #8
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0552      	lsls	r2, r2, #21
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004afe:	0852      	lsrs	r2, r2, #1
 8004b00:	3a01      	subs	r2, #1
 8004b02:	0652      	lsls	r2, r2, #25
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b0a:	06d2      	lsls	r2, r2, #27
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	4943      	ldr	r1, [pc, #268]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b14:	4b41      	ldr	r3, [pc, #260]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a40      	ldr	r2, [pc, #256]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b20:	4b3e      	ldr	r3, [pc, #248]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a3d      	ldr	r2, [pc, #244]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7ff f876 	bl	8003c1c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b34:	f7ff f872 	bl	8003c1c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e066      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b46:	4b35      	ldr	r3, [pc, #212]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x530>
 8004b52:	e05e      	b.n	8004c12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b54:	4b31      	ldr	r3, [pc, #196]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7ff f85c 	bl	8003c1c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7ff f858 	bl	8003c1c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e04c      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7a:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b86:	4b25      	ldr	r3, [pc, #148]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	4924      	ldr	r1, [pc, #144]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b8c:	4b25      	ldr	r3, [pc, #148]	@ (8004c24 <HAL_RCC_OscConfig+0x620>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60cb      	str	r3, [r1, #12]
 8004b92:	e03e      	b.n	8004c12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e039      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f003 0203 	and.w	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d12c      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d123      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d11b      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d113      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	3b01      	subs	r3, #1
 8004c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	019f800c 	.word	0x019f800c
 8004c24:	feeefffc 	.word	0xfeeefffc

08004c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e11e      	b.n	8004e7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b91      	ldr	r3, [pc, #580]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d910      	bls.n	8004c70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b8e      	ldr	r3, [pc, #568]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 020f 	bic.w	r2, r3, #15
 8004c56:	498c      	ldr	r1, [pc, #560]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b8a      	ldr	r3, [pc, #552]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e106      	b.n	8004e7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d073      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d129      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c84:	4b81      	ldr	r3, [pc, #516]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0f4      	b.n	8004e7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c94:	f000 f9d0 	bl	8005038 <RCC_GetSysClockFreqFromPLLSource>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4a7c      	ldr	r2, [pc, #496]	@ (8004e90 <HAL_RCC_ClockConfig+0x268>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d93f      	bls.n	8004d22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d033      	beq.n	8004d22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d12f      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cc2:	4b72      	ldr	r3, [pc, #456]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cca:	4a70      	ldr	r2, [pc, #448]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cd2:	2380      	movs	r3, #128	@ 0x80
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e024      	b.n	8004d22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0c6      	b.n	8004e7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0be      	b.n	8004e7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d00:	f000 f8ce 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4a61      	ldr	r2, [pc, #388]	@ (8004e90 <HAL_RCC_ClockConfig+0x268>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d909      	bls.n	8004d22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d16:	4a5d      	ldr	r2, [pc, #372]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d1e:	2380      	movs	r3, #128	@ 0x80
 8004d20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d22:	4b5a      	ldr	r3, [pc, #360]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4957      	ldr	r1, [pc, #348]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d34:	f7fe ff72 	bl	8003c1c <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3c:	f7fe ff6e 	bl	8003c1c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e095      	b.n	8004e7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	4b4e      	ldr	r3, [pc, #312]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 020c 	and.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1eb      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d023      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d7c:	4b43      	ldr	r3, [pc, #268]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a42      	ldr	r2, [pc, #264]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d94:	4b3d      	ldr	r3, [pc, #244]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004d9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da4:	4b39      	ldr	r3, [pc, #228]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4936      	ldr	r1, [pc, #216]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
 8004db6:	e008      	b.n	8004dca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b80      	cmp	r3, #128	@ 0x80
 8004dbc:	d105      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dbe:	4b33      	ldr	r3, [pc, #204]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4a32      	ldr	r2, [pc, #200]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004dc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dca:	4b2f      	ldr	r3, [pc, #188]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d21d      	bcs.n	8004e14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 020f 	bic.w	r2, r3, #15
 8004de0:	4929      	ldr	r1, [pc, #164]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004de8:	f7fe ff18 	bl	8003c1c <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df0:	f7fe ff14 	bl	8003c1c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e03b      	b.n	8004e7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <HAL_RCC_ClockConfig+0x260>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d1ed      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e20:	4b1a      	ldr	r3, [pc, #104]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4917      	ldr	r1, [pc, #92]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e3e:	4b13      	ldr	r3, [pc, #76]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	490f      	ldr	r1, [pc, #60]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e52:	f000 f825 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e56:	4602      	mov	r2, r0
 8004e58:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <HAL_RCC_ClockConfig+0x264>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	091b      	lsrs	r3, r3, #4
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	490c      	ldr	r1, [pc, #48]	@ (8004e94 <HAL_RCC_ClockConfig+0x26c>)
 8004e64:	5ccb      	ldrb	r3, [r1, r3]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e98 <HAL_RCC_ClockConfig+0x270>)
 8004e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e72:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <HAL_RCC_ClockConfig+0x274>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe f85e 	bl	8002f38 <HAL_InitTick>
 8004e7c:	4603      	mov	r3, r0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40022000 	.word	0x40022000
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	04c4b400 	.word	0x04c4b400
 8004e94:	0800e0bc 	.word	0x0800e0bc
 8004e98:	20000028 	.word	0x20000028
 8004e9c:	2000002c 	.word	0x2000002c

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	e047      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004eb8:	4b27      	ldr	r3, [pc, #156]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d102      	bne.n	8004eca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ec4:	4b26      	ldr	r3, [pc, #152]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	e03e      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004eca:	4b23      	ldr	r3, [pc, #140]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d136      	bne.n	8004f44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ed6:	4b20      	ldr	r3, [pc, #128]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	3301      	adds	r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d10c      	bne.n	8004f0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	4a16      	ldr	r2, [pc, #88]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004efe:	68d2      	ldr	r2, [r2, #12]
 8004f00:	0a12      	lsrs	r2, r2, #8
 8004f02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	617b      	str	r3, [r7, #20]
      break;
 8004f0c:	e00c      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f0e:	4a13      	ldr	r2, [pc, #76]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	4a10      	ldr	r2, [pc, #64]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f18:	68d2      	ldr	r2, [r2, #12]
 8004f1a:	0a12      	lsrs	r2, r2, #8
 8004f1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
      break;
 8004f26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	0e5b      	lsrs	r3, r3, #25
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	e001      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f48:	693b      	ldr	r3, [r7, #16]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	016e3600 	.word	0x016e3600

08004f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f68:	4b03      	ldr	r3, [pc, #12]	@ (8004f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000028 	.word	0x20000028

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f80:	f7ff fff0 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4904      	ldr	r1, [pc, #16]	@ (8004fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	0800e0cc 	.word	0x0800e0cc

08004fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fac:	f7ff ffda 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0adb      	lsrs	r3, r3, #11
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4904      	ldr	r1, [pc, #16]	@ (8004fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	0800e0cc 	.word	0x0800e0cc

08004fd4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004fe4:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0203 	and.w	r2, r3, #3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005008:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <HAL_RCC_GetClockConfig+0x60>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 020f 	and.w	r2, r3, #15
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	40022000 	.word	0x40022000

08005038 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800503e:	4b1e      	ldr	r3, [pc, #120]	@ (80050b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005048:	4b1b      	ldr	r3, [pc, #108]	@ (80050b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d10c      	bne.n	8005076 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800505c:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	4a14      	ldr	r2, [pc, #80]	@ (80050b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005066:	68d2      	ldr	r2, [r2, #12]
 8005068:	0a12      	lsrs	r2, r2, #8
 800506a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	617b      	str	r3, [r7, #20]
    break;
 8005074:	e00c      	b.n	8005090 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005076:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	4a0e      	ldr	r2, [pc, #56]	@ (80050b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005080:	68d2      	ldr	r2, [r2, #12]
 8005082:	0a12      	lsrs	r2, r2, #8
 8005084:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
    break;
 800508e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005090:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	0e5b      	lsrs	r3, r3, #25
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	3301      	adds	r3, #1
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050aa:	687b      	ldr	r3, [r7, #4]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40021000 	.word	0x40021000
 80050bc:	016e3600 	.word	0x016e3600
 80050c0:	00f42400 	.word	0x00f42400

080050c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050cc:	2300      	movs	r3, #0
 80050ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050d0:	2300      	movs	r3, #0
 80050d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8098 	beq.w	8005212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e6:	4b43      	ldr	r3, [pc, #268]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10d      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f2:	4b40      	ldr	r3, [pc, #256]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	4a3f      	ldr	r2, [pc, #252]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80050fe:	4b3d      	ldr	r3, [pc, #244]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510a:	2301      	movs	r3, #1
 800510c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800510e:	4b3a      	ldr	r3, [pc, #232]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a39      	ldr	r2, [pc, #228]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800511a:	f7fe fd7f 	bl	8003c1c <HAL_GetTick>
 800511e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005120:	e009      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005122:	f7fe fd7b 	bl	8003c1c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d902      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	74fb      	strb	r3, [r7, #19]
        break;
 8005134:	e005      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005136:	4b30      	ldr	r3, [pc, #192]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ef      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d159      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005148:	4b2a      	ldr	r3, [pc, #168]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005152:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01e      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	429a      	cmp	r2, r3
 8005162:	d019      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005164:	4b23      	ldr	r3, [pc, #140]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005170:	4b20      	ldr	r3, [pc, #128]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005176:	4a1f      	ldr	r2, [pc, #124]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005180:	4b1c      	ldr	r3, [pc, #112]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005186:	4a1b      	ldr	r2, [pc, #108]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005190:	4a18      	ldr	r2, [pc, #96]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d016      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fe fd3b 	bl	8003c1c <HAL_GetTick>
 80051a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a8:	e00b      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051aa:	f7fe fd37 	bl	8003c1c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d902      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	74fb      	strb	r3, [r7, #19]
            break;
 80051c0:	e006      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c2:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ec      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d6:	4b07      	ldr	r3, [pc, #28]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	4903      	ldr	r1, [pc, #12]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051ec:	e008      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	74bb      	strb	r3, [r7, #18]
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005200:	7c7b      	ldrb	r3, [r7, #17]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d105      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005206:	4ba6      	ldr	r3, [pc, #664]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520a:	4aa5      	ldr	r2, [pc, #660]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005210:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800521e:	4ba0      	ldr	r3, [pc, #640]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005224:	f023 0203 	bic.w	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	499c      	ldr	r1, [pc, #624]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005240:	4b97      	ldr	r3, [pc, #604]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005246:	f023 020c 	bic.w	r2, r3, #12
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	4994      	ldr	r1, [pc, #592]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005262:	4b8f      	ldr	r3, [pc, #572]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	498b      	ldr	r1, [pc, #556]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005284:	4b86      	ldr	r3, [pc, #536]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	4983      	ldr	r1, [pc, #524]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052a6:	4b7e      	ldr	r3, [pc, #504]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	497a      	ldr	r1, [pc, #488]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052c8:	4b75      	ldr	r3, [pc, #468]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	4972      	ldr	r1, [pc, #456]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ea:	4b6d      	ldr	r3, [pc, #436]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	4969      	ldr	r1, [pc, #420]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800530c:	4b64      	ldr	r3, [pc, #400]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4961      	ldr	r1, [pc, #388]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800532e:	4b5c      	ldr	r3, [pc, #368]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005334:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	4958      	ldr	r1, [pc, #352]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005350:	4b53      	ldr	r3, [pc, #332]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	4950      	ldr	r1, [pc, #320]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800536e:	d105      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005370:	4b4b      	ldr	r3, [pc, #300]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a4a      	ldr	r2, [pc, #296]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005384:	2b00      	cmp	r3, #0
 8005386:	d015      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005388:	4b45      	ldr	r3, [pc, #276]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	4942      	ldr	r1, [pc, #264]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a6:	d105      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a8:	4b3d      	ldr	r3, [pc, #244]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4a3c      	ldr	r2, [pc, #240]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053c0:	4b37      	ldr	r3, [pc, #220]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	4934      	ldr	r1, [pc, #208]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053de:	d105      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e0:	4b2f      	ldr	r3, [pc, #188]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4a2e      	ldr	r2, [pc, #184]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d015      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f8:	4b29      	ldr	r3, [pc, #164]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005406:	4926      	ldr	r1, [pc, #152]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005416:	d105      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005418:	4b21      	ldr	r3, [pc, #132]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a20      	ldr	r2, [pc, #128]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005422:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d015      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005430:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005436:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	4918      	ldr	r1, [pc, #96]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005450:	4b13      	ldr	r3, [pc, #76]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4a12      	ldr	r2, [pc, #72]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800545a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d015      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005468:	4b0d      	ldr	r3, [pc, #52]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	490a      	ldr	r1, [pc, #40]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005486:	d105      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005488:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4a04      	ldr	r2, [pc, #16]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005492:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005494:	7cbb      	ldrb	r3, [r7, #18]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000

080054a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e049      	b.n	800554a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fd fb52 	bl	8002b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f001 f8a8 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d001      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e04a      	b.n	8005602 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a21      	ldr	r2, [pc, #132]	@ (8005610 <HAL_TIM_Base_Start_IT+0xbc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x6c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x6c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <HAL_TIM_Base_Start_IT+0xc0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x6c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005618 <HAL_TIM_Base_Start_IT+0xc4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x6c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <HAL_TIM_Base_Start_IT+0xc8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x6c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <HAL_TIM_Base_Start_IT+0xcc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d115      	bne.n	80055ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b17      	ldr	r3, [pc, #92]	@ (8005624 <HAL_TIM_Base_Start_IT+0xd0>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d015      	beq.n	80055fe <HAL_TIM_Base_Start_IT+0xaa>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d8:	d011      	beq.n	80055fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	e008      	b.n	80055fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e000      	b.n	8005600 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40013400 	.word	0x40013400
 8005620:	40014000 	.word	0x40014000
 8005624:	00010007 	.word	0x00010007

08005628 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e049      	b.n	80056ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f841 	bl	80056d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f000 ffe6 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_TIM_PWM_Start+0x24>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e03c      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b04      	cmp	r3, #4
 8005714:	d109      	bne.n	800572a <HAL_TIM_PWM_Start+0x3e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	e02f      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d109      	bne.n	8005744 <HAL_TIM_PWM_Start+0x58>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	e022      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b0c      	cmp	r3, #12
 8005748:	d109      	bne.n	800575e <HAL_TIM_PWM_Start+0x72>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e015      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b10      	cmp	r3, #16
 8005762:	d109      	bne.n	8005778 <HAL_TIM_PWM_Start+0x8c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e008      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e097      	b.n	80058c2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xb6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057a0:	e023      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xc6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b0:	e01b      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0xd6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c0:	e013      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xe6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057d0:	e00b      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Start+0xf6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e0:	e003      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2201      	movs	r2, #1
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fc6c 	bl	80070d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a33      	ldr	r2, [pc, #204]	@ (80058cc <HAL_TIM_PWM_Start+0x1e0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a32      	ldr	r2, [pc, #200]	@ (80058d0 <HAL_TIM_PWM_Start+0x1e4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a30      	ldr	r2, [pc, #192]	@ (80058d4 <HAL_TIM_PWM_Start+0x1e8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2f      	ldr	r2, [pc, #188]	@ (80058d8 <HAL_TIM_PWM_Start+0x1ec>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <HAL_TIM_PWM_Start+0x1f0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_Start+0x142>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_TIM_PWM_Start+0x144>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005842:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a20      	ldr	r2, [pc, #128]	@ (80058cc <HAL_TIM_PWM_Start+0x1e0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_TIM_PWM_Start+0x194>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d013      	beq.n	8005880 <HAL_TIM_PWM_Start+0x194>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a20      	ldr	r2, [pc, #128]	@ (80058e0 <HAL_TIM_PWM_Start+0x1f4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_PWM_Start+0x194>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <HAL_TIM_PWM_Start+0x1f8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_TIM_PWM_Start+0x194>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a17      	ldr	r2, [pc, #92]	@ (80058d0 <HAL_TIM_PWM_Start+0x1e4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_PWM_Start+0x194>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a16      	ldr	r2, [pc, #88]	@ (80058d4 <HAL_TIM_PWM_Start+0x1e8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d115      	bne.n	80058ac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	4b18      	ldr	r3, [pc, #96]	@ (80058e8 <HAL_TIM_PWM_Start+0x1fc>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d015      	beq.n	80058be <HAL_TIM_PWM_Start+0x1d2>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005898:	d011      	beq.n	80058be <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	e008      	b.n	80058be <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40013400 	.word	0x40013400
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	00010007 	.word	0x00010007

080058ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e049      	b.n	8005992 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f841 	bl	800599a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f000 fe84 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_IC_Start_IT+0x1e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	e023      	b.n	8005a16 <HAL_TIM_IC_Start_IT+0x66>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d104      	bne.n	80059de <HAL_TIM_IC_Start_IT+0x2e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	e01b      	b.n	8005a16 <HAL_TIM_IC_Start_IT+0x66>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_IC_Start_IT+0x3e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	e013      	b.n	8005a16 <HAL_TIM_IC_Start_IT+0x66>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_IC_Start_IT+0x4e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e00b      	b.n	8005a16 <HAL_TIM_IC_Start_IT+0x66>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_IC_Start_IT+0x5e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e003      	b.n	8005a16 <HAL_TIM_IC_Start_IT+0x66>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <HAL_TIM_IC_Start_IT+0x78>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	e013      	b.n	8005a50 <HAL_TIM_IC_Start_IT+0xa0>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d104      	bne.n	8005a38 <HAL_TIM_IC_Start_IT+0x88>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e00b      	b.n	8005a50 <HAL_TIM_IC_Start_IT+0xa0>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d104      	bne.n	8005a48 <HAL_TIM_IC_Start_IT+0x98>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e003      	b.n	8005a50 <HAL_TIM_IC_Start_IT+0xa0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d102      	bne.n	8005a5e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a58:	7b7b      	ldrb	r3, [r7, #13]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d001      	beq.n	8005a62 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0d8      	b.n	8005c14 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_IC_Start_IT+0xc2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a70:	e023      	b.n	8005aba <HAL_TIM_IC_Start_IT+0x10a>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_IC_Start_IT+0xd2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a80:	e01b      	b.n	8005aba <HAL_TIM_IC_Start_IT+0x10a>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_IC_Start_IT+0xe2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a90:	e013      	b.n	8005aba <HAL_TIM_IC_Start_IT+0x10a>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_IC_Start_IT+0xf2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aa0:	e00b      	b.n	8005aba <HAL_TIM_IC_Start_IT+0x10a>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_IC_Start_IT+0x102>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab0:	e003      	b.n	8005aba <HAL_TIM_IC_Start_IT+0x10a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_IC_Start_IT+0x11a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac8:	e013      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x142>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_IC_Start_IT+0x12a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad8:	e00b      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x142>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Start_IT+0x13a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ae8:	e003      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x142>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d841      	bhi.n	8005b7c <HAL_TIM_IC_Start_IT+0x1cc>
 8005af8:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <HAL_TIM_IC_Start_IT+0x150>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b35 	.word	0x08005b35
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005b7d 	.word	0x08005b7d
 8005b0c:	08005b7d 	.word	0x08005b7d
 8005b10:	08005b47 	.word	0x08005b47
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005b7d 	.word	0x08005b7d
 8005b1c:	08005b7d 	.word	0x08005b7d
 8005b20:	08005b59 	.word	0x08005b59
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005b7d 	.word	0x08005b7d
 8005b30:	08005b6b 	.word	0x08005b6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0202 	orr.w	r2, r2, #2
 8005b42:	60da      	str	r2, [r3, #12]
      break;
 8005b44:	e01d      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0204 	orr.w	r2, r2, #4
 8005b54:	60da      	str	r2, [r3, #12]
      break;
 8005b56:	e014      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0208 	orr.w	r2, r2, #8
 8005b66:	60da      	str	r2, [r3, #12]
      break;
 8005b68:	e00b      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0210 	orr.w	r2, r2, #16
 8005b78:	60da      	str	r2, [r3, #12]
      break;
 8005b7a:	e002      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d144      	bne.n	8005c12 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fa9d 	bl	80070d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a20      	ldr	r2, [pc, #128]	@ (8005c1c <HAL_TIM_IC_Start_IT+0x26c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d018      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x222>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba8:	d013      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x222>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1c      	ldr	r2, [pc, #112]	@ (8005c20 <HAL_TIM_IC_Start_IT+0x270>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x222>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c24 <HAL_TIM_IC_Start_IT+0x274>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x222>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a19      	ldr	r2, [pc, #100]	@ (8005c28 <HAL_TIM_IC_Start_IT+0x278>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x222>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a17      	ldr	r2, [pc, #92]	@ (8005c2c <HAL_TIM_IC_Start_IT+0x27c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d115      	bne.n	8005bfe <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <HAL_TIM_IC_Start_IT+0x280>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b06      	cmp	r3, #6
 8005be2:	d015      	beq.n	8005c10 <HAL_TIM_IC_Start_IT+0x260>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bea:	d011      	beq.n	8005c10 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfc:	e008      	b.n	8005c10 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e000      	b.n	8005c12 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	00010007 	.word	0x00010007

08005c34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e097      	b.n	8005d78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fc ff3d 	bl	8002adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005c78:	f023 0307 	bic.w	r3, r3, #7
 8005c7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3304      	adds	r3, #4
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f000 fcd5 	bl	8006638 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005cd4:	f023 030c 	bic.w	r3, r3, #12
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ce0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	011a      	lsls	r2, r3, #4
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	031b      	lsls	r3, r3, #12
 8005d04:	4313      	orrs	r3, r2
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	4313      	orrs	r3, r2
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d020      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01b      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0202 	mvn.w	r2, #2
 8005db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fc fd4a 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fc12 	bl	80065fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fc19 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d020      	beq.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01b      	beq.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0204 	mvn.w	r2, #4
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc fd24 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fbec 	bl	80065fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fbf3 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d020      	beq.n	8005e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0208 	mvn.w	r2, #8
 8005e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2204      	movs	r2, #4
 8005e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fc fcfe 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8005e68:	e005      	b.n	8005e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fbc6 	bl	80065fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbcd 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d020      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01b      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0210 	mvn.w	r2, #16
 8005e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fc fcd8 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fba0 	bl	80065fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fba7 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00c      	beq.n	8005eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0201 	mvn.w	r2, #1
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fc fdb6 	bl	8002a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00c      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 fa19 	bl	800734c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00c      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fa11 	bl	8007360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00c      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fb61 	bl	8006624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f06f 0220 	mvn.w	r2, #32
 8005f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 f9d9 	bl	8007338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00c      	beq.n	8005faa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 f9e5 	bl	8007374 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f9dd 	bl	8007388 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f9d5 	bl	800739c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00c      	beq.n	8006016 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800600e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 f9cd 	bl	80073b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006016:	bf00      	nop
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006038:	2302      	movs	r3, #2
 800603a:	e088      	b.n	800614e <HAL_TIM_IC_ConfigChannel+0x130>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d11b      	bne.n	8006082 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800605a:	f000 fe7f 	bl	8006d5c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 020c 	bic.w	r2, r2, #12
 800606c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6999      	ldr	r1, [r3, #24]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	619a      	str	r2, [r3, #24]
 8006080:	e060      	b.n	8006144 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b04      	cmp	r3, #4
 8006086:	d11c      	bne.n	80060c2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006098:	f000 fef7 	bl	8006e8a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6999      	ldr	r1, [r3, #24]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	021a      	lsls	r2, r3, #8
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	619a      	str	r2, [r3, #24]
 80060c0:	e040      	b.n	8006144 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d11b      	bne.n	8006100 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060d8:	f000 ff44 	bl	8006f64 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 020c 	bic.w	r2, r2, #12
 80060ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69d9      	ldr	r1, [r3, #28]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	61da      	str	r2, [r3, #28]
 80060fe:	e021      	b.n	8006144 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b0c      	cmp	r3, #12
 8006104:	d11c      	bne.n	8006140 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006116:	f000 ff61 	bl	8006fdc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006128:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69d9      	ldr	r1, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	021a      	lsls	r2, r3, #8
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	61da      	str	r2, [r3, #28]
 800613e:	e001      	b.n	8006144 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006172:	2302      	movs	r3, #2
 8006174:	e0ff      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b14      	cmp	r3, #20
 8006182:	f200 80f0 	bhi.w	8006366 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061e1 	.word	0x080061e1
 8006190:	08006367 	.word	0x08006367
 8006194:	08006367 	.word	0x08006367
 8006198:	08006367 	.word	0x08006367
 800619c:	08006221 	.word	0x08006221
 80061a0:	08006367 	.word	0x08006367
 80061a4:	08006367 	.word	0x08006367
 80061a8:	08006367 	.word	0x08006367
 80061ac:	08006263 	.word	0x08006263
 80061b0:	08006367 	.word	0x08006367
 80061b4:	08006367 	.word	0x08006367
 80061b8:	08006367 	.word	0x08006367
 80061bc:	080062a3 	.word	0x080062a3
 80061c0:	08006367 	.word	0x08006367
 80061c4:	08006367 	.word	0x08006367
 80061c8:	08006367 	.word	0x08006367
 80061cc:	080062e5 	.word	0x080062e5
 80061d0:	08006367 	.word	0x08006367
 80061d4:	08006367 	.word	0x08006367
 80061d8:	08006367 	.word	0x08006367
 80061dc:	08006325 	.word	0x08006325
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fac2 	bl	8006770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0208 	orr.w	r2, r2, #8
 80061fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0204 	bic.w	r2, r2, #4
 800620a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6999      	ldr	r1, [r3, #24]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	619a      	str	r2, [r3, #24]
      break;
 800621e:	e0a5      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fb32 	bl	8006890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800623a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800624a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6999      	ldr	r1, [r3, #24]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	021a      	lsls	r2, r3, #8
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	619a      	str	r2, [r3, #24]
      break;
 8006260:	e084      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fb9b 	bl	80069a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0208 	orr.w	r2, r2, #8
 800627c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0204 	bic.w	r2, r2, #4
 800628c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69d9      	ldr	r1, [r3, #28]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	61da      	str	r2, [r3, #28]
      break;
 80062a0:	e064      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fc03 	bl	8006ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69d9      	ldr	r1, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	021a      	lsls	r2, r3, #8
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	61da      	str	r2, [r3, #28]
      break;
 80062e2:	e043      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fc6c 	bl	8006bc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0208 	orr.w	r2, r2, #8
 80062fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0204 	bic.w	r2, r2, #4
 800630e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006322:	e023      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fcb0 	bl	8006c90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800633e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800634e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	021a      	lsls	r2, r3, #8
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006364:	e002      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
      break;
 800636a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop

08006380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIM_ConfigClockSource+0x1c>
 8006398:	2302      	movs	r3, #2
 800639a:	e0de      	b.n	800655a <HAL_TIM_ConfigClockSource+0x1da>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80063ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a63      	ldr	r2, [pc, #396]	@ (8006564 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	f000 80a9 	beq.w	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 80063dc:	4a61      	ldr	r2, [pc, #388]	@ (8006564 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	f200 80ae 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 80063e4:	4a60      	ldr	r2, [pc, #384]	@ (8006568 <HAL_TIM_ConfigClockSource+0x1e8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	f000 80a1 	beq.w	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 80063ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006568 <HAL_TIM_ConfigClockSource+0x1e8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f200 80a6 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 80063f4:	4a5d      	ldr	r2, [pc, #372]	@ (800656c <HAL_TIM_ConfigClockSource+0x1ec>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	f000 8099 	beq.w	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 80063fc:	4a5b      	ldr	r2, [pc, #364]	@ (800656c <HAL_TIM_ConfigClockSource+0x1ec>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f200 809e 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006404:	4a5a      	ldr	r2, [pc, #360]	@ (8006570 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f000 8091 	beq.w	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 800640c:	4a58      	ldr	r2, [pc, #352]	@ (8006570 <HAL_TIM_ConfigClockSource+0x1f0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	f200 8096 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006414:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006418:	f000 8089 	beq.w	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 800641c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006420:	f200 808e 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006428:	d03e      	beq.n	80064a8 <HAL_TIM_ConfigClockSource+0x128>
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800642e:	f200 8087 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006436:	f000 8086 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1c6>
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800643e:	d87f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006440:	2b70      	cmp	r3, #112	@ 0x70
 8006442:	d01a      	beq.n	800647a <HAL_TIM_ConfigClockSource+0xfa>
 8006444:	2b70      	cmp	r3, #112	@ 0x70
 8006446:	d87b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006448:	2b60      	cmp	r3, #96	@ 0x60
 800644a:	d050      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x16e>
 800644c:	2b60      	cmp	r3, #96	@ 0x60
 800644e:	d877      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006450:	2b50      	cmp	r3, #80	@ 0x50
 8006452:	d03c      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x14e>
 8006454:	2b50      	cmp	r3, #80	@ 0x50
 8006456:	d873      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006458:	2b40      	cmp	r3, #64	@ 0x40
 800645a:	d058      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x18e>
 800645c:	2b40      	cmp	r3, #64	@ 0x40
 800645e:	d86f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006460:	2b30      	cmp	r3, #48	@ 0x30
 8006462:	d064      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 8006464:	2b30      	cmp	r3, #48	@ 0x30
 8006466:	d86b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006468:	2b20      	cmp	r3, #32
 800646a:	d060      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d867      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d05c      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 8006474:	2b10      	cmp	r3, #16
 8006476:	d05a      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x1ae>
 8006478:	e062      	b.n	8006540 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648a:	f000 fe01 	bl	8007090 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800649c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	609a      	str	r2, [r3, #8]
      break;
 80064a6:	e04f      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064b8:	f000 fdea 	bl	8007090 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064ca:	609a      	str	r2, [r3, #8]
      break;
 80064cc:	e03c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064da:	461a      	mov	r2, r3
 80064dc:	f000 fca6 	bl	8006e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2150      	movs	r1, #80	@ 0x50
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fdb5 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 80064ec:	e02c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fa:	461a      	mov	r2, r3
 80064fc:	f000 fd02 	bl	8006f04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2160      	movs	r1, #96	@ 0x60
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fda5 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 800650c:	e01c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651a:	461a      	mov	r2, r3
 800651c:	f000 fc86 	bl	8006e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2140      	movs	r1, #64	@ 0x40
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fd95 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 800652c:	e00c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f000 fd8c 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 800653e:	e003      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
      break;
 8006544:	e000      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	00100070 	.word	0x00100070
 8006568:	00100040 	.word	0x00100040
 800656c:	00100030 	.word	0x00100030
 8006570:	00100020 	.word	0x00100020

08006574 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b0c      	cmp	r3, #12
 8006586:	d831      	bhi.n	80065ec <HAL_TIM_ReadCapturedValue+0x78>
 8006588:	a201      	add	r2, pc, #4	@ (adr r2, 8006590 <HAL_TIM_ReadCapturedValue+0x1c>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065c5 	.word	0x080065c5
 8006594:	080065ed 	.word	0x080065ed
 8006598:	080065ed 	.word	0x080065ed
 800659c:	080065ed 	.word	0x080065ed
 80065a0:	080065cf 	.word	0x080065cf
 80065a4:	080065ed 	.word	0x080065ed
 80065a8:	080065ed 	.word	0x080065ed
 80065ac:	080065ed 	.word	0x080065ed
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065ed 	.word	0x080065ed
 80065b8:	080065ed 	.word	0x080065ed
 80065bc:	080065ed 	.word	0x080065ed
 80065c0:	080065e3 	.word	0x080065e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ca:	60fb      	str	r3, [r7, #12]

      break;
 80065cc:	e00f      	b.n	80065ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	60fb      	str	r3, [r7, #12]

      break;
 80065d6:	e00a      	b.n	80065ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065de:	60fb      	str	r3, [r7, #12]

      break;
 80065e0:	e005      	b.n	80065ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e8:	60fb      	str	r3, [r7, #12]

      break;
 80065ea:	e000      	b.n	80065ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065ec:	bf00      	nop
  }

  return tmpreg;
 80065ee:	68fb      	ldr	r3, [r7, #12]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a42      	ldr	r2, [pc, #264]	@ (8006754 <TIM_Base_SetConfig+0x11c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00f      	beq.n	8006670 <TIM_Base_SetConfig+0x38>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006656:	d00b      	beq.n	8006670 <TIM_Base_SetConfig+0x38>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a3f      	ldr	r2, [pc, #252]	@ (8006758 <TIM_Base_SetConfig+0x120>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <TIM_Base_SetConfig+0x38>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3e      	ldr	r2, [pc, #248]	@ (800675c <TIM_Base_SetConfig+0x124>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_Base_SetConfig+0x38>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3d      	ldr	r2, [pc, #244]	@ (8006760 <TIM_Base_SetConfig+0x128>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d108      	bne.n	8006682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a33      	ldr	r2, [pc, #204]	@ (8006754 <TIM_Base_SetConfig+0x11c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01b      	beq.n	80066c2 <TIM_Base_SetConfig+0x8a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d017      	beq.n	80066c2 <TIM_Base_SetConfig+0x8a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a30      	ldr	r2, [pc, #192]	@ (8006758 <TIM_Base_SetConfig+0x120>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <TIM_Base_SetConfig+0x8a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2f      	ldr	r2, [pc, #188]	@ (800675c <TIM_Base_SetConfig+0x124>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_Base_SetConfig+0x8a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006760 <TIM_Base_SetConfig+0x128>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_Base_SetConfig+0x8a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006764 <TIM_Base_SetConfig+0x12c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_Base_SetConfig+0x8a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006768 <TIM_Base_SetConfig+0x130>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_Base_SetConfig+0x8a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2b      	ldr	r2, [pc, #172]	@ (800676c <TIM_Base_SetConfig+0x134>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a16      	ldr	r2, [pc, #88]	@ (8006754 <TIM_Base_SetConfig+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00f      	beq.n	8006720 <TIM_Base_SetConfig+0xe8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a17      	ldr	r2, [pc, #92]	@ (8006760 <TIM_Base_SetConfig+0x128>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00b      	beq.n	8006720 <TIM_Base_SetConfig+0xe8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a16      	ldr	r2, [pc, #88]	@ (8006764 <TIM_Base_SetConfig+0x12c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <TIM_Base_SetConfig+0xe8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a15      	ldr	r2, [pc, #84]	@ (8006768 <TIM_Base_SetConfig+0x130>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_Base_SetConfig+0xe8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a14      	ldr	r2, [pc, #80]	@ (800676c <TIM_Base_SetConfig+0x134>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d103      	bne.n	8006728 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d105      	bne.n	8006746 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f023 0201 	bic.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	611a      	str	r2, [r3, #16]
  }
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40013400 	.word	0x40013400
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800

08006770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	f023 0201 	bic.w	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f023 0302 	bic.w	r3, r3, #2
 80067bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a2c      	ldr	r2, [pc, #176]	@ (800687c <TIM_OC1_SetConfig+0x10c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00f      	beq.n	80067f0 <TIM_OC1_SetConfig+0x80>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006880 <TIM_OC1_SetConfig+0x110>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_OC1_SetConfig+0x80>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a2a      	ldr	r2, [pc, #168]	@ (8006884 <TIM_OC1_SetConfig+0x114>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_OC1_SetConfig+0x80>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a29      	ldr	r2, [pc, #164]	@ (8006888 <TIM_OC1_SetConfig+0x118>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_OC1_SetConfig+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a28      	ldr	r2, [pc, #160]	@ (800688c <TIM_OC1_SetConfig+0x11c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10c      	bne.n	800680a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0308 	bic.w	r3, r3, #8
 80067f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f023 0304 	bic.w	r3, r3, #4
 8006808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a1b      	ldr	r2, [pc, #108]	@ (800687c <TIM_OC1_SetConfig+0x10c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00f      	beq.n	8006832 <TIM_OC1_SetConfig+0xc2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a1a      	ldr	r2, [pc, #104]	@ (8006880 <TIM_OC1_SetConfig+0x110>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00b      	beq.n	8006832 <TIM_OC1_SetConfig+0xc2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a19      	ldr	r2, [pc, #100]	@ (8006884 <TIM_OC1_SetConfig+0x114>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d007      	beq.n	8006832 <TIM_OC1_SetConfig+0xc2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a18      	ldr	r2, [pc, #96]	@ (8006888 <TIM_OC1_SetConfig+0x118>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC1_SetConfig+0xc2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a17      	ldr	r2, [pc, #92]	@ (800688c <TIM_OC1_SetConfig+0x11c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d111      	bne.n	8006856 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40012c00 	.word	0x40012c00
 8006880:	40013400 	.word	0x40013400
 8006884:	40014000 	.word	0x40014000
 8006888:	40014400 	.word	0x40014400
 800688c:	40014800 	.word	0x40014800

08006890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f023 0210 	bic.w	r2, r3, #16
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0320 	bic.w	r3, r3, #32
 80068de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a28      	ldr	r2, [pc, #160]	@ (8006990 <TIM_OC2_SetConfig+0x100>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d003      	beq.n	80068fc <TIM_OC2_SetConfig+0x6c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a27      	ldr	r2, [pc, #156]	@ (8006994 <TIM_OC2_SetConfig+0x104>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d10d      	bne.n	8006918 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1d      	ldr	r2, [pc, #116]	@ (8006990 <TIM_OC2_SetConfig+0x100>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC2_SetConfig+0xb0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a1c      	ldr	r2, [pc, #112]	@ (8006994 <TIM_OC2_SetConfig+0x104>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC2_SetConfig+0xb0>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1b      	ldr	r2, [pc, #108]	@ (8006998 <TIM_OC2_SetConfig+0x108>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC2_SetConfig+0xb0>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1a      	ldr	r2, [pc, #104]	@ (800699c <TIM_OC2_SetConfig+0x10c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC2_SetConfig+0xb0>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a19      	ldr	r2, [pc, #100]	@ (80069a0 <TIM_OC2_SetConfig+0x110>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d113      	bne.n	8006968 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800694e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800

080069a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a27      	ldr	r2, [pc, #156]	@ (8006aa0 <TIM_OC3_SetConfig+0xfc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d003      	beq.n	8006a0e <TIM_OC3_SetConfig+0x6a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a26      	ldr	r2, [pc, #152]	@ (8006aa4 <TIM_OC3_SetConfig+0x100>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d10d      	bne.n	8006a2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa0 <TIM_OC3_SetConfig+0xfc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00f      	beq.n	8006a52 <TIM_OC3_SetConfig+0xae>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa4 <TIM_OC3_SetConfig+0x100>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00b      	beq.n	8006a52 <TIM_OC3_SetConfig+0xae>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa8 <TIM_OC3_SetConfig+0x104>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d007      	beq.n	8006a52 <TIM_OC3_SetConfig+0xae>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a19      	ldr	r2, [pc, #100]	@ (8006aac <TIM_OC3_SetConfig+0x108>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_OC3_SetConfig+0xae>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a18      	ldr	r2, [pc, #96]	@ (8006ab0 <TIM_OC3_SetConfig+0x10c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d113      	bne.n	8006a7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	621a      	str	r2, [r3, #32]
}
 8006a94:	bf00      	nop
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40013400 	.word	0x40013400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	031b      	lsls	r3, r3, #12
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a28      	ldr	r2, [pc, #160]	@ (8006bb4 <TIM_OC4_SetConfig+0x100>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_OC4_SetConfig+0x6c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a27      	ldr	r2, [pc, #156]	@ (8006bb8 <TIM_OC4_SetConfig+0x104>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10d      	bne.n	8006b3c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	031b      	lsls	r3, r3, #12
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <TIM_OC4_SetConfig+0x100>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_OC4_SetConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb8 <TIM_OC4_SetConfig+0x104>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_OC4_SetConfig+0xb0>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bbc <TIM_OC4_SetConfig+0x108>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC4_SetConfig+0xb0>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc0 <TIM_OC4_SetConfig+0x10c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC4_SetConfig+0xb0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a19      	ldr	r2, [pc, #100]	@ (8006bc4 <TIM_OC4_SetConfig+0x110>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d113      	bne.n	8006b8c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	019b      	lsls	r3, r3, #6
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40014400 	.word	0x40014400
 8006bc4:	40014800 	.word	0x40014800

08006bc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006c0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <TIM_OC5_SetConfig+0xb4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00f      	beq.n	8006c42 <TIM_OC5_SetConfig+0x7a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a16      	ldr	r2, [pc, #88]	@ (8006c80 <TIM_OC5_SetConfig+0xb8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00b      	beq.n	8006c42 <TIM_OC5_SetConfig+0x7a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a15      	ldr	r2, [pc, #84]	@ (8006c84 <TIM_OC5_SetConfig+0xbc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d007      	beq.n	8006c42 <TIM_OC5_SetConfig+0x7a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a14      	ldr	r2, [pc, #80]	@ (8006c88 <TIM_OC5_SetConfig+0xc0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d003      	beq.n	8006c42 <TIM_OC5_SetConfig+0x7a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a13      	ldr	r2, [pc, #76]	@ (8006c8c <TIM_OC5_SetConfig+0xc4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d109      	bne.n	8006c56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	621a      	str	r2, [r3, #32]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40013400 	.word	0x40013400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	051b      	lsls	r3, r3, #20
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a18      	ldr	r2, [pc, #96]	@ (8006d48 <TIM_OC6_SetConfig+0xb8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00f      	beq.n	8006d0c <TIM_OC6_SetConfig+0x7c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a17      	ldr	r2, [pc, #92]	@ (8006d4c <TIM_OC6_SetConfig+0xbc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00b      	beq.n	8006d0c <TIM_OC6_SetConfig+0x7c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a16      	ldr	r2, [pc, #88]	@ (8006d50 <TIM_OC6_SetConfig+0xc0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d007      	beq.n	8006d0c <TIM_OC6_SetConfig+0x7c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a15      	ldr	r2, [pc, #84]	@ (8006d54 <TIM_OC6_SetConfig+0xc4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC6_SetConfig+0x7c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a14      	ldr	r2, [pc, #80]	@ (8006d58 <TIM_OC6_SetConfig+0xc8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d109      	bne.n	8006d20 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40013400 	.word	0x40013400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800

08006d5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	f023 0201 	bic.w	r2, r3, #1
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a24      	ldr	r2, [pc, #144]	@ (8006e18 <TIM_TI1_SetConfig+0xbc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d013      	beq.n	8006db2 <TIM_TI1_SetConfig+0x56>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d90:	d00f      	beq.n	8006db2 <TIM_TI1_SetConfig+0x56>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a21      	ldr	r2, [pc, #132]	@ (8006e1c <TIM_TI1_SetConfig+0xc0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00b      	beq.n	8006db2 <TIM_TI1_SetConfig+0x56>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4a20      	ldr	r2, [pc, #128]	@ (8006e20 <TIM_TI1_SetConfig+0xc4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d007      	beq.n	8006db2 <TIM_TI1_SetConfig+0x56>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e24 <TIM_TI1_SetConfig+0xc8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_TI1_SetConfig+0x56>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4a1e      	ldr	r2, [pc, #120]	@ (8006e28 <TIM_TI1_SetConfig+0xcc>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d101      	bne.n	8006db6 <TIM_TI1_SetConfig+0x5a>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <TIM_TI1_SetConfig+0x5c>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d008      	beq.n	8006dce <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	e003      	b.n	8006dd6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f043 0301 	orr.w	r3, r3, #1
 8006dd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f023 030a 	bic.w	r3, r3, #10
 8006df0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f003 030a 	and.w	r3, r3, #10
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40013400 	.word	0x40013400
 8006e28:	40014000 	.word	0x40014000

08006e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f023 0201 	bic.w	r2, r3, #1
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f023 030a 	bic.w	r3, r3, #10
 8006e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b087      	sub	sp, #28
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0210 	bic.w	r2, r3, #16
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	031b      	lsls	r3, r3, #12
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006edc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0210 	bic.w	r2, r3, #16
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	031b      	lsls	r3, r3, #12
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	621a      	str	r2, [r3, #32]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f023 0303 	bic.w	r3, r3, #3
 8006f90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fa0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	021b      	lsls	r3, r3, #8
 8006fba:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	621a      	str	r2, [r3, #32]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007008:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800701a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	031b      	lsls	r3, r3, #12
 8007020:	b29b      	uxth	r3, r3
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800702e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	031b      	lsls	r3, r3, #12
 8007034:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800706c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	f043 0307 	orr.w	r3, r3, #7
 800707c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	609a      	str	r2, [r3, #8]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	021a      	lsls	r2, r3, #8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	2201      	movs	r2, #1
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1a      	ldr	r2, [r3, #32]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	43db      	mvns	r3, r3
 80070f2:	401a      	ands	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	fa01 f303 	lsl.w	r3, r1, r3
 8007108:	431a      	orrs	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	621a      	str	r2, [r3, #32]
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007130:	2302      	movs	r3, #2
 8007132:	e065      	b.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a2c      	ldr	r2, [pc, #176]	@ (800720c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2b      	ldr	r2, [pc, #172]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d108      	bne.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800716e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007184:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071aa:	d013      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a18      	ldr	r2, [pc, #96]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a17      	ldr	r2, [pc, #92]	@ (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a12      	ldr	r2, [pc, #72]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a13      	ldr	r2, [pc, #76]	@ (800721c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10c      	bne.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40012c00 	.word	0x40012c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40014000 	.word	0x40014000

08007220 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007238:	2302      	movs	r3, #2
 800723a:	e073      	b.n	8007324 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	041b      	lsls	r3, r3, #16
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a19      	ldr	r2, [pc, #100]	@ (8007330 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a18      	ldr	r2, [pc, #96]	@ (8007334 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d11c      	bne.n	8007312 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e2:	051b      	lsls	r3, r3, #20
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40013400 	.word	0x40013400

08007338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e042      	b.n	800745c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fb fd1d 	bl	8002e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2224      	movs	r2, #36	@ 0x24
 80073f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fb82 	bl	8007b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8b3 	bl	8007580 <UART_SetConfig>
 800741a:	4603      	mov	r3, r0
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e01b      	b.n	800745c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc01 	bl	8007c5c <UART_CheckIdleState>
 800745a:	4603      	mov	r3, r0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	@ 0x28
 8007468:	af02      	add	r7, sp, #8
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800747a:	2b20      	cmp	r3, #32
 800747c:	d17b      	bne.n	8007576 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_UART_Transmit+0x26>
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e074      	b.n	8007578 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2221      	movs	r2, #33	@ 0x21
 800749a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749e:	f7fc fbbd 	bl	8003c1c <HAL_GetTick>
 80074a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074bc:	d108      	bne.n	80074d0 <HAL_UART_Transmit+0x6c>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	e003      	b.n	80074d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d8:	e030      	b.n	800753c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2200      	movs	r2, #0
 80074e2:	2180      	movs	r1, #128	@ 0x80
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fc63 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e03d      	b.n	8007578 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10b      	bne.n	800751a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007510:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	3302      	adds	r3, #2
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	e007      	b.n	800752a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	781a      	ldrb	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	3301      	adds	r3, #1
 8007528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1c8      	bne.n	80074da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2200      	movs	r2, #0
 8007550:	2140      	movs	r1, #64	@ 0x40
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 fc2c 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e006      	b.n	8007578 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007576:	2302      	movs	r3, #2
  }
}
 8007578:	4618      	mov	r0, r3
 800757a:	3720      	adds	r7, #32
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007584:	b08c      	sub	sp, #48	@ 0x30
 8007586:	af00      	add	r7, sp, #0
 8007588:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	431a      	orrs	r2, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	431a      	orrs	r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4bab      	ldr	r3, [pc, #684]	@ (800785c <UART_SetConfig+0x2dc>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075b8:	430b      	orrs	r3, r1
 80075ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4aa0      	ldr	r2, [pc, #640]	@ (8007860 <UART_SetConfig+0x2e0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d004      	beq.n	80075ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075e8:	4313      	orrs	r3, r2
 80075ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80075f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007600:	430b      	orrs	r3, r1
 8007602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	f023 010f 	bic.w	r1, r3, #15
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a91      	ldr	r2, [pc, #580]	@ (8007864 <UART_SetConfig+0x2e4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d125      	bne.n	8007670 <UART_SetConfig+0xf0>
 8007624:	4b90      	ldr	r3, [pc, #576]	@ (8007868 <UART_SetConfig+0x2e8>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	2b03      	cmp	r3, #3
 8007630:	d81a      	bhi.n	8007668 <UART_SetConfig+0xe8>
 8007632:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <UART_SetConfig+0xb8>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007649 	.word	0x08007649
 800763c:	08007659 	.word	0x08007659
 8007640:	08007651 	.word	0x08007651
 8007644:	08007661 	.word	0x08007661
 8007648:	2301      	movs	r3, #1
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764e:	e0d6      	b.n	80077fe <UART_SetConfig+0x27e>
 8007650:	2302      	movs	r3, #2
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007656:	e0d2      	b.n	80077fe <UART_SetConfig+0x27e>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765e:	e0ce      	b.n	80077fe <UART_SetConfig+0x27e>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007666:	e0ca      	b.n	80077fe <UART_SetConfig+0x27e>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766e:	e0c6      	b.n	80077fe <UART_SetConfig+0x27e>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a7d      	ldr	r2, [pc, #500]	@ (800786c <UART_SetConfig+0x2ec>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d138      	bne.n	80076ec <UART_SetConfig+0x16c>
 800767a:	4b7b      	ldr	r3, [pc, #492]	@ (8007868 <UART_SetConfig+0x2e8>)
 800767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007680:	f003 030c 	and.w	r3, r3, #12
 8007684:	2b0c      	cmp	r3, #12
 8007686:	d82d      	bhi.n	80076e4 <UART_SetConfig+0x164>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0x110>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076e5 	.word	0x080076e5
 8007698:	080076e5 	.word	0x080076e5
 800769c:	080076e5 	.word	0x080076e5
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	080076e5 	.word	0x080076e5
 80076a8:	080076e5 	.word	0x080076e5
 80076ac:	080076e5 	.word	0x080076e5
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	080076e5 	.word	0x080076e5
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076dd 	.word	0x080076dd
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ca:	e098      	b.n	80077fe <UART_SetConfig+0x27e>
 80076cc:	2302      	movs	r3, #2
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d2:	e094      	b.n	80077fe <UART_SetConfig+0x27e>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076da:	e090      	b.n	80077fe <UART_SetConfig+0x27e>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e2:	e08c      	b.n	80077fe <UART_SetConfig+0x27e>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ea:	e088      	b.n	80077fe <UART_SetConfig+0x27e>
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5f      	ldr	r2, [pc, #380]	@ (8007870 <UART_SetConfig+0x2f0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d125      	bne.n	8007742 <UART_SetConfig+0x1c2>
 80076f6:	4b5c      	ldr	r3, [pc, #368]	@ (8007868 <UART_SetConfig+0x2e8>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007700:	2b30      	cmp	r3, #48	@ 0x30
 8007702:	d016      	beq.n	8007732 <UART_SetConfig+0x1b2>
 8007704:	2b30      	cmp	r3, #48	@ 0x30
 8007706:	d818      	bhi.n	800773a <UART_SetConfig+0x1ba>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d00a      	beq.n	8007722 <UART_SetConfig+0x1a2>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d814      	bhi.n	800773a <UART_SetConfig+0x1ba>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <UART_SetConfig+0x19a>
 8007714:	2b10      	cmp	r3, #16
 8007716:	d008      	beq.n	800772a <UART_SetConfig+0x1aa>
 8007718:	e00f      	b.n	800773a <UART_SetConfig+0x1ba>
 800771a:	2300      	movs	r3, #0
 800771c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007720:	e06d      	b.n	80077fe <UART_SetConfig+0x27e>
 8007722:	2302      	movs	r3, #2
 8007724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007728:	e069      	b.n	80077fe <UART_SetConfig+0x27e>
 800772a:	2304      	movs	r3, #4
 800772c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007730:	e065      	b.n	80077fe <UART_SetConfig+0x27e>
 8007732:	2308      	movs	r3, #8
 8007734:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007738:	e061      	b.n	80077fe <UART_SetConfig+0x27e>
 800773a:	2310      	movs	r3, #16
 800773c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007740:	e05d      	b.n	80077fe <UART_SetConfig+0x27e>
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4b      	ldr	r2, [pc, #300]	@ (8007874 <UART_SetConfig+0x2f4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d125      	bne.n	8007798 <UART_SetConfig+0x218>
 800774c:	4b46      	ldr	r3, [pc, #280]	@ (8007868 <UART_SetConfig+0x2e8>)
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007752:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007756:	2bc0      	cmp	r3, #192	@ 0xc0
 8007758:	d016      	beq.n	8007788 <UART_SetConfig+0x208>
 800775a:	2bc0      	cmp	r3, #192	@ 0xc0
 800775c:	d818      	bhi.n	8007790 <UART_SetConfig+0x210>
 800775e:	2b80      	cmp	r3, #128	@ 0x80
 8007760:	d00a      	beq.n	8007778 <UART_SetConfig+0x1f8>
 8007762:	2b80      	cmp	r3, #128	@ 0x80
 8007764:	d814      	bhi.n	8007790 <UART_SetConfig+0x210>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <UART_SetConfig+0x1f0>
 800776a:	2b40      	cmp	r3, #64	@ 0x40
 800776c:	d008      	beq.n	8007780 <UART_SetConfig+0x200>
 800776e:	e00f      	b.n	8007790 <UART_SetConfig+0x210>
 8007770:	2300      	movs	r3, #0
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007776:	e042      	b.n	80077fe <UART_SetConfig+0x27e>
 8007778:	2302      	movs	r3, #2
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777e:	e03e      	b.n	80077fe <UART_SetConfig+0x27e>
 8007780:	2304      	movs	r3, #4
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007786:	e03a      	b.n	80077fe <UART_SetConfig+0x27e>
 8007788:	2308      	movs	r3, #8
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778e:	e036      	b.n	80077fe <UART_SetConfig+0x27e>
 8007790:	2310      	movs	r3, #16
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007796:	e032      	b.n	80077fe <UART_SetConfig+0x27e>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a30      	ldr	r2, [pc, #192]	@ (8007860 <UART_SetConfig+0x2e0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d12a      	bne.n	80077f8 <UART_SetConfig+0x278>
 80077a2:	4b31      	ldr	r3, [pc, #196]	@ (8007868 <UART_SetConfig+0x2e8>)
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077b0:	d01a      	beq.n	80077e8 <UART_SetConfig+0x268>
 80077b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077b6:	d81b      	bhi.n	80077f0 <UART_SetConfig+0x270>
 80077b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077bc:	d00c      	beq.n	80077d8 <UART_SetConfig+0x258>
 80077be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077c2:	d815      	bhi.n	80077f0 <UART_SetConfig+0x270>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <UART_SetConfig+0x250>
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077cc:	d008      	beq.n	80077e0 <UART_SetConfig+0x260>
 80077ce:	e00f      	b.n	80077f0 <UART_SetConfig+0x270>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d6:	e012      	b.n	80077fe <UART_SetConfig+0x27e>
 80077d8:	2302      	movs	r3, #2
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077de:	e00e      	b.n	80077fe <UART_SetConfig+0x27e>
 80077e0:	2304      	movs	r3, #4
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e6:	e00a      	b.n	80077fe <UART_SetConfig+0x27e>
 80077e8:	2308      	movs	r3, #8
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ee:	e006      	b.n	80077fe <UART_SetConfig+0x27e>
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f6:	e002      	b.n	80077fe <UART_SetConfig+0x27e>
 80077f8:	2310      	movs	r3, #16
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a17      	ldr	r2, [pc, #92]	@ (8007860 <UART_SetConfig+0x2e0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	f040 80a8 	bne.w	800795a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800780a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800780e:	2b08      	cmp	r3, #8
 8007810:	d834      	bhi.n	800787c <UART_SetConfig+0x2fc>
 8007812:	a201      	add	r2, pc, #4	@ (adr r2, 8007818 <UART_SetConfig+0x298>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800783d 	.word	0x0800783d
 800781c:	0800787d 	.word	0x0800787d
 8007820:	08007845 	.word	0x08007845
 8007824:	0800787d 	.word	0x0800787d
 8007828:	0800784b 	.word	0x0800784b
 800782c:	0800787d 	.word	0x0800787d
 8007830:	0800787d 	.word	0x0800787d
 8007834:	0800787d 	.word	0x0800787d
 8007838:	08007853 	.word	0x08007853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800783c:	f7fd fb9e 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8007840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007842:	e021      	b.n	8007888 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007844:	4b0c      	ldr	r3, [pc, #48]	@ (8007878 <UART_SetConfig+0x2f8>)
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007848:	e01e      	b.n	8007888 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784a:	f7fd fb29 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 800784e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007850:	e01a      	b.n	8007888 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007858:	e016      	b.n	8007888 <UART_SetConfig+0x308>
 800785a:	bf00      	nop
 800785c:	cfff69f3 	.word	0xcfff69f3
 8007860:	40008000 	.word	0x40008000
 8007864:	40013800 	.word	0x40013800
 8007868:	40021000 	.word	0x40021000
 800786c:	40004400 	.word	0x40004400
 8007870:	40004800 	.word	0x40004800
 8007874:	40004c00 	.word	0x40004c00
 8007878:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007886:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 812a 	beq.w	8007ae4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	4a9e      	ldr	r2, [pc, #632]	@ (8007b10 <UART_SetConfig+0x590>)
 8007896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789a:	461a      	mov	r2, r3
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	4613      	mov	r3, r2
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	4413      	add	r3, r2
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d305      	bcc.n	80078c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d903      	bls.n	80078c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078c6:	e10d      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	60fa      	str	r2, [r7, #12]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	4a8e      	ldr	r2, [pc, #568]	@ (8007b10 <UART_SetConfig+0x590>)
 80078d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2200      	movs	r2, #0
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078ea:	f7f9 f985 	bl	8000bf8 <__aeabi_uldivmod>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4610      	mov	r0, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	020b      	lsls	r3, r1, #8
 8007900:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007904:	0202      	lsls	r2, r0, #8
 8007906:	6979      	ldr	r1, [r7, #20]
 8007908:	6849      	ldr	r1, [r1, #4]
 800790a:	0849      	lsrs	r1, r1, #1
 800790c:	2000      	movs	r0, #0
 800790e:	460c      	mov	r4, r1
 8007910:	4605      	mov	r5, r0
 8007912:	eb12 0804 	adds.w	r8, r2, r4
 8007916:	eb43 0905 	adc.w	r9, r3, r5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	469a      	mov	sl, r3
 8007922:	4693      	mov	fp, r2
 8007924:	4652      	mov	r2, sl
 8007926:	465b      	mov	r3, fp
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	f7f9 f964 	bl	8000bf8 <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4613      	mov	r3, r2
 8007936:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800793e:	d308      	bcc.n	8007952 <UART_SetConfig+0x3d2>
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007946:	d204      	bcs.n	8007952 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	60da      	str	r2, [r3, #12]
 8007950:	e0c8      	b.n	8007ae4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007958:	e0c4      	b.n	8007ae4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007962:	d167      	bne.n	8007a34 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007964:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007968:	2b08      	cmp	r3, #8
 800796a:	d828      	bhi.n	80079be <UART_SetConfig+0x43e>
 800796c:	a201      	add	r2, pc, #4	@ (adr r2, 8007974 <UART_SetConfig+0x3f4>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007999 	.word	0x08007999
 8007978:	080079a1 	.word	0x080079a1
 800797c:	080079a9 	.word	0x080079a9
 8007980:	080079bf 	.word	0x080079bf
 8007984:	080079af 	.word	0x080079af
 8007988:	080079bf 	.word	0x080079bf
 800798c:	080079bf 	.word	0x080079bf
 8007990:	080079bf 	.word	0x080079bf
 8007994:	080079b7 	.word	0x080079b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fd faf0 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 800799c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800799e:	e014      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fd fb02 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 80079a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079a6:	e010      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b14 <UART_SetConfig+0x594>)
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079ac:	e00d      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ae:	f7fd fa77 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 80079b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079b4:	e009      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079bc:	e005      	b.n	80079ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8089 	beq.w	8007ae4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007b10 <UART_SetConfig+0x590>)
 80079d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079dc:	461a      	mov	r2, r3
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e4:	005a      	lsls	r2, r3, #1
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	441a      	add	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d916      	bls.n	8007a2c <UART_SetConfig+0x4ac>
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a04:	d212      	bcs.n	8007a2c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f023 030f 	bic.w	r3, r3, #15
 8007a0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	8bfb      	ldrh	r3, [r7, #30]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	8bfa      	ldrh	r2, [r7, #30]
 8007a28:	60da      	str	r2, [r3, #12]
 8007a2a:	e05b      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a32:	e057      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d828      	bhi.n	8007a8e <UART_SetConfig+0x50e>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <UART_SetConfig+0x4c4>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a69 	.word	0x08007a69
 8007a48:	08007a71 	.word	0x08007a71
 8007a4c:	08007a79 	.word	0x08007a79
 8007a50:	08007a8f 	.word	0x08007a8f
 8007a54:	08007a7f 	.word	0x08007a7f
 8007a58:	08007a8f 	.word	0x08007a8f
 8007a5c:	08007a8f 	.word	0x08007a8f
 8007a60:	08007a8f 	.word	0x08007a8f
 8007a64:	08007a87 	.word	0x08007a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a68:	f7fd fa88 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8007a6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a6e:	e014      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a70:	f7fd fa9a 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8007a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a76:	e010      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a78:	4b26      	ldr	r3, [pc, #152]	@ (8007b14 <UART_SetConfig+0x594>)
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a7c:	e00d      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7e:	f7fd fa0f 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8007a82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a84:	e009      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a8c:	e005      	b.n	8007a9a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a98:	bf00      	nop
    }

    if (pclk != 0U)
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d021      	beq.n	8007ae4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b10 <UART_SetConfig+0x590>)
 8007aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	441a      	add	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d909      	bls.n	8007ade <UART_SetConfig+0x55e>
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad0:	d205      	bcs.n	8007ade <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60da      	str	r2, [r3, #12]
 8007adc:	e002      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3730      	adds	r7, #48	@ 0x30
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b0e:	bf00      	nop
 8007b10:	0800e0d4 	.word	0x0800e0d4
 8007b14:	00f42400 	.word	0x00f42400

08007b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01a      	beq.n	8007c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c16:	d10a      	bne.n	8007c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
  }
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b098      	sub	sp, #96	@ 0x60
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c6c:	f7fb ffd6 	bl	8003c1c <HAL_GetTick>
 8007c70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d12f      	bne.n	8007ce0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f88e 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d022      	beq.n	8007ce0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e6      	bne.n	8007c9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e063      	b.n	8007da8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d149      	bne.n	8007d82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f857 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d03c      	beq.n	8007d82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	623b      	str	r3, [r7, #32]
   return(result);
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e6      	bne.n	8007d08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d5a:	61fa      	str	r2, [r7, #28]
 8007d5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	69b9      	ldr	r1, [r7, #24]
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	617b      	str	r3, [r7, #20]
   return(result);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e5      	bne.n	8007d3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e012      	b.n	8007da8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3758      	adds	r7, #88	@ 0x58
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc0:	e04f      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d04b      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dca:	f7fb ff27 	bl	8003c1c <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d302      	bcc.n	8007de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e04e      	b.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d037      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b80      	cmp	r3, #128	@ 0x80
 8007df6:	d034      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b40      	cmp	r3, #64	@ 0x40
 8007dfc:	d031      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d110      	bne.n	8007e2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2208      	movs	r2, #8
 8007e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f838 	bl	8007e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e029      	b.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e3c:	d111      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f81e 	bl	8007e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e00f      	b.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69da      	ldr	r2, [r3, #28]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	bf0c      	ite	eq
 8007e72:	2301      	moveq	r3, #1
 8007e74:	2300      	movne	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	461a      	mov	r2, r3
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d0a0      	beq.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b095      	sub	sp, #84	@ 0x54
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e3      	bne.n	8007ec4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d118      	bne.n	8007f36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f023 0310 	bic.w	r3, r3, #16
 8007f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6979      	ldr	r1, [r7, #20]
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e6      	bne.n	8007f04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f4a:	bf00      	nop
 8007f4c:	3754      	adds	r7, #84	@ 0x54
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_UARTEx_DisableFifoMode+0x16>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e027      	b.n	8007fbc <HAL_UARTEx_DisableFifoMode+0x66>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2224      	movs	r2, #36	@ 0x24
 8007f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0201 	bic.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e02d      	b.n	800803c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2224      	movs	r2, #36	@ 0x24
 8007fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f84f 	bl	80080c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008058:	2302      	movs	r3, #2
 800805a:	e02d      	b.n	80080b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2224      	movs	r2, #36	@ 0x24
 8008068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f811 	bl	80080c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d108      	bne.n	80080e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080e0:	e031      	b.n	8008146 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080e2:	2308      	movs	r3, #8
 80080e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080e6:	2308      	movs	r3, #8
 80080e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	0e5b      	lsrs	r3, r3, #25
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	f003 0307 	and.w	r3, r3, #7
 80080f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	0f5b      	lsrs	r3, r3, #29
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	7b3a      	ldrb	r2, [r7, #12]
 800810e:	4911      	ldr	r1, [pc, #68]	@ (8008154 <UARTEx_SetNbDataToProcess+0x94>)
 8008110:	5c8a      	ldrb	r2, [r1, r2]
 8008112:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008116:	7b3a      	ldrb	r2, [r7, #12]
 8008118:	490f      	ldr	r1, [pc, #60]	@ (8008158 <UARTEx_SetNbDataToProcess+0x98>)
 800811a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800811c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008120:	b29a      	uxth	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	7b7a      	ldrb	r2, [r7, #13]
 800812c:	4909      	ldr	r1, [pc, #36]	@ (8008154 <UARTEx_SetNbDataToProcess+0x94>)
 800812e:	5c8a      	ldrb	r2, [r1, r2]
 8008130:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008134:	7b7a      	ldrb	r2, [r7, #13]
 8008136:	4908      	ldr	r1, [pc, #32]	@ (8008158 <UARTEx_SetNbDataToProcess+0x98>)
 8008138:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800813a:	fb93 f3f2 	sdiv	r3, r3, r2
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	0800e0ec 	.word	0x0800e0ec
 8008158:	0800e0f4 	.word	0x0800e0f4

0800815c <__NVIC_SetPriority>:
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800816c:	2b00      	cmp	r3, #0
 800816e:	db0a      	blt.n	8008186 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	b2da      	uxtb	r2, r3
 8008174:	490c      	ldr	r1, [pc, #48]	@ (80081a8 <__NVIC_SetPriority+0x4c>)
 8008176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800817a:	0112      	lsls	r2, r2, #4
 800817c:	b2d2      	uxtb	r2, r2
 800817e:	440b      	add	r3, r1
 8008180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008184:	e00a      	b.n	800819c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	b2da      	uxtb	r2, r3
 800818a:	4908      	ldr	r1, [pc, #32]	@ (80081ac <__NVIC_SetPriority+0x50>)
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	3b04      	subs	r3, #4
 8008194:	0112      	lsls	r2, r2, #4
 8008196:	b2d2      	uxtb	r2, r2
 8008198:	440b      	add	r3, r1
 800819a:	761a      	strb	r2, [r3, #24]
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	e000e100 	.word	0xe000e100
 80081ac:	e000ed00 	.word	0xe000ed00

080081b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081b4:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <SysTick_Handler+0x1c>)
 80081b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081b8:	f002 f9ae 	bl	800a518 <xTaskGetSchedulerState>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d001      	beq.n	80081c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081c2:	f002 ffc9 	bl	800b158 <xPortSysTickHandler>
  }
}
 80081c6:	bf00      	nop
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	e000e010 	.word	0xe000e010

080081d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081d4:	2100      	movs	r1, #0
 80081d6:	f06f 0004 	mvn.w	r0, #4
 80081da:	f7ff ffbf 	bl	800815c <__NVIC_SetPriority>
#endif
}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ea:	f3ef 8305 	mrs	r3, IPSR
 80081ee:	603b      	str	r3, [r7, #0]
  return(result);
 80081f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081f6:	f06f 0305 	mvn.w	r3, #5
 80081fa:	607b      	str	r3, [r7, #4]
 80081fc:	e00c      	b.n	8008218 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <osKernelInitialize+0x44>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008206:	4b08      	ldr	r3, [pc, #32]	@ (8008228 <osKernelInitialize+0x44>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800820c:	2300      	movs	r3, #0
 800820e:	607b      	str	r3, [r7, #4]
 8008210:	e002      	b.n	8008218 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
 8008216:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008218:	687b      	ldr	r3, [r7, #4]
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	200005c0 	.word	0x200005c0

0800822c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008232:	f3ef 8305 	mrs	r3, IPSR
 8008236:	603b      	str	r3, [r7, #0]
  return(result);
 8008238:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <osKernelStart+0x1a>
    stat = osErrorISR;
 800823e:	f06f 0305 	mvn.w	r3, #5
 8008242:	607b      	str	r3, [r7, #4]
 8008244:	e010      	b.n	8008268 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008246:	4b0b      	ldr	r3, [pc, #44]	@ (8008274 <osKernelStart+0x48>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d109      	bne.n	8008262 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800824e:	f7ff ffbf 	bl	80081d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008252:	4b08      	ldr	r3, [pc, #32]	@ (8008274 <osKernelStart+0x48>)
 8008254:	2202      	movs	r2, #2
 8008256:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008258:	f001 fcc8 	bl	8009bec <vTaskStartScheduler>
      stat = osOK;
 800825c:	2300      	movs	r3, #0
 800825e:	607b      	str	r3, [r7, #4]
 8008260:	e002      	b.n	8008268 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008262:	f04f 33ff 	mov.w	r3, #4294967295
 8008266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008268:	687b      	ldr	r3, [r7, #4]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	200005c0 	.word	0x200005c0

08008278 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	@ 0x38
 800827c:	af04      	add	r7, sp, #16
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008284:	2300      	movs	r3, #0
 8008286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008288:	f3ef 8305 	mrs	r3, IPSR
 800828c:	617b      	str	r3, [r7, #20]
  return(result);
 800828e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008290:	2b00      	cmp	r3, #0
 8008292:	d17e      	bne.n	8008392 <osThreadNew+0x11a>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d07b      	beq.n	8008392 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800829a:	2380      	movs	r3, #128	@ 0x80
 800829c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800829e:	2318      	movs	r3, #24
 80082a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295
 80082aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d045      	beq.n	800833e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <osThreadNew+0x48>
        name = attr->name;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <osThreadNew+0x6e>
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b38      	cmp	r3, #56	@ 0x38
 80082d8:	d805      	bhi.n	80082e6 <osThreadNew+0x6e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <osThreadNew+0x72>
        return (NULL);
 80082e6:	2300      	movs	r3, #0
 80082e8:	e054      	b.n	8008394 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	089b      	lsrs	r3, r3, #2
 80082f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00e      	beq.n	8008320 <osThreadNew+0xa8>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	2b5b      	cmp	r3, #91	@ 0x5b
 8008308:	d90a      	bls.n	8008320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800830e:	2b00      	cmp	r3, #0
 8008310:	d006      	beq.n	8008320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <osThreadNew+0xa8>
        mem = 1;
 800831a:	2301      	movs	r3, #1
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	e010      	b.n	8008342 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10c      	bne.n	8008342 <osThreadNew+0xca>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d108      	bne.n	8008342 <osThreadNew+0xca>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <osThreadNew+0xca>
          mem = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	e001      	b.n	8008342 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d110      	bne.n	800836a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008350:	9202      	str	r2, [sp, #8]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6a3a      	ldr	r2, [r7, #32]
 800835c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f001 fa06 	bl	8009770 <xTaskCreateStatic>
 8008364:	4603      	mov	r3, r0
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	e013      	b.n	8008392 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d110      	bne.n	8008392 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	b29a      	uxth	r2, r3
 8008374:	f107 0310 	add.w	r3, r7, #16
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f001 fa54 	bl	8009830 <xTaskCreate>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d001      	beq.n	8008392 <osThreadNew+0x11a>
            hTask = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008392:	693b      	ldr	r3, [r7, #16]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3728      	adds	r7, #40	@ 0x28
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	@ 0x28
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ac:	f3ef 8305 	mrs	r3, IPSR
 80083b0:	613b      	str	r3, [r7, #16]
  return(result);
 80083b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d175      	bne.n	80084a4 <osSemaphoreNew+0x108>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d072      	beq.n	80084a4 <osSemaphoreNew+0x108>
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d86e      	bhi.n	80084a4 <osSemaphoreNew+0x108>
    mem = -1;
 80083c6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d015      	beq.n	80083fe <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <osSemaphoreNew+0x4c>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	2b4f      	cmp	r3, #79	@ 0x4f
 80083e0:	d902      	bls.n	80083e8 <osSemaphoreNew+0x4c>
        mem = 1;
 80083e2:	2301      	movs	r3, #1
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e00c      	b.n	8008402 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <osSemaphoreNew+0x66>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <osSemaphoreNew+0x66>
          mem = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
 80083fc:	e001      	b.n	8008402 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d04c      	beq.n	80084a4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d128      	bne.n	8008462 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d10a      	bne.n	800842c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2203      	movs	r2, #3
 800841c:	9200      	str	r2, [sp, #0]
 800841e:	2200      	movs	r2, #0
 8008420:	2100      	movs	r1, #0
 8008422:	2001      	movs	r0, #1
 8008424:	f000 f996 	bl	8008754 <xQueueGenericCreateStatic>
 8008428:	61f8      	str	r0, [r7, #28]
 800842a:	e005      	b.n	8008438 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800842c:	2203      	movs	r2, #3
 800842e:	2100      	movs	r1, #0
 8008430:	2001      	movs	r0, #1
 8008432:	f000 fa35 	bl	80088a0 <xQueueGenericCreate>
 8008436:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d022      	beq.n	8008484 <osSemaphoreNew+0xe8>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01f      	beq.n	8008484 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008444:	2300      	movs	r3, #0
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	69f8      	ldr	r0, [r7, #28]
 800844c:	f000 fb6c 	bl	8008b28 <xQueueGenericSend>
 8008450:	4603      	mov	r3, r0
 8008452:	2b01      	cmp	r3, #1
 8008454:	d016      	beq.n	8008484 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008456:	69f8      	ldr	r0, [r7, #28]
 8008458:	f000 ffa2 	bl	80093a0 <vQueueDelete>
            hSemaphore = NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	e010      	b.n	8008484 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d108      	bne.n	800847a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	461a      	mov	r2, r3
 800846e:	68b9      	ldr	r1, [r7, #8]
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 facd 	bl	8008a10 <xQueueCreateCountingSemaphoreStatic>
 8008476:	61f8      	str	r0, [r7, #28]
 8008478:	e004      	b.n	8008484 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fb0f 	bl	8008aa0 <xQueueCreateCountingSemaphore>
 8008482:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00c      	beq.n	80084a4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e001      	b.n	800849c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008498:	2300      	movs	r3, #0
 800849a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800849c:	6979      	ldr	r1, [r7, #20]
 800849e:	69f8      	ldr	r0, [r7, #28]
 80084a0:	f001 f8dc 	bl	800965c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80084a4:	69fb      	ldr	r3, [r7, #28]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4a07      	ldr	r2, [pc, #28]	@ (80084dc <vApplicationGetIdleTaskMemory+0x2c>)
 80084c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	4a06      	ldr	r2, [pc, #24]	@ (80084e0 <vApplicationGetIdleTaskMemory+0x30>)
 80084c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2280      	movs	r2, #128	@ 0x80
 80084cc:	601a      	str	r2, [r3, #0]
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	200005c4 	.word	0x200005c4
 80084e0:	20000620 	.word	0x20000620

080084e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4a07      	ldr	r2, [pc, #28]	@ (8008510 <vApplicationGetTimerTaskMemory+0x2c>)
 80084f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4a06      	ldr	r2, [pc, #24]	@ (8008514 <vApplicationGetTimerTaskMemory+0x30>)
 80084fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008502:	601a      	str	r2, [r3, #0]
}
 8008504:	bf00      	nop
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	20000820 	.word	0x20000820
 8008514:	2000087c 	.word	0x2000087c

08008518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f103 0208 	add.w	r2, r3, #8
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f04f 32ff 	mov.w	r2, #4294967295
 8008530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f103 0208 	add.w	r2, r3, #8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f103 0208 	add.w	r2, r3, #8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008566:	bf00      	nop
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	601a      	str	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d0:	d103      	bne.n	80085da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e00c      	b.n	80085f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3308      	adds	r3, #8
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e002      	b.n	80085e8 <vListInsert+0x2e>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d2f6      	bcs.n	80085e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	601a      	str	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6892      	ldr	r2, [r2, #8]
 8008642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6852      	ldr	r2, [r2, #4]
 800864c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d103      	bne.n	8008660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	1e5a      	subs	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086ac:	f002 fcbe 	bl	800b02c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b8:	68f9      	ldr	r1, [r7, #12]
 80086ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086bc:	fb01 f303 	mul.w	r3, r1, r3
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086dc:	3b01      	subs	r3, #1
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086e2:	fb01 f303 	mul.w	r3, r1, r3
 80086e6:	441a      	add	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	22ff      	movs	r2, #255	@ 0xff
 80086f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	22ff      	movs	r2, #255	@ 0xff
 80086f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d114      	bne.n	800872c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01a      	beq.n	8008740 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3310      	adds	r3, #16
 800870e:	4618      	mov	r0, r3
 8008710:	f001 fd3c 	bl	800a18c <xTaskRemoveFromEventList>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d012      	beq.n	8008740 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <xQueueGenericReset+0xd0>)
 800871c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	e009      	b.n	8008740 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3310      	adds	r3, #16
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff fef1 	bl	8008518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3324      	adds	r3, #36	@ 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff feec 	bl	8008518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008740:	f002 fca6 	bl	800b090 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008744:	2301      	movs	r3, #1
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08e      	sub	sp, #56	@ 0x38
 8008758:	af02      	add	r7, sp, #8
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <xQueueGenericCreateStatic+0x56>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <xQueueGenericCreateStatic+0x5a>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <xQueueGenericCreateStatic+0x5c>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	623b      	str	r3, [r7, #32]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <xQueueGenericCreateStatic+0x84>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <xQueueGenericCreateStatic+0x88>
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <xQueueGenericCreateStatic+0x8a>
 80087dc:	2300      	movs	r3, #0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	61fb      	str	r3, [r7, #28]
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	e7fd      	b.n	80087f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087fa:	2350      	movs	r3, #80	@ 0x50
 80087fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b50      	cmp	r3, #80	@ 0x50
 8008802:	d00b      	beq.n	800881c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	61bb      	str	r3, [r7, #24]
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	e7fd      	b.n	8008818 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800881c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00e      	beq.n	8008846 <xQueueGenericCreateStatic+0xf2>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008830:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f892 	bl	8008968 <prvInitialiseNewQueue>
 8008844:	e027      	b.n	8008896 <xQueueGenericCreateStatic+0x142>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8008846:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800884a:	2b04      	cmp	r3, #4
 800884c:	d823      	bhi.n	8008896 <xQueueGenericCreateStatic+0x142>
 800884e:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <xQueueGenericCreateStatic+0x100>)
 8008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008854:	08008869 	.word	0x08008869
 8008858:	08008881 	.word	0x08008881
 800885c:	08008897 	.word	0x08008897
 8008860:	08008875 	.word	0x08008875
 8008864:	0800888d 	.word	0x0800888d
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	2100      	movs	r1, #0
 800886c:	2041      	movs	r0, #65	@ 0x41
 800886e:	f7f8 fd49 	bl	8001304 <xTraceEventCreate2>
 8008872:	e010      	b.n	8008896 <xQueueGenericCreateStatic+0x142>
 8008874:	2200      	movs	r2, #0
 8008876:	2100      	movs	r1, #0
 8008878:	2042      	movs	r0, #66	@ 0x42
 800887a:	f7f8 fd43 	bl	8001304 <xTraceEventCreate2>
 800887e:	e00a      	b.n	8008896 <xQueueGenericCreateStatic+0x142>
 8008880:	2200      	movs	r2, #0
 8008882:	2100      	movs	r1, #0
 8008884:	2043      	movs	r0, #67	@ 0x43
 8008886:	f7f8 fd3d 	bl	8001304 <xTraceEventCreate2>
 800888a:	e004      	b.n	8008896 <xQueueGenericCreateStatic+0x142>
 800888c:	2200      	movs	r2, #0
 800888e:	2100      	movs	r1, #0
 8008890:	2047      	movs	r0, #71	@ 0x47
 8008892:	f7f8 fd37 	bl	8001304 <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008898:	4618      	mov	r0, r3
 800889a:	3730      	adds	r7, #48	@ 0x30
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08a      	sub	sp, #40	@ 0x28
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10b      	bne.n	80088cc <xQueueGenericCreate+0x2c>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	613b      	str	r3, [r7, #16]
}
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	fb02 f303 	mul.w	r3, r2, r3
 80088d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	3350      	adds	r3, #80	@ 0x50
 80088da:	4618      	mov	r0, r3
 80088dc:	f002 fcce 	bl	800b27c <pvPortMalloc>
 80088e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d012      	beq.n	800890e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	3350      	adds	r3, #80	@ 0x50
 80088f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088fa:	79fa      	ldrb	r2, [r7, #7]
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	4613      	mov	r3, r2
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 f82e 	bl	8008968 <prvInitialiseNewQueue>
 800890c:	e027      	b.n	800895e <xQueueGenericCreate+0xbe>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	2b04      	cmp	r3, #4
 8008912:	d824      	bhi.n	800895e <xQueueGenericCreate+0xbe>
 8008914:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <xQueueGenericCreate+0x7c>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008931 	.word	0x08008931
 8008920:	08008949 	.word	0x08008949
 8008924:	0800895f 	.word	0x0800895f
 8008928:	0800893d 	.word	0x0800893d
 800892c:	08008955 	.word	0x08008955
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	2100      	movs	r1, #0
 8008934:	2041      	movs	r0, #65	@ 0x41
 8008936:	f7f8 fce5 	bl	8001304 <xTraceEventCreate2>
 800893a:	e010      	b.n	800895e <xQueueGenericCreate+0xbe>
 800893c:	2200      	movs	r2, #0
 800893e:	2100      	movs	r1, #0
 8008940:	2042      	movs	r0, #66	@ 0x42
 8008942:	f7f8 fcdf 	bl	8001304 <xTraceEventCreate2>
 8008946:	e00a      	b.n	800895e <xQueueGenericCreate+0xbe>
 8008948:	2200      	movs	r2, #0
 800894a:	2100      	movs	r1, #0
 800894c:	2043      	movs	r0, #67	@ 0x43
 800894e:	f7f8 fcd9 	bl	8001304 <xTraceEventCreate2>
 8008952:	e004      	b.n	800895e <xQueueGenericCreate+0xbe>
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	2047      	movs	r0, #71	@ 0x47
 800895a:	f7f8 fcd3 	bl	8001304 <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800895e:	69bb      	ldr	r3, [r7, #24]
	}
 8008960:	4618      	mov	r0, r3
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	e002      	b.n	800898a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008996:	2101      	movs	r1, #1
 8008998:	69b8      	ldr	r0, [r7, #24]
 800899a:	f7ff fe71 	bl	8008680 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	78fa      	ldrb	r2, [r7, #3]
 80089a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d828      	bhi.n	8008a02 <prvInitialiseNewQueue+0x9a>
 80089b0:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <prvInitialiseNewQueue+0x50>)
 80089b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b6:	bf00      	nop
 80089b8:	080089cd 	.word	0x080089cd
 80089bc:	080089e9 	.word	0x080089e9
 80089c0:	08008a03 	.word	0x08008a03
 80089c4:	080089db 	.word	0x080089db
 80089c8:	080089f7 	.word	0x080089f7
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4a0f      	ldr	r2, [pc, #60]	@ (8008a0c <prvInitialiseNewQueue+0xa4>)
 80089d0:	69b9      	ldr	r1, [r7, #24]
 80089d2:	2011      	movs	r0, #17
 80089d4:	f7f9 f9bc 	bl	8001d50 <xTraceObjectRegisterWithoutHandle>
 80089d8:	e013      	b.n	8008a02 <prvInitialiseNewQueue+0x9a>
 80089da:	2300      	movs	r3, #0
 80089dc:	4a0b      	ldr	r2, [pc, #44]	@ (8008a0c <prvInitialiseNewQueue+0xa4>)
 80089de:	69b9      	ldr	r1, [r7, #24]
 80089e0:	2012      	movs	r0, #18
 80089e2:	f7f9 f9b5 	bl	8001d50 <xTraceObjectRegisterWithoutHandle>
 80089e6:	e00c      	b.n	8008a02 <prvInitialiseNewQueue+0x9a>
 80089e8:	2300      	movs	r3, #0
 80089ea:	4a08      	ldr	r2, [pc, #32]	@ (8008a0c <prvInitialiseNewQueue+0xa4>)
 80089ec:	69b9      	ldr	r1, [r7, #24]
 80089ee:	2013      	movs	r0, #19
 80089f0:	f7f9 f9ae 	bl	8001d50 <xTraceObjectRegisterWithoutHandle>
 80089f4:	e005      	b.n	8008a02 <prvInitialiseNewQueue+0x9a>
 80089f6:	2300      	movs	r3, #0
 80089f8:	4a04      	ldr	r2, [pc, #16]	@ (8008a0c <prvInitialiseNewQueue+0xa4>)
 80089fa:	69b9      	ldr	r1, [r7, #24]
 80089fc:	2017      	movs	r0, #23
 80089fe:	f7f9 f9a7 	bl	8001d50 <xTraceObjectRegisterWithoutHandle>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	0800e024 	.word	0x0800e024

08008a10 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	@ 0x28
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	61bb      	str	r3, [r7, #24]
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	e7fd      	b.n	8008a36 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d90b      	bls.n	8008a5a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	617b      	str	r3, [r7, #20]
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	e7fd      	b.n	8008a56 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	2100      	movs	r1, #0
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7ff fe75 	bl	8008754 <xQueueGenericCreateStatic>
 8008a6a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <xQueueCreateCountingSemaphoreStatic+0x76>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	639a      	str	r2, [r3, #56]	@ 0x38

			traceCREATE_COUNTING_SEMAPHORE();
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a08      	ldr	r2, [pc, #32]	@ (8008a9c <xQueueCreateCountingSemaphoreStatic+0x8c>)
 8008a7c:	69f9      	ldr	r1, [r7, #28]
 8008a7e:	2016      	movs	r0, #22
 8008a80:	f7f9 f966 	bl	8001d50 <xTraceObjectRegisterWithoutHandle>
 8008a84:	e004      	b.n	8008a90 <xQueueCreateCountingSemaphoreStatic+0x80>
		}
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2046      	movs	r0, #70	@ 0x46
 8008a8c:	f7f8 fc3a 	bl	8001304 <xTraceEventCreate2>
		}

		return xHandle;
 8008a90:	69fb      	ldr	r3, [r7, #28]
	}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0800e024 	.word	0x0800e024

08008aa0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d90b      	bls.n	8008ae8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ae8:	2202      	movs	r2, #2
 8008aea:	2100      	movs	r1, #0
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fed7 	bl	80088a0 <xQueueGenericCreate>
 8008af2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <xQueueCreateCountingSemaphore+0x6e>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	639a      	str	r2, [r3, #56]	@ 0x38

			traceCREATE_COUNTING_SEMAPHORE();
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a08      	ldr	r2, [pc, #32]	@ (8008b24 <xQueueCreateCountingSemaphore+0x84>)
 8008b04:	6979      	ldr	r1, [r7, #20]
 8008b06:	2016      	movs	r0, #22
 8008b08:	f7f9 f922 	bl	8001d50 <xTraceObjectRegisterWithoutHandle>
 8008b0c:	e004      	b.n	8008b18 <xQueueCreateCountingSemaphore+0x78>
		}
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	2100      	movs	r1, #0
 8008b12:	2046      	movs	r0, #70	@ 0x46
 8008b14:	f7f8 fbf6 	bl	8001304 <xTraceEventCreate2>
		}

		return xHandle;
 8008b18:	697b      	ldr	r3, [r7, #20]
	}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	0800e024 	.word	0x0800e024

08008b28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08e      	sub	sp, #56	@ 0x38
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b36:	2300      	movs	r3, #0
 8008b38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10b      	bne.n	8008b5c <xQueueGenericSend+0x34>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b56:	bf00      	nop
 8008b58:	bf00      	nop
 8008b5a:	e7fd      	b.n	8008b58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <xQueueGenericSend+0x42>
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <xQueueGenericSend+0x46>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <xQueueGenericSend+0x48>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10b      	bne.n	8008b8c <xQueueGenericSend+0x64>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	e7fd      	b.n	8008b88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d103      	bne.n	8008b9a <xQueueGenericSend+0x72>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <xQueueGenericSend+0x76>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <xQueueGenericSend+0x78>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <xQueueGenericSend+0x94>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	623b      	str	r3, [r7, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	e7fd      	b.n	8008bb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bbc:	f001 fcac 	bl	800a518 <xTaskGetSchedulerState>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <xQueueGenericSend+0xa4>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <xQueueGenericSend+0xa8>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <xQueueGenericSend+0xaa>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10b      	bne.n	8008bee <xQueueGenericSend+0xc6>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	61fb      	str	r3, [r7, #28]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bee:	f002 fa1d 	bl	800b02c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d302      	bcc.n	8008c04 <xQueueGenericSend+0xdc>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d15d      	bne.n	8008cc0 <xQueueGenericSend+0x198>
			{
				traceQUEUE_SEND( pxQueue );
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d82e      	bhi.n	8008c6c <xQueueGenericSend+0x144>
 8008c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c14 <xQueueGenericSend+0xec>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c29 	.word	0x08008c29
 8008c18:	08008c57 	.word	0x08008c57
 8008c1c:	08008c45 	.word	0x08008c45
 8008c20:	08008c45 	.word	0x08008c45
 8008c24:	08008c63 	.word	0x08008c63
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <xQueueGenericSend+0x10a>
 8008c2e:	2050      	movs	r0, #80	@ 0x50
 8008c30:	e000      	b.n	8008c34 <xQueueGenericSend+0x10c>
 8008c32:	20c0      	movs	r0, #192	@ 0xc0
 8008c34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f7f8 fb61 	bl	8001304 <xTraceEventCreate2>
 8008c42:	e013      	b.n	8008c6c <xQueueGenericSend+0x144>
 8008c44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2051      	movs	r0, #81	@ 0x51
 8008c50:	f7f8 fb58 	bl	8001304 <xTraceEventCreate2>
 8008c54:	e00a      	b.n	8008c6c <xQueueGenericSend+0x144>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	4619      	mov	r1, r3
 8008c5a:	2052      	movs	r0, #82	@ 0x52
 8008c5c:	f7f8 fada 	bl	8001214 <xTraceEventCreate1>
 8008c60:	e004      	b.n	8008c6c <xQueueGenericSend+0x144>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	4619      	mov	r1, r3
 8008c66:	20c5      	movs	r0, #197	@ 0xc5
 8008c68:	f7f8 fad4 	bl	8001214 <xTraceEventCreate1>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c72:	f000 fbe3 	bl	800943c <prvCopyDataToQueue>
 8008c76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <xQueueGenericSend+0x17a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	3324      	adds	r3, #36	@ 0x24
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 fa81 	bl	800a18c <xTaskRemoveFromEventList>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d013      	beq.n	8008cb8 <xQueueGenericSend+0x190>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c90:	4b82      	ldr	r3, [pc, #520]	@ (8008e9c <xQueueGenericSend+0x374>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	e00a      	b.n	8008cb8 <xQueueGenericSend+0x190>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d007      	beq.n	8008cb8 <xQueueGenericSend+0x190>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8008e9c <xQueueGenericSend+0x374>)
 8008caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cb8:	f002 f9ea 	bl	800b090 <vPortExitCritical>
				return pdPASS;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0e8      	b.n	8008e92 <xQueueGenericSend+0x36a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d130      	bne.n	8008d28 <xQueueGenericSend+0x200>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cc6:	f002 f9e3 	bl	800b090 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8008cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ccc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d827      	bhi.n	8008d24 <xQueueGenericSend+0x1fc>
 8008cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cdc <xQueueGenericSend+0x1b4>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008d1b 	.word	0x08008d1b
 8008ce4:	08008d0b 	.word	0x08008d0b
 8008ce8:	08008d0b 	.word	0x08008d0b
 8008cec:	08008d1b 	.word	0x08008d1b
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <xQueueGenericSend+0x1d2>
 8008cf6:	2053      	movs	r0, #83	@ 0x53
 8008cf8:	e000      	b.n	8008cfc <xQueueGenericSend+0x1d4>
 8008cfa:	20c1      	movs	r0, #193	@ 0xc1
 8008cfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d02:	461a      	mov	r2, r3
 8008d04:	f7f8 fafe 	bl	8001304 <xTraceEventCreate2>
 8008d08:	e00c      	b.n	8008d24 <xQueueGenericSend+0x1fc>
 8008d0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d10:	461a      	mov	r2, r3
 8008d12:	2054      	movs	r0, #84	@ 0x54
 8008d14:	f7f8 faf6 	bl	8001304 <xTraceEventCreate2>
 8008d18:	e004      	b.n	8008d24 <xQueueGenericSend+0x1fc>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	2055      	movs	r0, #85	@ 0x55
 8008d20:	f7f8 fa78 	bl	8001214 <xTraceEventCreate1>
					return errQUEUE_FULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	e0b4      	b.n	8008e92 <xQueueGenericSend+0x36a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <xQueueGenericSend+0x214>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 fa94 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d3c:	f002 f9a8 	bl	800b090 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d40:	f000 ffc6 	bl	8009cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d44:	f002 f972 	bl	800b02c <vPortEnterCritical>
 8008d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d54:	d103      	bne.n	8008d5e <xQueueGenericSend+0x236>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6a:	d103      	bne.n	8008d74 <xQueueGenericSend+0x24c>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d74:	f002 f98c 	bl	800b090 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d78:	1d3a      	adds	r2, r7, #4
 8008d7a:	f107 0314 	add.w	r3, r7, #20
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 fa83 	bl	800a28c <xTaskCheckForTimeOut>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d150      	bne.n	8008e2e <xQueueGenericSend+0x306>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d8e:	f000 fc4d 	bl	800962c <prvIsQueueFull>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d044      	beq.n	8008e22 <xQueueGenericSend+0x2fa>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d826      	bhi.n	8008df0 <xQueueGenericSend+0x2c8>
 8008da2:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <xQueueGenericSend+0x280>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dbd 	.word	0x08008dbd
 8008dac:	08008de7 	.word	0x08008de7
 8008db0:	08008dd7 	.word	0x08008dd7
 8008db4:	08008dd7 	.word	0x08008dd7
 8008db8:	08008de7 	.word	0x08008de7
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <xQueueGenericSend+0x29e>
 8008dc2:	2056      	movs	r0, #86	@ 0x56
 8008dc4:	e000      	b.n	8008dc8 <xQueueGenericSend+0x2a0>
 8008dc6:	20c2      	movs	r0, #194	@ 0xc2
 8008dc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7f8 fa98 	bl	8001304 <xTraceEventCreate2>
 8008dd4:	e00c      	b.n	8008df0 <xQueueGenericSend+0x2c8>
 8008dd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ddc:	461a      	mov	r2, r3
 8008dde:	2057      	movs	r0, #87	@ 0x57
 8008de0:	f7f8 fa90 	bl	8001304 <xTraceEventCreate2>
 8008de4:	e004      	b.n	8008df0 <xQueueGenericSend+0x2c8>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	4619      	mov	r1, r3
 8008dea:	2058      	movs	r0, #88	@ 0x58
 8008dec:	f7f8 fa12 	bl	8001214 <xTraceEventCreate1>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	3310      	adds	r3, #16
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 f96b 	bl	800a0d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008dfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e00:	f000 fbac 	bl	800955c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e04:	f000 ff72 	bl	8009cec <xTaskResumeAll>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f47f aeef 	bne.w	8008bee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008e10:	4b22      	ldr	r3, [pc, #136]	@ (8008e9c <xQueueGenericSend+0x374>)
 8008e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	e6e5      	b.n	8008bee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e24:	f000 fb9a 	bl	800955c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e28:	f000 ff60 	bl	8009cec <xTaskResumeAll>
 8008e2c:	e6df      	b.n	8008bee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e30:	f000 fb94 	bl	800955c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e34:	f000 ff5a 	bl	8009cec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d826      	bhi.n	8008e90 <xQueueGenericSend+0x368>
 8008e42:	a201      	add	r2, pc, #4	@ (adr r2, 8008e48 <xQueueGenericSend+0x320>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e5d 	.word	0x08008e5d
 8008e4c:	08008e87 	.word	0x08008e87
 8008e50:	08008e77 	.word	0x08008e77
 8008e54:	08008e77 	.word	0x08008e77
 8008e58:	08008e87 	.word	0x08008e87
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <xQueueGenericSend+0x33e>
 8008e62:	2053      	movs	r0, #83	@ 0x53
 8008e64:	e000      	b.n	8008e68 <xQueueGenericSend+0x340>
 8008e66:	20c1      	movs	r0, #193	@ 0xc1
 8008e68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f8 fa48 	bl	8001304 <xTraceEventCreate2>
 8008e74:	e00c      	b.n	8008e90 <xQueueGenericSend+0x368>
 8008e76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2054      	movs	r0, #84	@ 0x54
 8008e80:	f7f8 fa40 	bl	8001304 <xTraceEventCreate2>
 8008e84:	e004      	b.n	8008e90 <xQueueGenericSend+0x368>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	4619      	mov	r1, r3
 8008e8a:	2055      	movs	r0, #85	@ 0x55
 8008e8c:	f7f8 f9c2 	bl	8001214 <xTraceEventCreate1>
			return errQUEUE_FULL;
 8008e90:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3738      	adds	r7, #56	@ 0x38
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b090      	sub	sp, #64	@ 0x40
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d103      	bne.n	8008ede <xQueueGenericSendFromISR+0x3e>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <xQueueGenericSendFromISR+0x42>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <xQueueGenericSendFromISR+0x44>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10b      	bne.n	8008f00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008efa:	bf00      	nop
 8008efc:	bf00      	nop
 8008efe:	e7fd      	b.n	8008efc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d103      	bne.n	8008f0e <xQueueGenericSendFromISR+0x6e>
 8008f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <xQueueGenericSendFromISR+0x72>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <xQueueGenericSendFromISR+0x74>
 8008f12:	2300      	movs	r3, #0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10b      	bne.n	8008f30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	623b      	str	r3, [r7, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	bf00      	nop
 8008f2e:	e7fd      	b.n	8008f2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f30:	f002 f962 	bl	800b1f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f34:	f3ef 8211 	mrs	r2, BASEPRI
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	61fa      	str	r2, [r7, #28]
 8008f4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d302      	bcc.n	8008f62 <xQueueGenericSendFromISR+0xc2>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d150      	bne.n	8009004 <xQueueGenericSendFromISR+0x164>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f74:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <xQueueGenericSendFromISR+0xe8>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	db19      	blt.n	8008fb4 <xQueueGenericSendFromISR+0x114>
 8008f80:	3b02      	subs	r3, #2
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d816      	bhi.n	8008fb4 <xQueueGenericSendFromISR+0x114>
 8008f86:	e00d      	b.n	8008fa4 <xQueueGenericSendFromISR+0x104>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <xQueueGenericSendFromISR+0xf2>
 8008f8e:	2059      	movs	r0, #89	@ 0x59
 8008f90:	e000      	b.n	8008f94 <xQueueGenericSendFromISR+0xf4>
 8008f92:	20c3      	movs	r0, #195	@ 0xc3
 8008f94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f7f8 f9b1 	bl	8001304 <xTraceEventCreate2>
 8008fa2:	e007      	b.n	8008fb4 <xQueueGenericSendFromISR+0x114>
 8008fa4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008faa:	3301      	adds	r3, #1
 8008fac:	461a      	mov	r2, r3
 8008fae:	205a      	movs	r0, #90	@ 0x5a
 8008fb0:	f7f8 f9a8 	bl	8001304 <xTraceEventCreate2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008fba:	f000 fa3f 	bl	800943c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d112      	bne.n	8008fee <xQueueGenericSendFromISR+0x14e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d016      	beq.n	8008ffe <xQueueGenericSendFromISR+0x15e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd2:	3324      	adds	r3, #36	@ 0x24
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 f8d9 	bl	800a18c <xTaskRemoveFromEventList>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <xQueueGenericSendFromISR+0x15e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <xQueueGenericSendFromISR+0x15e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	e007      	b.n	8008ffe <xQueueGenericSendFromISR+0x15e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	b25a      	sxtb	r2, r3
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ffe:	2301      	movs	r3, #1
 8009000:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009002:	e020      	b.n	8009046 <xQueueGenericSendFromISR+0x1a6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <xQueueGenericSendFromISR+0x17a>
 800900e:	2b00      	cmp	r3, #0
 8009010:	db17      	blt.n	8009042 <xQueueGenericSendFromISR+0x1a2>
 8009012:	3b02      	subs	r3, #2
 8009014:	2b01      	cmp	r3, #1
 8009016:	d814      	bhi.n	8009042 <xQueueGenericSendFromISR+0x1a2>
 8009018:	e00c      	b.n	8009034 <xQueueGenericSendFromISR+0x194>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <xQueueGenericSendFromISR+0x184>
 8009020:	205c      	movs	r0, #92	@ 0x5c
 8009022:	e000      	b.n	8009026 <xQueueGenericSendFromISR+0x186>
 8009024:	20c4      	movs	r0, #196	@ 0xc4
 8009026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902c:	461a      	mov	r2, r3
 800902e:	f7f8 f969 	bl	8001304 <xTraceEventCreate2>
 8009032:	e006      	b.n	8009042 <xQueueGenericSendFromISR+0x1a2>
 8009034:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800903a:	461a      	mov	r2, r3
 800903c:	205d      	movs	r0, #93	@ 0x5d
 800903e:	f7f8 f961 	bl	8001304 <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009048:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009054:	4618      	mov	r0, r3
 8009056:	3740      	adds	r7, #64	@ 0x40
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08c      	sub	sp, #48	@ 0x30
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009068:	2300      	movs	r3, #0
 800906a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <xQueueReceive+0x32>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	623b      	str	r3, [r7, #32]
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	e7fd      	b.n	800908a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <xQueueReceive+0x40>
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <xQueueReceive+0x44>
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <xQueueReceive+0x46>
 80090a0:	2300      	movs	r3, #0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <xQueueReceive+0x62>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	61fb      	str	r3, [r7, #28]
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090be:	f001 fa2b 	bl	800a518 <xTaskGetSchedulerState>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <xQueueReceive+0x72>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <xQueueReceive+0x76>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <xQueueReceive+0x78>
 80090d2:	2300      	movs	r3, #0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10b      	bne.n	80090f0 <xQueueReceive+0x94>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	61bb      	str	r3, [r7, #24]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090f0:	f001 ff9c 	bl	800b02c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d050      	beq.n	80091a2 <xQueueReceive+0x146>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009104:	f000 fa04 	bl	8009510 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800910e:	2b04      	cmp	r3, #4
 8009110:	d82b      	bhi.n	800916a <xQueueReceive+0x10e>
 8009112:	a201      	add	r2, pc, #4	@ (adr r2, 8009118 <xQueueReceive+0xbc>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	0800912d 	.word	0x0800912d
 800911c:	08009151 	.word	0x08009151
 8009120:	0800913f 	.word	0x0800913f
 8009124:	0800913f 	.word	0x0800913f
 8009128:	0800915f 	.word	0x0800915f
 800912c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009134:	3b01      	subs	r3, #1
 8009136:	2060      	movs	r0, #96	@ 0x60
 8009138:	f7f8 f960 	bl	80013fc <xTraceEventCreate3>
 800913c:	e015      	b.n	800916a <xQueueReceive+0x10e>
 800913e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009146:	3b01      	subs	r3, #1
 8009148:	2061      	movs	r0, #97	@ 0x61
 800914a:	f7f8 f957 	bl	80013fc <xTraceEventCreate3>
 800914e:	e00c      	b.n	800916a <xQueueReceive+0x10e>
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4619      	mov	r1, r3
 8009156:	2062      	movs	r0, #98	@ 0x62
 8009158:	f7f8 f8d4 	bl	8001304 <xTraceEventCreate2>
 800915c:	e005      	b.n	800916a <xQueueReceive+0x10e>
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4619      	mov	r1, r3
 8009164:	20c7      	movs	r0, #199	@ 0xc7
 8009166:	f7f8 f8cd 	bl	8001304 <xTraceEventCreate2>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00f      	beq.n	800919a <xQueueReceive+0x13e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	3310      	adds	r3, #16
 800917e:	4618      	mov	r0, r3
 8009180:	f001 f804 	bl	800a18c <xTaskRemoveFromEventList>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <xQueueReceive+0x13e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800918a:	4b84      	ldr	r3, [pc, #528]	@ (800939c <xQueueReceive+0x340>)
 800918c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800919a:	f001 ff79 	bl	800b090 <vPortExitCritical>
				return pdPASS;
 800919e:	2301      	movs	r3, #1
 80091a0:	e0f8      	b.n	8009394 <xQueueReceive+0x338>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d132      	bne.n	800920e <xQueueReceive+0x1b2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091a8:	f001 ff72 	bl	800b090 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80091ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d829      	bhi.n	800920a <xQueueReceive+0x1ae>
 80091b6:	a201      	add	r2, pc, #4	@ (adr r2, 80091bc <xQueueReceive+0x160>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091d1 	.word	0x080091d1
 80091c0:	080091f1 	.word	0x080091f1
 80091c4:	080091e1 	.word	0x080091e1
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091ff 	.word	0x080091ff
 80091d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d8:	2063      	movs	r0, #99	@ 0x63
 80091da:	f7f8 f90f 	bl	80013fc <xTraceEventCreate3>
 80091de:	e014      	b.n	800920a <xQueueReceive+0x1ae>
 80091e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e8:	2064      	movs	r0, #100	@ 0x64
 80091ea:	f7f8 f907 	bl	80013fc <xTraceEventCreate3>
 80091ee:	e00c      	b.n	800920a <xQueueReceive+0x1ae>
 80091f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	4619      	mov	r1, r3
 80091f6:	2065      	movs	r0, #101	@ 0x65
 80091f8:	f7f8 f884 	bl	8001304 <xTraceEventCreate2>
 80091fc:	e005      	b.n	800920a <xQueueReceive+0x1ae>
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	4619      	mov	r1, r3
 8009204:	20c8      	movs	r0, #200	@ 0xc8
 8009206:	f7f8 f87d 	bl	8001304 <xTraceEventCreate2>
					return errQUEUE_EMPTY;
 800920a:	2300      	movs	r3, #0
 800920c:	e0c2      	b.n	8009394 <xQueueReceive+0x338>
				}
				else if( xEntryTimeSet == pdFALSE )
 800920e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d106      	bne.n	8009222 <xQueueReceive+0x1c6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009214:	f107 0310 	add.w	r3, r7, #16
 8009218:	4618      	mov	r0, r3
 800921a:	f001 f821 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800921e:	2301      	movs	r3, #1
 8009220:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009222:	f001 ff35 	bl	800b090 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009226:	f000 fd53 	bl	8009cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800922a:	f001 feff 	bl	800b02c <vPortEnterCritical>
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009234:	b25b      	sxtb	r3, r3
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d103      	bne.n	8009244 <xQueueReceive+0x1e8>
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800924a:	b25b      	sxtb	r3, r3
 800924c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009250:	d103      	bne.n	800925a <xQueueReceive+0x1fe>
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800925a:	f001 ff19 	bl	800b090 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800925e:	1d3a      	adds	r2, r7, #4
 8009260:	f107 0310 	add.w	r3, r7, #16
 8009264:	4611      	mov	r1, r2
 8009266:	4618      	mov	r0, r3
 8009268:	f001 f810 	bl	800a28c <xTaskCheckForTimeOut>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d154      	bne.n	800931c <xQueueReceive+0x2c0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009274:	f000 f9c4 	bl	8009600 <prvIsQueueEmpty>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d048      	beq.n	8009310 <xQueueReceive+0x2b4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009284:	2b04      	cmp	r3, #4
 8009286:	d82a      	bhi.n	80092de <xQueueReceive+0x282>
 8009288:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <xQueueReceive+0x234>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092a5 	.word	0x080092a5
 8009294:	080092c5 	.word	0x080092c5
 8009298:	080092b5 	.word	0x080092b5
 800929c:	080092b5 	.word	0x080092b5
 80092a0:	080092d3 	.word	0x080092d3
 80092a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	2066      	movs	r0, #102	@ 0x66
 80092ae:	f7f8 f8a5 	bl	80013fc <xTraceEventCreate3>
 80092b2:	e014      	b.n	80092de <xQueueReceive+0x282>
 80092b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092bc:	2067      	movs	r0, #103	@ 0x67
 80092be:	f7f8 f89d 	bl	80013fc <xTraceEventCreate3>
 80092c2:	e00c      	b.n	80092de <xQueueReceive+0x282>
 80092c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	4619      	mov	r1, r3
 80092ca:	2068      	movs	r0, #104	@ 0x68
 80092cc:	f7f8 f81a 	bl	8001304 <xTraceEventCreate2>
 80092d0:	e005      	b.n	80092de <xQueueReceive+0x282>
 80092d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4619      	mov	r1, r3
 80092d8:	20f6      	movs	r0, #246	@ 0xf6
 80092da:	f7f8 f813 	bl	8001304 <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	3324      	adds	r3, #36	@ 0x24
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fef4 	bl	800a0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092ee:	f000 f935 	bl	800955c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092f2:	f000 fcfb 	bl	8009cec <xTaskResumeAll>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f47f aef9 	bne.w	80090f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80092fe:	4b27      	ldr	r3, [pc, #156]	@ (800939c <xQueueReceive+0x340>)
 8009300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	e6ef      	b.n	80090f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009312:	f000 f923 	bl	800955c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009316:	f000 fce9 	bl	8009cec <xTaskResumeAll>
 800931a:	e6e9      	b.n	80090f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800931c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800931e:	f000 f91d 	bl	800955c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009322:	f000 fce3 	bl	8009cec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009328:	f000 f96a 	bl	8009600 <prvIsQueueEmpty>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	f43f aede 	beq.w	80090f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800933a:	2b04      	cmp	r3, #4
 800933c:	d829      	bhi.n	8009392 <xQueueReceive+0x336>
 800933e:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <xQueueReceive+0x2e8>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009359 	.word	0x08009359
 8009348:	08009379 	.word	0x08009379
 800934c:	08009369 	.word	0x08009369
 8009350:	08009369 	.word	0x08009369
 8009354:	08009387 	.word	0x08009387
 8009358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009360:	2063      	movs	r0, #99	@ 0x63
 8009362:	f7f8 f84b 	bl	80013fc <xTraceEventCreate3>
 8009366:	e014      	b.n	8009392 <xQueueReceive+0x336>
 8009368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009370:	2064      	movs	r0, #100	@ 0x64
 8009372:	f7f8 f843 	bl	80013fc <xTraceEventCreate3>
 8009376:	e00c      	b.n	8009392 <xQueueReceive+0x336>
 8009378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	4619      	mov	r1, r3
 800937e:	2065      	movs	r0, #101	@ 0x65
 8009380:	f7f7 ffc0 	bl	8001304 <xTraceEventCreate2>
 8009384:	e005      	b.n	8009392 <xQueueReceive+0x336>
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	4619      	mov	r1, r3
 800938c:	20c8      	movs	r0, #200	@ 0xc8
 800938e:	f7f7 ffb9 	bl	8001304 <xTraceEventCreate2>
				return errQUEUE_EMPTY;
 8009392:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009394:	4618      	mov	r0, r3
 8009396:	3730      	adds	r7, #48	@ 0x30
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10b      	bne.n	80093ca <vQueueDelete+0x2a>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	60bb      	str	r3, [r7, #8]
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop
 80093c8:	e7fd      	b.n	80093c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d824      	bhi.n	800941e <vQueueDelete+0x7e>
 80093d4:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <vQueueDelete+0x3c>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	080093f1 	.word	0x080093f1
 80093e0:	08009401 	.word	0x08009401
 80093e4:	08009411 	.word	0x08009411
 80093e8:	08009411 	.word	0x08009411
 80093ec:	08009401 	.word	0x08009401
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f4:	461a      	mov	r2, r3
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	2021      	movs	r0, #33	@ 0x21
 80093fa:	f7f8 fcc2 	bl	8001d82 <xTraceObjectUnregisterWithoutHandle>
 80093fe:	e00e      	b.n	800941e <vQueueDelete+0x7e>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009404:	461a      	mov	r2, r3
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	2023      	movs	r0, #35	@ 0x23
 800940a:	f7f8 fcba 	bl	8001d82 <xTraceObjectUnregisterWithoutHandle>
 800940e:	e006      	b.n	800941e <vQueueDelete+0x7e>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009414:	461a      	mov	r2, r3
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	2022      	movs	r0, #34	@ 0x22
 800941a:	f7f8 fcb2 	bl	8001d82 <xTraceObjectUnregisterWithoutHandle>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 f948 	bl	80096b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <vQueueDelete+0x94>
		{
			vPortFree( pxQueue );
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f002 f80a 	bl	800b448 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009434:	bf00      	nop
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009448:	2300      	movs	r3, #0
 800944a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009450:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10d      	bne.n	8009476 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d14d      	bne.n	80094fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	4618      	mov	r0, r3
 8009468:	f001 f874 	bl	800a554 <xTaskPriorityDisinherit>
 800946c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	609a      	str	r2, [r3, #8]
 8009474:	e043      	b.n	80094fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d119      	bne.n	80094b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6858      	ldr	r0, [r3, #4]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009484:	461a      	mov	r2, r3
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	f002 feef 	bl	800c26a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009494:	441a      	add	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d32b      	bcc.n	80094fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	e026      	b.n	80094fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68d8      	ldr	r0, [r3, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b8:	461a      	mov	r2, r3
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	f002 fed5 	bl	800c26a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c8:	425b      	negs	r3, r3
 80094ca:	441a      	add	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	68da      	ldr	r2, [r3, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d207      	bcs.n	80094ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e4:	425b      	negs	r3, r3
 80094e6:	441a      	add	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d105      	bne.n	80094fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009506:	697b      	ldr	r3, [r7, #20]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d018      	beq.n	8009554 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952a:	441a      	add	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68da      	ldr	r2, [r3, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	429a      	cmp	r2, r3
 800953a:	d303      	bcc.n	8009544 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68d9      	ldr	r1, [r3, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954c:	461a      	mov	r2, r3
 800954e:	6838      	ldr	r0, [r7, #0]
 8009550:	f002 fe8b 	bl	800c26a <memcpy>
	}
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009564:	f001 fd62 	bl	800b02c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800956e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009570:	e011      	b.n	8009596 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	d012      	beq.n	80095a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3324      	adds	r3, #36	@ 0x24
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fe04 	bl	800a18c <xTaskRemoveFromEventList>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800958a:	f000 fee3 	bl	800a354 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	3b01      	subs	r3, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800959a:	2b00      	cmp	r3, #0
 800959c:	dce9      	bgt.n	8009572 <prvUnlockQueue+0x16>
 800959e:	e000      	b.n	80095a2 <prvUnlockQueue+0x46>
					break;
 80095a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	22ff      	movs	r2, #255	@ 0xff
 80095a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80095aa:	f001 fd71 	bl	800b090 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095ae:	f001 fd3d 	bl	800b02c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095ba:	e011      	b.n	80095e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d012      	beq.n	80095ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3310      	adds	r3, #16
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fddf 	bl	800a18c <xTaskRemoveFromEventList>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095d4:	f000 febe 	bl	800a354 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	3b01      	subs	r3, #1
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dce9      	bgt.n	80095bc <prvUnlockQueue+0x60>
 80095e8:	e000      	b.n	80095ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	22ff      	movs	r2, #255	@ 0xff
 80095f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80095f4:	f001 fd4c 	bl	800b090 <vPortExitCritical>
}
 80095f8:	bf00      	nop
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009608:	f001 fd10 	bl	800b02c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009614:	2301      	movs	r3, #1
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	e001      	b.n	800961e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800961e:	f001 fd37 	bl	800b090 <vPortExitCritical>

	return xReturn;
 8009622:	68fb      	ldr	r3, [r7, #12]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009634:	f001 fcfa 	bl	800b02c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009640:	429a      	cmp	r2, r3
 8009642:	d102      	bne.n	800964a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009644:	2301      	movs	r3, #1
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	e001      	b.n	800964e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800964e:	f001 fd1f 	bl	800b090 <vPortExitCritical>

	return xReturn;
 8009652:	68fb      	ldr	r3, [r7, #12]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009666:	2300      	movs	r3, #0
 8009668:	60fb      	str	r3, [r7, #12]
 800966a:	e018      	b.n	800969e <vQueueAddToRegistry+0x42>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800966c:	4a10      	ldr	r2, [pc, #64]	@ (80096b0 <vQueueAddToRegistry+0x54>)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10f      	bne.n	8009698 <vQueueAddToRegistry+0x3c>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009678:	490d      	ldr	r1, [pc, #52]	@ (80096b0 <vQueueAddToRegistry+0x54>)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009682:	4a0b      	ldr	r2, [pc, #44]	@ (80096b0 <vQueueAddToRegistry+0x54>)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	4413      	add	r3, r2
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7f8 fbaa 	bl	8001dea <xTraceObjectSetNameWithoutHandle>
				break;
 8009696:	e006      	b.n	80096a6 <vQueueAddToRegistry+0x4a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b07      	cmp	r3, #7
 80096a2:	d9e3      	bls.n	800966c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000c7c 	.word	0x20000c7c

080096b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e016      	b.n	80096f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80096c2:	4a10      	ldr	r2, [pc, #64]	@ (8009704 <vQueueUnregisterQueue+0x50>)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	4413      	add	r3, r2
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d10b      	bne.n	80096ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80096d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009704 <vQueueUnregisterQueue+0x50>)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2100      	movs	r1, #0
 80096d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80096dc:	4a09      	ldr	r2, [pc, #36]	@ (8009704 <vQueueUnregisterQueue+0x50>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	4413      	add	r3, r2
 80096e4:	2200      	movs	r2, #0
 80096e6:	605a      	str	r2, [r3, #4]
				break;
 80096e8:	e006      	b.n	80096f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3301      	adds	r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b07      	cmp	r3, #7
 80096f4:	d9e5      	bls.n	80096c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	20000c7c 	.word	0x20000c7c

08009708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009718:	f001 fc88 	bl	800b02c <vPortEnterCritical>
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009722:	b25b      	sxtb	r3, r3
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d103      	bne.n	8009732 <vQueueWaitForMessageRestricted+0x2a>
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009738:	b25b      	sxtb	r3, r3
 800973a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973e:	d103      	bne.n	8009748 <vQueueWaitForMessageRestricted+0x40>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009748:	f001 fca2 	bl	800b090 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	3324      	adds	r3, #36	@ 0x24
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	68b9      	ldr	r1, [r7, #8]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 fcdf 	bl	800a120 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	f7ff fefa 	bl	800955c <prvUnlockQueue>
	}
 8009768:	bf00      	nop
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08e      	sub	sp, #56	@ 0x38
 8009774:	af04      	add	r7, sp, #16
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800977e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10b      	bne.n	800979c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	623b      	str	r3, [r7, #32]
}
 8009796:	bf00      	nop
 8009798:	bf00      	nop
 800979a:	e7fd      	b.n	8009798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800979c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10b      	bne.n	80097ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	61fb      	str	r3, [r7, #28]
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	e7fd      	b.n	80097b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097ba:	235c      	movs	r3, #92	@ 0x5c
 80097bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80097c2:	d00b      	beq.n	80097dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	61bb      	str	r3, [r7, #24]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01e      	beq.n	8009822 <xTaskCreateStatic+0xb2>
 80097e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01b      	beq.n	8009822 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097fc:	2300      	movs	r3, #0
 80097fe:	9303      	str	r3, [sp, #12]
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	9302      	str	r3, [sp, #8]
 8009804:	f107 0314 	add.w	r3, r7, #20
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f850 	bl	80098ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800981a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800981c:	f000 f8de 	bl	80099dc <prvAddNewTaskToReadyList>
 8009820:	e001      	b.n	8009826 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009826:	697b      	ldr	r3, [r7, #20]
	}
 8009828:	4618      	mov	r0, r3
 800982a:	3728      	adds	r7, #40	@ 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08c      	sub	sp, #48	@ 0x30
 8009834:	af04      	add	r7, sp, #16
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	4613      	mov	r3, r2
 800983e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009840:	88fb      	ldrh	r3, [r7, #6]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4618      	mov	r0, r3
 8009846:	f001 fd19 	bl	800b27c <pvPortMalloc>
 800984a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00e      	beq.n	8009870 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009852:	205c      	movs	r0, #92	@ 0x5c
 8009854:	f001 fd12 	bl	800b27c <pvPortMalloc>
 8009858:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	631a      	str	r2, [r3, #48]	@ 0x30
 8009866:	e005      	b.n	8009874 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009868:	6978      	ldr	r0, [r7, #20]
 800986a:	f001 fded 	bl	800b448 <vPortFree>
 800986e:	e001      	b.n	8009874 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d017      	beq.n	80098aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009882:	88fa      	ldrh	r2, [r7, #6]
 8009884:	2300      	movs	r3, #0
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	9302      	str	r3, [sp, #8]
 800988c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 f80e 	bl	80098ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800989e:	69f8      	ldr	r0, [r7, #28]
 80098a0:	f000 f89c 	bl	80099dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098a4:	2301      	movs	r3, #1
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	e002      	b.n	80098b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098aa:	f04f 33ff 	mov.w	r3, #4294967295
 80098ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098b0:	69bb      	ldr	r3, [r7, #24]
	}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3720      	adds	r7, #32
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b088      	sub	sp, #32
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
 80098c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	461a      	mov	r2, r3
 80098d2:	21a5      	movs	r1, #165	@ 0xa5
 80098d4:	f002 fc49 	bl	800c16a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098e2:	3b01      	subs	r3, #1
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	f023 0307 	bic.w	r3, r3, #7
 80098f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f003 0307 	and.w	r3, r3, #7
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	617b      	str	r3, [r7, #20]
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	e7fd      	b.n	8009910 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d01f      	beq.n	800995a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800991a:	2300      	movs	r3, #0
 800991c:	61fb      	str	r3, [r7, #28]
 800991e:	e012      	b.n	8009946 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	4413      	add	r3, r2
 8009926:	7819      	ldrb	r1, [r3, #0]
 8009928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4413      	add	r3, r2
 800992e:	3334      	adds	r3, #52	@ 0x34
 8009930:	460a      	mov	r2, r1
 8009932:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d006      	beq.n	800994e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	3301      	adds	r3, #1
 8009944:	61fb      	str	r3, [r7, #28]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	2b0f      	cmp	r3, #15
 800994a:	d9e9      	bls.n	8009920 <prvInitialiseNewTask+0x66>
 800994c:	e000      	b.n	8009950 <prvInitialiseNewTask+0x96>
			{
				break;
 800994e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009958:	e003      	b.n	8009962 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	2b37      	cmp	r3, #55	@ 0x37
 8009966:	d901      	bls.n	800996c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009968:	2337      	movs	r3, #55	@ 0x37
 800996a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009970:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009976:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	2200      	movs	r2, #0
 800997c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	3304      	adds	r3, #4
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fde8 	bl	8008558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998a:	3318      	adds	r3, #24
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fde3 	bl	8008558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009996:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	2200      	movs	r2, #0
 80099ac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	68f9      	ldr	r1, [r7, #12]
 80099ba:	69b8      	ldr	r0, [r7, #24]
 80099bc:	f001 f9f4 	bl	800ada8 <pxPortInitialiseStack>
 80099c0:	4602      	mov	r2, r0
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d2:	bf00      	nop
 80099d4:	3720      	adds	r7, #32
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099e4:	f001 fb22 	bl	800b02c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099e8:	4b37      	ldr	r3, [pc, #220]	@ (8009ac8 <prvAddNewTaskToReadyList+0xec>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3301      	adds	r3, #1
 80099ee:	4a36      	ldr	r2, [pc, #216]	@ (8009ac8 <prvAddNewTaskToReadyList+0xec>)
 80099f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099f2:	4b36      	ldr	r3, [pc, #216]	@ (8009acc <prvAddNewTaskToReadyList+0xf0>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d109      	bne.n	8009a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099fa:	4a34      	ldr	r2, [pc, #208]	@ (8009acc <prvAddNewTaskToReadyList+0xf0>)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a00:	4b31      	ldr	r3, [pc, #196]	@ (8009ac8 <prvAddNewTaskToReadyList+0xec>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d110      	bne.n	8009a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a08:	f000 fcc8 	bl	800a39c <prvInitialiseTaskLists>
 8009a0c:	e00d      	b.n	8009a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a0e:	4b30      	ldr	r3, [pc, #192]	@ (8009ad0 <prvAddNewTaskToReadyList+0xf4>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d109      	bne.n	8009a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a16:	4b2d      	ldr	r3, [pc, #180]	@ (8009acc <prvAddNewTaskToReadyList+0xf0>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d802      	bhi.n	8009a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a24:	4a29      	ldr	r2, [pc, #164]	@ (8009acc <prvAddNewTaskToReadyList+0xf0>)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ad4 <prvAddNewTaskToReadyList+0xf8>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	4a28      	ldr	r2, [pc, #160]	@ (8009ad4 <prvAddNewTaskToReadyList+0xf8>)
 8009a32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a34:	4b27      	ldr	r3, [pc, #156]	@ (8009ad4 <prvAddNewTaskToReadyList+0xf8>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <prvAddNewTaskToReadyList+0x7e>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d008      	beq.n	8009a5a <prvAddNewTaskToReadyList+0x7e>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	2010      	movs	r0, #16
 8009a56:	f7f8 f97b 	bl	8001d50 <xTraceObjectRegisterWithoutHandle>

		prvAddTaskToReadyList( pxNewTCB );
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	2030      	movs	r0, #48	@ 0x30
 8009a60:	f7f7 fbd8 	bl	8001214 <xTraceEventCreate1>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a68:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad8 <prvAddNewTaskToReadyList+0xfc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d903      	bls.n	8009a78 <prvAddNewTaskToReadyList+0x9c>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a74:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <prvAddNewTaskToReadyList+0xfc>)
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4a15      	ldr	r2, [pc, #84]	@ (8009adc <prvAddNewTaskToReadyList+0x100>)
 8009a86:	441a      	add	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7fe fd6f 	bl	8008572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a94:	f001 fafc 	bl	800b090 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a98:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad0 <prvAddNewTaskToReadyList+0xf4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00e      	beq.n	8009abe <prvAddNewTaskToReadyList+0xe2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8009acc <prvAddNewTaskToReadyList+0xf0>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d207      	bcs.n	8009abe <prvAddNewTaskToReadyList+0xe2>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009aae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae0 <prvAddNewTaskToReadyList+0x104>)
 8009ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20001190 	.word	0x20001190
 8009acc:	20000cbc 	.word	0x20000cbc
 8009ad0:	2000119c 	.word	0x2000119c
 8009ad4:	200011ac 	.word	0x200011ac
 8009ad8:	20001198 	.word	0x20001198
 8009adc:	20000cc0 	.word	0x20000cc0
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	@ 0x28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <vTaskDelayUntil+0x2c>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	617b      	str	r3, [r7, #20]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10b      	bne.n	8009b2e <vTaskDelayUntil+0x4a>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	613b      	str	r3, [r7, #16]
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	e7fd      	b.n	8009b2a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8009b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8009be0 <vTaskDelayUntil+0xfc>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00b      	beq.n	8009b4e <vTaskDelayUntil+0x6a>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	60fb      	str	r3, [r7, #12]
}
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	e7fd      	b.n	8009b4a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8009b4e:	f000 f8bf 	bl	8009cd0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009b52:	4b24      	ldr	r3, [pc, #144]	@ (8009be4 <vTaskDelayUntil+0x100>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	4413      	add	r3, r2
 8009b60:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a3a      	ldr	r2, [r7, #32]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d20b      	bcs.n	8009b84 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d211      	bcs.n	8009b9a <vTaskDelayUntil+0xb6>
 8009b76:	69fa      	ldr	r2, [r7, #28]
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d90d      	bls.n	8009b9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b82:	e00a      	b.n	8009b9a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d303      	bcc.n	8009b96 <vTaskDelayUntil+0xb2>
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d901      	bls.n	8009b9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009b96:	2301      	movs	r3, #1
 8009b98:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00a      	beq.n	8009bbc <vTaskDelayUntil+0xd8>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8009ba6:	69f9      	ldr	r1, [r7, #28]
 8009ba8:	2079      	movs	r0, #121	@ 0x79
 8009baa:	f7f7 fb33 	bl	8001214 <xTraceEventCreate1>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fd48 	bl	800a64c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009bbc:	f000 f896 	bl	8009cec <xTaskResumeAll>
 8009bc0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d107      	bne.n	8009bd8 <vTaskDelayUntil+0xf4>
		{
			portYIELD_WITHIN_API();
 8009bc8:	4b07      	ldr	r3, [pc, #28]	@ (8009be8 <vTaskDelayUntil+0x104>)
 8009bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bd8:	bf00      	nop
 8009bda:	3728      	adds	r7, #40	@ 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200011b8 	.word	0x200011b8
 8009be4:	20001194 	.word	0x20001194
 8009be8:	e000ed04 	.word	0xe000ed04

08009bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	@ 0x28
 8009bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bfa:	463a      	mov	r2, r7
 8009bfc:	1d39      	adds	r1, r7, #4
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe fc54 	bl	80084b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	9202      	str	r2, [sp, #8]
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	2300      	movs	r3, #0
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	2300      	movs	r3, #0
 8009c18:	460a      	mov	r2, r1
 8009c1a:	4926      	ldr	r1, [pc, #152]	@ (8009cb4 <vTaskStartScheduler+0xc8>)
 8009c1c:	4826      	ldr	r0, [pc, #152]	@ (8009cb8 <vTaskStartScheduler+0xcc>)
 8009c1e:	f7ff fda7 	bl	8009770 <xTaskCreateStatic>
 8009c22:	4603      	mov	r3, r0
 8009c24:	4a25      	ldr	r2, [pc, #148]	@ (8009cbc <vTaskStartScheduler+0xd0>)
 8009c26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c28:	4b24      	ldr	r3, [pc, #144]	@ (8009cbc <vTaskStartScheduler+0xd0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c30:	2301      	movs	r3, #1
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e001      	b.n	8009c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d102      	bne.n	8009c46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c40:	f000 fd58 	bl	800a6f4 <xTimerCreateTimerTask>
 8009c44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d11f      	bne.n	8009c8c <vTaskStartScheduler+0xa0>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	613b      	str	r3, [r7, #16]
}
 8009c5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c60:	4b17      	ldr	r3, [pc, #92]	@ (8009cc0 <vTaskStartScheduler+0xd4>)
 8009c62:	f04f 32ff 	mov.w	r2, #4294967295
 8009c66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c68:	4b16      	ldr	r3, [pc, #88]	@ (8009cc4 <vTaskStartScheduler+0xd8>)
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c6e:	4b16      	ldr	r3, [pc, #88]	@ (8009cc8 <vTaskStartScheduler+0xdc>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8009c74:	4b15      	ldr	r3, [pc, #84]	@ (8009ccc <vTaskStartScheduler+0xe0>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	4b14      	ldr	r3, [pc, #80]	@ (8009ccc <vTaskStartScheduler+0xe0>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7f8 f8f5 	bl	8001e70 <xTraceTaskSwitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c86:	f001 f91b 	bl	800aec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c8a:	e00f      	b.n	8009cac <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	d10b      	bne.n	8009cac <vTaskStartScheduler+0xc0>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	60fb      	str	r3, [r7, #12]
}
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	e7fd      	b.n	8009ca8 <vTaskStartScheduler+0xbc>
}
 8009cac:	bf00      	nop
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	0800e028 	.word	0x0800e028
 8009cb8:	0800a36d 	.word	0x0800a36d
 8009cbc:	200011b4 	.word	0x200011b4
 8009cc0:	200011b0 	.word	0x200011b0
 8009cc4:	2000119c 	.word	0x2000119c
 8009cc8:	20001194 	.word	0x20001194
 8009ccc:	20000cbc 	.word	0x20000cbc

08009cd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009cd4:	4b04      	ldr	r3, [pc, #16]	@ (8009ce8 <vTaskSuspendAll+0x18>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	4a03      	ldr	r2, [pc, #12]	@ (8009ce8 <vTaskSuspendAll+0x18>)
 8009cdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009cde:	bf00      	nop
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	200011b8 	.word	0x200011b8

08009cec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cfa:	4b45      	ldr	r3, [pc, #276]	@ (8009e10 <xTaskResumeAll+0x124>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10b      	bne.n	8009d1a <xTaskResumeAll+0x2e>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	603b      	str	r3, [r7, #0]
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	e7fd      	b.n	8009d16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d1a:	f001 f987 	bl	800b02c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e10 <xTaskResumeAll+0x124>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	4a3a      	ldr	r2, [pc, #232]	@ (8009e10 <xTaskResumeAll+0x124>)
 8009d26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d28:	4b39      	ldr	r3, [pc, #228]	@ (8009e10 <xTaskResumeAll+0x124>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d167      	bne.n	8009e00 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d30:	4b38      	ldr	r3, [pc, #224]	@ (8009e14 <xTaskResumeAll+0x128>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d063      	beq.n	8009e00 <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d38:	e034      	b.n	8009da4 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3a:	4b37      	ldr	r3, [pc, #220]	@ (8009e18 <xTaskResumeAll+0x12c>)
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3318      	adds	r3, #24
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fc70 	bl	800862c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fe fc6b 	bl	800862c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	2030      	movs	r0, #48	@ 0x30
 8009d5c:	f7f7 fa5a 	bl	8001214 <xTraceEventCreate1>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d64:	4b2d      	ldr	r3, [pc, #180]	@ (8009e1c <xTaskResumeAll+0x130>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d903      	bls.n	8009d74 <xTaskResumeAll+0x88>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d70:	4a2a      	ldr	r2, [pc, #168]	@ (8009e1c <xTaskResumeAll+0x130>)
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4a27      	ldr	r2, [pc, #156]	@ (8009e20 <xTaskResumeAll+0x134>)
 8009d82:	441a      	add	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fe fbf1 	bl	8008572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d94:	4b23      	ldr	r3, [pc, #140]	@ (8009e24 <xTaskResumeAll+0x138>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d302      	bcc.n	8009da4 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 8009d9e:	4b22      	ldr	r3, [pc, #136]	@ (8009e28 <xTaskResumeAll+0x13c>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009da4:	4b1c      	ldr	r3, [pc, #112]	@ (8009e18 <xTaskResumeAll+0x12c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1c6      	bne.n	8009d3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009db2:	f000 fb91 	bl	800a4d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009db6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e2c <xTaskResumeAll+0x140>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d010      	beq.n	8009de4 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009dc2:	f000 f847 	bl	8009e54 <xTaskIncrementTick>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 8009dcc:	4b16      	ldr	r3, [pc, #88]	@ (8009e28 <xTaskResumeAll+0x13c>)
 8009dce:	2201      	movs	r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1f1      	bne.n	8009dc2 <xTaskResumeAll+0xd6>

						xPendedTicks = 0;
 8009dde:	4b13      	ldr	r3, [pc, #76]	@ (8009e2c <xTaskResumeAll+0x140>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009de4:	4b10      	ldr	r3, [pc, #64]	@ (8009e28 <xTaskResumeAll+0x13c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009dec:	2301      	movs	r3, #1
 8009dee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009df0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e30 <xTaskResumeAll+0x144>)
 8009df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e00:	f001 f946 	bl	800b090 <vPortExitCritical>

	return xAlreadyYielded;
 8009e04:	68bb      	ldr	r3, [r7, #8]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200011b8 	.word	0x200011b8
 8009e14:	20001190 	.word	0x20001190
 8009e18:	20001150 	.word	0x20001150
 8009e1c:	20001198 	.word	0x20001198
 8009e20:	20000cc0 	.word	0x20000cc0
 8009e24:	20000cbc 	.word	0x20000cbc
 8009e28:	200011a4 	.word	0x200011a4
 8009e2c:	200011a0 	.word	0x200011a0
 8009e30:	e000ed04 	.word	0xe000ed04

08009e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e3a:	4b05      	ldr	r3, [pc, #20]	@ (8009e50 <xTaskGetTickCount+0x1c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e40:	687b      	ldr	r3, [r7, #4]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	20001194 	.word	0x20001194

08009e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8009e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8009fd8 <xTaskIncrementTick+0x184>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d003      	beq.n	8009e6e <xTaskIncrementTick+0x1a>
 8009e66:	4b5d      	ldr	r3, [pc, #372]	@ (8009fdc <xTaskIncrementTick+0x188>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d105      	bne.n	8009e7a <xTaskIncrementTick+0x26>
 8009e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8009fe0 <xTaskIncrementTick+0x18c>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b5c      	ldr	r3, [pc, #368]	@ (8009fe4 <xTaskIncrementTick+0x190>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3201      	adds	r2, #1
 8009e78:	619a      	str	r2, [r3, #24]
 8009e7a:	4b57      	ldr	r3, [pc, #348]	@ (8009fd8 <xTaskIncrementTick+0x184>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <xTaskIncrementTick+0x3c>
 8009e82:	4b57      	ldr	r3, [pc, #348]	@ (8009fe0 <xTaskIncrementTick+0x18c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	4619      	mov	r1, r3
 8009e8a:	2031      	movs	r0, #49	@ 0x31
 8009e8c:	f7f7 f9c2 	bl	8001214 <xTraceEventCreate1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e90:	4b51      	ldr	r3, [pc, #324]	@ (8009fd8 <xTaskIncrementTick+0x184>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f040 8095 	bne.w	8009fc4 <xTaskIncrementTick+0x170>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e9a:	4b51      	ldr	r3, [pc, #324]	@ (8009fe0 <xTaskIncrementTick+0x18c>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ea2:	4a4f      	ldr	r2, [pc, #316]	@ (8009fe0 <xTaskIncrementTick+0x18c>)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d121      	bne.n	8009ef2 <xTaskIncrementTick+0x9e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009eae:	4b4e      	ldr	r3, [pc, #312]	@ (8009fe8 <xTaskIncrementTick+0x194>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <xTaskIncrementTick+0x7c>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	603b      	str	r3, [r7, #0]
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	e7fd      	b.n	8009ecc <xTaskIncrementTick+0x78>
 8009ed0:	4b45      	ldr	r3, [pc, #276]	@ (8009fe8 <xTaskIncrementTick+0x194>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	4b45      	ldr	r3, [pc, #276]	@ (8009fec <xTaskIncrementTick+0x198>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a43      	ldr	r2, [pc, #268]	@ (8009fe8 <xTaskIncrementTick+0x194>)
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	4a43      	ldr	r2, [pc, #268]	@ (8009fec <xTaskIncrementTick+0x198>)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	4b42      	ldr	r3, [pc, #264]	@ (8009ff0 <xTaskIncrementTick+0x19c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	4a41      	ldr	r2, [pc, #260]	@ (8009ff0 <xTaskIncrementTick+0x19c>)
 8009eec:	6013      	str	r3, [r2, #0]
 8009eee:	f000 faf3 	bl	800a4d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ef2:	4b40      	ldr	r3, [pc, #256]	@ (8009ff4 <xTaskIncrementTick+0x1a0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d34e      	bcc.n	8009f9a <xTaskIncrementTick+0x146>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009efc:	4b3a      	ldr	r3, [pc, #232]	@ (8009fe8 <xTaskIncrementTick+0x194>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d104      	bne.n	8009f10 <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f06:	4b3b      	ldr	r3, [pc, #236]	@ (8009ff4 <xTaskIncrementTick+0x1a0>)
 8009f08:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0c:	601a      	str	r2, [r3, #0]
					break;
 8009f0e:	e044      	b.n	8009f9a <xTaskIncrementTick+0x146>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f10:	4b35      	ldr	r3, [pc, #212]	@ (8009fe8 <xTaskIncrementTick+0x194>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d203      	bcs.n	8009f30 <xTaskIncrementTick+0xdc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f28:	4a32      	ldr	r2, [pc, #200]	@ (8009ff4 <xTaskIncrementTick+0x1a0>)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f2e:	e034      	b.n	8009f9a <xTaskIncrementTick+0x146>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fb79 	bl	800862c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d004      	beq.n	8009f4c <xTaskIncrementTick+0xf8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	3318      	adds	r3, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe fb70 	bl	800862c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	2030      	movs	r0, #48	@ 0x30
 8009f52:	f7f7 f95f 	bl	8001214 <xTraceEventCreate1>
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5a:	4b27      	ldr	r3, [pc, #156]	@ (8009ff8 <xTaskIncrementTick+0x1a4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d903      	bls.n	8009f6a <xTaskIncrementTick+0x116>
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f66:	4a24      	ldr	r2, [pc, #144]	@ (8009ff8 <xTaskIncrementTick+0x1a4>)
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4a21      	ldr	r2, [pc, #132]	@ (8009ffc <xTaskIncrementTick+0x1a8>)
 8009f78:	441a      	add	r2, r3
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4610      	mov	r0, r2
 8009f82:	f7fe faf6 	bl	8008572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f8a:	4b1d      	ldr	r3, [pc, #116]	@ (800a000 <xTaskIncrementTick+0x1ac>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d3b3      	bcc.n	8009efc <xTaskIncrementTick+0xa8>
						{
							xSwitchRequired = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f98:	e7b0      	b.n	8009efc <xTaskIncrementTick+0xa8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f9a:	4b19      	ldr	r3, [pc, #100]	@ (800a000 <xTaskIncrementTick+0x1ac>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa0:	4916      	ldr	r1, [pc, #88]	@ (8009ffc <xTaskIncrementTick+0x1a8>)
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	440b      	add	r3, r1
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d901      	bls.n	8009fb6 <xTaskIncrementTick+0x162>
			{
				xSwitchRequired = pdTRUE;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fb6:	4b13      	ldr	r3, [pc, #76]	@ (800a004 <xTaskIncrementTick+0x1b0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <xTaskIncrementTick+0x17a>
			{
				xSwitchRequired = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e004      	b.n	8009fce <xTaskIncrementTick+0x17a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009fc4:	4b05      	ldr	r3, [pc, #20]	@ (8009fdc <xTaskIncrementTick+0x188>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	4a04      	ldr	r2, [pc, #16]	@ (8009fdc <xTaskIncrementTick+0x188>)
 8009fcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009fce:	697b      	ldr	r3, [r7, #20]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	200011b8 	.word	0x200011b8
 8009fdc:	200011a0 	.word	0x200011a0
 8009fe0:	20001194 	.word	0x20001194
 8009fe4:	20000240 	.word	0x20000240
 8009fe8:	20001148 	.word	0x20001148
 8009fec:	2000114c 	.word	0x2000114c
 8009ff0:	200011a8 	.word	0x200011a8
 8009ff4:	200011b0 	.word	0x200011b0
 8009ff8:	20001198 	.word	0x20001198
 8009ffc:	20000cc0 	.word	0x20000cc0
 800a000:	20000cbc 	.word	0x20000cbc
 800a004:	200011a4 	.word	0x200011a4

0800a008 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a00e:	4b2c      	ldr	r3, [pc, #176]	@ (800a0c0 <vTaskSwitchContext+0xb8>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a016:	4b2b      	ldr	r3, [pc, #172]	@ (800a0c4 <vTaskSwitchContext+0xbc>)
 800a018:	2201      	movs	r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a01c:	e04b      	b.n	800a0b6 <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 800a01e:	4b29      	ldr	r3, [pc, #164]	@ (800a0c4 <vTaskSwitchContext+0xbc>)
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a024:	4b28      	ldr	r3, [pc, #160]	@ (800a0c8 <vTaskSwitchContext+0xc0>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	e011      	b.n	800a050 <vTaskSwitchContext+0x48>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <vTaskSwitchContext+0x42>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	607b      	str	r3, [r7, #4]
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	e7fd      	b.n	800a046 <vTaskSwitchContext+0x3e>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	491e      	ldr	r1, [pc, #120]	@ (800a0cc <vTaskSwitchContext+0xc4>)
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	440b      	add	r3, r1
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d0e3      	beq.n	800a02c <vTaskSwitchContext+0x24>
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4a17      	ldr	r2, [pc, #92]	@ (800a0cc <vTaskSwitchContext+0xc4>)
 800a070:	4413      	add	r3, r2
 800a072:	60bb      	str	r3, [r7, #8]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	605a      	str	r2, [r3, #4]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	3308      	adds	r3, #8
 800a086:	429a      	cmp	r2, r3
 800a088:	d104      	bne.n	800a094 <vTaskSwitchContext+0x8c>
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	605a      	str	r2, [r3, #4]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	4a0d      	ldr	r2, [pc, #52]	@ (800a0d0 <vTaskSwitchContext+0xc8>)
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c8 <vTaskSwitchContext+0xc0>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d0 <vTaskSwitchContext+0xc8>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4b09      	ldr	r3, [pc, #36]	@ (800a0d0 <vTaskSwitchContext+0xc8>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7f7 fedd 	bl	8001e70 <xTraceTaskSwitch>
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	200011b8 	.word	0x200011b8
 800a0c4:	200011a4 	.word	0x200011a4
 800a0c8:	20001198 	.word	0x20001198
 800a0cc:	20000cc0 	.word	0x20000cc0
 800a0d0:	20000cbc 	.word	0x20000cbc

0800a0d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10b      	bne.n	800a0fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	60fb      	str	r3, [r7, #12]
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	e7fd      	b.n	800a0f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0fc:	4b07      	ldr	r3, [pc, #28]	@ (800a11c <vTaskPlaceOnEventList+0x48>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3318      	adds	r3, #24
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7fe fa58 	bl	80085ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a10a:	2101      	movs	r1, #1
 800a10c:	6838      	ldr	r0, [r7, #0]
 800a10e:	f000 fa9d 	bl	800a64c <prvAddCurrentTaskToDelayedList>
}
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000cbc 	.word	0x20000cbc

0800a120 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	617b      	str	r3, [r7, #20]
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	e7fd      	b.n	800a146 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a14a:	4b0e      	ldr	r3, [pc, #56]	@ (800a184 <vTaskPlaceOnEventListRestricted+0x64>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3318      	adds	r3, #24
 800a150:	4619      	mov	r1, r3
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7fe fa0d 	bl	8008572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a15e:	f04f 33ff 	mov.w	r3, #4294967295
 800a162:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a164:	4b08      	ldr	r3, [pc, #32]	@ (800a188 <vTaskPlaceOnEventListRestricted+0x68>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	4413      	add	r3, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	2079      	movs	r0, #121	@ 0x79
 800a170:	f7f7 f850 	bl	8001214 <xTraceEventCreate1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	68b8      	ldr	r0, [r7, #8]
 800a178:	f000 fa68 	bl	800a64c <prvAddCurrentTaskToDelayedList>
	}
 800a17c:	bf00      	nop
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000cbc 	.word	0x20000cbc
 800a188:	20001194 	.word	0x20001194

0800a18c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10b      	bne.n	800a1ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60fb      	str	r3, [r7, #12]
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	e7fd      	b.n	800a1b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	3318      	adds	r3, #24
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fa34 	bl	800862c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1c4:	4b20      	ldr	r3, [pc, #128]	@ (800a248 <xTaskRemoveFromEventList+0xbc>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d122      	bne.n	800a212 <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe fa2b 	bl	800862c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	2030      	movs	r0, #48	@ 0x30
 800a1dc:	f7f7 f81a 	bl	8001214 <xTraceEventCreate1>
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e4:	4b19      	ldr	r3, [pc, #100]	@ (800a24c <xTaskRemoveFromEventList+0xc0>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d903      	bls.n	800a1f4 <xTaskRemoveFromEventList+0x68>
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f0:	4a16      	ldr	r2, [pc, #88]	@ (800a24c <xTaskRemoveFromEventList+0xc0>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4a13      	ldr	r2, [pc, #76]	@ (800a250 <xTaskRemoveFromEventList+0xc4>)
 800a202:	441a      	add	r2, r3
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fe f9b1 	bl	8008572 <vListInsertEnd>
 800a210:	e005      	b.n	800a21e <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	3318      	adds	r3, #24
 800a216:	4619      	mov	r1, r3
 800a218:	480e      	ldr	r0, [pc, #56]	@ (800a254 <xTaskRemoveFromEventList+0xc8>)
 800a21a:	f7fe f9aa 	bl	8008572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a222:	4b0d      	ldr	r3, [pc, #52]	@ (800a258 <xTaskRemoveFromEventList+0xcc>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	429a      	cmp	r2, r3
 800a22a:	d905      	bls.n	800a238 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a22c:	2301      	movs	r3, #1
 800a22e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a230:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <xTaskRemoveFromEventList+0xd0>)
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e001      	b.n	800a23c <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a23c:	697b      	ldr	r3, [r7, #20]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	200011b8 	.word	0x200011b8
 800a24c:	20001198 	.word	0x20001198
 800a250:	20000cc0 	.word	0x20000cc0
 800a254:	20001150 	.word	0x20001150
 800a258:	20000cbc 	.word	0x20000cbc
 800a25c:	200011a4 	.word	0x200011a4

0800a260 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a268:	4b06      	ldr	r3, [pc, #24]	@ (800a284 <vTaskInternalSetTimeOutState+0x24>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a270:	4b05      	ldr	r3, [pc, #20]	@ (800a288 <vTaskInternalSetTimeOutState+0x28>)
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	605a      	str	r2, [r3, #4]
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	200011a8 	.word	0x200011a8
 800a288:	20001194 	.word	0x20001194

0800a28c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10b      	bne.n	800a2b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	613b      	str	r3, [r7, #16]
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	e7fd      	b.n	800a2b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10b      	bne.n	800a2d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	60fb      	str	r3, [r7, #12]
}
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
 800a2d0:	e7fd      	b.n	800a2ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a2d2:	f000 feab 	bl	800b02c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a34c <xTaskCheckForTimeOut+0xc0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ee:	d102      	bne.n	800a2f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61fb      	str	r3, [r7, #28]
 800a2f4:	e023      	b.n	800a33e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <xTaskCheckForTimeOut+0xc4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d007      	beq.n	800a312 <xTaskCheckForTimeOut+0x86>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d302      	bcc.n	800a312 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	e015      	b.n	800a33e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d20b      	bcs.n	800a334 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	1ad2      	subs	r2, r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff ff99 	bl	800a260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	61fb      	str	r3, [r7, #28]
 800a332:	e004      	b.n	800a33e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a33a:	2301      	movs	r3, #1
 800a33c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a33e:	f000 fea7 	bl	800b090 <vPortExitCritical>

	return xReturn;
 800a342:	69fb      	ldr	r3, [r7, #28]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20001194 	.word	0x20001194
 800a350:	200011a8 	.word	0x200011a8

0800a354 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a358:	4b03      	ldr	r3, [pc, #12]	@ (800a368 <vTaskMissedYield+0x14>)
 800a35a:	2201      	movs	r2, #1
 800a35c:	601a      	str	r2, [r3, #0]
}
 800a35e:	bf00      	nop
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	200011a4 	.word	0x200011a4

0800a36c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a374:	f000 f852 	bl	800a41c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a378:	4b06      	ldr	r3, [pc, #24]	@ (800a394 <prvIdleTask+0x28>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d9f9      	bls.n	800a374 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a380:	4b05      	ldr	r3, [pc, #20]	@ (800a398 <prvIdleTask+0x2c>)
 800a382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a390:	e7f0      	b.n	800a374 <prvIdleTask+0x8>
 800a392:	bf00      	nop
 800a394:	20000cc0 	.word	0x20000cc0
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	607b      	str	r3, [r7, #4]
 800a3a6:	e00c      	b.n	800a3c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4a12      	ldr	r2, [pc, #72]	@ (800a3fc <prvInitialiseTaskLists+0x60>)
 800a3b4:	4413      	add	r3, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe f8ae 	bl	8008518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	607b      	str	r3, [r7, #4]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b37      	cmp	r3, #55	@ 0x37
 800a3c6:	d9ef      	bls.n	800a3a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3c8:	480d      	ldr	r0, [pc, #52]	@ (800a400 <prvInitialiseTaskLists+0x64>)
 800a3ca:	f7fe f8a5 	bl	8008518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3ce:	480d      	ldr	r0, [pc, #52]	@ (800a404 <prvInitialiseTaskLists+0x68>)
 800a3d0:	f7fe f8a2 	bl	8008518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3d4:	480c      	ldr	r0, [pc, #48]	@ (800a408 <prvInitialiseTaskLists+0x6c>)
 800a3d6:	f7fe f89f 	bl	8008518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3da:	480c      	ldr	r0, [pc, #48]	@ (800a40c <prvInitialiseTaskLists+0x70>)
 800a3dc:	f7fe f89c 	bl	8008518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3e0:	480b      	ldr	r0, [pc, #44]	@ (800a410 <prvInitialiseTaskLists+0x74>)
 800a3e2:	f7fe f899 	bl	8008518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a414 <prvInitialiseTaskLists+0x78>)
 800a3e8:	4a05      	ldr	r2, [pc, #20]	@ (800a400 <prvInitialiseTaskLists+0x64>)
 800a3ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a418 <prvInitialiseTaskLists+0x7c>)
 800a3ee:	4a05      	ldr	r2, [pc, #20]	@ (800a404 <prvInitialiseTaskLists+0x68>)
 800a3f0:	601a      	str	r2, [r3, #0]
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000cc0 	.word	0x20000cc0
 800a400:	20001120 	.word	0x20001120
 800a404:	20001134 	.word	0x20001134
 800a408:	20001150 	.word	0x20001150
 800a40c:	20001164 	.word	0x20001164
 800a410:	2000117c 	.word	0x2000117c
 800a414:	20001148 	.word	0x20001148
 800a418:	2000114c 	.word	0x2000114c

0800a41c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a422:	e019      	b.n	800a458 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a424:	f000 fe02 	bl	800b02c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a428:	4b10      	ldr	r3, [pc, #64]	@ (800a46c <prvCheckTasksWaitingTermination+0x50>)
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3304      	adds	r3, #4
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe f8f9 	bl	800862c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <prvCheckTasksWaitingTermination+0x54>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3b01      	subs	r3, #1
 800a440:	4a0b      	ldr	r2, [pc, #44]	@ (800a470 <prvCheckTasksWaitingTermination+0x54>)
 800a442:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a444:	4b0b      	ldr	r3, [pc, #44]	@ (800a474 <prvCheckTasksWaitingTermination+0x58>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3b01      	subs	r3, #1
 800a44a:	4a0a      	ldr	r2, [pc, #40]	@ (800a474 <prvCheckTasksWaitingTermination+0x58>)
 800a44c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a44e:	f000 fe1f 	bl	800b090 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f810 	bl	800a478 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a458:	4b06      	ldr	r3, [pc, #24]	@ (800a474 <prvCheckTasksWaitingTermination+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e1      	bne.n	800a424 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20001164 	.word	0x20001164
 800a470:	20001190 	.word	0x20001190
 800a474:	20001178 	.word	0x20001178

0800a478 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a486:	2b00      	cmp	r3, #0
 800a488:	d108      	bne.n	800a49c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 ffda 	bl	800b448 <vPortFree>
				vPortFree( pxTCB );
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 ffd7 	bl	800b448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a49a:	e019      	b.n	800a4d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d103      	bne.n	800a4ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 ffce 	bl	800b448 <vPortFree>
	}
 800a4ac:	e010      	b.n	800a4d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d00b      	beq.n	800a4d0 <prvDeleteTCB+0x58>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	60fb      	str	r3, [r7, #12]
}
 800a4ca:	bf00      	nop
 800a4cc:	bf00      	nop
 800a4ce:	e7fd      	b.n	800a4cc <prvDeleteTCB+0x54>
	}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4de:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <prvResetNextTaskUnblockTime+0x38>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a514 <prvResetNextTaskUnblockTime+0x3c>)
 800a4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4f0:	e008      	b.n	800a504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4f2:	4b07      	ldr	r3, [pc, #28]	@ (800a510 <prvResetNextTaskUnblockTime+0x38>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	4a04      	ldr	r2, [pc, #16]	@ (800a514 <prvResetNextTaskUnblockTime+0x3c>)
 800a502:	6013      	str	r3, [r2, #0]
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	20001148 	.word	0x20001148
 800a514:	200011b0 	.word	0x200011b0

0800a518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a51e:	4b0b      	ldr	r3, [pc, #44]	@ (800a54c <xTaskGetSchedulerState+0x34>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a526:	2301      	movs	r3, #1
 800a528:	607b      	str	r3, [r7, #4]
 800a52a:	e008      	b.n	800a53e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a52c:	4b08      	ldr	r3, [pc, #32]	@ (800a550 <xTaskGetSchedulerState+0x38>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a534:	2302      	movs	r3, #2
 800a536:	607b      	str	r3, [r7, #4]
 800a538:	e001      	b.n	800a53e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a53a:	2300      	movs	r3, #0
 800a53c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a53e:	687b      	ldr	r3, [r7, #4]
	}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	2000119c 	.word	0x2000119c
 800a550:	200011b8 	.word	0x200011b8

0800a554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a560:	2300      	movs	r3, #0
 800a562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d064      	beq.n	800a634 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a56a:	4b35      	ldr	r3, [pc, #212]	@ (800a640 <xTaskPriorityDisinherit+0xec>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	429a      	cmp	r2, r3
 800a572:	d00b      	beq.n	800a58c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	60fb      	str	r3, [r7, #12]
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	e7fd      	b.n	800a588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10b      	bne.n	800a5ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	60bb      	str	r3, [r7, #8]
}
 800a5a6:	bf00      	nop
 800a5a8:	bf00      	nop
 800a5aa:	e7fd      	b.n	800a5a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b0:	1e5a      	subs	r2, r3, #1
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d038      	beq.n	800a634 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d134      	bne.n	800a634 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fe f82c 	bl	800862c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a5d4:	6939      	ldr	r1, [r7, #16]
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5da:	461a      	mov	r2, r3
 800a5dc:	2006      	movs	r0, #6
 800a5de:	f7f6 fe91 	bl	8001304 <xTraceEventCreate2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	2030      	movs	r0, #48	@ 0x30
 800a5fc:	f7f6 fe0a 	bl	8001214 <xTraceEventCreate1>
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a604:	4b0f      	ldr	r3, [pc, #60]	@ (800a644 <xTaskPriorityDisinherit+0xf0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d903      	bls.n	800a614 <xTaskPriorityDisinherit+0xc0>
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a610:	4a0c      	ldr	r2, [pc, #48]	@ (800a644 <xTaskPriorityDisinherit+0xf0>)
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4a09      	ldr	r2, [pc, #36]	@ (800a648 <xTaskPriorityDisinherit+0xf4>)
 800a622:	441a      	add	r2, r3
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	3304      	adds	r3, #4
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f7fd ffa1 	bl	8008572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a630:	2301      	movs	r3, #1
 800a632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a634:	697b      	ldr	r3, [r7, #20]
	}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20000cbc 	.word	0x20000cbc
 800a644:	20001198 	.word	0x20001198
 800a648:	20000cc0 	.word	0x20000cc0

0800a64c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a656:	4b21      	ldr	r3, [pc, #132]	@ (800a6dc <prvAddCurrentTaskToDelayedList+0x90>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a65c:	4b20      	ldr	r3, [pc, #128]	@ (800a6e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3304      	adds	r3, #4
 800a662:	4618      	mov	r0, r3
 800a664:	f7fd ffe2 	bl	800862c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66e:	d10a      	bne.n	800a686 <prvAddCurrentTaskToDelayedList+0x3a>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d007      	beq.n	800a686 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a676:	4b1a      	ldr	r3, [pc, #104]	@ (800a6e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4619      	mov	r1, r3
 800a67e:	4819      	ldr	r0, [pc, #100]	@ (800a6e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a680:	f7fd ff77 	bl	8008572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a684:	e026      	b.n	800a6d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4413      	add	r3, r2
 800a68c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a68e:	4b14      	ldr	r3, [pc, #80]	@ (800a6e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d209      	bcs.n	800a6b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a69e:	4b12      	ldr	r3, [pc, #72]	@ (800a6e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a6e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f7fd ff85 	bl	80085ba <vListInsert>
}
 800a6b0:	e010      	b.n	800a6d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ec <prvAddCurrentTaskToDelayedList+0xa0>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4610      	mov	r0, r2
 800a6c0:	f7fd ff7b 	bl	80085ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d202      	bcs.n	800a6d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a6ce:	4a08      	ldr	r2, [pc, #32]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	6013      	str	r3, [r2, #0]
}
 800a6d4:	bf00      	nop
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20001194 	.word	0x20001194
 800a6e0:	20000cbc 	.word	0x20000cbc
 800a6e4:	2000117c 	.word	0x2000117c
 800a6e8:	2000114c 	.word	0x2000114c
 800a6ec:	20001148 	.word	0x20001148
 800a6f0:	200011b0 	.word	0x200011b0

0800a6f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	@ 0x28
 800a6f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a6fe:	f000 fb13 	bl	800ad28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a702:	4b1d      	ldr	r3, [pc, #116]	@ (800a778 <xTimerCreateTimerTask+0x84>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d021      	beq.n	800a74e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a712:	1d3a      	adds	r2, r7, #4
 800a714:	f107 0108 	add.w	r1, r7, #8
 800a718:	f107 030c 	add.w	r3, r7, #12
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fd fee1 	bl	80084e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	9202      	str	r2, [sp, #8]
 800a72a:	9301      	str	r3, [sp, #4]
 800a72c:	2302      	movs	r3, #2
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	2300      	movs	r3, #0
 800a732:	460a      	mov	r2, r1
 800a734:	4911      	ldr	r1, [pc, #68]	@ (800a77c <xTimerCreateTimerTask+0x88>)
 800a736:	4812      	ldr	r0, [pc, #72]	@ (800a780 <xTimerCreateTimerTask+0x8c>)
 800a738:	f7ff f81a 	bl	8009770 <xTaskCreateStatic>
 800a73c:	4603      	mov	r3, r0
 800a73e:	4a11      	ldr	r2, [pc, #68]	@ (800a784 <xTimerCreateTimerTask+0x90>)
 800a740:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a742:	4b10      	ldr	r3, [pc, #64]	@ (800a784 <xTimerCreateTimerTask+0x90>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a74a:	2301      	movs	r3, #1
 800a74c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10b      	bne.n	800a76c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	613b      	str	r3, [r7, #16]
}
 800a766:	bf00      	nop
 800a768:	bf00      	nop
 800a76a:	e7fd      	b.n	800a768 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a76c:	697b      	ldr	r3, [r7, #20]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	200011ec 	.word	0x200011ec
 800a77c:	0800e030 	.word	0x0800e030
 800a780:	0800a8c1 	.word	0x0800a8c1
 800a784:	200011f0 	.word	0x200011f0

0800a788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	@ 0x28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a796:	2300      	movs	r3, #0
 800a798:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10b      	bne.n	800a7b8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	623b      	str	r3, [r7, #32]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a7b8:	4b19      	ldr	r3, [pc, #100]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d02a      	beq.n	800a816 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b05      	cmp	r3, #5
 800a7d0:	dc18      	bgt.n	800a804 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7d2:	f7ff fea1 	bl	800a518 <xTaskGetSchedulerState>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d109      	bne.n	800a7f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a7dc:	4b10      	ldr	r3, [pc, #64]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	f107 0110 	add.w	r1, r7, #16
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7e8:	f7fe f99e 	bl	8008b28 <xQueueGenericSend>
 800a7ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800a7ee:	e012      	b.n	800a816 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	f107 0110 	add.w	r1, r7, #16
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f7fe f994 	bl	8008b28 <xQueueGenericSend>
 800a800:	6278      	str	r0, [r7, #36]	@ 0x24
 800a802:	e008      	b.n	800a816 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a804:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	f107 0110 	add.w	r1, r7, #16
 800a80c:	2300      	movs	r3, #0
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	f7fe fb46 	bl	8008ea0 <xQueueGenericSendFromISR>
 800a814:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3728      	adds	r7, #40	@ 0x28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	200011ec 	.word	0x200011ec

0800a824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af02      	add	r7, sp, #8
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a82e:	4b23      	ldr	r3, [pc, #140]	@ (800a8bc <prvProcessExpiredTimer+0x98>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fd fef5 	bl	800862c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d023      	beq.n	800a898 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	18d1      	adds	r1, r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	6978      	ldr	r0, [r7, #20]
 800a85e:	f000 f8d5 	bl	800aa0c <prvInsertTimerInActiveList>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d020      	beq.n	800a8aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a868:	2300      	movs	r3, #0
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	2300      	movs	r3, #0
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	2100      	movs	r1, #0
 800a872:	6978      	ldr	r0, [r7, #20]
 800a874:	f7ff ff88 	bl	800a788 <xTimerGenericCommand>
 800a878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d114      	bne.n	800a8aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	bf00      	nop
 800a896:	e7fd      	b.n	800a894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a89e:	f023 0301 	bic.w	r3, r3, #1
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	6978      	ldr	r0, [r7, #20]
 800a8b0:	4798      	blx	r3
}
 800a8b2:	bf00      	nop
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	200011e4 	.word	0x200011e4

0800a8c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8c8:	f107 0308 	add.w	r3, r7, #8
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 f859 	bl	800a984 <prvGetNextExpireTime>
 800a8d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 f805 	bl	800a8e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a8de:	f000 f8d7 	bl	800aa90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8e2:	bf00      	nop
 800a8e4:	e7f0      	b.n	800a8c8 <prvTimerTask+0x8>
	...

0800a8e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a8f2:	f7ff f9ed 	bl	8009cd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8f6:	f107 0308 	add.w	r3, r7, #8
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 f866 	bl	800a9cc <prvSampleTimeNow>
 800a900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d130      	bne.n	800a96a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10a      	bne.n	800a924 <prvProcessTimerOrBlockTask+0x3c>
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	429a      	cmp	r2, r3
 800a914:	d806      	bhi.n	800a924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a916:	f7ff f9e9 	bl	8009cec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff ff81 	bl	800a824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a922:	e024      	b.n	800a96e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d008      	beq.n	800a93c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a92a:	4b13      	ldr	r3, [pc, #76]	@ (800a978 <prvProcessTimerOrBlockTask+0x90>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <prvProcessTimerOrBlockTask+0x50>
 800a934:	2301      	movs	r3, #1
 800a936:	e000      	b.n	800a93a <prvProcessTimerOrBlockTask+0x52>
 800a938:	2300      	movs	r3, #0
 800a93a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a93c:	4b0f      	ldr	r3, [pc, #60]	@ (800a97c <prvProcessTimerOrBlockTask+0x94>)
 800a93e:	6818      	ldr	r0, [r3, #0]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	4619      	mov	r1, r3
 800a94a:	f7fe fedd 	bl	8009708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a94e:	f7ff f9cd 	bl	8009cec <xTaskResumeAll>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10a      	bne.n	800a96e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <prvProcessTimerOrBlockTask+0x98>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
}
 800a968:	e001      	b.n	800a96e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a96a:	f7ff f9bf 	bl	8009cec <xTaskResumeAll>
}
 800a96e:	bf00      	nop
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200011e8 	.word	0x200011e8
 800a97c:	200011ec 	.word	0x200011ec
 800a980:	e000ed04 	.word	0xe000ed04

0800a984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a98c:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c8 <prvGetNextExpireTime+0x44>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <prvGetNextExpireTime+0x16>
 800a996:	2201      	movs	r2, #1
 800a998:	e000      	b.n	800a99c <prvGetNextExpireTime+0x18>
 800a99a:	2200      	movs	r2, #0
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d105      	bne.n	800a9b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9a8:	4b07      	ldr	r3, [pc, #28]	@ (800a9c8 <prvGetNextExpireTime+0x44>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	e001      	b.n	800a9b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	200011e4 	.word	0x200011e4

0800a9cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a9d4:	f7ff fa2e 	bl	8009e34 <xTaskGetTickCount>
 800a9d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a9da:	4b0b      	ldr	r3, [pc, #44]	@ (800aa08 <prvSampleTimeNow+0x3c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d205      	bcs.n	800a9f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a9e4:	f000 f93a 	bl	800ac5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	e002      	b.n	800a9f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a9f6:	4a04      	ldr	r2, [pc, #16]	@ (800aa08 <prvSampleTimeNow+0x3c>)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	200011f4 	.word	0x200011f4

0800aa0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d812      	bhi.n	800aa58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	1ad2      	subs	r2, r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d302      	bcc.n	800aa46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	e01b      	b.n	800aa7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa46:	4b10      	ldr	r3, [pc, #64]	@ (800aa88 <prvInsertTimerInActiveList+0x7c>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4610      	mov	r0, r2
 800aa52:	f7fd fdb2 	bl	80085ba <vListInsert>
 800aa56:	e012      	b.n	800aa7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d206      	bcs.n	800aa6e <prvInsertTimerInActiveList+0x62>
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d302      	bcc.n	800aa6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	e007      	b.n	800aa7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa6e:	4b07      	ldr	r3, [pc, #28]	@ (800aa8c <prvInsertTimerInActiveList+0x80>)
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3304      	adds	r3, #4
 800aa76:	4619      	mov	r1, r3
 800aa78:	4610      	mov	r0, r2
 800aa7a:	f7fd fd9e 	bl	80085ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa7e:	697b      	ldr	r3, [r7, #20]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200011e8 	.word	0x200011e8
 800aa8c:	200011e4 	.word	0x200011e4

0800aa90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08e      	sub	sp, #56	@ 0x38
 800aa94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa96:	e0ce      	b.n	800ac36 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da19      	bge.n	800aad2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa9e:	1d3b      	adds	r3, r7, #4
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10b      	bne.n	800aac2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	61fb      	str	r3, [r7, #28]
}
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
 800aac0:	e7fd      	b.n	800aabe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aac8:	6850      	ldr	r0, [r2, #4]
 800aaca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aacc:	6892      	ldr	r2, [r2, #8]
 800aace:	4611      	mov	r1, r2
 800aad0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f2c0 80ae 	blt.w	800ac36 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d004      	beq.n	800aaf0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae8:	3304      	adds	r3, #4
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd fd9e 	bl	800862c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff ff6a 	bl	800a9cc <prvSampleTimeNow>
 800aaf8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b09      	cmp	r3, #9
 800aafe:	f200 8097 	bhi.w	800ac30 <prvProcessReceivedCommands+0x1a0>
 800ab02:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <prvProcessReceivedCommands+0x78>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab31 	.word	0x0800ab31
 800ab0c:	0800ab31 	.word	0x0800ab31
 800ab10:	0800ab31 	.word	0x0800ab31
 800ab14:	0800aba7 	.word	0x0800aba7
 800ab18:	0800abbb 	.word	0x0800abbb
 800ab1c:	0800ac07 	.word	0x0800ac07
 800ab20:	0800ab31 	.word	0x0800ab31
 800ab24:	0800ab31 	.word	0x0800ab31
 800ab28:	0800aba7 	.word	0x0800aba7
 800ab2c:	0800abbb 	.word	0x0800abbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	18d1      	adds	r1, r2, r3
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab50:	f7ff ff5c 	bl	800aa0c <prvInsertTimerInActiveList>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d06c      	beq.n	800ac34 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d061      	beq.n	800ac34 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab74:	699b      	ldr	r3, [r3, #24]
 800ab76:	441a      	add	r2, r3
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	2100      	movs	r1, #0
 800ab80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab82:	f7ff fe01 	bl	800a788 <xTimerGenericCommand>
 800ab86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d152      	bne.n	800ac34 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	61bb      	str	r3, [r7, #24]
}
 800aba0:	bf00      	nop
 800aba2:	bf00      	nop
 800aba4:	e7fd      	b.n	800aba2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abac:	f023 0301 	bic.w	r3, r3, #1
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800abb8:	e03d      	b.n	800ac36 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abc0:	f043 0301 	orr.w	r3, r3, #1
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800abd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10b      	bne.n	800abf2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	617b      	str	r3, [r7, #20]
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	e7fd      	b.n	800abee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800abf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf4:	699a      	ldr	r2, [r3, #24]
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	18d1      	adds	r1, r2, r3
 800abfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac00:	f7ff ff04 	bl	800aa0c <prvInsertTimerInActiveList>
					break;
 800ac04:	e017      	b.n	800ac36 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ac14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac16:	f000 fc17 	bl	800b448 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac1a:	e00c      	b.n	800ac36 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac22:	f023 0301 	bic.w	r3, r3, #1
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ac2e:	e002      	b.n	800ac36 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ac30:	bf00      	nop
 800ac32:	e000      	b.n	800ac36 <prvProcessReceivedCommands+0x1a6>
					break;
 800ac34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac36:	4b08      	ldr	r3, [pc, #32]	@ (800ac58 <prvProcessReceivedCommands+0x1c8>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	1d39      	adds	r1, r7, #4
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fa0c 	bl	800905c <xQueueReceive>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f47f af26 	bne.w	800aa98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	3730      	adds	r7, #48	@ 0x30
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	200011ec 	.word	0x200011ec

0800ac5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac62:	e049      	b.n	800acf8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac64:	4b2e      	ldr	r3, [pc, #184]	@ (800ad20 <prvSwitchTimerLists+0xc4>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac6e:	4b2c      	ldr	r3, [pc, #176]	@ (800ad20 <prvSwitchTimerLists+0xc4>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fd fcd5 	bl	800862c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d02f      	beq.n	800acf8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4413      	add	r3, r2
 800aca0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d90e      	bls.n	800acc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acb6:	4b1a      	ldr	r3, [pc, #104]	@ (800ad20 <prvSwitchTimerLists+0xc4>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3304      	adds	r3, #4
 800acbe:	4619      	mov	r1, r3
 800acc0:	4610      	mov	r0, r2
 800acc2:	f7fd fc7a 	bl	80085ba <vListInsert>
 800acc6:	e017      	b.n	800acf8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acc8:	2300      	movs	r3, #0
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	2300      	movs	r3, #0
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	2100      	movs	r1, #0
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff fd58 	bl	800a788 <xTimerGenericCommand>
 800acd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10b      	bne.n	800acf8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	603b      	str	r3, [r7, #0]
}
 800acf2:	bf00      	nop
 800acf4:	bf00      	nop
 800acf6:	e7fd      	b.n	800acf4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acf8:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <prvSwitchTimerLists+0xc4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1b0      	bne.n	800ac64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad02:	4b07      	ldr	r3, [pc, #28]	@ (800ad20 <prvSwitchTimerLists+0xc4>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad08:	4b06      	ldr	r3, [pc, #24]	@ (800ad24 <prvSwitchTimerLists+0xc8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a04      	ldr	r2, [pc, #16]	@ (800ad20 <prvSwitchTimerLists+0xc4>)
 800ad0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad10:	4a04      	ldr	r2, [pc, #16]	@ (800ad24 <prvSwitchTimerLists+0xc8>)
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	6013      	str	r3, [r2, #0]
}
 800ad16:	bf00      	nop
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	200011e4 	.word	0x200011e4
 800ad24:	200011e8 	.word	0x200011e8

0800ad28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ad2e:	f000 f97d 	bl	800b02c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad32:	4b15      	ldr	r3, [pc, #84]	@ (800ad88 <prvCheckForValidListAndQueue+0x60>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d120      	bne.n	800ad7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ad3a:	4814      	ldr	r0, [pc, #80]	@ (800ad8c <prvCheckForValidListAndQueue+0x64>)
 800ad3c:	f7fd fbec 	bl	8008518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad40:	4813      	ldr	r0, [pc, #76]	@ (800ad90 <prvCheckForValidListAndQueue+0x68>)
 800ad42:	f7fd fbe9 	bl	8008518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad46:	4b13      	ldr	r3, [pc, #76]	@ (800ad94 <prvCheckForValidListAndQueue+0x6c>)
 800ad48:	4a10      	ldr	r2, [pc, #64]	@ (800ad8c <prvCheckForValidListAndQueue+0x64>)
 800ad4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ad4c:	4b12      	ldr	r3, [pc, #72]	@ (800ad98 <prvCheckForValidListAndQueue+0x70>)
 800ad4e:	4a10      	ldr	r2, [pc, #64]	@ (800ad90 <prvCheckForValidListAndQueue+0x68>)
 800ad50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ad52:	2300      	movs	r3, #0
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	4b11      	ldr	r3, [pc, #68]	@ (800ad9c <prvCheckForValidListAndQueue+0x74>)
 800ad58:	4a11      	ldr	r2, [pc, #68]	@ (800ada0 <prvCheckForValidListAndQueue+0x78>)
 800ad5a:	2110      	movs	r1, #16
 800ad5c:	200a      	movs	r0, #10
 800ad5e:	f7fd fcf9 	bl	8008754 <xQueueGenericCreateStatic>
 800ad62:	4603      	mov	r3, r0
 800ad64:	4a08      	ldr	r2, [pc, #32]	@ (800ad88 <prvCheckForValidListAndQueue+0x60>)
 800ad66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad68:	4b07      	ldr	r3, [pc, #28]	@ (800ad88 <prvCheckForValidListAndQueue+0x60>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <prvCheckForValidListAndQueue+0x60>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	490b      	ldr	r1, [pc, #44]	@ (800ada4 <prvCheckForValidListAndQueue+0x7c>)
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe fc70 	bl	800965c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad7c:	f000 f988 	bl	800b090 <vPortExitCritical>
}
 800ad80:	bf00      	nop
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	200011ec 	.word	0x200011ec
 800ad8c:	200011bc 	.word	0x200011bc
 800ad90:	200011d0 	.word	0x200011d0
 800ad94:	200011e4 	.word	0x200011e4
 800ad98:	200011e8 	.word	0x200011e8
 800ad9c:	20001298 	.word	0x20001298
 800ada0:	200011f8 	.word	0x200011f8
 800ada4:	0800e038 	.word	0x0800e038

0800ada8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3b04      	subs	r3, #4
 800adb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800adc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3b04      	subs	r3, #4
 800adc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f023 0201 	bic.w	r2, r3, #1
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3b04      	subs	r3, #4
 800add6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800add8:	4a0c      	ldr	r2, [pc, #48]	@ (800ae0c <pxPortInitialiseStack+0x64>)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3b14      	subs	r3, #20
 800ade2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3b04      	subs	r3, #4
 800adee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f06f 0202 	mvn.w	r2, #2
 800adf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3b20      	subs	r3, #32
 800adfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	0800ae11 	.word	0x0800ae11

0800ae10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae1a:	4b13      	ldr	r3, [pc, #76]	@ (800ae68 <prvTaskExitError+0x58>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae22:	d00b      	beq.n	800ae3c <prvTaskExitError+0x2c>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	60fb      	str	r3, [r7, #12]
}
 800ae36:	bf00      	nop
 800ae38:	bf00      	nop
 800ae3a:	e7fd      	b.n	800ae38 <prvTaskExitError+0x28>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	60bb      	str	r3, [r7, #8]
}
 800ae4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae50:	bf00      	nop
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0fc      	beq.n	800ae52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20000034 	.word	0x20000034
 800ae6c:	00000000 	.word	0x00000000

0800ae70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae70:	4b07      	ldr	r3, [pc, #28]	@ (800ae90 <pxCurrentTCBConst2>)
 800ae72:	6819      	ldr	r1, [r3, #0]
 800ae74:	6808      	ldr	r0, [r1, #0]
 800ae76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7a:	f380 8809 	msr	PSP, r0
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f04f 0000 	mov.w	r0, #0
 800ae86:	f380 8811 	msr	BASEPRI, r0
 800ae8a:	4770      	bx	lr
 800ae8c:	f3af 8000 	nop.w

0800ae90 <pxCurrentTCBConst2>:
 800ae90:	20000cbc 	.word	0x20000cbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae94:	bf00      	nop
 800ae96:	bf00      	nop

0800ae98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae98:	4808      	ldr	r0, [pc, #32]	@ (800aebc <prvPortStartFirstTask+0x24>)
 800ae9a:	6800      	ldr	r0, [r0, #0]
 800ae9c:	6800      	ldr	r0, [r0, #0]
 800ae9e:	f380 8808 	msr	MSP, r0
 800aea2:	f04f 0000 	mov.w	r0, #0
 800aea6:	f380 8814 	msr	CONTROL, r0
 800aeaa:	b662      	cpsie	i
 800aeac:	b661      	cpsie	f
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	df00      	svc	0
 800aeb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aeba:	bf00      	nop
 800aebc:	e000ed08 	.word	0xe000ed08

0800aec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aec6:	4b50      	ldr	r3, [pc, #320]	@ (800b008 <xPortStartScheduler+0x148>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a50      	ldr	r2, [pc, #320]	@ (800b00c <xPortStartScheduler+0x14c>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d10b      	bne.n	800aee8 <xPortStartScheduler+0x28>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	617b      	str	r3, [r7, #20]
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	e7fd      	b.n	800aee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aee8:	4b47      	ldr	r3, [pc, #284]	@ (800b008 <xPortStartScheduler+0x148>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a48      	ldr	r2, [pc, #288]	@ (800b010 <xPortStartScheduler+0x150>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d10b      	bne.n	800af0a <xPortStartScheduler+0x4a>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	61bb      	str	r3, [r7, #24]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af0a:	4b42      	ldr	r3, [pc, #264]	@ (800b014 <xPortStartScheduler+0x154>)
 800af0c:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	b2db      	uxtb	r3, r3
 800af14:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	22ff      	movs	r2, #255	@ 0xff
 800af1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	4b3a      	ldr	r3, [pc, #232]	@ (800b018 <xPortStartScheduler+0x158>)
 800af30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af32:	4b3a      	ldr	r3, [pc, #232]	@ (800b01c <xPortStartScheduler+0x15c>)
 800af34:	2207      	movs	r2, #7
 800af36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af38:	e009      	b.n	800af4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800af3a:	4b38      	ldr	r3, [pc, #224]	@ (800b01c <xPortStartScheduler+0x15c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3b01      	subs	r3, #1
 800af40:	4a36      	ldr	r2, [pc, #216]	@ (800b01c <xPortStartScheduler+0x15c>)
 800af42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	b2db      	uxtb	r3, r3
 800af52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af56:	2b80      	cmp	r3, #128	@ 0x80
 800af58:	d0ef      	beq.n	800af3a <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800af5a:	4b30      	ldr	r3, [pc, #192]	@ (800b01c <xPortStartScheduler+0x15c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f1c3 0307 	rsb	r3, r3, #7
 800af62:	2b04      	cmp	r3, #4
 800af64:	d00b      	beq.n	800af7e <xPortStartScheduler+0xbe>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	613b      	str	r3, [r7, #16]
}
 800af78:	bf00      	nop
 800af7a:	bf00      	nop
 800af7c:	e7fd      	b.n	800af7a <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af7e:	4b27      	ldr	r3, [pc, #156]	@ (800b01c <xPortStartScheduler+0x15c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f1c3 0307 	rsb	r3, r3, #7
 800af86:	2b04      	cmp	r3, #4
 800af88:	d00b      	beq.n	800afa2 <xPortStartScheduler+0xe2>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	60fb      	str	r3, [r7, #12]
}
 800af9c:	bf00      	nop
 800af9e:	bf00      	nop
 800afa0:	e7fd      	b.n	800af9e <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afa2:	4b1e      	ldr	r3, [pc, #120]	@ (800b01c <xPortStartScheduler+0x15c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	021b      	lsls	r3, r3, #8
 800afa8:	4a1c      	ldr	r2, [pc, #112]	@ (800b01c <xPortStartScheduler+0x15c>)
 800afaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afac:	4b1b      	ldr	r3, [pc, #108]	@ (800b01c <xPortStartScheduler+0x15c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afb4:	4a19      	ldr	r2, [pc, #100]	@ (800b01c <xPortStartScheduler+0x15c>)
 800afb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afc0:	4b17      	ldr	r3, [pc, #92]	@ (800b020 <xPortStartScheduler+0x160>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a16      	ldr	r2, [pc, #88]	@ (800b020 <xPortStartScheduler+0x160>)
 800afc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800afca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afcc:	4b14      	ldr	r3, [pc, #80]	@ (800b020 <xPortStartScheduler+0x160>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a13      	ldr	r2, [pc, #76]	@ (800b020 <xPortStartScheduler+0x160>)
 800afd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800afd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800afd8:	f000 f8e0 	bl	800b19c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800afdc:	4b11      	ldr	r3, [pc, #68]	@ (800b024 <xPortStartScheduler+0x164>)
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800afe2:	f000 f8ff 	bl	800b1e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afe6:	4b10      	ldr	r3, [pc, #64]	@ (800b028 <xPortStartScheduler+0x168>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a0f      	ldr	r2, [pc, #60]	@ (800b028 <xPortStartScheduler+0x168>)
 800afec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aff0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aff2:	f7ff ff51 	bl	800ae98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aff6:	f7ff f807 	bl	800a008 <vTaskSwitchContext>
	prvTaskExitError();
 800affa:	f7ff ff09 	bl	800ae10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3720      	adds	r7, #32
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	e000ed00 	.word	0xe000ed00
 800b00c:	410fc271 	.word	0x410fc271
 800b010:	410fc270 	.word	0x410fc270
 800b014:	e000e400 	.word	0xe000e400
 800b018:	200012e8 	.word	0x200012e8
 800b01c:	200012ec 	.word	0x200012ec
 800b020:	e000ed20 	.word	0xe000ed20
 800b024:	20000034 	.word	0x20000034
 800b028:	e000ef34 	.word	0xe000ef34

0800b02c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	607b      	str	r3, [r7, #4]
}
 800b044:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b046:	4b10      	ldr	r3, [pc, #64]	@ (800b088 <vPortEnterCritical+0x5c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3301      	adds	r3, #1
 800b04c:	4a0e      	ldr	r2, [pc, #56]	@ (800b088 <vPortEnterCritical+0x5c>)
 800b04e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b050:	4b0d      	ldr	r3, [pc, #52]	@ (800b088 <vPortEnterCritical+0x5c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d110      	bne.n	800b07a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b058:	4b0c      	ldr	r3, [pc, #48]	@ (800b08c <vPortEnterCritical+0x60>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00b      	beq.n	800b07a <vPortEnterCritical+0x4e>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	603b      	str	r3, [r7, #0]
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop
 800b078:	e7fd      	b.n	800b076 <vPortEnterCritical+0x4a>
	}
}
 800b07a:	bf00      	nop
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	20000034 	.word	0x20000034
 800b08c:	e000ed04 	.word	0xe000ed04

0800b090 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b096:	4b12      	ldr	r3, [pc, #72]	@ (800b0e0 <vPortExitCritical+0x50>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10b      	bne.n	800b0b6 <vPortExitCritical+0x26>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	607b      	str	r3, [r7, #4]
}
 800b0b0:	bf00      	nop
 800b0b2:	bf00      	nop
 800b0b4:	e7fd      	b.n	800b0b2 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e0 <vPortExitCritical+0x50>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	4a08      	ldr	r2, [pc, #32]	@ (800b0e0 <vPortExitCritical+0x50>)
 800b0be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0c0:	4b07      	ldr	r3, [pc, #28]	@ (800b0e0 <vPortExitCritical+0x50>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <vPortExitCritical+0x44>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	f383 8811 	msr	BASEPRI, r3
}
 800b0d2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	20000034 	.word	0x20000034
	...

0800b0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0f0:	f3ef 8009 	mrs	r0, PSP
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	4b15      	ldr	r3, [pc, #84]	@ (800b150 <pxCurrentTCBConst>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	f01e 0f10 	tst.w	lr, #16
 800b100:	bf08      	it	eq
 800b102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10a:	6010      	str	r0, [r2, #0]
 800b10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b114:	f380 8811 	msr	BASEPRI, r0
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f7fe ff72 	bl	800a008 <vTaskSwitchContext>
 800b124:	f04f 0000 	mov.w	r0, #0
 800b128:	f380 8811 	msr	BASEPRI, r0
 800b12c:	bc09      	pop	{r0, r3}
 800b12e:	6819      	ldr	r1, [r3, #0]
 800b130:	6808      	ldr	r0, [r1, #0]
 800b132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b136:	f01e 0f10 	tst.w	lr, #16
 800b13a:	bf08      	it	eq
 800b13c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b140:	f380 8809 	msr	PSP, r0
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	f3af 8000 	nop.w

0800b150 <pxCurrentTCBConst>:
 800b150:	20000cbc 	.word	0x20000cbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop

0800b158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	607b      	str	r3, [r7, #4]
}
 800b170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b172:	f7fe fe6f 	bl	8009e54 <xTaskIncrementTick>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b17c:	4b06      	ldr	r3, [pc, #24]	@ (800b198 <xPortSysTickHandler+0x40>)
 800b17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	2300      	movs	r3, #0
 800b186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	f383 8811 	msr	BASEPRI, r3
}
 800b18e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b19c:	b480      	push	{r7}
 800b19e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d0 <vPortSetupTimerInterrupt+0x34>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d4 <vPortSetupTimerInterrupt+0x38>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d8 <vPortSetupTimerInterrupt+0x3c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a0a      	ldr	r2, [pc, #40]	@ (800b1dc <vPortSetupTimerInterrupt+0x40>)
 800b1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b6:	099b      	lsrs	r3, r3, #6
 800b1b8:	4a09      	ldr	r2, [pc, #36]	@ (800b1e0 <vPortSetupTimerInterrupt+0x44>)
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1be:	4b04      	ldr	r3, [pc, #16]	@ (800b1d0 <vPortSetupTimerInterrupt+0x34>)
 800b1c0:	2207      	movs	r2, #7
 800b1c2:	601a      	str	r2, [r3, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	e000e010 	.word	0xe000e010
 800b1d4:	e000e018 	.word	0xe000e018
 800b1d8:	20000028 	.word	0x20000028
 800b1dc:	10624dd3 	.word	0x10624dd3
 800b1e0:	e000e014 	.word	0xe000e014

0800b1e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b1e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b1f4 <vPortEnableVFP+0x10>
 800b1e8:	6801      	ldr	r1, [r0, #0]
 800b1ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b1ee:	6001      	str	r1, [r0, #0]
 800b1f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1f2:	bf00      	nop
 800b1f4:	e000ed88 	.word	0xe000ed88

0800b1f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b1fe:	f3ef 8305 	mrs	r3, IPSR
 800b202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b0f      	cmp	r3, #15
 800b208:	d915      	bls.n	800b236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b20a:	4a18      	ldr	r2, [pc, #96]	@ (800b26c <vPortValidateInterruptPriority+0x74>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b214:	4b16      	ldr	r3, [pc, #88]	@ (800b270 <vPortValidateInterruptPriority+0x78>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	7afa      	ldrb	r2, [r7, #11]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d20b      	bcs.n	800b236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	607b      	str	r3, [r7, #4]
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	e7fd      	b.n	800b232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b236:	4b0f      	ldr	r3, [pc, #60]	@ (800b274 <vPortValidateInterruptPriority+0x7c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b23e:	4b0e      	ldr	r3, [pc, #56]	@ (800b278 <vPortValidateInterruptPriority+0x80>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d90b      	bls.n	800b25e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	603b      	str	r3, [r7, #0]
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	e7fd      	b.n	800b25a <vPortValidateInterruptPriority+0x62>
	}
 800b25e:	bf00      	nop
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	e000e3f0 	.word	0xe000e3f0
 800b270:	200012e8 	.word	0x200012e8
 800b274:	e000ed0c 	.word	0xe000ed0c
 800b278:	200012ec 	.word	0x200012ec

0800b27c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08a      	sub	sp, #40	@ 0x28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b284:	2300      	movs	r3, #0
 800b286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b288:	f7fe fd22 	bl	8009cd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b28c:	4b66      	ldr	r3, [pc, #408]	@ (800b428 <pvPortMalloc+0x1ac>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b294:	f000 f952 	bl	800b53c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b298:	4b64      	ldr	r3, [pc, #400]	@ (800b42c <pvPortMalloc+0x1b0>)
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f040 8095 	bne.w	800b3d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01e      	beq.n	800b2ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d015      	beq.n	800b2ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f023 0307 	bic.w	r3, r3, #7
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00b      	beq.n	800b2ea <pvPortMalloc+0x6e>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	617b      	str	r3, [r7, #20]
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop
 800b2e8:	e7fd      	b.n	800b2e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d06f      	beq.n	800b3d0 <pvPortMalloc+0x154>
 800b2f0:	4b4f      	ldr	r3, [pc, #316]	@ (800b430 <pvPortMalloc+0x1b4>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d86a      	bhi.n	800b3d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b2fa:	4b4e      	ldr	r3, [pc, #312]	@ (800b434 <pvPortMalloc+0x1b8>)
 800b2fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2fe:	4b4d      	ldr	r3, [pc, #308]	@ (800b434 <pvPortMalloc+0x1b8>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b304:	e004      	b.n	800b310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	429a      	cmp	r2, r3
 800b318:	d903      	bls.n	800b322 <pvPortMalloc+0xa6>
 800b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1f1      	bne.n	800b306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b322:	4b41      	ldr	r3, [pc, #260]	@ (800b428 <pvPortMalloc+0x1ac>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b328:	429a      	cmp	r2, r3
 800b32a:	d051      	beq.n	800b3d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2208      	movs	r2, #8
 800b332:	4413      	add	r3, r2
 800b334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	6a3b      	ldr	r3, [r7, #32]
 800b33c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	1ad2      	subs	r2, r2, r3
 800b346:	2308      	movs	r3, #8
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d920      	bls.n	800b390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b34e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4413      	add	r3, r2
 800b354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	f003 0307 	and.w	r3, r3, #7
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00b      	beq.n	800b378 <pvPortMalloc+0xfc>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	613b      	str	r3, [r7, #16]
}
 800b372:	bf00      	nop
 800b374:	bf00      	nop
 800b376:	e7fd      	b.n	800b374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b38a:	69b8      	ldr	r0, [r7, #24]
 800b38c:	f000 f938 	bl	800b600 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b390:	4b27      	ldr	r3, [pc, #156]	@ (800b430 <pvPortMalloc+0x1b4>)
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	4a25      	ldr	r2, [pc, #148]	@ (800b430 <pvPortMalloc+0x1b4>)
 800b39c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b39e:	4b24      	ldr	r3, [pc, #144]	@ (800b430 <pvPortMalloc+0x1b4>)
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	4b25      	ldr	r3, [pc, #148]	@ (800b438 <pvPortMalloc+0x1bc>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d203      	bcs.n	800b3b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3aa:	4b21      	ldr	r3, [pc, #132]	@ (800b430 <pvPortMalloc+0x1b4>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a22      	ldr	r2, [pc, #136]	@ (800b438 <pvPortMalloc+0x1bc>)
 800b3b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b42c <pvPortMalloc+0x1b0>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b43c <pvPortMalloc+0x1c0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	4a1b      	ldr	r2, [pc, #108]	@ (800b43c <pvPortMalloc+0x1c0>)
 800b3ce:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800b3d0:	4b1b      	ldr	r3, [pc, #108]	@ (800b440 <pvPortMalloc+0x1c4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00c      	beq.n	800b3f6 <pvPortMalloc+0x17a>
 800b3dc:	4b19      	ldr	r3, [pc, #100]	@ (800b444 <pvPortMalloc+0x1c8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d007      	beq.n	800b3f6 <pvPortMalloc+0x17a>
 800b3e6:	f7f6 fba3 	bl	8001b30 <xTraceKernelPortGetSystemHeapHandle>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	69f9      	ldr	r1, [r7, #28]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7f6 fb17 	bl	8001a24 <xTraceHeapAlloc>
	}
	( void ) xTaskResumeAll();
 800b3f6:	f7fe fc79 	bl	8009cec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	f003 0307 	and.w	r3, r3, #7
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00b      	beq.n	800b41c <pvPortMalloc+0x1a0>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	e7fd      	b.n	800b418 <pvPortMalloc+0x19c>
	return pvReturn;
 800b41c:	69fb      	ldr	r3, [r7, #28]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3728      	adds	r7, #40	@ 0x28
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20002a68 	.word	0x20002a68
 800b42c:	20002a7c 	.word	0x20002a7c
 800b430:	20002a6c 	.word	0x20002a6c
 800b434:	20002a60 	.word	0x20002a60
 800b438:	20002a70 	.word	0x20002a70
 800b43c:	20002a74 	.word	0x20002a74
 800b440:	20000238 	.word	0x20000238
 800b444:	20000234 	.word	0x20000234

0800b448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d062      	beq.n	800b520 <vPortFree+0xd8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b45a:	2308      	movs	r3, #8
 800b45c:	425b      	negs	r3, r3
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4413      	add	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	4b2e      	ldr	r3, [pc, #184]	@ (800b528 <vPortFree+0xe0>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4013      	ands	r3, r2
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10b      	bne.n	800b48e <vPortFree+0x46>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	60fb      	str	r3, [r7, #12]
}
 800b488:	bf00      	nop
 800b48a:	bf00      	nop
 800b48c:	e7fd      	b.n	800b48a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00b      	beq.n	800b4ae <vPortFree+0x66>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60bb      	str	r3, [r7, #8]
}
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	e7fd      	b.n	800b4aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b528 <vPortFree+0xe0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d031      	beq.n	800b520 <vPortFree+0xd8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d12d      	bne.n	800b520 <vPortFree+0xd8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	4b17      	ldr	r3, [pc, #92]	@ (800b528 <vPortFree+0xe0>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	43db      	mvns	r3, r3
 800b4ce:	401a      	ands	r2, r3
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4d4:	f7fe fbfc 	bl	8009cd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	4b13      	ldr	r3, [pc, #76]	@ (800b52c <vPortFree+0xe4>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	4a12      	ldr	r2, [pc, #72]	@ (800b52c <vPortFree+0xe4>)
 800b4e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800b4e6:	4b12      	ldr	r3, [pc, #72]	@ (800b530 <vPortFree+0xe8>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0301 	and.w	r3, r3, #1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00c      	beq.n	800b50c <vPortFree+0xc4>
 800b4f2:	4b10      	ldr	r3, [pc, #64]	@ (800b534 <vPortFree+0xec>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d007      	beq.n	800b50c <vPortFree+0xc4>
 800b4fc:	f7f6 fb18 	bl	8001b30 <xTraceKernelPortGetSystemHeapHandle>
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	461a      	mov	r2, r3
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	f7f6 fac0 	bl	8001a8c <xTraceHeapFree>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b50c:	6938      	ldr	r0, [r7, #16]
 800b50e:	f000 f877 	bl	800b600 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b512:	4b09      	ldr	r3, [pc, #36]	@ (800b538 <vPortFree+0xf0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3301      	adds	r3, #1
 800b518:	4a07      	ldr	r2, [pc, #28]	@ (800b538 <vPortFree+0xf0>)
 800b51a:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b51c:	f7fe fbe6 	bl	8009cec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b520:	bf00      	nop
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20002a7c 	.word	0x20002a7c
 800b52c:	20002a6c 	.word	0x20002a6c
 800b530:	20000238 	.word	0x20000238
 800b534:	20000234 	.word	0x20000234
 800b538:	20002a78 	.word	0x20002a78

0800b53c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b542:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b546:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b548:	4b27      	ldr	r3, [pc, #156]	@ (800b5e8 <prvHeapInit+0xac>)
 800b54a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00c      	beq.n	800b570 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3307      	adds	r3, #7
 800b55a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f023 0307 	bic.w	r3, r3, #7
 800b562:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	4a1f      	ldr	r2, [pc, #124]	@ (800b5e8 <prvHeapInit+0xac>)
 800b56c:	4413      	add	r3, r2
 800b56e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b574:	4a1d      	ldr	r2, [pc, #116]	@ (800b5ec <prvHeapInit+0xb0>)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b57a:	4b1c      	ldr	r3, [pc, #112]	@ (800b5ec <prvHeapInit+0xb0>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	4413      	add	r3, r2
 800b586:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b588:	2208      	movs	r2, #8
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0307 	bic.w	r3, r3, #7
 800b596:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4a15      	ldr	r2, [pc, #84]	@ (800b5f0 <prvHeapInit+0xb4>)
 800b59c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b59e:	4b14      	ldr	r3, [pc, #80]	@ (800b5f0 <prvHeapInit+0xb4>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5a6:	4b12      	ldr	r3, [pc, #72]	@ (800b5f0 <prvHeapInit+0xb4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	1ad2      	subs	r2, r2, r3
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f0 <prvHeapInit+0xb4>)
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	4a0a      	ldr	r2, [pc, #40]	@ (800b5f4 <prvHeapInit+0xb8>)
 800b5ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4a09      	ldr	r2, [pc, #36]	@ (800b5f8 <prvHeapInit+0xbc>)
 800b5d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5d4:	4b09      	ldr	r3, [pc, #36]	@ (800b5fc <prvHeapInit+0xc0>)
 800b5d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b5da:	601a      	str	r2, [r3, #0]
}
 800b5dc:	bf00      	nop
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	200012f0 	.word	0x200012f0
 800b5ec:	20002a60 	.word	0x20002a60
 800b5f0:	20002a68 	.word	0x20002a68
 800b5f4:	20002a70 	.word	0x20002a70
 800b5f8:	20002a6c 	.word	0x20002a6c
 800b5fc:	20002a7c 	.word	0x20002a7c

0800b600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b608:	4b28      	ldr	r3, [pc, #160]	@ (800b6ac <prvInsertBlockIntoFreeList+0xac>)
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	e002      	b.n	800b614 <prvInsertBlockIntoFreeList+0x14>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d8f7      	bhi.n	800b60e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	4413      	add	r3, r2
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d108      	bne.n	800b642 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	441a      	add	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	441a      	add	r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	429a      	cmp	r2, r3
 800b654:	d118      	bne.n	800b688 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	4b15      	ldr	r3, [pc, #84]	@ (800b6b0 <prvInsertBlockIntoFreeList+0xb0>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d00d      	beq.n	800b67e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	441a      	add	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	e008      	b.n	800b690 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b67e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6b0 <prvInsertBlockIntoFreeList+0xb0>)
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	601a      	str	r2, [r3, #0]
 800b686:	e003      	b.n	800b690 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	429a      	cmp	r2, r3
 800b696:	d002      	beq.n	800b69e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b69e:	bf00      	nop
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	20002a60 	.word	0x20002a60
 800b6b0:	20002a68 	.word	0x20002a68

0800b6b4 <__cvt>:
 800b6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b8:	ec57 6b10 	vmov	r6, r7, d0
 800b6bc:	2f00      	cmp	r7, #0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	bfbb      	ittet	lt
 800b6c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b6ca:	461f      	movlt	r7, r3
 800b6cc:	2300      	movge	r3, #0
 800b6ce:	232d      	movlt	r3, #45	@ 0x2d
 800b6d0:	700b      	strb	r3, [r1, #0]
 800b6d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b6d8:	4691      	mov	r9, r2
 800b6da:	f023 0820 	bic.w	r8, r3, #32
 800b6de:	bfbc      	itt	lt
 800b6e0:	4632      	movlt	r2, r6
 800b6e2:	4616      	movlt	r6, r2
 800b6e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b6e8:	d005      	beq.n	800b6f6 <__cvt+0x42>
 800b6ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b6ee:	d100      	bne.n	800b6f2 <__cvt+0x3e>
 800b6f0:	3401      	adds	r4, #1
 800b6f2:	2102      	movs	r1, #2
 800b6f4:	e000      	b.n	800b6f8 <__cvt+0x44>
 800b6f6:	2103      	movs	r1, #3
 800b6f8:	ab03      	add	r3, sp, #12
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	ab02      	add	r3, sp, #8
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	ec47 6b10 	vmov	d0, r6, r7
 800b704:	4653      	mov	r3, sl
 800b706:	4622      	mov	r2, r4
 800b708:	f000 fe46 	bl	800c398 <_dtoa_r>
 800b70c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b710:	4605      	mov	r5, r0
 800b712:	d119      	bne.n	800b748 <__cvt+0x94>
 800b714:	f019 0f01 	tst.w	r9, #1
 800b718:	d00e      	beq.n	800b738 <__cvt+0x84>
 800b71a:	eb00 0904 	add.w	r9, r0, r4
 800b71e:	2200      	movs	r2, #0
 800b720:	2300      	movs	r3, #0
 800b722:	4630      	mov	r0, r6
 800b724:	4639      	mov	r1, r7
 800b726:	f7f5 f9f7 	bl	8000b18 <__aeabi_dcmpeq>
 800b72a:	b108      	cbz	r0, 800b730 <__cvt+0x7c>
 800b72c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b730:	2230      	movs	r2, #48	@ 0x30
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	454b      	cmp	r3, r9
 800b736:	d31e      	bcc.n	800b776 <__cvt+0xc2>
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b73c:	1b5b      	subs	r3, r3, r5
 800b73e:	4628      	mov	r0, r5
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	b004      	add	sp, #16
 800b744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b748:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b74c:	eb00 0904 	add.w	r9, r0, r4
 800b750:	d1e5      	bne.n	800b71e <__cvt+0x6a>
 800b752:	7803      	ldrb	r3, [r0, #0]
 800b754:	2b30      	cmp	r3, #48	@ 0x30
 800b756:	d10a      	bne.n	800b76e <__cvt+0xba>
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	4630      	mov	r0, r6
 800b75e:	4639      	mov	r1, r7
 800b760:	f7f5 f9da 	bl	8000b18 <__aeabi_dcmpeq>
 800b764:	b918      	cbnz	r0, 800b76e <__cvt+0xba>
 800b766:	f1c4 0401 	rsb	r4, r4, #1
 800b76a:	f8ca 4000 	str.w	r4, [sl]
 800b76e:	f8da 3000 	ldr.w	r3, [sl]
 800b772:	4499      	add	r9, r3
 800b774:	e7d3      	b.n	800b71e <__cvt+0x6a>
 800b776:	1c59      	adds	r1, r3, #1
 800b778:	9103      	str	r1, [sp, #12]
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	e7d9      	b.n	800b732 <__cvt+0x7e>

0800b77e <__exponent>:
 800b77e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b780:	2900      	cmp	r1, #0
 800b782:	bfba      	itte	lt
 800b784:	4249      	neglt	r1, r1
 800b786:	232d      	movlt	r3, #45	@ 0x2d
 800b788:	232b      	movge	r3, #43	@ 0x2b
 800b78a:	2909      	cmp	r1, #9
 800b78c:	7002      	strb	r2, [r0, #0]
 800b78e:	7043      	strb	r3, [r0, #1]
 800b790:	dd29      	ble.n	800b7e6 <__exponent+0x68>
 800b792:	f10d 0307 	add.w	r3, sp, #7
 800b796:	461d      	mov	r5, r3
 800b798:	270a      	movs	r7, #10
 800b79a:	461a      	mov	r2, r3
 800b79c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7a0:	fb07 1416 	mls	r4, r7, r6, r1
 800b7a4:	3430      	adds	r4, #48	@ 0x30
 800b7a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	2c63      	cmp	r4, #99	@ 0x63
 800b7ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	dcf1      	bgt.n	800b79a <__exponent+0x1c>
 800b7b6:	3130      	adds	r1, #48	@ 0x30
 800b7b8:	1e94      	subs	r4, r2, #2
 800b7ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7be:	1c41      	adds	r1, r0, #1
 800b7c0:	4623      	mov	r3, r4
 800b7c2:	42ab      	cmp	r3, r5
 800b7c4:	d30a      	bcc.n	800b7dc <__exponent+0x5e>
 800b7c6:	f10d 0309 	add.w	r3, sp, #9
 800b7ca:	1a9b      	subs	r3, r3, r2
 800b7cc:	42ac      	cmp	r4, r5
 800b7ce:	bf88      	it	hi
 800b7d0:	2300      	movhi	r3, #0
 800b7d2:	3302      	adds	r3, #2
 800b7d4:	4403      	add	r3, r0
 800b7d6:	1a18      	subs	r0, r3, r0
 800b7d8:	b003      	add	sp, #12
 800b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b7e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b7e4:	e7ed      	b.n	800b7c2 <__exponent+0x44>
 800b7e6:	2330      	movs	r3, #48	@ 0x30
 800b7e8:	3130      	adds	r1, #48	@ 0x30
 800b7ea:	7083      	strb	r3, [r0, #2]
 800b7ec:	70c1      	strb	r1, [r0, #3]
 800b7ee:	1d03      	adds	r3, r0, #4
 800b7f0:	e7f1      	b.n	800b7d6 <__exponent+0x58>
	...

0800b7f4 <_printf_float>:
 800b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f8:	b08d      	sub	sp, #52	@ 0x34
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b800:	4616      	mov	r6, r2
 800b802:	461f      	mov	r7, r3
 800b804:	4605      	mov	r5, r0
 800b806:	f000 fcb9 	bl	800c17c <_localeconv_r>
 800b80a:	6803      	ldr	r3, [r0, #0]
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	4618      	mov	r0, r3
 800b810:	f7f4 fd56 	bl	80002c0 <strlen>
 800b814:	2300      	movs	r3, #0
 800b816:	930a      	str	r3, [sp, #40]	@ 0x28
 800b818:	f8d8 3000 	ldr.w	r3, [r8]
 800b81c:	9005      	str	r0, [sp, #20]
 800b81e:	3307      	adds	r3, #7
 800b820:	f023 0307 	bic.w	r3, r3, #7
 800b824:	f103 0208 	add.w	r2, r3, #8
 800b828:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b82c:	f8d4 b000 	ldr.w	fp, [r4]
 800b830:	f8c8 2000 	str.w	r2, [r8]
 800b834:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b838:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b842:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b84a:	4b9c      	ldr	r3, [pc, #624]	@ (800babc <_printf_float+0x2c8>)
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295
 800b850:	f7f5 f994 	bl	8000b7c <__aeabi_dcmpun>
 800b854:	bb70      	cbnz	r0, 800b8b4 <_printf_float+0xc0>
 800b856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b85a:	4b98      	ldr	r3, [pc, #608]	@ (800babc <_printf_float+0x2c8>)
 800b85c:	f04f 32ff 	mov.w	r2, #4294967295
 800b860:	f7f5 f96e 	bl	8000b40 <__aeabi_dcmple>
 800b864:	bb30      	cbnz	r0, 800b8b4 <_printf_float+0xc0>
 800b866:	2200      	movs	r2, #0
 800b868:	2300      	movs	r3, #0
 800b86a:	4640      	mov	r0, r8
 800b86c:	4649      	mov	r1, r9
 800b86e:	f7f5 f95d 	bl	8000b2c <__aeabi_dcmplt>
 800b872:	b110      	cbz	r0, 800b87a <_printf_float+0x86>
 800b874:	232d      	movs	r3, #45	@ 0x2d
 800b876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b87a:	4a91      	ldr	r2, [pc, #580]	@ (800bac0 <_printf_float+0x2cc>)
 800b87c:	4b91      	ldr	r3, [pc, #580]	@ (800bac4 <_printf_float+0x2d0>)
 800b87e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b882:	bf8c      	ite	hi
 800b884:	4690      	movhi	r8, r2
 800b886:	4698      	movls	r8, r3
 800b888:	2303      	movs	r3, #3
 800b88a:	6123      	str	r3, [r4, #16]
 800b88c:	f02b 0304 	bic.w	r3, fp, #4
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	f04f 0900 	mov.w	r9, #0
 800b896:	9700      	str	r7, [sp, #0]
 800b898:	4633      	mov	r3, r6
 800b89a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b89c:	4621      	mov	r1, r4
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f000 f9d2 	bl	800bc48 <_printf_common>
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	f040 808d 	bne.w	800b9c4 <_printf_float+0x1d0>
 800b8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ae:	b00d      	add	sp, #52	@ 0x34
 800b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b4:	4642      	mov	r2, r8
 800b8b6:	464b      	mov	r3, r9
 800b8b8:	4640      	mov	r0, r8
 800b8ba:	4649      	mov	r1, r9
 800b8bc:	f7f5 f95e 	bl	8000b7c <__aeabi_dcmpun>
 800b8c0:	b140      	cbz	r0, 800b8d4 <_printf_float+0xe0>
 800b8c2:	464b      	mov	r3, r9
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	bfbc      	itt	lt
 800b8c8:	232d      	movlt	r3, #45	@ 0x2d
 800b8ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b8ce:	4a7e      	ldr	r2, [pc, #504]	@ (800bac8 <_printf_float+0x2d4>)
 800b8d0:	4b7e      	ldr	r3, [pc, #504]	@ (800bacc <_printf_float+0x2d8>)
 800b8d2:	e7d4      	b.n	800b87e <_printf_float+0x8a>
 800b8d4:	6863      	ldr	r3, [r4, #4]
 800b8d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b8da:	9206      	str	r2, [sp, #24]
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	d13b      	bne.n	800b958 <_printf_float+0x164>
 800b8e0:	2306      	movs	r3, #6
 800b8e2:	6063      	str	r3, [r4, #4]
 800b8e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	6022      	str	r2, [r4, #0]
 800b8ec:	9303      	str	r3, [sp, #12]
 800b8ee:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b8f4:	ab09      	add	r3, sp, #36	@ 0x24
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	6861      	ldr	r1, [r4, #4]
 800b8fa:	ec49 8b10 	vmov	d0, r8, r9
 800b8fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b902:	4628      	mov	r0, r5
 800b904:	f7ff fed6 	bl	800b6b4 <__cvt>
 800b908:	9b06      	ldr	r3, [sp, #24]
 800b90a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b90c:	2b47      	cmp	r3, #71	@ 0x47
 800b90e:	4680      	mov	r8, r0
 800b910:	d129      	bne.n	800b966 <_printf_float+0x172>
 800b912:	1cc8      	adds	r0, r1, #3
 800b914:	db02      	blt.n	800b91c <_printf_float+0x128>
 800b916:	6863      	ldr	r3, [r4, #4]
 800b918:	4299      	cmp	r1, r3
 800b91a:	dd41      	ble.n	800b9a0 <_printf_float+0x1ac>
 800b91c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b920:	fa5f fa8a 	uxtb.w	sl, sl
 800b924:	3901      	subs	r1, #1
 800b926:	4652      	mov	r2, sl
 800b928:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b92c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b92e:	f7ff ff26 	bl	800b77e <__exponent>
 800b932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b934:	1813      	adds	r3, r2, r0
 800b936:	2a01      	cmp	r2, #1
 800b938:	4681      	mov	r9, r0
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	dc02      	bgt.n	800b944 <_printf_float+0x150>
 800b93e:	6822      	ldr	r2, [r4, #0]
 800b940:	07d2      	lsls	r2, r2, #31
 800b942:	d501      	bpl.n	800b948 <_printf_float+0x154>
 800b944:	3301      	adds	r3, #1
 800b946:	6123      	str	r3, [r4, #16]
 800b948:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0a2      	beq.n	800b896 <_printf_float+0xa2>
 800b950:	232d      	movs	r3, #45	@ 0x2d
 800b952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b956:	e79e      	b.n	800b896 <_printf_float+0xa2>
 800b958:	9a06      	ldr	r2, [sp, #24]
 800b95a:	2a47      	cmp	r2, #71	@ 0x47
 800b95c:	d1c2      	bne.n	800b8e4 <_printf_float+0xf0>
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1c0      	bne.n	800b8e4 <_printf_float+0xf0>
 800b962:	2301      	movs	r3, #1
 800b964:	e7bd      	b.n	800b8e2 <_printf_float+0xee>
 800b966:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b96a:	d9db      	bls.n	800b924 <_printf_float+0x130>
 800b96c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b970:	d118      	bne.n	800b9a4 <_printf_float+0x1b0>
 800b972:	2900      	cmp	r1, #0
 800b974:	6863      	ldr	r3, [r4, #4]
 800b976:	dd0b      	ble.n	800b990 <_printf_float+0x19c>
 800b978:	6121      	str	r1, [r4, #16]
 800b97a:	b913      	cbnz	r3, 800b982 <_printf_float+0x18e>
 800b97c:	6822      	ldr	r2, [r4, #0]
 800b97e:	07d0      	lsls	r0, r2, #31
 800b980:	d502      	bpl.n	800b988 <_printf_float+0x194>
 800b982:	3301      	adds	r3, #1
 800b984:	440b      	add	r3, r1
 800b986:	6123      	str	r3, [r4, #16]
 800b988:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b98a:	f04f 0900 	mov.w	r9, #0
 800b98e:	e7db      	b.n	800b948 <_printf_float+0x154>
 800b990:	b913      	cbnz	r3, 800b998 <_printf_float+0x1a4>
 800b992:	6822      	ldr	r2, [r4, #0]
 800b994:	07d2      	lsls	r2, r2, #31
 800b996:	d501      	bpl.n	800b99c <_printf_float+0x1a8>
 800b998:	3302      	adds	r3, #2
 800b99a:	e7f4      	b.n	800b986 <_printf_float+0x192>
 800b99c:	2301      	movs	r3, #1
 800b99e:	e7f2      	b.n	800b986 <_printf_float+0x192>
 800b9a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a6:	4299      	cmp	r1, r3
 800b9a8:	db05      	blt.n	800b9b6 <_printf_float+0x1c2>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	6121      	str	r1, [r4, #16]
 800b9ae:	07d8      	lsls	r0, r3, #31
 800b9b0:	d5ea      	bpl.n	800b988 <_printf_float+0x194>
 800b9b2:	1c4b      	adds	r3, r1, #1
 800b9b4:	e7e7      	b.n	800b986 <_printf_float+0x192>
 800b9b6:	2900      	cmp	r1, #0
 800b9b8:	bfd4      	ite	le
 800b9ba:	f1c1 0202 	rsble	r2, r1, #2
 800b9be:	2201      	movgt	r2, #1
 800b9c0:	4413      	add	r3, r2
 800b9c2:	e7e0      	b.n	800b986 <_printf_float+0x192>
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	055a      	lsls	r2, r3, #21
 800b9c8:	d407      	bmi.n	800b9da <_printf_float+0x1e6>
 800b9ca:	6923      	ldr	r3, [r4, #16]
 800b9cc:	4642      	mov	r2, r8
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	47b8      	blx	r7
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	d12b      	bne.n	800ba30 <_printf_float+0x23c>
 800b9d8:	e767      	b.n	800b8aa <_printf_float+0xb6>
 800b9da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9de:	f240 80dd 	bls.w	800bb9c <_printf_float+0x3a8>
 800b9e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f7f5 f895 	bl	8000b18 <__aeabi_dcmpeq>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d033      	beq.n	800ba5a <_printf_float+0x266>
 800b9f2:	4a37      	ldr	r2, [pc, #220]	@ (800bad0 <_printf_float+0x2dc>)
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	47b8      	blx	r7
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	f43f af54 	beq.w	800b8aa <_printf_float+0xb6>
 800ba02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ba06:	4543      	cmp	r3, r8
 800ba08:	db02      	blt.n	800ba10 <_printf_float+0x21c>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	07d8      	lsls	r0, r3, #31
 800ba0e:	d50f      	bpl.n	800ba30 <_printf_float+0x23c>
 800ba10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba14:	4631      	mov	r1, r6
 800ba16:	4628      	mov	r0, r5
 800ba18:	47b8      	blx	r7
 800ba1a:	3001      	adds	r0, #1
 800ba1c:	f43f af45 	beq.w	800b8aa <_printf_float+0xb6>
 800ba20:	f04f 0900 	mov.w	r9, #0
 800ba24:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba28:	f104 0a1a 	add.w	sl, r4, #26
 800ba2c:	45c8      	cmp	r8, r9
 800ba2e:	dc09      	bgt.n	800ba44 <_printf_float+0x250>
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	079b      	lsls	r3, r3, #30
 800ba34:	f100 8103 	bmi.w	800bc3e <_printf_float+0x44a>
 800ba38:	68e0      	ldr	r0, [r4, #12]
 800ba3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba3c:	4298      	cmp	r0, r3
 800ba3e:	bfb8      	it	lt
 800ba40:	4618      	movlt	r0, r3
 800ba42:	e734      	b.n	800b8ae <_printf_float+0xba>
 800ba44:	2301      	movs	r3, #1
 800ba46:	4652      	mov	r2, sl
 800ba48:	4631      	mov	r1, r6
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	47b8      	blx	r7
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f43f af2b 	beq.w	800b8aa <_printf_float+0xb6>
 800ba54:	f109 0901 	add.w	r9, r9, #1
 800ba58:	e7e8      	b.n	800ba2c <_printf_float+0x238>
 800ba5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dc39      	bgt.n	800bad4 <_printf_float+0x2e0>
 800ba60:	4a1b      	ldr	r2, [pc, #108]	@ (800bad0 <_printf_float+0x2dc>)
 800ba62:	2301      	movs	r3, #1
 800ba64:	4631      	mov	r1, r6
 800ba66:	4628      	mov	r0, r5
 800ba68:	47b8      	blx	r7
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	f43f af1d 	beq.w	800b8aa <_printf_float+0xb6>
 800ba70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ba74:	ea59 0303 	orrs.w	r3, r9, r3
 800ba78:	d102      	bne.n	800ba80 <_printf_float+0x28c>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	07d9      	lsls	r1, r3, #31
 800ba7e:	d5d7      	bpl.n	800ba30 <_printf_float+0x23c>
 800ba80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f af0d 	beq.w	800b8aa <_printf_float+0xb6>
 800ba90:	f04f 0a00 	mov.w	sl, #0
 800ba94:	f104 0b1a 	add.w	fp, r4, #26
 800ba98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9a:	425b      	negs	r3, r3
 800ba9c:	4553      	cmp	r3, sl
 800ba9e:	dc01      	bgt.n	800baa4 <_printf_float+0x2b0>
 800baa0:	464b      	mov	r3, r9
 800baa2:	e793      	b.n	800b9cc <_printf_float+0x1d8>
 800baa4:	2301      	movs	r3, #1
 800baa6:	465a      	mov	r2, fp
 800baa8:	4631      	mov	r1, r6
 800baaa:	4628      	mov	r0, r5
 800baac:	47b8      	blx	r7
 800baae:	3001      	adds	r0, #1
 800bab0:	f43f aefb 	beq.w	800b8aa <_printf_float+0xb6>
 800bab4:	f10a 0a01 	add.w	sl, sl, #1
 800bab8:	e7ee      	b.n	800ba98 <_printf_float+0x2a4>
 800baba:	bf00      	nop
 800babc:	7fefffff 	.word	0x7fefffff
 800bac0:	0800e100 	.word	0x0800e100
 800bac4:	0800e0fc 	.word	0x0800e0fc
 800bac8:	0800e108 	.word	0x0800e108
 800bacc:	0800e104 	.word	0x0800e104
 800bad0:	0800e10c 	.word	0x0800e10c
 800bad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bad6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bada:	4553      	cmp	r3, sl
 800badc:	bfa8      	it	ge
 800bade:	4653      	movge	r3, sl
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	4699      	mov	r9, r3
 800bae4:	dc36      	bgt.n	800bb54 <_printf_float+0x360>
 800bae6:	f04f 0b00 	mov.w	fp, #0
 800baea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baee:	f104 021a 	add.w	r2, r4, #26
 800baf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800baf4:	9306      	str	r3, [sp, #24]
 800baf6:	eba3 0309 	sub.w	r3, r3, r9
 800bafa:	455b      	cmp	r3, fp
 800bafc:	dc31      	bgt.n	800bb62 <_printf_float+0x36e>
 800bafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb00:	459a      	cmp	sl, r3
 800bb02:	dc3a      	bgt.n	800bb7a <_printf_float+0x386>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	07da      	lsls	r2, r3, #31
 800bb08:	d437      	bmi.n	800bb7a <_printf_float+0x386>
 800bb0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb0c:	ebaa 0903 	sub.w	r9, sl, r3
 800bb10:	9b06      	ldr	r3, [sp, #24]
 800bb12:	ebaa 0303 	sub.w	r3, sl, r3
 800bb16:	4599      	cmp	r9, r3
 800bb18:	bfa8      	it	ge
 800bb1a:	4699      	movge	r9, r3
 800bb1c:	f1b9 0f00 	cmp.w	r9, #0
 800bb20:	dc33      	bgt.n	800bb8a <_printf_float+0x396>
 800bb22:	f04f 0800 	mov.w	r8, #0
 800bb26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb2a:	f104 0b1a 	add.w	fp, r4, #26
 800bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb30:	ebaa 0303 	sub.w	r3, sl, r3
 800bb34:	eba3 0309 	sub.w	r3, r3, r9
 800bb38:	4543      	cmp	r3, r8
 800bb3a:	f77f af79 	ble.w	800ba30 <_printf_float+0x23c>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	465a      	mov	r2, fp
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	47b8      	blx	r7
 800bb48:	3001      	adds	r0, #1
 800bb4a:	f43f aeae 	beq.w	800b8aa <_printf_float+0xb6>
 800bb4e:	f108 0801 	add.w	r8, r8, #1
 800bb52:	e7ec      	b.n	800bb2e <_printf_float+0x33a>
 800bb54:	4642      	mov	r2, r8
 800bb56:	4631      	mov	r1, r6
 800bb58:	4628      	mov	r0, r5
 800bb5a:	47b8      	blx	r7
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d1c2      	bne.n	800bae6 <_printf_float+0x2f2>
 800bb60:	e6a3      	b.n	800b8aa <_printf_float+0xb6>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	9206      	str	r2, [sp, #24]
 800bb6a:	47b8      	blx	r7
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	f43f ae9c 	beq.w	800b8aa <_printf_float+0xb6>
 800bb72:	9a06      	ldr	r2, [sp, #24]
 800bb74:	f10b 0b01 	add.w	fp, fp, #1
 800bb78:	e7bb      	b.n	800baf2 <_printf_float+0x2fe>
 800bb7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb7e:	4631      	mov	r1, r6
 800bb80:	4628      	mov	r0, r5
 800bb82:	47b8      	blx	r7
 800bb84:	3001      	adds	r0, #1
 800bb86:	d1c0      	bne.n	800bb0a <_printf_float+0x316>
 800bb88:	e68f      	b.n	800b8aa <_printf_float+0xb6>
 800bb8a:	9a06      	ldr	r2, [sp, #24]
 800bb8c:	464b      	mov	r3, r9
 800bb8e:	4442      	add	r2, r8
 800bb90:	4631      	mov	r1, r6
 800bb92:	4628      	mov	r0, r5
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	d1c3      	bne.n	800bb22 <_printf_float+0x32e>
 800bb9a:	e686      	b.n	800b8aa <_printf_float+0xb6>
 800bb9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bba0:	f1ba 0f01 	cmp.w	sl, #1
 800bba4:	dc01      	bgt.n	800bbaa <_printf_float+0x3b6>
 800bba6:	07db      	lsls	r3, r3, #31
 800bba8:	d536      	bpl.n	800bc18 <_printf_float+0x424>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4642      	mov	r2, r8
 800bbae:	4631      	mov	r1, r6
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	47b8      	blx	r7
 800bbb4:	3001      	adds	r0, #1
 800bbb6:	f43f ae78 	beq.w	800b8aa <_printf_float+0xb6>
 800bbba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47b8      	blx	r7
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	f43f ae70 	beq.w	800b8aa <_printf_float+0xb6>
 800bbca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbd6:	f7f4 ff9f 	bl	8000b18 <__aeabi_dcmpeq>
 800bbda:	b9c0      	cbnz	r0, 800bc0e <_printf_float+0x41a>
 800bbdc:	4653      	mov	r3, sl
 800bbde:	f108 0201 	add.w	r2, r8, #1
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	47b8      	blx	r7
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d10c      	bne.n	800bc06 <_printf_float+0x412>
 800bbec:	e65d      	b.n	800b8aa <_printf_float+0xb6>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	465a      	mov	r2, fp
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b8      	blx	r7
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f43f ae56 	beq.w	800b8aa <_printf_float+0xb6>
 800bbfe:	f108 0801 	add.w	r8, r8, #1
 800bc02:	45d0      	cmp	r8, sl
 800bc04:	dbf3      	blt.n	800bbee <_printf_float+0x3fa>
 800bc06:	464b      	mov	r3, r9
 800bc08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc0c:	e6df      	b.n	800b9ce <_printf_float+0x1da>
 800bc0e:	f04f 0800 	mov.w	r8, #0
 800bc12:	f104 0b1a 	add.w	fp, r4, #26
 800bc16:	e7f4      	b.n	800bc02 <_printf_float+0x40e>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	4642      	mov	r2, r8
 800bc1c:	e7e1      	b.n	800bbe2 <_printf_float+0x3ee>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	464a      	mov	r2, r9
 800bc22:	4631      	mov	r1, r6
 800bc24:	4628      	mov	r0, r5
 800bc26:	47b8      	blx	r7
 800bc28:	3001      	adds	r0, #1
 800bc2a:	f43f ae3e 	beq.w	800b8aa <_printf_float+0xb6>
 800bc2e:	f108 0801 	add.w	r8, r8, #1
 800bc32:	68e3      	ldr	r3, [r4, #12]
 800bc34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc36:	1a5b      	subs	r3, r3, r1
 800bc38:	4543      	cmp	r3, r8
 800bc3a:	dcf0      	bgt.n	800bc1e <_printf_float+0x42a>
 800bc3c:	e6fc      	b.n	800ba38 <_printf_float+0x244>
 800bc3e:	f04f 0800 	mov.w	r8, #0
 800bc42:	f104 0919 	add.w	r9, r4, #25
 800bc46:	e7f4      	b.n	800bc32 <_printf_float+0x43e>

0800bc48 <_printf_common>:
 800bc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4c:	4616      	mov	r6, r2
 800bc4e:	4698      	mov	r8, r3
 800bc50:	688a      	ldr	r2, [r1, #8]
 800bc52:	690b      	ldr	r3, [r1, #16]
 800bc54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	bfb8      	it	lt
 800bc5c:	4613      	movlt	r3, r2
 800bc5e:	6033      	str	r3, [r6, #0]
 800bc60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc64:	4607      	mov	r7, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	b10a      	cbz	r2, 800bc6e <_printf_common+0x26>
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	6033      	str	r3, [r6, #0]
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	0699      	lsls	r1, r3, #26
 800bc72:	bf42      	ittt	mi
 800bc74:	6833      	ldrmi	r3, [r6, #0]
 800bc76:	3302      	addmi	r3, #2
 800bc78:	6033      	strmi	r3, [r6, #0]
 800bc7a:	6825      	ldr	r5, [r4, #0]
 800bc7c:	f015 0506 	ands.w	r5, r5, #6
 800bc80:	d106      	bne.n	800bc90 <_printf_common+0x48>
 800bc82:	f104 0a19 	add.w	sl, r4, #25
 800bc86:	68e3      	ldr	r3, [r4, #12]
 800bc88:	6832      	ldr	r2, [r6, #0]
 800bc8a:	1a9b      	subs	r3, r3, r2
 800bc8c:	42ab      	cmp	r3, r5
 800bc8e:	dc26      	bgt.n	800bcde <_printf_common+0x96>
 800bc90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc94:	6822      	ldr	r2, [r4, #0]
 800bc96:	3b00      	subs	r3, #0
 800bc98:	bf18      	it	ne
 800bc9a:	2301      	movne	r3, #1
 800bc9c:	0692      	lsls	r2, r2, #26
 800bc9e:	d42b      	bmi.n	800bcf8 <_printf_common+0xb0>
 800bca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bca4:	4641      	mov	r1, r8
 800bca6:	4638      	mov	r0, r7
 800bca8:	47c8      	blx	r9
 800bcaa:	3001      	adds	r0, #1
 800bcac:	d01e      	beq.n	800bcec <_printf_common+0xa4>
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	6922      	ldr	r2, [r4, #16]
 800bcb2:	f003 0306 	and.w	r3, r3, #6
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	bf02      	ittt	eq
 800bcba:	68e5      	ldreq	r5, [r4, #12]
 800bcbc:	6833      	ldreq	r3, [r6, #0]
 800bcbe:	1aed      	subeq	r5, r5, r3
 800bcc0:	68a3      	ldr	r3, [r4, #8]
 800bcc2:	bf0c      	ite	eq
 800bcc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcc8:	2500      	movne	r5, #0
 800bcca:	4293      	cmp	r3, r2
 800bccc:	bfc4      	itt	gt
 800bcce:	1a9b      	subgt	r3, r3, r2
 800bcd0:	18ed      	addgt	r5, r5, r3
 800bcd2:	2600      	movs	r6, #0
 800bcd4:	341a      	adds	r4, #26
 800bcd6:	42b5      	cmp	r5, r6
 800bcd8:	d11a      	bne.n	800bd10 <_printf_common+0xc8>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e008      	b.n	800bcf0 <_printf_common+0xa8>
 800bcde:	2301      	movs	r3, #1
 800bce0:	4652      	mov	r2, sl
 800bce2:	4641      	mov	r1, r8
 800bce4:	4638      	mov	r0, r7
 800bce6:	47c8      	blx	r9
 800bce8:	3001      	adds	r0, #1
 800bcea:	d103      	bne.n	800bcf4 <_printf_common+0xac>
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf4:	3501      	adds	r5, #1
 800bcf6:	e7c6      	b.n	800bc86 <_printf_common+0x3e>
 800bcf8:	18e1      	adds	r1, r4, r3
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	2030      	movs	r0, #48	@ 0x30
 800bcfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd02:	4422      	add	r2, r4
 800bd04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd0c:	3302      	adds	r3, #2
 800bd0e:	e7c7      	b.n	800bca0 <_printf_common+0x58>
 800bd10:	2301      	movs	r3, #1
 800bd12:	4622      	mov	r2, r4
 800bd14:	4641      	mov	r1, r8
 800bd16:	4638      	mov	r0, r7
 800bd18:	47c8      	blx	r9
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d0e6      	beq.n	800bcec <_printf_common+0xa4>
 800bd1e:	3601      	adds	r6, #1
 800bd20:	e7d9      	b.n	800bcd6 <_printf_common+0x8e>
	...

0800bd24 <_printf_i>:
 800bd24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	7e0f      	ldrb	r7, [r1, #24]
 800bd2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd2c:	2f78      	cmp	r7, #120	@ 0x78
 800bd2e:	4691      	mov	r9, r2
 800bd30:	4680      	mov	r8, r0
 800bd32:	460c      	mov	r4, r1
 800bd34:	469a      	mov	sl, r3
 800bd36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd3a:	d807      	bhi.n	800bd4c <_printf_i+0x28>
 800bd3c:	2f62      	cmp	r7, #98	@ 0x62
 800bd3e:	d80a      	bhi.n	800bd56 <_printf_i+0x32>
 800bd40:	2f00      	cmp	r7, #0
 800bd42:	f000 80d1 	beq.w	800bee8 <_printf_i+0x1c4>
 800bd46:	2f58      	cmp	r7, #88	@ 0x58
 800bd48:	f000 80b8 	beq.w	800bebc <_printf_i+0x198>
 800bd4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd54:	e03a      	b.n	800bdcc <_printf_i+0xa8>
 800bd56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd5a:	2b15      	cmp	r3, #21
 800bd5c:	d8f6      	bhi.n	800bd4c <_printf_i+0x28>
 800bd5e:	a101      	add	r1, pc, #4	@ (adr r1, 800bd64 <_printf_i+0x40>)
 800bd60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd64:	0800bdbd 	.word	0x0800bdbd
 800bd68:	0800bdd1 	.word	0x0800bdd1
 800bd6c:	0800bd4d 	.word	0x0800bd4d
 800bd70:	0800bd4d 	.word	0x0800bd4d
 800bd74:	0800bd4d 	.word	0x0800bd4d
 800bd78:	0800bd4d 	.word	0x0800bd4d
 800bd7c:	0800bdd1 	.word	0x0800bdd1
 800bd80:	0800bd4d 	.word	0x0800bd4d
 800bd84:	0800bd4d 	.word	0x0800bd4d
 800bd88:	0800bd4d 	.word	0x0800bd4d
 800bd8c:	0800bd4d 	.word	0x0800bd4d
 800bd90:	0800becf 	.word	0x0800becf
 800bd94:	0800bdfb 	.word	0x0800bdfb
 800bd98:	0800be89 	.word	0x0800be89
 800bd9c:	0800bd4d 	.word	0x0800bd4d
 800bda0:	0800bd4d 	.word	0x0800bd4d
 800bda4:	0800bef1 	.word	0x0800bef1
 800bda8:	0800bd4d 	.word	0x0800bd4d
 800bdac:	0800bdfb 	.word	0x0800bdfb
 800bdb0:	0800bd4d 	.word	0x0800bd4d
 800bdb4:	0800bd4d 	.word	0x0800bd4d
 800bdb8:	0800be91 	.word	0x0800be91
 800bdbc:	6833      	ldr	r3, [r6, #0]
 800bdbe:	1d1a      	adds	r2, r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6032      	str	r2, [r6, #0]
 800bdc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e09c      	b.n	800bf0a <_printf_i+0x1e6>
 800bdd0:	6833      	ldr	r3, [r6, #0]
 800bdd2:	6820      	ldr	r0, [r4, #0]
 800bdd4:	1d19      	adds	r1, r3, #4
 800bdd6:	6031      	str	r1, [r6, #0]
 800bdd8:	0606      	lsls	r6, r0, #24
 800bdda:	d501      	bpl.n	800bde0 <_printf_i+0xbc>
 800bddc:	681d      	ldr	r5, [r3, #0]
 800bdde:	e003      	b.n	800bde8 <_printf_i+0xc4>
 800bde0:	0645      	lsls	r5, r0, #25
 800bde2:	d5fb      	bpl.n	800bddc <_printf_i+0xb8>
 800bde4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bde8:	2d00      	cmp	r5, #0
 800bdea:	da03      	bge.n	800bdf4 <_printf_i+0xd0>
 800bdec:	232d      	movs	r3, #45	@ 0x2d
 800bdee:	426d      	negs	r5, r5
 800bdf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdf4:	4858      	ldr	r0, [pc, #352]	@ (800bf58 <_printf_i+0x234>)
 800bdf6:	230a      	movs	r3, #10
 800bdf8:	e011      	b.n	800be1e <_printf_i+0xfa>
 800bdfa:	6821      	ldr	r1, [r4, #0]
 800bdfc:	6833      	ldr	r3, [r6, #0]
 800bdfe:	0608      	lsls	r0, r1, #24
 800be00:	f853 5b04 	ldr.w	r5, [r3], #4
 800be04:	d402      	bmi.n	800be0c <_printf_i+0xe8>
 800be06:	0649      	lsls	r1, r1, #25
 800be08:	bf48      	it	mi
 800be0a:	b2ad      	uxthmi	r5, r5
 800be0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800be0e:	4852      	ldr	r0, [pc, #328]	@ (800bf58 <_printf_i+0x234>)
 800be10:	6033      	str	r3, [r6, #0]
 800be12:	bf14      	ite	ne
 800be14:	230a      	movne	r3, #10
 800be16:	2308      	moveq	r3, #8
 800be18:	2100      	movs	r1, #0
 800be1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be1e:	6866      	ldr	r6, [r4, #4]
 800be20:	60a6      	str	r6, [r4, #8]
 800be22:	2e00      	cmp	r6, #0
 800be24:	db05      	blt.n	800be32 <_printf_i+0x10e>
 800be26:	6821      	ldr	r1, [r4, #0]
 800be28:	432e      	orrs	r6, r5
 800be2a:	f021 0104 	bic.w	r1, r1, #4
 800be2e:	6021      	str	r1, [r4, #0]
 800be30:	d04b      	beq.n	800beca <_printf_i+0x1a6>
 800be32:	4616      	mov	r6, r2
 800be34:	fbb5 f1f3 	udiv	r1, r5, r3
 800be38:	fb03 5711 	mls	r7, r3, r1, r5
 800be3c:	5dc7      	ldrb	r7, [r0, r7]
 800be3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be42:	462f      	mov	r7, r5
 800be44:	42bb      	cmp	r3, r7
 800be46:	460d      	mov	r5, r1
 800be48:	d9f4      	bls.n	800be34 <_printf_i+0x110>
 800be4a:	2b08      	cmp	r3, #8
 800be4c:	d10b      	bne.n	800be66 <_printf_i+0x142>
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	07df      	lsls	r7, r3, #31
 800be52:	d508      	bpl.n	800be66 <_printf_i+0x142>
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	6861      	ldr	r1, [r4, #4]
 800be58:	4299      	cmp	r1, r3
 800be5a:	bfde      	ittt	le
 800be5c:	2330      	movle	r3, #48	@ 0x30
 800be5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be66:	1b92      	subs	r2, r2, r6
 800be68:	6122      	str	r2, [r4, #16]
 800be6a:	f8cd a000 	str.w	sl, [sp]
 800be6e:	464b      	mov	r3, r9
 800be70:	aa03      	add	r2, sp, #12
 800be72:	4621      	mov	r1, r4
 800be74:	4640      	mov	r0, r8
 800be76:	f7ff fee7 	bl	800bc48 <_printf_common>
 800be7a:	3001      	adds	r0, #1
 800be7c:	d14a      	bne.n	800bf14 <_printf_i+0x1f0>
 800be7e:	f04f 30ff 	mov.w	r0, #4294967295
 800be82:	b004      	add	sp, #16
 800be84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	f043 0320 	orr.w	r3, r3, #32
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	4832      	ldr	r0, [pc, #200]	@ (800bf5c <_printf_i+0x238>)
 800be92:	2778      	movs	r7, #120	@ 0x78
 800be94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	6831      	ldr	r1, [r6, #0]
 800be9c:	061f      	lsls	r7, r3, #24
 800be9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bea2:	d402      	bmi.n	800beaa <_printf_i+0x186>
 800bea4:	065f      	lsls	r7, r3, #25
 800bea6:	bf48      	it	mi
 800bea8:	b2ad      	uxthmi	r5, r5
 800beaa:	6031      	str	r1, [r6, #0]
 800beac:	07d9      	lsls	r1, r3, #31
 800beae:	bf44      	itt	mi
 800beb0:	f043 0320 	orrmi.w	r3, r3, #32
 800beb4:	6023      	strmi	r3, [r4, #0]
 800beb6:	b11d      	cbz	r5, 800bec0 <_printf_i+0x19c>
 800beb8:	2310      	movs	r3, #16
 800beba:	e7ad      	b.n	800be18 <_printf_i+0xf4>
 800bebc:	4826      	ldr	r0, [pc, #152]	@ (800bf58 <_printf_i+0x234>)
 800bebe:	e7e9      	b.n	800be94 <_printf_i+0x170>
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	f023 0320 	bic.w	r3, r3, #32
 800bec6:	6023      	str	r3, [r4, #0]
 800bec8:	e7f6      	b.n	800beb8 <_printf_i+0x194>
 800beca:	4616      	mov	r6, r2
 800becc:	e7bd      	b.n	800be4a <_printf_i+0x126>
 800bece:	6833      	ldr	r3, [r6, #0]
 800bed0:	6825      	ldr	r5, [r4, #0]
 800bed2:	6961      	ldr	r1, [r4, #20]
 800bed4:	1d18      	adds	r0, r3, #4
 800bed6:	6030      	str	r0, [r6, #0]
 800bed8:	062e      	lsls	r6, r5, #24
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	d501      	bpl.n	800bee2 <_printf_i+0x1be>
 800bede:	6019      	str	r1, [r3, #0]
 800bee0:	e002      	b.n	800bee8 <_printf_i+0x1c4>
 800bee2:	0668      	lsls	r0, r5, #25
 800bee4:	d5fb      	bpl.n	800bede <_printf_i+0x1ba>
 800bee6:	8019      	strh	r1, [r3, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	6123      	str	r3, [r4, #16]
 800beec:	4616      	mov	r6, r2
 800beee:	e7bc      	b.n	800be6a <_printf_i+0x146>
 800bef0:	6833      	ldr	r3, [r6, #0]
 800bef2:	1d1a      	adds	r2, r3, #4
 800bef4:	6032      	str	r2, [r6, #0]
 800bef6:	681e      	ldr	r6, [r3, #0]
 800bef8:	6862      	ldr	r2, [r4, #4]
 800befa:	2100      	movs	r1, #0
 800befc:	4630      	mov	r0, r6
 800befe:	f7f4 f98f 	bl	8000220 <memchr>
 800bf02:	b108      	cbz	r0, 800bf08 <_printf_i+0x1e4>
 800bf04:	1b80      	subs	r0, r0, r6
 800bf06:	6060      	str	r0, [r4, #4]
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	6123      	str	r3, [r4, #16]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf12:	e7aa      	b.n	800be6a <_printf_i+0x146>
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	4632      	mov	r2, r6
 800bf18:	4649      	mov	r1, r9
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	47d0      	blx	sl
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d0ad      	beq.n	800be7e <_printf_i+0x15a>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	079b      	lsls	r3, r3, #30
 800bf26:	d413      	bmi.n	800bf50 <_printf_i+0x22c>
 800bf28:	68e0      	ldr	r0, [r4, #12]
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	4298      	cmp	r0, r3
 800bf2e:	bfb8      	it	lt
 800bf30:	4618      	movlt	r0, r3
 800bf32:	e7a6      	b.n	800be82 <_printf_i+0x15e>
 800bf34:	2301      	movs	r3, #1
 800bf36:	4632      	mov	r2, r6
 800bf38:	4649      	mov	r1, r9
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	47d0      	blx	sl
 800bf3e:	3001      	adds	r0, #1
 800bf40:	d09d      	beq.n	800be7e <_printf_i+0x15a>
 800bf42:	3501      	adds	r5, #1
 800bf44:	68e3      	ldr	r3, [r4, #12]
 800bf46:	9903      	ldr	r1, [sp, #12]
 800bf48:	1a5b      	subs	r3, r3, r1
 800bf4a:	42ab      	cmp	r3, r5
 800bf4c:	dcf2      	bgt.n	800bf34 <_printf_i+0x210>
 800bf4e:	e7eb      	b.n	800bf28 <_printf_i+0x204>
 800bf50:	2500      	movs	r5, #0
 800bf52:	f104 0619 	add.w	r6, r4, #25
 800bf56:	e7f5      	b.n	800bf44 <_printf_i+0x220>
 800bf58:	0800e10e 	.word	0x0800e10e
 800bf5c:	0800e11f 	.word	0x0800e11f

0800bf60 <std>:
 800bf60:	2300      	movs	r3, #0
 800bf62:	b510      	push	{r4, lr}
 800bf64:	4604      	mov	r4, r0
 800bf66:	e9c0 3300 	strd	r3, r3, [r0]
 800bf6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf6e:	6083      	str	r3, [r0, #8]
 800bf70:	8181      	strh	r1, [r0, #12]
 800bf72:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf74:	81c2      	strh	r2, [r0, #14]
 800bf76:	6183      	str	r3, [r0, #24]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	305c      	adds	r0, #92	@ 0x5c
 800bf7e:	f000 f8f4 	bl	800c16a <memset>
 800bf82:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb8 <std+0x58>)
 800bf84:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf86:	4b0d      	ldr	r3, [pc, #52]	@ (800bfbc <std+0x5c>)
 800bf88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc0 <std+0x60>)
 800bf8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc4 <std+0x64>)
 800bf90:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf92:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc8 <std+0x68>)
 800bf94:	6224      	str	r4, [r4, #32]
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d006      	beq.n	800bfa8 <std+0x48>
 800bf9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf9e:	4294      	cmp	r4, r2
 800bfa0:	d002      	beq.n	800bfa8 <std+0x48>
 800bfa2:	33d0      	adds	r3, #208	@ 0xd0
 800bfa4:	429c      	cmp	r4, r3
 800bfa6:	d105      	bne.n	800bfb4 <std+0x54>
 800bfa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb0:	f000 b958 	b.w	800c264 <__retarget_lock_init_recursive>
 800bfb4:	bd10      	pop	{r4, pc}
 800bfb6:	bf00      	nop
 800bfb8:	0800c0e5 	.word	0x0800c0e5
 800bfbc:	0800c107 	.word	0x0800c107
 800bfc0:	0800c13f 	.word	0x0800c13f
 800bfc4:	0800c163 	.word	0x0800c163
 800bfc8:	20002a80 	.word	0x20002a80

0800bfcc <stdio_exit_handler>:
 800bfcc:	4a02      	ldr	r2, [pc, #8]	@ (800bfd8 <stdio_exit_handler+0xc>)
 800bfce:	4903      	ldr	r1, [pc, #12]	@ (800bfdc <stdio_exit_handler+0x10>)
 800bfd0:	4803      	ldr	r0, [pc, #12]	@ (800bfe0 <stdio_exit_handler+0x14>)
 800bfd2:	f000 b869 	b.w	800c0a8 <_fwalk_sglue>
 800bfd6:	bf00      	nop
 800bfd8:	20000038 	.word	0x20000038
 800bfdc:	0800d935 	.word	0x0800d935
 800bfe0:	20000048 	.word	0x20000048

0800bfe4 <cleanup_stdio>:
 800bfe4:	6841      	ldr	r1, [r0, #4]
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	@ (800c018 <cleanup_stdio+0x34>)
 800bfe8:	4299      	cmp	r1, r3
 800bfea:	b510      	push	{r4, lr}
 800bfec:	4604      	mov	r4, r0
 800bfee:	d001      	beq.n	800bff4 <cleanup_stdio+0x10>
 800bff0:	f001 fca0 	bl	800d934 <_fflush_r>
 800bff4:	68a1      	ldr	r1, [r4, #8]
 800bff6:	4b09      	ldr	r3, [pc, #36]	@ (800c01c <cleanup_stdio+0x38>)
 800bff8:	4299      	cmp	r1, r3
 800bffa:	d002      	beq.n	800c002 <cleanup_stdio+0x1e>
 800bffc:	4620      	mov	r0, r4
 800bffe:	f001 fc99 	bl	800d934 <_fflush_r>
 800c002:	68e1      	ldr	r1, [r4, #12]
 800c004:	4b06      	ldr	r3, [pc, #24]	@ (800c020 <cleanup_stdio+0x3c>)
 800c006:	4299      	cmp	r1, r3
 800c008:	d004      	beq.n	800c014 <cleanup_stdio+0x30>
 800c00a:	4620      	mov	r0, r4
 800c00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c010:	f001 bc90 	b.w	800d934 <_fflush_r>
 800c014:	bd10      	pop	{r4, pc}
 800c016:	bf00      	nop
 800c018:	20002a80 	.word	0x20002a80
 800c01c:	20002ae8 	.word	0x20002ae8
 800c020:	20002b50 	.word	0x20002b50

0800c024 <global_stdio_init.part.0>:
 800c024:	b510      	push	{r4, lr}
 800c026:	4b0b      	ldr	r3, [pc, #44]	@ (800c054 <global_stdio_init.part.0+0x30>)
 800c028:	4c0b      	ldr	r4, [pc, #44]	@ (800c058 <global_stdio_init.part.0+0x34>)
 800c02a:	4a0c      	ldr	r2, [pc, #48]	@ (800c05c <global_stdio_init.part.0+0x38>)
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	4620      	mov	r0, r4
 800c030:	2200      	movs	r2, #0
 800c032:	2104      	movs	r1, #4
 800c034:	f7ff ff94 	bl	800bf60 <std>
 800c038:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c03c:	2201      	movs	r2, #1
 800c03e:	2109      	movs	r1, #9
 800c040:	f7ff ff8e 	bl	800bf60 <std>
 800c044:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c048:	2202      	movs	r2, #2
 800c04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c04e:	2112      	movs	r1, #18
 800c050:	f7ff bf86 	b.w	800bf60 <std>
 800c054:	20002bb8 	.word	0x20002bb8
 800c058:	20002a80 	.word	0x20002a80
 800c05c:	0800bfcd 	.word	0x0800bfcd

0800c060 <__sfp_lock_acquire>:
 800c060:	4801      	ldr	r0, [pc, #4]	@ (800c068 <__sfp_lock_acquire+0x8>)
 800c062:	f000 b900 	b.w	800c266 <__retarget_lock_acquire_recursive>
 800c066:	bf00      	nop
 800c068:	20002bc1 	.word	0x20002bc1

0800c06c <__sfp_lock_release>:
 800c06c:	4801      	ldr	r0, [pc, #4]	@ (800c074 <__sfp_lock_release+0x8>)
 800c06e:	f000 b8fb 	b.w	800c268 <__retarget_lock_release_recursive>
 800c072:	bf00      	nop
 800c074:	20002bc1 	.word	0x20002bc1

0800c078 <__sinit>:
 800c078:	b510      	push	{r4, lr}
 800c07a:	4604      	mov	r4, r0
 800c07c:	f7ff fff0 	bl	800c060 <__sfp_lock_acquire>
 800c080:	6a23      	ldr	r3, [r4, #32]
 800c082:	b11b      	cbz	r3, 800c08c <__sinit+0x14>
 800c084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c088:	f7ff bff0 	b.w	800c06c <__sfp_lock_release>
 800c08c:	4b04      	ldr	r3, [pc, #16]	@ (800c0a0 <__sinit+0x28>)
 800c08e:	6223      	str	r3, [r4, #32]
 800c090:	4b04      	ldr	r3, [pc, #16]	@ (800c0a4 <__sinit+0x2c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1f5      	bne.n	800c084 <__sinit+0xc>
 800c098:	f7ff ffc4 	bl	800c024 <global_stdio_init.part.0>
 800c09c:	e7f2      	b.n	800c084 <__sinit+0xc>
 800c09e:	bf00      	nop
 800c0a0:	0800bfe5 	.word	0x0800bfe5
 800c0a4:	20002bb8 	.word	0x20002bb8

0800c0a8 <_fwalk_sglue>:
 800c0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	4688      	mov	r8, r1
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	2600      	movs	r6, #0
 800c0b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c0bc:	d505      	bpl.n	800c0ca <_fwalk_sglue+0x22>
 800c0be:	6824      	ldr	r4, [r4, #0]
 800c0c0:	2c00      	cmp	r4, #0
 800c0c2:	d1f7      	bne.n	800c0b4 <_fwalk_sglue+0xc>
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ca:	89ab      	ldrh	r3, [r5, #12]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d907      	bls.n	800c0e0 <_fwalk_sglue+0x38>
 800c0d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	d003      	beq.n	800c0e0 <_fwalk_sglue+0x38>
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4638      	mov	r0, r7
 800c0dc:	47c0      	blx	r8
 800c0de:	4306      	orrs	r6, r0
 800c0e0:	3568      	adds	r5, #104	@ 0x68
 800c0e2:	e7e9      	b.n	800c0b8 <_fwalk_sglue+0x10>

0800c0e4 <__sread>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	f000 f86c 	bl	800c1c8 <_read_r>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	bfab      	itete	ge
 800c0f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f8:	181b      	addge	r3, r3, r0
 800c0fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0fe:	bfac      	ite	ge
 800c100:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c102:	81a3      	strhlt	r3, [r4, #12]
 800c104:	bd10      	pop	{r4, pc}

0800c106 <__swrite>:
 800c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10a:	461f      	mov	r7, r3
 800c10c:	898b      	ldrh	r3, [r1, #12]
 800c10e:	05db      	lsls	r3, r3, #23
 800c110:	4605      	mov	r5, r0
 800c112:	460c      	mov	r4, r1
 800c114:	4616      	mov	r6, r2
 800c116:	d505      	bpl.n	800c124 <__swrite+0x1e>
 800c118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11c:	2302      	movs	r3, #2
 800c11e:	2200      	movs	r2, #0
 800c120:	f000 f840 	bl	800c1a4 <_lseek_r>
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	4632      	mov	r2, r6
 800c132:	463b      	mov	r3, r7
 800c134:	4628      	mov	r0, r5
 800c136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13a:	f000 b857 	b.w	800c1ec <_write_r>

0800c13e <__sseek>:
 800c13e:	b510      	push	{r4, lr}
 800c140:	460c      	mov	r4, r1
 800c142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c146:	f000 f82d 	bl	800c1a4 <_lseek_r>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	bf15      	itete	ne
 800c150:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c152:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c156:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c15a:	81a3      	strheq	r3, [r4, #12]
 800c15c:	bf18      	it	ne
 800c15e:	81a3      	strhne	r3, [r4, #12]
 800c160:	bd10      	pop	{r4, pc}

0800c162 <__sclose>:
 800c162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c166:	f000 b80d 	b.w	800c184 <_close_r>

0800c16a <memset>:
 800c16a:	4402      	add	r2, r0
 800c16c:	4603      	mov	r3, r0
 800c16e:	4293      	cmp	r3, r2
 800c170:	d100      	bne.n	800c174 <memset+0xa>
 800c172:	4770      	bx	lr
 800c174:	f803 1b01 	strb.w	r1, [r3], #1
 800c178:	e7f9      	b.n	800c16e <memset+0x4>
	...

0800c17c <_localeconv_r>:
 800c17c:	4800      	ldr	r0, [pc, #0]	@ (800c180 <_localeconv_r+0x4>)
 800c17e:	4770      	bx	lr
 800c180:	20000184 	.word	0x20000184

0800c184 <_close_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	@ (800c1a0 <_close_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7f6 ffe8 	bl	8003164 <_close>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_close_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_close_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	20002bbc 	.word	0x20002bbc

0800c1a4 <_lseek_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d07      	ldr	r5, [pc, #28]	@ (800c1c4 <_lseek_r+0x20>)
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	4608      	mov	r0, r1
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	602a      	str	r2, [r5, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f7f6 fffd 	bl	80031b2 <_lseek>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d102      	bne.n	800c1c2 <_lseek_r+0x1e>
 800c1bc:	682b      	ldr	r3, [r5, #0]
 800c1be:	b103      	cbz	r3, 800c1c2 <_lseek_r+0x1e>
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	20002bbc 	.word	0x20002bbc

0800c1c8 <_read_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d07      	ldr	r5, [pc, #28]	@ (800c1e8 <_read_r+0x20>)
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	4608      	mov	r0, r1
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	602a      	str	r2, [r5, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f7f6 ff8b 	bl	80030f2 <_read>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d102      	bne.n	800c1e6 <_read_r+0x1e>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <_read_r+0x1e>
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	20002bbc 	.word	0x20002bbc

0800c1ec <_write_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	@ (800c20c <_write_r+0x20>)
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f6 ff96 	bl	800312c <_write>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_write_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_write_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	20002bbc 	.word	0x20002bbc

0800c210 <__errno>:
 800c210:	4b01      	ldr	r3, [pc, #4]	@ (800c218 <__errno+0x8>)
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	20000044 	.word	0x20000044

0800c21c <__libc_init_array>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4d0d      	ldr	r5, [pc, #52]	@ (800c254 <__libc_init_array+0x38>)
 800c220:	4c0d      	ldr	r4, [pc, #52]	@ (800c258 <__libc_init_array+0x3c>)
 800c222:	1b64      	subs	r4, r4, r5
 800c224:	10a4      	asrs	r4, r4, #2
 800c226:	2600      	movs	r6, #0
 800c228:	42a6      	cmp	r6, r4
 800c22a:	d109      	bne.n	800c240 <__libc_init_array+0x24>
 800c22c:	4d0b      	ldr	r5, [pc, #44]	@ (800c25c <__libc_init_array+0x40>)
 800c22e:	4c0c      	ldr	r4, [pc, #48]	@ (800c260 <__libc_init_array+0x44>)
 800c230:	f001 fec0 	bl	800dfb4 <_init>
 800c234:	1b64      	subs	r4, r4, r5
 800c236:	10a4      	asrs	r4, r4, #2
 800c238:	2600      	movs	r6, #0
 800c23a:	42a6      	cmp	r6, r4
 800c23c:	d105      	bne.n	800c24a <__libc_init_array+0x2e>
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	f855 3b04 	ldr.w	r3, [r5], #4
 800c244:	4798      	blx	r3
 800c246:	3601      	adds	r6, #1
 800c248:	e7ee      	b.n	800c228 <__libc_init_array+0xc>
 800c24a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24e:	4798      	blx	r3
 800c250:	3601      	adds	r6, #1
 800c252:	e7f2      	b.n	800c23a <__libc_init_array+0x1e>
 800c254:	0800e47c 	.word	0x0800e47c
 800c258:	0800e47c 	.word	0x0800e47c
 800c25c:	0800e47c 	.word	0x0800e47c
 800c260:	0800e480 	.word	0x0800e480

0800c264 <__retarget_lock_init_recursive>:
 800c264:	4770      	bx	lr

0800c266 <__retarget_lock_acquire_recursive>:
 800c266:	4770      	bx	lr

0800c268 <__retarget_lock_release_recursive>:
 800c268:	4770      	bx	lr

0800c26a <memcpy>:
 800c26a:	440a      	add	r2, r1
 800c26c:	4291      	cmp	r1, r2
 800c26e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c272:	d100      	bne.n	800c276 <memcpy+0xc>
 800c274:	4770      	bx	lr
 800c276:	b510      	push	{r4, lr}
 800c278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c27c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c280:	4291      	cmp	r1, r2
 800c282:	d1f9      	bne.n	800c278 <memcpy+0xe>
 800c284:	bd10      	pop	{r4, pc}

0800c286 <quorem>:
 800c286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	6903      	ldr	r3, [r0, #16]
 800c28c:	690c      	ldr	r4, [r1, #16]
 800c28e:	42a3      	cmp	r3, r4
 800c290:	4607      	mov	r7, r0
 800c292:	db7e      	blt.n	800c392 <quorem+0x10c>
 800c294:	3c01      	subs	r4, #1
 800c296:	f101 0814 	add.w	r8, r1, #20
 800c29a:	00a3      	lsls	r3, r4, #2
 800c29c:	f100 0514 	add.w	r5, r0, #20
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2bc:	d32e      	bcc.n	800c31c <quorem+0x96>
 800c2be:	f04f 0a00 	mov.w	sl, #0
 800c2c2:	46c4      	mov	ip, r8
 800c2c4:	46ae      	mov	lr, r5
 800c2c6:	46d3      	mov	fp, sl
 800c2c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2cc:	b298      	uxth	r0, r3
 800c2ce:	fb06 a000 	mla	r0, r6, r0, sl
 800c2d2:	0c02      	lsrs	r2, r0, #16
 800c2d4:	0c1b      	lsrs	r3, r3, #16
 800c2d6:	fb06 2303 	mla	r3, r6, r3, r2
 800c2da:	f8de 2000 	ldr.w	r2, [lr]
 800c2de:	b280      	uxth	r0, r0
 800c2e0:	b292      	uxth	r2, r2
 800c2e2:	1a12      	subs	r2, r2, r0
 800c2e4:	445a      	add	r2, fp
 800c2e6:	f8de 0000 	ldr.w	r0, [lr]
 800c2ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c2f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c2f8:	b292      	uxth	r2, r2
 800c2fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c2fe:	45e1      	cmp	r9, ip
 800c300:	f84e 2b04 	str.w	r2, [lr], #4
 800c304:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c308:	d2de      	bcs.n	800c2c8 <quorem+0x42>
 800c30a:	9b00      	ldr	r3, [sp, #0]
 800c30c:	58eb      	ldr	r3, [r5, r3]
 800c30e:	b92b      	cbnz	r3, 800c31c <quorem+0x96>
 800c310:	9b01      	ldr	r3, [sp, #4]
 800c312:	3b04      	subs	r3, #4
 800c314:	429d      	cmp	r5, r3
 800c316:	461a      	mov	r2, r3
 800c318:	d32f      	bcc.n	800c37a <quorem+0xf4>
 800c31a:	613c      	str	r4, [r7, #16]
 800c31c:	4638      	mov	r0, r7
 800c31e:	f001 f97d 	bl	800d61c <__mcmp>
 800c322:	2800      	cmp	r0, #0
 800c324:	db25      	blt.n	800c372 <quorem+0xec>
 800c326:	4629      	mov	r1, r5
 800c328:	2000      	movs	r0, #0
 800c32a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c32e:	f8d1 c000 	ldr.w	ip, [r1]
 800c332:	fa1f fe82 	uxth.w	lr, r2
 800c336:	fa1f f38c 	uxth.w	r3, ip
 800c33a:	eba3 030e 	sub.w	r3, r3, lr
 800c33e:	4403      	add	r3, r0
 800c340:	0c12      	lsrs	r2, r2, #16
 800c342:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c346:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c350:	45c1      	cmp	r9, r8
 800c352:	f841 3b04 	str.w	r3, [r1], #4
 800c356:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c35a:	d2e6      	bcs.n	800c32a <quorem+0xa4>
 800c35c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c360:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c364:	b922      	cbnz	r2, 800c370 <quorem+0xea>
 800c366:	3b04      	subs	r3, #4
 800c368:	429d      	cmp	r5, r3
 800c36a:	461a      	mov	r2, r3
 800c36c:	d30b      	bcc.n	800c386 <quorem+0x100>
 800c36e:	613c      	str	r4, [r7, #16]
 800c370:	3601      	adds	r6, #1
 800c372:	4630      	mov	r0, r6
 800c374:	b003      	add	sp, #12
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	6812      	ldr	r2, [r2, #0]
 800c37c:	3b04      	subs	r3, #4
 800c37e:	2a00      	cmp	r2, #0
 800c380:	d1cb      	bne.n	800c31a <quorem+0x94>
 800c382:	3c01      	subs	r4, #1
 800c384:	e7c6      	b.n	800c314 <quorem+0x8e>
 800c386:	6812      	ldr	r2, [r2, #0]
 800c388:	3b04      	subs	r3, #4
 800c38a:	2a00      	cmp	r2, #0
 800c38c:	d1ef      	bne.n	800c36e <quorem+0xe8>
 800c38e:	3c01      	subs	r4, #1
 800c390:	e7ea      	b.n	800c368 <quorem+0xe2>
 800c392:	2000      	movs	r0, #0
 800c394:	e7ee      	b.n	800c374 <quorem+0xee>
	...

0800c398 <_dtoa_r>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	69c7      	ldr	r7, [r0, #28]
 800c39e:	b097      	sub	sp, #92	@ 0x5c
 800c3a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c3a4:	ec55 4b10 	vmov	r4, r5, d0
 800c3a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c3aa:	9107      	str	r1, [sp, #28]
 800c3ac:	4681      	mov	r9, r0
 800c3ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3b2:	b97f      	cbnz	r7, 800c3d4 <_dtoa_r+0x3c>
 800c3b4:	2010      	movs	r0, #16
 800c3b6:	f000 fe09 	bl	800cfcc <malloc>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	f8c9 001c 	str.w	r0, [r9, #28]
 800c3c0:	b920      	cbnz	r0, 800c3cc <_dtoa_r+0x34>
 800c3c2:	4ba9      	ldr	r3, [pc, #676]	@ (800c668 <_dtoa_r+0x2d0>)
 800c3c4:	21ef      	movs	r1, #239	@ 0xef
 800c3c6:	48a9      	ldr	r0, [pc, #676]	@ (800c66c <_dtoa_r+0x2d4>)
 800c3c8:	f001 faec 	bl	800d9a4 <__assert_func>
 800c3cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c3d0:	6007      	str	r7, [r0, #0]
 800c3d2:	60c7      	str	r7, [r0, #12]
 800c3d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3d8:	6819      	ldr	r1, [r3, #0]
 800c3da:	b159      	cbz	r1, 800c3f4 <_dtoa_r+0x5c>
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	604a      	str	r2, [r1, #4]
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	4093      	lsls	r3, r2
 800c3e4:	608b      	str	r3, [r1, #8]
 800c3e6:	4648      	mov	r0, r9
 800c3e8:	f000 fee6 	bl	800d1b8 <_Bfree>
 800c3ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	1e2b      	subs	r3, r5, #0
 800c3f6:	bfb9      	ittee	lt
 800c3f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c3fc:	9305      	strlt	r3, [sp, #20]
 800c3fe:	2300      	movge	r3, #0
 800c400:	6033      	strge	r3, [r6, #0]
 800c402:	9f05      	ldr	r7, [sp, #20]
 800c404:	4b9a      	ldr	r3, [pc, #616]	@ (800c670 <_dtoa_r+0x2d8>)
 800c406:	bfbc      	itt	lt
 800c408:	2201      	movlt	r2, #1
 800c40a:	6032      	strlt	r2, [r6, #0]
 800c40c:	43bb      	bics	r3, r7
 800c40e:	d112      	bne.n	800c436 <_dtoa_r+0x9e>
 800c410:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c412:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c41c:	4323      	orrs	r3, r4
 800c41e:	f000 855a 	beq.w	800ced6 <_dtoa_r+0xb3e>
 800c422:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c424:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c684 <_dtoa_r+0x2ec>
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 855c 	beq.w	800cee6 <_dtoa_r+0xb4e>
 800c42e:	f10a 0303 	add.w	r3, sl, #3
 800c432:	f000 bd56 	b.w	800cee2 <_dtoa_r+0xb4a>
 800c436:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c43a:	2200      	movs	r2, #0
 800c43c:	ec51 0b17 	vmov	r0, r1, d7
 800c440:	2300      	movs	r3, #0
 800c442:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c446:	f7f4 fb67 	bl	8000b18 <__aeabi_dcmpeq>
 800c44a:	4680      	mov	r8, r0
 800c44c:	b158      	cbz	r0, 800c466 <_dtoa_r+0xce>
 800c44e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c450:	2301      	movs	r3, #1
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c456:	b113      	cbz	r3, 800c45e <_dtoa_r+0xc6>
 800c458:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c45a:	4b86      	ldr	r3, [pc, #536]	@ (800c674 <_dtoa_r+0x2dc>)
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c688 <_dtoa_r+0x2f0>
 800c462:	f000 bd40 	b.w	800cee6 <_dtoa_r+0xb4e>
 800c466:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c46a:	aa14      	add	r2, sp, #80	@ 0x50
 800c46c:	a915      	add	r1, sp, #84	@ 0x54
 800c46e:	4648      	mov	r0, r9
 800c470:	f001 f984 	bl	800d77c <__d2b>
 800c474:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c478:	9002      	str	r0, [sp, #8]
 800c47a:	2e00      	cmp	r6, #0
 800c47c:	d078      	beq.n	800c570 <_dtoa_r+0x1d8>
 800c47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c480:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c48c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c490:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c494:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c498:	4619      	mov	r1, r3
 800c49a:	2200      	movs	r2, #0
 800c49c:	4b76      	ldr	r3, [pc, #472]	@ (800c678 <_dtoa_r+0x2e0>)
 800c49e:	f7f3 ff1b 	bl	80002d8 <__aeabi_dsub>
 800c4a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c650 <_dtoa_r+0x2b8>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	f7f4 f8ce 	bl	8000648 <__aeabi_dmul>
 800c4ac:	a36a      	add	r3, pc, #424	@ (adr r3, 800c658 <_dtoa_r+0x2c0>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f3 ff13 	bl	80002dc <__adddf3>
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	f7f4 f85a 	bl	8000574 <__aeabi_i2d>
 800c4c0:	a367      	add	r3, pc, #412	@ (adr r3, 800c660 <_dtoa_r+0x2c8>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	f7f4 f8bf 	bl	8000648 <__aeabi_dmul>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7f3 ff03 	bl	80002dc <__adddf3>
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	460d      	mov	r5, r1
 800c4da:	f7f4 fb65 	bl	8000ba8 <__aeabi_d2iz>
 800c4de:	2200      	movs	r2, #0
 800c4e0:	4607      	mov	r7, r0
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f7f4 fb20 	bl	8000b2c <__aeabi_dcmplt>
 800c4ec:	b140      	cbz	r0, 800c500 <_dtoa_r+0x168>
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	f7f4 f840 	bl	8000574 <__aeabi_i2d>
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	f7f4 fb0e 	bl	8000b18 <__aeabi_dcmpeq>
 800c4fc:	b900      	cbnz	r0, 800c500 <_dtoa_r+0x168>
 800c4fe:	3f01      	subs	r7, #1
 800c500:	2f16      	cmp	r7, #22
 800c502:	d852      	bhi.n	800c5aa <_dtoa_r+0x212>
 800c504:	4b5d      	ldr	r3, [pc, #372]	@ (800c67c <_dtoa_r+0x2e4>)
 800c506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c512:	f7f4 fb0b 	bl	8000b2c <__aeabi_dcmplt>
 800c516:	2800      	cmp	r0, #0
 800c518:	d049      	beq.n	800c5ae <_dtoa_r+0x216>
 800c51a:	3f01      	subs	r7, #1
 800c51c:	2300      	movs	r3, #0
 800c51e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c520:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c522:	1b9b      	subs	r3, r3, r6
 800c524:	1e5a      	subs	r2, r3, #1
 800c526:	bf45      	ittet	mi
 800c528:	f1c3 0301 	rsbmi	r3, r3, #1
 800c52c:	9300      	strmi	r3, [sp, #0]
 800c52e:	2300      	movpl	r3, #0
 800c530:	2300      	movmi	r3, #0
 800c532:	9206      	str	r2, [sp, #24]
 800c534:	bf54      	ite	pl
 800c536:	9300      	strpl	r3, [sp, #0]
 800c538:	9306      	strmi	r3, [sp, #24]
 800c53a:	2f00      	cmp	r7, #0
 800c53c:	db39      	blt.n	800c5b2 <_dtoa_r+0x21a>
 800c53e:	9b06      	ldr	r3, [sp, #24]
 800c540:	970d      	str	r7, [sp, #52]	@ 0x34
 800c542:	443b      	add	r3, r7
 800c544:	9306      	str	r3, [sp, #24]
 800c546:	2300      	movs	r3, #0
 800c548:	9308      	str	r3, [sp, #32]
 800c54a:	9b07      	ldr	r3, [sp, #28]
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d863      	bhi.n	800c618 <_dtoa_r+0x280>
 800c550:	2b05      	cmp	r3, #5
 800c552:	bfc4      	itt	gt
 800c554:	3b04      	subgt	r3, #4
 800c556:	9307      	strgt	r3, [sp, #28]
 800c558:	9b07      	ldr	r3, [sp, #28]
 800c55a:	f1a3 0302 	sub.w	r3, r3, #2
 800c55e:	bfcc      	ite	gt
 800c560:	2400      	movgt	r4, #0
 800c562:	2401      	movle	r4, #1
 800c564:	2b03      	cmp	r3, #3
 800c566:	d863      	bhi.n	800c630 <_dtoa_r+0x298>
 800c568:	e8df f003 	tbb	[pc, r3]
 800c56c:	2b375452 	.word	0x2b375452
 800c570:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c574:	441e      	add	r6, r3
 800c576:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	bfc1      	itttt	gt
 800c57e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c582:	409f      	lslgt	r7, r3
 800c584:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c588:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c58c:	bfd6      	itet	le
 800c58e:	f1c3 0320 	rsble	r3, r3, #32
 800c592:	ea47 0003 	orrgt.w	r0, r7, r3
 800c596:	fa04 f003 	lslle.w	r0, r4, r3
 800c59a:	f7f3 ffdb 	bl	8000554 <__aeabi_ui2d>
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c5a4:	3e01      	subs	r6, #1
 800c5a6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c5a8:	e776      	b.n	800c498 <_dtoa_r+0x100>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e7b7      	b.n	800c51e <_dtoa_r+0x186>
 800c5ae:	9010      	str	r0, [sp, #64]	@ 0x40
 800c5b0:	e7b6      	b.n	800c520 <_dtoa_r+0x188>
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	1bdb      	subs	r3, r3, r7
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	427b      	negs	r3, r7
 800c5ba:	9308      	str	r3, [sp, #32]
 800c5bc:	2300      	movs	r3, #0
 800c5be:	930d      	str	r3, [sp, #52]	@ 0x34
 800c5c0:	e7c3      	b.n	800c54a <_dtoa_r+0x1b2>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5c8:	eb07 0b03 	add.w	fp, r7, r3
 800c5cc:	f10b 0301 	add.w	r3, fp, #1
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	9303      	str	r3, [sp, #12]
 800c5d4:	bfb8      	it	lt
 800c5d6:	2301      	movlt	r3, #1
 800c5d8:	e006      	b.n	800c5e8 <_dtoa_r+0x250>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	dd28      	ble.n	800c636 <_dtoa_r+0x29e>
 800c5e4:	469b      	mov	fp, r3
 800c5e6:	9303      	str	r3, [sp, #12]
 800c5e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	2204      	movs	r2, #4
 800c5f0:	f102 0514 	add.w	r5, r2, #20
 800c5f4:	429d      	cmp	r5, r3
 800c5f6:	d926      	bls.n	800c646 <_dtoa_r+0x2ae>
 800c5f8:	6041      	str	r1, [r0, #4]
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	f000 fd9c 	bl	800d138 <_Balloc>
 800c600:	4682      	mov	sl, r0
 800c602:	2800      	cmp	r0, #0
 800c604:	d142      	bne.n	800c68c <_dtoa_r+0x2f4>
 800c606:	4b1e      	ldr	r3, [pc, #120]	@ (800c680 <_dtoa_r+0x2e8>)
 800c608:	4602      	mov	r2, r0
 800c60a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c60e:	e6da      	b.n	800c3c6 <_dtoa_r+0x2e>
 800c610:	2300      	movs	r3, #0
 800c612:	e7e3      	b.n	800c5dc <_dtoa_r+0x244>
 800c614:	2300      	movs	r3, #0
 800c616:	e7d5      	b.n	800c5c4 <_dtoa_r+0x22c>
 800c618:	2401      	movs	r4, #1
 800c61a:	2300      	movs	r3, #0
 800c61c:	9307      	str	r3, [sp, #28]
 800c61e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c620:	f04f 3bff 	mov.w	fp, #4294967295
 800c624:	2200      	movs	r2, #0
 800c626:	f8cd b00c 	str.w	fp, [sp, #12]
 800c62a:	2312      	movs	r3, #18
 800c62c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c62e:	e7db      	b.n	800c5e8 <_dtoa_r+0x250>
 800c630:	2301      	movs	r3, #1
 800c632:	9309      	str	r3, [sp, #36]	@ 0x24
 800c634:	e7f4      	b.n	800c620 <_dtoa_r+0x288>
 800c636:	f04f 0b01 	mov.w	fp, #1
 800c63a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c63e:	465b      	mov	r3, fp
 800c640:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c644:	e7d0      	b.n	800c5e8 <_dtoa_r+0x250>
 800c646:	3101      	adds	r1, #1
 800c648:	0052      	lsls	r2, r2, #1
 800c64a:	e7d1      	b.n	800c5f0 <_dtoa_r+0x258>
 800c64c:	f3af 8000 	nop.w
 800c650:	636f4361 	.word	0x636f4361
 800c654:	3fd287a7 	.word	0x3fd287a7
 800c658:	8b60c8b3 	.word	0x8b60c8b3
 800c65c:	3fc68a28 	.word	0x3fc68a28
 800c660:	509f79fb 	.word	0x509f79fb
 800c664:	3fd34413 	.word	0x3fd34413
 800c668:	0800e13d 	.word	0x0800e13d
 800c66c:	0800e154 	.word	0x0800e154
 800c670:	7ff00000 	.word	0x7ff00000
 800c674:	0800e10d 	.word	0x0800e10d
 800c678:	3ff80000 	.word	0x3ff80000
 800c67c:	0800e2a8 	.word	0x0800e2a8
 800c680:	0800e1ac 	.word	0x0800e1ac
 800c684:	0800e139 	.word	0x0800e139
 800c688:	0800e10c 	.word	0x0800e10c
 800c68c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c690:	6018      	str	r0, [r3, #0]
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	2b0e      	cmp	r3, #14
 800c696:	f200 80a1 	bhi.w	800c7dc <_dtoa_r+0x444>
 800c69a:	2c00      	cmp	r4, #0
 800c69c:	f000 809e 	beq.w	800c7dc <_dtoa_r+0x444>
 800c6a0:	2f00      	cmp	r7, #0
 800c6a2:	dd33      	ble.n	800c70c <_dtoa_r+0x374>
 800c6a4:	4b9c      	ldr	r3, [pc, #624]	@ (800c918 <_dtoa_r+0x580>)
 800c6a6:	f007 020f 	and.w	r2, r7, #15
 800c6aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6ae:	ed93 7b00 	vldr	d7, [r3]
 800c6b2:	05f8      	lsls	r0, r7, #23
 800c6b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c6b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c6bc:	d516      	bpl.n	800c6ec <_dtoa_r+0x354>
 800c6be:	4b97      	ldr	r3, [pc, #604]	@ (800c91c <_dtoa_r+0x584>)
 800c6c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c6c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6c8:	f7f4 f8e8 	bl	800089c <__aeabi_ddiv>
 800c6cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6d0:	f004 040f 	and.w	r4, r4, #15
 800c6d4:	2603      	movs	r6, #3
 800c6d6:	4d91      	ldr	r5, [pc, #580]	@ (800c91c <_dtoa_r+0x584>)
 800c6d8:	b954      	cbnz	r4, 800c6f0 <_dtoa_r+0x358>
 800c6da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6e2:	f7f4 f8db 	bl	800089c <__aeabi_ddiv>
 800c6e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6ea:	e028      	b.n	800c73e <_dtoa_r+0x3a6>
 800c6ec:	2602      	movs	r6, #2
 800c6ee:	e7f2      	b.n	800c6d6 <_dtoa_r+0x33e>
 800c6f0:	07e1      	lsls	r1, r4, #31
 800c6f2:	d508      	bpl.n	800c706 <_dtoa_r+0x36e>
 800c6f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c6f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6fc:	f7f3 ffa4 	bl	8000648 <__aeabi_dmul>
 800c700:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c704:	3601      	adds	r6, #1
 800c706:	1064      	asrs	r4, r4, #1
 800c708:	3508      	adds	r5, #8
 800c70a:	e7e5      	b.n	800c6d8 <_dtoa_r+0x340>
 800c70c:	f000 80af 	beq.w	800c86e <_dtoa_r+0x4d6>
 800c710:	427c      	negs	r4, r7
 800c712:	4b81      	ldr	r3, [pc, #516]	@ (800c918 <_dtoa_r+0x580>)
 800c714:	4d81      	ldr	r5, [pc, #516]	@ (800c91c <_dtoa_r+0x584>)
 800c716:	f004 020f 	and.w	r2, r4, #15
 800c71a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c726:	f7f3 ff8f 	bl	8000648 <__aeabi_dmul>
 800c72a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c72e:	1124      	asrs	r4, r4, #4
 800c730:	2300      	movs	r3, #0
 800c732:	2602      	movs	r6, #2
 800c734:	2c00      	cmp	r4, #0
 800c736:	f040 808f 	bne.w	800c858 <_dtoa_r+0x4c0>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1d3      	bne.n	800c6e6 <_dtoa_r+0x34e>
 800c73e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c740:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 8094 	beq.w	800c872 <_dtoa_r+0x4da>
 800c74a:	4b75      	ldr	r3, [pc, #468]	@ (800c920 <_dtoa_r+0x588>)
 800c74c:	2200      	movs	r2, #0
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f4 f9eb 	bl	8000b2c <__aeabi_dcmplt>
 800c756:	2800      	cmp	r0, #0
 800c758:	f000 808b 	beq.w	800c872 <_dtoa_r+0x4da>
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f000 8087 	beq.w	800c872 <_dtoa_r+0x4da>
 800c764:	f1bb 0f00 	cmp.w	fp, #0
 800c768:	dd34      	ble.n	800c7d4 <_dtoa_r+0x43c>
 800c76a:	4620      	mov	r0, r4
 800c76c:	4b6d      	ldr	r3, [pc, #436]	@ (800c924 <_dtoa_r+0x58c>)
 800c76e:	2200      	movs	r2, #0
 800c770:	4629      	mov	r1, r5
 800c772:	f7f3 ff69 	bl	8000648 <__aeabi_dmul>
 800c776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c77a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c77e:	3601      	adds	r6, #1
 800c780:	465c      	mov	r4, fp
 800c782:	4630      	mov	r0, r6
 800c784:	f7f3 fef6 	bl	8000574 <__aeabi_i2d>
 800c788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c78c:	f7f3 ff5c 	bl	8000648 <__aeabi_dmul>
 800c790:	4b65      	ldr	r3, [pc, #404]	@ (800c928 <_dtoa_r+0x590>)
 800c792:	2200      	movs	r2, #0
 800c794:	f7f3 fda2 	bl	80002dc <__adddf3>
 800c798:	4605      	mov	r5, r0
 800c79a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c79e:	2c00      	cmp	r4, #0
 800c7a0:	d16a      	bne.n	800c878 <_dtoa_r+0x4e0>
 800c7a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7a6:	4b61      	ldr	r3, [pc, #388]	@ (800c92c <_dtoa_r+0x594>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f7f3 fd95 	bl	80002d8 <__aeabi_dsub>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	4633      	mov	r3, r6
 800c7ba:	f7f4 f9d5 	bl	8000b68 <__aeabi_dcmpgt>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	f040 8298 	bne.w	800ccf4 <_dtoa_r+0x95c>
 800c7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7c8:	462a      	mov	r2, r5
 800c7ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c7ce:	f7f4 f9ad 	bl	8000b2c <__aeabi_dcmplt>
 800c7d2:	bb38      	cbnz	r0, 800c824 <_dtoa_r+0x48c>
 800c7d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c7d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f2c0 8157 	blt.w	800ca92 <_dtoa_r+0x6fa>
 800c7e4:	2f0e      	cmp	r7, #14
 800c7e6:	f300 8154 	bgt.w	800ca92 <_dtoa_r+0x6fa>
 800c7ea:	4b4b      	ldr	r3, [pc, #300]	@ (800c918 <_dtoa_r+0x580>)
 800c7ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7f0:	ed93 7b00 	vldr	d7, [r3]
 800c7f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	ed8d 7b00 	vstr	d7, [sp]
 800c7fc:	f280 80e5 	bge.w	800c9ca <_dtoa_r+0x632>
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	f300 80e1 	bgt.w	800c9ca <_dtoa_r+0x632>
 800c808:	d10c      	bne.n	800c824 <_dtoa_r+0x48c>
 800c80a:	4b48      	ldr	r3, [pc, #288]	@ (800c92c <_dtoa_r+0x594>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	ec51 0b17 	vmov	r0, r1, d7
 800c812:	f7f3 ff19 	bl	8000648 <__aeabi_dmul>
 800c816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c81a:	f7f4 f99b 	bl	8000b54 <__aeabi_dcmpge>
 800c81e:	2800      	cmp	r0, #0
 800c820:	f000 8266 	beq.w	800ccf0 <_dtoa_r+0x958>
 800c824:	2400      	movs	r4, #0
 800c826:	4625      	mov	r5, r4
 800c828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c82a:	4656      	mov	r6, sl
 800c82c:	ea6f 0803 	mvn.w	r8, r3
 800c830:	2700      	movs	r7, #0
 800c832:	4621      	mov	r1, r4
 800c834:	4648      	mov	r0, r9
 800c836:	f000 fcbf 	bl	800d1b8 <_Bfree>
 800c83a:	2d00      	cmp	r5, #0
 800c83c:	f000 80bd 	beq.w	800c9ba <_dtoa_r+0x622>
 800c840:	b12f      	cbz	r7, 800c84e <_dtoa_r+0x4b6>
 800c842:	42af      	cmp	r7, r5
 800c844:	d003      	beq.n	800c84e <_dtoa_r+0x4b6>
 800c846:	4639      	mov	r1, r7
 800c848:	4648      	mov	r0, r9
 800c84a:	f000 fcb5 	bl	800d1b8 <_Bfree>
 800c84e:	4629      	mov	r1, r5
 800c850:	4648      	mov	r0, r9
 800c852:	f000 fcb1 	bl	800d1b8 <_Bfree>
 800c856:	e0b0      	b.n	800c9ba <_dtoa_r+0x622>
 800c858:	07e2      	lsls	r2, r4, #31
 800c85a:	d505      	bpl.n	800c868 <_dtoa_r+0x4d0>
 800c85c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c860:	f7f3 fef2 	bl	8000648 <__aeabi_dmul>
 800c864:	3601      	adds	r6, #1
 800c866:	2301      	movs	r3, #1
 800c868:	1064      	asrs	r4, r4, #1
 800c86a:	3508      	adds	r5, #8
 800c86c:	e762      	b.n	800c734 <_dtoa_r+0x39c>
 800c86e:	2602      	movs	r6, #2
 800c870:	e765      	b.n	800c73e <_dtoa_r+0x3a6>
 800c872:	9c03      	ldr	r4, [sp, #12]
 800c874:	46b8      	mov	r8, r7
 800c876:	e784      	b.n	800c782 <_dtoa_r+0x3ea>
 800c878:	4b27      	ldr	r3, [pc, #156]	@ (800c918 <_dtoa_r+0x580>)
 800c87a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c87c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c880:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c884:	4454      	add	r4, sl
 800c886:	2900      	cmp	r1, #0
 800c888:	d054      	beq.n	800c934 <_dtoa_r+0x59c>
 800c88a:	4929      	ldr	r1, [pc, #164]	@ (800c930 <_dtoa_r+0x598>)
 800c88c:	2000      	movs	r0, #0
 800c88e:	f7f4 f805 	bl	800089c <__aeabi_ddiv>
 800c892:	4633      	mov	r3, r6
 800c894:	462a      	mov	r2, r5
 800c896:	f7f3 fd1f 	bl	80002d8 <__aeabi_dsub>
 800c89a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c89e:	4656      	mov	r6, sl
 800c8a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8a4:	f7f4 f980 	bl	8000ba8 <__aeabi_d2iz>
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	f7f3 fe63 	bl	8000574 <__aeabi_i2d>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8b6:	f7f3 fd0f 	bl	80002d8 <__aeabi_dsub>
 800c8ba:	3530      	adds	r5, #48	@ 0x30
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8c4:	f806 5b01 	strb.w	r5, [r6], #1
 800c8c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c8cc:	f7f4 f92e 	bl	8000b2c <__aeabi_dcmplt>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d172      	bne.n	800c9ba <_dtoa_r+0x622>
 800c8d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8d8:	4911      	ldr	r1, [pc, #68]	@ (800c920 <_dtoa_r+0x588>)
 800c8da:	2000      	movs	r0, #0
 800c8dc:	f7f3 fcfc 	bl	80002d8 <__aeabi_dsub>
 800c8e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c8e4:	f7f4 f922 	bl	8000b2c <__aeabi_dcmplt>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	f040 80b4 	bne.w	800ca56 <_dtoa_r+0x6be>
 800c8ee:	42a6      	cmp	r6, r4
 800c8f0:	f43f af70 	beq.w	800c7d4 <_dtoa_r+0x43c>
 800c8f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c924 <_dtoa_r+0x58c>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f7f3 fea4 	bl	8000648 <__aeabi_dmul>
 800c900:	4b08      	ldr	r3, [pc, #32]	@ (800c924 <_dtoa_r+0x58c>)
 800c902:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c906:	2200      	movs	r2, #0
 800c908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c90c:	f7f3 fe9c 	bl	8000648 <__aeabi_dmul>
 800c910:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c914:	e7c4      	b.n	800c8a0 <_dtoa_r+0x508>
 800c916:	bf00      	nop
 800c918:	0800e2a8 	.word	0x0800e2a8
 800c91c:	0800e280 	.word	0x0800e280
 800c920:	3ff00000 	.word	0x3ff00000
 800c924:	40240000 	.word	0x40240000
 800c928:	401c0000 	.word	0x401c0000
 800c92c:	40140000 	.word	0x40140000
 800c930:	3fe00000 	.word	0x3fe00000
 800c934:	4631      	mov	r1, r6
 800c936:	4628      	mov	r0, r5
 800c938:	f7f3 fe86 	bl	8000648 <__aeabi_dmul>
 800c93c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c940:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c942:	4656      	mov	r6, sl
 800c944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c948:	f7f4 f92e 	bl	8000ba8 <__aeabi_d2iz>
 800c94c:	4605      	mov	r5, r0
 800c94e:	f7f3 fe11 	bl	8000574 <__aeabi_i2d>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c95a:	f7f3 fcbd 	bl	80002d8 <__aeabi_dsub>
 800c95e:	3530      	adds	r5, #48	@ 0x30
 800c960:	f806 5b01 	strb.w	r5, [r6], #1
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	42a6      	cmp	r6, r4
 800c96a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c96e:	f04f 0200 	mov.w	r2, #0
 800c972:	d124      	bne.n	800c9be <_dtoa_r+0x626>
 800c974:	4baf      	ldr	r3, [pc, #700]	@ (800cc34 <_dtoa_r+0x89c>)
 800c976:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c97a:	f7f3 fcaf 	bl	80002dc <__adddf3>
 800c97e:	4602      	mov	r2, r0
 800c980:	460b      	mov	r3, r1
 800c982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c986:	f7f4 f8ef 	bl	8000b68 <__aeabi_dcmpgt>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d163      	bne.n	800ca56 <_dtoa_r+0x6be>
 800c98e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c992:	49a8      	ldr	r1, [pc, #672]	@ (800cc34 <_dtoa_r+0x89c>)
 800c994:	2000      	movs	r0, #0
 800c996:	f7f3 fc9f 	bl	80002d8 <__aeabi_dsub>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9a2:	f7f4 f8c3 	bl	8000b2c <__aeabi_dcmplt>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f43f af14 	beq.w	800c7d4 <_dtoa_r+0x43c>
 800c9ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c9ae:	1e73      	subs	r3, r6, #1
 800c9b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c9b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9b6:	2b30      	cmp	r3, #48	@ 0x30
 800c9b8:	d0f8      	beq.n	800c9ac <_dtoa_r+0x614>
 800c9ba:	4647      	mov	r7, r8
 800c9bc:	e03b      	b.n	800ca36 <_dtoa_r+0x69e>
 800c9be:	4b9e      	ldr	r3, [pc, #632]	@ (800cc38 <_dtoa_r+0x8a0>)
 800c9c0:	f7f3 fe42 	bl	8000648 <__aeabi_dmul>
 800c9c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9c8:	e7bc      	b.n	800c944 <_dtoa_r+0x5ac>
 800c9ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c9ce:	4656      	mov	r6, sl
 800c9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	f7f3 ff60 	bl	800089c <__aeabi_ddiv>
 800c9dc:	f7f4 f8e4 	bl	8000ba8 <__aeabi_d2iz>
 800c9e0:	4680      	mov	r8, r0
 800c9e2:	f7f3 fdc7 	bl	8000574 <__aeabi_i2d>
 800c9e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9ea:	f7f3 fe2d 	bl	8000648 <__aeabi_dmul>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c9fa:	f7f3 fc6d 	bl	80002d8 <__aeabi_dsub>
 800c9fe:	f806 4b01 	strb.w	r4, [r6], #1
 800ca02:	9d03      	ldr	r5, [sp, #12]
 800ca04:	eba6 040a 	sub.w	r4, r6, sl
 800ca08:	42a5      	cmp	r5, r4
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	d133      	bne.n	800ca78 <_dtoa_r+0x6e0>
 800ca10:	f7f3 fc64 	bl	80002dc <__adddf3>
 800ca14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca18:	4604      	mov	r4, r0
 800ca1a:	460d      	mov	r5, r1
 800ca1c:	f7f4 f8a4 	bl	8000b68 <__aeabi_dcmpgt>
 800ca20:	b9c0      	cbnz	r0, 800ca54 <_dtoa_r+0x6bc>
 800ca22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca26:	4620      	mov	r0, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	f7f4 f875 	bl	8000b18 <__aeabi_dcmpeq>
 800ca2e:	b110      	cbz	r0, 800ca36 <_dtoa_r+0x69e>
 800ca30:	f018 0f01 	tst.w	r8, #1
 800ca34:	d10e      	bne.n	800ca54 <_dtoa_r+0x6bc>
 800ca36:	9902      	ldr	r1, [sp, #8]
 800ca38:	4648      	mov	r0, r9
 800ca3a:	f000 fbbd 	bl	800d1b8 <_Bfree>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	7033      	strb	r3, [r6, #0]
 800ca42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca44:	3701      	adds	r7, #1
 800ca46:	601f      	str	r7, [r3, #0]
 800ca48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 824b 	beq.w	800cee6 <_dtoa_r+0xb4e>
 800ca50:	601e      	str	r6, [r3, #0]
 800ca52:	e248      	b.n	800cee6 <_dtoa_r+0xb4e>
 800ca54:	46b8      	mov	r8, r7
 800ca56:	4633      	mov	r3, r6
 800ca58:	461e      	mov	r6, r3
 800ca5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca5e:	2a39      	cmp	r2, #57	@ 0x39
 800ca60:	d106      	bne.n	800ca70 <_dtoa_r+0x6d8>
 800ca62:	459a      	cmp	sl, r3
 800ca64:	d1f8      	bne.n	800ca58 <_dtoa_r+0x6c0>
 800ca66:	2230      	movs	r2, #48	@ 0x30
 800ca68:	f108 0801 	add.w	r8, r8, #1
 800ca6c:	f88a 2000 	strb.w	r2, [sl]
 800ca70:	781a      	ldrb	r2, [r3, #0]
 800ca72:	3201      	adds	r2, #1
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	e7a0      	b.n	800c9ba <_dtoa_r+0x622>
 800ca78:	4b6f      	ldr	r3, [pc, #444]	@ (800cc38 <_dtoa_r+0x8a0>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f7f3 fde4 	bl	8000648 <__aeabi_dmul>
 800ca80:	2200      	movs	r2, #0
 800ca82:	2300      	movs	r3, #0
 800ca84:	4604      	mov	r4, r0
 800ca86:	460d      	mov	r5, r1
 800ca88:	f7f4 f846 	bl	8000b18 <__aeabi_dcmpeq>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d09f      	beq.n	800c9d0 <_dtoa_r+0x638>
 800ca90:	e7d1      	b.n	800ca36 <_dtoa_r+0x69e>
 800ca92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca94:	2a00      	cmp	r2, #0
 800ca96:	f000 80ea 	beq.w	800cc6e <_dtoa_r+0x8d6>
 800ca9a:	9a07      	ldr	r2, [sp, #28]
 800ca9c:	2a01      	cmp	r2, #1
 800ca9e:	f300 80cd 	bgt.w	800cc3c <_dtoa_r+0x8a4>
 800caa2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800caa4:	2a00      	cmp	r2, #0
 800caa6:	f000 80c1 	beq.w	800cc2c <_dtoa_r+0x894>
 800caaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800caae:	9c08      	ldr	r4, [sp, #32]
 800cab0:	9e00      	ldr	r6, [sp, #0]
 800cab2:	9a00      	ldr	r2, [sp, #0]
 800cab4:	441a      	add	r2, r3
 800cab6:	9200      	str	r2, [sp, #0]
 800cab8:	9a06      	ldr	r2, [sp, #24]
 800caba:	2101      	movs	r1, #1
 800cabc:	441a      	add	r2, r3
 800cabe:	4648      	mov	r0, r9
 800cac0:	9206      	str	r2, [sp, #24]
 800cac2:	f000 fc2d 	bl	800d320 <__i2b>
 800cac6:	4605      	mov	r5, r0
 800cac8:	b166      	cbz	r6, 800cae4 <_dtoa_r+0x74c>
 800caca:	9b06      	ldr	r3, [sp, #24]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dd09      	ble.n	800cae4 <_dtoa_r+0x74c>
 800cad0:	42b3      	cmp	r3, r6
 800cad2:	9a00      	ldr	r2, [sp, #0]
 800cad4:	bfa8      	it	ge
 800cad6:	4633      	movge	r3, r6
 800cad8:	1ad2      	subs	r2, r2, r3
 800cada:	9200      	str	r2, [sp, #0]
 800cadc:	9a06      	ldr	r2, [sp, #24]
 800cade:	1af6      	subs	r6, r6, r3
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	9306      	str	r3, [sp, #24]
 800cae4:	9b08      	ldr	r3, [sp, #32]
 800cae6:	b30b      	cbz	r3, 800cb2c <_dtoa_r+0x794>
 800cae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 80c6 	beq.w	800cc7c <_dtoa_r+0x8e4>
 800caf0:	2c00      	cmp	r4, #0
 800caf2:	f000 80c0 	beq.w	800cc76 <_dtoa_r+0x8de>
 800caf6:	4629      	mov	r1, r5
 800caf8:	4622      	mov	r2, r4
 800cafa:	4648      	mov	r0, r9
 800cafc:	f000 fcc8 	bl	800d490 <__pow5mult>
 800cb00:	9a02      	ldr	r2, [sp, #8]
 800cb02:	4601      	mov	r1, r0
 800cb04:	4605      	mov	r5, r0
 800cb06:	4648      	mov	r0, r9
 800cb08:	f000 fc20 	bl	800d34c <__multiply>
 800cb0c:	9902      	ldr	r1, [sp, #8]
 800cb0e:	4680      	mov	r8, r0
 800cb10:	4648      	mov	r0, r9
 800cb12:	f000 fb51 	bl	800d1b8 <_Bfree>
 800cb16:	9b08      	ldr	r3, [sp, #32]
 800cb18:	1b1b      	subs	r3, r3, r4
 800cb1a:	9308      	str	r3, [sp, #32]
 800cb1c:	f000 80b1 	beq.w	800cc82 <_dtoa_r+0x8ea>
 800cb20:	9a08      	ldr	r2, [sp, #32]
 800cb22:	4641      	mov	r1, r8
 800cb24:	4648      	mov	r0, r9
 800cb26:	f000 fcb3 	bl	800d490 <__pow5mult>
 800cb2a:	9002      	str	r0, [sp, #8]
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	4648      	mov	r0, r9
 800cb30:	f000 fbf6 	bl	800d320 <__i2b>
 800cb34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb36:	4604      	mov	r4, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 81d8 	beq.w	800ceee <_dtoa_r+0xb56>
 800cb3e:	461a      	mov	r2, r3
 800cb40:	4601      	mov	r1, r0
 800cb42:	4648      	mov	r0, r9
 800cb44:	f000 fca4 	bl	800d490 <__pow5mult>
 800cb48:	9b07      	ldr	r3, [sp, #28]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	f300 809f 	bgt.w	800cc90 <_dtoa_r+0x8f8>
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f040 8097 	bne.w	800cc88 <_dtoa_r+0x8f0>
 800cb5a:	9b05      	ldr	r3, [sp, #20]
 800cb5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f040 8093 	bne.w	800cc8c <_dtoa_r+0x8f4>
 800cb66:	9b05      	ldr	r3, [sp, #20]
 800cb68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb6c:	0d1b      	lsrs	r3, r3, #20
 800cb6e:	051b      	lsls	r3, r3, #20
 800cb70:	b133      	cbz	r3, 800cb80 <_dtoa_r+0x7e8>
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	3301      	adds	r3, #1
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	9b06      	ldr	r3, [sp, #24]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	9306      	str	r3, [sp, #24]
 800cb7e:	2301      	movs	r3, #1
 800cb80:	9308      	str	r3, [sp, #32]
 800cb82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 81b8 	beq.w	800cefa <_dtoa_r+0xb62>
 800cb8a:	6923      	ldr	r3, [r4, #16]
 800cb8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb90:	6918      	ldr	r0, [r3, #16]
 800cb92:	f000 fb79 	bl	800d288 <__hi0bits>
 800cb96:	f1c0 0020 	rsb	r0, r0, #32
 800cb9a:	9b06      	ldr	r3, [sp, #24]
 800cb9c:	4418      	add	r0, r3
 800cb9e:	f010 001f 	ands.w	r0, r0, #31
 800cba2:	f000 8082 	beq.w	800ccaa <_dtoa_r+0x912>
 800cba6:	f1c0 0320 	rsb	r3, r0, #32
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	dd73      	ble.n	800cc96 <_dtoa_r+0x8fe>
 800cbae:	9b00      	ldr	r3, [sp, #0]
 800cbb0:	f1c0 001c 	rsb	r0, r0, #28
 800cbb4:	4403      	add	r3, r0
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	9b06      	ldr	r3, [sp, #24]
 800cbba:	4403      	add	r3, r0
 800cbbc:	4406      	add	r6, r0
 800cbbe:	9306      	str	r3, [sp, #24]
 800cbc0:	9b00      	ldr	r3, [sp, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	dd05      	ble.n	800cbd2 <_dtoa_r+0x83a>
 800cbc6:	9902      	ldr	r1, [sp, #8]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4648      	mov	r0, r9
 800cbcc:	f000 fcba 	bl	800d544 <__lshift>
 800cbd0:	9002      	str	r0, [sp, #8]
 800cbd2:	9b06      	ldr	r3, [sp, #24]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	dd05      	ble.n	800cbe4 <_dtoa_r+0x84c>
 800cbd8:	4621      	mov	r1, r4
 800cbda:	461a      	mov	r2, r3
 800cbdc:	4648      	mov	r0, r9
 800cbde:	f000 fcb1 	bl	800d544 <__lshift>
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d061      	beq.n	800ccae <_dtoa_r+0x916>
 800cbea:	9802      	ldr	r0, [sp, #8]
 800cbec:	4621      	mov	r1, r4
 800cbee:	f000 fd15 	bl	800d61c <__mcmp>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	da5b      	bge.n	800ccae <_dtoa_r+0x916>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	9902      	ldr	r1, [sp, #8]
 800cbfa:	220a      	movs	r2, #10
 800cbfc:	4648      	mov	r0, r9
 800cbfe:	f000 fafd 	bl	800d1fc <__multadd>
 800cc02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc04:	9002      	str	r0, [sp, #8]
 800cc06:	f107 38ff 	add.w	r8, r7, #4294967295
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 8177 	beq.w	800cefe <_dtoa_r+0xb66>
 800cc10:	4629      	mov	r1, r5
 800cc12:	2300      	movs	r3, #0
 800cc14:	220a      	movs	r2, #10
 800cc16:	4648      	mov	r0, r9
 800cc18:	f000 faf0 	bl	800d1fc <__multadd>
 800cc1c:	f1bb 0f00 	cmp.w	fp, #0
 800cc20:	4605      	mov	r5, r0
 800cc22:	dc6f      	bgt.n	800cd04 <_dtoa_r+0x96c>
 800cc24:	9b07      	ldr	r3, [sp, #28]
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	dc49      	bgt.n	800ccbe <_dtoa_r+0x926>
 800cc2a:	e06b      	b.n	800cd04 <_dtoa_r+0x96c>
 800cc2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cc2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cc32:	e73c      	b.n	800caae <_dtoa_r+0x716>
 800cc34:	3fe00000 	.word	0x3fe00000
 800cc38:	40240000 	.word	0x40240000
 800cc3c:	9b03      	ldr	r3, [sp, #12]
 800cc3e:	1e5c      	subs	r4, r3, #1
 800cc40:	9b08      	ldr	r3, [sp, #32]
 800cc42:	42a3      	cmp	r3, r4
 800cc44:	db09      	blt.n	800cc5a <_dtoa_r+0x8c2>
 800cc46:	1b1c      	subs	r4, r3, r4
 800cc48:	9b03      	ldr	r3, [sp, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f6bf af30 	bge.w	800cab0 <_dtoa_r+0x718>
 800cc50:	9b00      	ldr	r3, [sp, #0]
 800cc52:	9a03      	ldr	r2, [sp, #12]
 800cc54:	1a9e      	subs	r6, r3, r2
 800cc56:	2300      	movs	r3, #0
 800cc58:	e72b      	b.n	800cab2 <_dtoa_r+0x71a>
 800cc5a:	9b08      	ldr	r3, [sp, #32]
 800cc5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc5e:	9408      	str	r4, [sp, #32]
 800cc60:	1ae3      	subs	r3, r4, r3
 800cc62:	441a      	add	r2, r3
 800cc64:	9e00      	ldr	r6, [sp, #0]
 800cc66:	9b03      	ldr	r3, [sp, #12]
 800cc68:	920d      	str	r2, [sp, #52]	@ 0x34
 800cc6a:	2400      	movs	r4, #0
 800cc6c:	e721      	b.n	800cab2 <_dtoa_r+0x71a>
 800cc6e:	9c08      	ldr	r4, [sp, #32]
 800cc70:	9e00      	ldr	r6, [sp, #0]
 800cc72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cc74:	e728      	b.n	800cac8 <_dtoa_r+0x730>
 800cc76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cc7a:	e751      	b.n	800cb20 <_dtoa_r+0x788>
 800cc7c:	9a08      	ldr	r2, [sp, #32]
 800cc7e:	9902      	ldr	r1, [sp, #8]
 800cc80:	e750      	b.n	800cb24 <_dtoa_r+0x78c>
 800cc82:	f8cd 8008 	str.w	r8, [sp, #8]
 800cc86:	e751      	b.n	800cb2c <_dtoa_r+0x794>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	e779      	b.n	800cb80 <_dtoa_r+0x7e8>
 800cc8c:	9b04      	ldr	r3, [sp, #16]
 800cc8e:	e777      	b.n	800cb80 <_dtoa_r+0x7e8>
 800cc90:	2300      	movs	r3, #0
 800cc92:	9308      	str	r3, [sp, #32]
 800cc94:	e779      	b.n	800cb8a <_dtoa_r+0x7f2>
 800cc96:	d093      	beq.n	800cbc0 <_dtoa_r+0x828>
 800cc98:	9a00      	ldr	r2, [sp, #0]
 800cc9a:	331c      	adds	r3, #28
 800cc9c:	441a      	add	r2, r3
 800cc9e:	9200      	str	r2, [sp, #0]
 800cca0:	9a06      	ldr	r2, [sp, #24]
 800cca2:	441a      	add	r2, r3
 800cca4:	441e      	add	r6, r3
 800cca6:	9206      	str	r2, [sp, #24]
 800cca8:	e78a      	b.n	800cbc0 <_dtoa_r+0x828>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	e7f4      	b.n	800cc98 <_dtoa_r+0x900>
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	46b8      	mov	r8, r7
 800ccb4:	dc20      	bgt.n	800ccf8 <_dtoa_r+0x960>
 800ccb6:	469b      	mov	fp, r3
 800ccb8:	9b07      	ldr	r3, [sp, #28]
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	dd1e      	ble.n	800ccfc <_dtoa_r+0x964>
 800ccbe:	f1bb 0f00 	cmp.w	fp, #0
 800ccc2:	f47f adb1 	bne.w	800c828 <_dtoa_r+0x490>
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	465b      	mov	r3, fp
 800ccca:	2205      	movs	r2, #5
 800cccc:	4648      	mov	r0, r9
 800ccce:	f000 fa95 	bl	800d1fc <__multadd>
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	9802      	ldr	r0, [sp, #8]
 800ccd8:	f000 fca0 	bl	800d61c <__mcmp>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	f77f ada3 	ble.w	800c828 <_dtoa_r+0x490>
 800cce2:	4656      	mov	r6, sl
 800cce4:	2331      	movs	r3, #49	@ 0x31
 800cce6:	f806 3b01 	strb.w	r3, [r6], #1
 800ccea:	f108 0801 	add.w	r8, r8, #1
 800ccee:	e59f      	b.n	800c830 <_dtoa_r+0x498>
 800ccf0:	9c03      	ldr	r4, [sp, #12]
 800ccf2:	46b8      	mov	r8, r7
 800ccf4:	4625      	mov	r5, r4
 800ccf6:	e7f4      	b.n	800cce2 <_dtoa_r+0x94a>
 800ccf8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ccfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f000 8101 	beq.w	800cf06 <_dtoa_r+0xb6e>
 800cd04:	2e00      	cmp	r6, #0
 800cd06:	dd05      	ble.n	800cd14 <_dtoa_r+0x97c>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4632      	mov	r2, r6
 800cd0c:	4648      	mov	r0, r9
 800cd0e:	f000 fc19 	bl	800d544 <__lshift>
 800cd12:	4605      	mov	r5, r0
 800cd14:	9b08      	ldr	r3, [sp, #32]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d05c      	beq.n	800cdd4 <_dtoa_r+0xa3c>
 800cd1a:	6869      	ldr	r1, [r5, #4]
 800cd1c:	4648      	mov	r0, r9
 800cd1e:	f000 fa0b 	bl	800d138 <_Balloc>
 800cd22:	4606      	mov	r6, r0
 800cd24:	b928      	cbnz	r0, 800cd32 <_dtoa_r+0x99a>
 800cd26:	4b82      	ldr	r3, [pc, #520]	@ (800cf30 <_dtoa_r+0xb98>)
 800cd28:	4602      	mov	r2, r0
 800cd2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd2e:	f7ff bb4a 	b.w	800c3c6 <_dtoa_r+0x2e>
 800cd32:	692a      	ldr	r2, [r5, #16]
 800cd34:	3202      	adds	r2, #2
 800cd36:	0092      	lsls	r2, r2, #2
 800cd38:	f105 010c 	add.w	r1, r5, #12
 800cd3c:	300c      	adds	r0, #12
 800cd3e:	f7ff fa94 	bl	800c26a <memcpy>
 800cd42:	2201      	movs	r2, #1
 800cd44:	4631      	mov	r1, r6
 800cd46:	4648      	mov	r0, r9
 800cd48:	f000 fbfc 	bl	800d544 <__lshift>
 800cd4c:	f10a 0301 	add.w	r3, sl, #1
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	eb0a 030b 	add.w	r3, sl, fp
 800cd56:	9308      	str	r3, [sp, #32]
 800cd58:	9b04      	ldr	r3, [sp, #16]
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	462f      	mov	r7, r5
 800cd60:	9306      	str	r3, [sp, #24]
 800cd62:	4605      	mov	r5, r0
 800cd64:	9b00      	ldr	r3, [sp, #0]
 800cd66:	9802      	ldr	r0, [sp, #8]
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd6e:	f7ff fa8a 	bl	800c286 <quorem>
 800cd72:	4603      	mov	r3, r0
 800cd74:	3330      	adds	r3, #48	@ 0x30
 800cd76:	9003      	str	r0, [sp, #12]
 800cd78:	4639      	mov	r1, r7
 800cd7a:	9802      	ldr	r0, [sp, #8]
 800cd7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd7e:	f000 fc4d 	bl	800d61c <__mcmp>
 800cd82:	462a      	mov	r2, r5
 800cd84:	9004      	str	r0, [sp, #16]
 800cd86:	4621      	mov	r1, r4
 800cd88:	4648      	mov	r0, r9
 800cd8a:	f000 fc63 	bl	800d654 <__mdiff>
 800cd8e:	68c2      	ldr	r2, [r0, #12]
 800cd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd92:	4606      	mov	r6, r0
 800cd94:	bb02      	cbnz	r2, 800cdd8 <_dtoa_r+0xa40>
 800cd96:	4601      	mov	r1, r0
 800cd98:	9802      	ldr	r0, [sp, #8]
 800cd9a:	f000 fc3f 	bl	800d61c <__mcmp>
 800cd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda0:	4602      	mov	r2, r0
 800cda2:	4631      	mov	r1, r6
 800cda4:	4648      	mov	r0, r9
 800cda6:	920c      	str	r2, [sp, #48]	@ 0x30
 800cda8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdaa:	f000 fa05 	bl	800d1b8 <_Bfree>
 800cdae:	9b07      	ldr	r3, [sp, #28]
 800cdb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cdb2:	9e00      	ldr	r6, [sp, #0]
 800cdb4:	ea42 0103 	orr.w	r1, r2, r3
 800cdb8:	9b06      	ldr	r3, [sp, #24]
 800cdba:	4319      	orrs	r1, r3
 800cdbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdbe:	d10d      	bne.n	800cddc <_dtoa_r+0xa44>
 800cdc0:	2b39      	cmp	r3, #57	@ 0x39
 800cdc2:	d027      	beq.n	800ce14 <_dtoa_r+0xa7c>
 800cdc4:	9a04      	ldr	r2, [sp, #16]
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	dd01      	ble.n	800cdce <_dtoa_r+0xa36>
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	3331      	adds	r3, #49	@ 0x31
 800cdce:	f88b 3000 	strb.w	r3, [fp]
 800cdd2:	e52e      	b.n	800c832 <_dtoa_r+0x49a>
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	e7b9      	b.n	800cd4c <_dtoa_r+0x9b4>
 800cdd8:	2201      	movs	r2, #1
 800cdda:	e7e2      	b.n	800cda2 <_dtoa_r+0xa0a>
 800cddc:	9904      	ldr	r1, [sp, #16]
 800cdde:	2900      	cmp	r1, #0
 800cde0:	db04      	blt.n	800cdec <_dtoa_r+0xa54>
 800cde2:	9807      	ldr	r0, [sp, #28]
 800cde4:	4301      	orrs	r1, r0
 800cde6:	9806      	ldr	r0, [sp, #24]
 800cde8:	4301      	orrs	r1, r0
 800cdea:	d120      	bne.n	800ce2e <_dtoa_r+0xa96>
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	ddee      	ble.n	800cdce <_dtoa_r+0xa36>
 800cdf0:	9902      	ldr	r1, [sp, #8]
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	4648      	mov	r0, r9
 800cdf8:	f000 fba4 	bl	800d544 <__lshift>
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	9002      	str	r0, [sp, #8]
 800ce00:	f000 fc0c 	bl	800d61c <__mcmp>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	9b00      	ldr	r3, [sp, #0]
 800ce08:	dc02      	bgt.n	800ce10 <_dtoa_r+0xa78>
 800ce0a:	d1e0      	bne.n	800cdce <_dtoa_r+0xa36>
 800ce0c:	07da      	lsls	r2, r3, #31
 800ce0e:	d5de      	bpl.n	800cdce <_dtoa_r+0xa36>
 800ce10:	2b39      	cmp	r3, #57	@ 0x39
 800ce12:	d1da      	bne.n	800cdca <_dtoa_r+0xa32>
 800ce14:	2339      	movs	r3, #57	@ 0x39
 800ce16:	f88b 3000 	strb.w	r3, [fp]
 800ce1a:	4633      	mov	r3, r6
 800ce1c:	461e      	mov	r6, r3
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce24:	2a39      	cmp	r2, #57	@ 0x39
 800ce26:	d04e      	beq.n	800cec6 <_dtoa_r+0xb2e>
 800ce28:	3201      	adds	r2, #1
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	e501      	b.n	800c832 <_dtoa_r+0x49a>
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	dd03      	ble.n	800ce3a <_dtoa_r+0xaa2>
 800ce32:	2b39      	cmp	r3, #57	@ 0x39
 800ce34:	d0ee      	beq.n	800ce14 <_dtoa_r+0xa7c>
 800ce36:	3301      	adds	r3, #1
 800ce38:	e7c9      	b.n	800cdce <_dtoa_r+0xa36>
 800ce3a:	9a00      	ldr	r2, [sp, #0]
 800ce3c:	9908      	ldr	r1, [sp, #32]
 800ce3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce42:	428a      	cmp	r2, r1
 800ce44:	d028      	beq.n	800ce98 <_dtoa_r+0xb00>
 800ce46:	9902      	ldr	r1, [sp, #8]
 800ce48:	2300      	movs	r3, #0
 800ce4a:	220a      	movs	r2, #10
 800ce4c:	4648      	mov	r0, r9
 800ce4e:	f000 f9d5 	bl	800d1fc <__multadd>
 800ce52:	42af      	cmp	r7, r5
 800ce54:	9002      	str	r0, [sp, #8]
 800ce56:	f04f 0300 	mov.w	r3, #0
 800ce5a:	f04f 020a 	mov.w	r2, #10
 800ce5e:	4639      	mov	r1, r7
 800ce60:	4648      	mov	r0, r9
 800ce62:	d107      	bne.n	800ce74 <_dtoa_r+0xadc>
 800ce64:	f000 f9ca 	bl	800d1fc <__multadd>
 800ce68:	4607      	mov	r7, r0
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	9b00      	ldr	r3, [sp, #0]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	e777      	b.n	800cd64 <_dtoa_r+0x9cc>
 800ce74:	f000 f9c2 	bl	800d1fc <__multadd>
 800ce78:	4629      	mov	r1, r5
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	220a      	movs	r2, #10
 800ce80:	4648      	mov	r0, r9
 800ce82:	f000 f9bb 	bl	800d1fc <__multadd>
 800ce86:	4605      	mov	r5, r0
 800ce88:	e7f0      	b.n	800ce6c <_dtoa_r+0xad4>
 800ce8a:	f1bb 0f00 	cmp.w	fp, #0
 800ce8e:	bfcc      	ite	gt
 800ce90:	465e      	movgt	r6, fp
 800ce92:	2601      	movle	r6, #1
 800ce94:	4456      	add	r6, sl
 800ce96:	2700      	movs	r7, #0
 800ce98:	9902      	ldr	r1, [sp, #8]
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	4648      	mov	r0, r9
 800cea0:	f000 fb50 	bl	800d544 <__lshift>
 800cea4:	4621      	mov	r1, r4
 800cea6:	9002      	str	r0, [sp, #8]
 800cea8:	f000 fbb8 	bl	800d61c <__mcmp>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	dcb4      	bgt.n	800ce1a <_dtoa_r+0xa82>
 800ceb0:	d102      	bne.n	800ceb8 <_dtoa_r+0xb20>
 800ceb2:	9b00      	ldr	r3, [sp, #0]
 800ceb4:	07db      	lsls	r3, r3, #31
 800ceb6:	d4b0      	bmi.n	800ce1a <_dtoa_r+0xa82>
 800ceb8:	4633      	mov	r3, r6
 800ceba:	461e      	mov	r6, r3
 800cebc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cec0:	2a30      	cmp	r2, #48	@ 0x30
 800cec2:	d0fa      	beq.n	800ceba <_dtoa_r+0xb22>
 800cec4:	e4b5      	b.n	800c832 <_dtoa_r+0x49a>
 800cec6:	459a      	cmp	sl, r3
 800cec8:	d1a8      	bne.n	800ce1c <_dtoa_r+0xa84>
 800ceca:	2331      	movs	r3, #49	@ 0x31
 800cecc:	f108 0801 	add.w	r8, r8, #1
 800ced0:	f88a 3000 	strb.w	r3, [sl]
 800ced4:	e4ad      	b.n	800c832 <_dtoa_r+0x49a>
 800ced6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ced8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cf34 <_dtoa_r+0xb9c>
 800cedc:	b11b      	cbz	r3, 800cee6 <_dtoa_r+0xb4e>
 800cede:	f10a 0308 	add.w	r3, sl, #8
 800cee2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	4650      	mov	r0, sl
 800cee8:	b017      	add	sp, #92	@ 0x5c
 800ceea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceee:	9b07      	ldr	r3, [sp, #28]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	f77f ae2e 	ble.w	800cb52 <_dtoa_r+0x7ba>
 800cef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cef8:	9308      	str	r3, [sp, #32]
 800cefa:	2001      	movs	r0, #1
 800cefc:	e64d      	b.n	800cb9a <_dtoa_r+0x802>
 800cefe:	f1bb 0f00 	cmp.w	fp, #0
 800cf02:	f77f aed9 	ble.w	800ccb8 <_dtoa_r+0x920>
 800cf06:	4656      	mov	r6, sl
 800cf08:	9802      	ldr	r0, [sp, #8]
 800cf0a:	4621      	mov	r1, r4
 800cf0c:	f7ff f9bb 	bl	800c286 <quorem>
 800cf10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cf14:	f806 3b01 	strb.w	r3, [r6], #1
 800cf18:	eba6 020a 	sub.w	r2, r6, sl
 800cf1c:	4593      	cmp	fp, r2
 800cf1e:	ddb4      	ble.n	800ce8a <_dtoa_r+0xaf2>
 800cf20:	9902      	ldr	r1, [sp, #8]
 800cf22:	2300      	movs	r3, #0
 800cf24:	220a      	movs	r2, #10
 800cf26:	4648      	mov	r0, r9
 800cf28:	f000 f968 	bl	800d1fc <__multadd>
 800cf2c:	9002      	str	r0, [sp, #8]
 800cf2e:	e7eb      	b.n	800cf08 <_dtoa_r+0xb70>
 800cf30:	0800e1ac 	.word	0x0800e1ac
 800cf34:	0800e130 	.word	0x0800e130

0800cf38 <_free_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	d041      	beq.n	800cfc4 <_free_r+0x8c>
 800cf40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf44:	1f0c      	subs	r4, r1, #4
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfb8      	it	lt
 800cf4a:	18e4      	addlt	r4, r4, r3
 800cf4c:	f000 f8e8 	bl	800d120 <__malloc_lock>
 800cf50:	4a1d      	ldr	r2, [pc, #116]	@ (800cfc8 <_free_r+0x90>)
 800cf52:	6813      	ldr	r3, [r2, #0]
 800cf54:	b933      	cbnz	r3, 800cf64 <_free_r+0x2c>
 800cf56:	6063      	str	r3, [r4, #4]
 800cf58:	6014      	str	r4, [r2, #0]
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf60:	f000 b8e4 	b.w	800d12c <__malloc_unlock>
 800cf64:	42a3      	cmp	r3, r4
 800cf66:	d908      	bls.n	800cf7a <_free_r+0x42>
 800cf68:	6820      	ldr	r0, [r4, #0]
 800cf6a:	1821      	adds	r1, r4, r0
 800cf6c:	428b      	cmp	r3, r1
 800cf6e:	bf01      	itttt	eq
 800cf70:	6819      	ldreq	r1, [r3, #0]
 800cf72:	685b      	ldreq	r3, [r3, #4]
 800cf74:	1809      	addeq	r1, r1, r0
 800cf76:	6021      	streq	r1, [r4, #0]
 800cf78:	e7ed      	b.n	800cf56 <_free_r+0x1e>
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	b10b      	cbz	r3, 800cf84 <_free_r+0x4c>
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	d9fa      	bls.n	800cf7a <_free_r+0x42>
 800cf84:	6811      	ldr	r1, [r2, #0]
 800cf86:	1850      	adds	r0, r2, r1
 800cf88:	42a0      	cmp	r0, r4
 800cf8a:	d10b      	bne.n	800cfa4 <_free_r+0x6c>
 800cf8c:	6820      	ldr	r0, [r4, #0]
 800cf8e:	4401      	add	r1, r0
 800cf90:	1850      	adds	r0, r2, r1
 800cf92:	4283      	cmp	r3, r0
 800cf94:	6011      	str	r1, [r2, #0]
 800cf96:	d1e0      	bne.n	800cf5a <_free_r+0x22>
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	6053      	str	r3, [r2, #4]
 800cf9e:	4408      	add	r0, r1
 800cfa0:	6010      	str	r0, [r2, #0]
 800cfa2:	e7da      	b.n	800cf5a <_free_r+0x22>
 800cfa4:	d902      	bls.n	800cfac <_free_r+0x74>
 800cfa6:	230c      	movs	r3, #12
 800cfa8:	602b      	str	r3, [r5, #0]
 800cfaa:	e7d6      	b.n	800cf5a <_free_r+0x22>
 800cfac:	6820      	ldr	r0, [r4, #0]
 800cfae:	1821      	adds	r1, r4, r0
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	bf04      	itt	eq
 800cfb4:	6819      	ldreq	r1, [r3, #0]
 800cfb6:	685b      	ldreq	r3, [r3, #4]
 800cfb8:	6063      	str	r3, [r4, #4]
 800cfba:	bf04      	itt	eq
 800cfbc:	1809      	addeq	r1, r1, r0
 800cfbe:	6021      	streq	r1, [r4, #0]
 800cfc0:	6054      	str	r4, [r2, #4]
 800cfc2:	e7ca      	b.n	800cf5a <_free_r+0x22>
 800cfc4:	bd38      	pop	{r3, r4, r5, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20002bc8 	.word	0x20002bc8

0800cfcc <malloc>:
 800cfcc:	4b02      	ldr	r3, [pc, #8]	@ (800cfd8 <malloc+0xc>)
 800cfce:	4601      	mov	r1, r0
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f000 b825 	b.w	800d020 <_malloc_r>
 800cfd6:	bf00      	nop
 800cfd8:	20000044 	.word	0x20000044

0800cfdc <sbrk_aligned>:
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	4e0f      	ldr	r6, [pc, #60]	@ (800d01c <sbrk_aligned+0x40>)
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	6831      	ldr	r1, [r6, #0]
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	b911      	cbnz	r1, 800cfee <sbrk_aligned+0x12>
 800cfe8:	f000 fccc 	bl	800d984 <_sbrk_r>
 800cfec:	6030      	str	r0, [r6, #0]
 800cfee:	4621      	mov	r1, r4
 800cff0:	4628      	mov	r0, r5
 800cff2:	f000 fcc7 	bl	800d984 <_sbrk_r>
 800cff6:	1c43      	adds	r3, r0, #1
 800cff8:	d103      	bne.n	800d002 <sbrk_aligned+0x26>
 800cffa:	f04f 34ff 	mov.w	r4, #4294967295
 800cffe:	4620      	mov	r0, r4
 800d000:	bd70      	pop	{r4, r5, r6, pc}
 800d002:	1cc4      	adds	r4, r0, #3
 800d004:	f024 0403 	bic.w	r4, r4, #3
 800d008:	42a0      	cmp	r0, r4
 800d00a:	d0f8      	beq.n	800cffe <sbrk_aligned+0x22>
 800d00c:	1a21      	subs	r1, r4, r0
 800d00e:	4628      	mov	r0, r5
 800d010:	f000 fcb8 	bl	800d984 <_sbrk_r>
 800d014:	3001      	adds	r0, #1
 800d016:	d1f2      	bne.n	800cffe <sbrk_aligned+0x22>
 800d018:	e7ef      	b.n	800cffa <sbrk_aligned+0x1e>
 800d01a:	bf00      	nop
 800d01c:	20002bc4 	.word	0x20002bc4

0800d020 <_malloc_r>:
 800d020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d024:	1ccd      	adds	r5, r1, #3
 800d026:	f025 0503 	bic.w	r5, r5, #3
 800d02a:	3508      	adds	r5, #8
 800d02c:	2d0c      	cmp	r5, #12
 800d02e:	bf38      	it	cc
 800d030:	250c      	movcc	r5, #12
 800d032:	2d00      	cmp	r5, #0
 800d034:	4606      	mov	r6, r0
 800d036:	db01      	blt.n	800d03c <_malloc_r+0x1c>
 800d038:	42a9      	cmp	r1, r5
 800d03a:	d904      	bls.n	800d046 <_malloc_r+0x26>
 800d03c:	230c      	movs	r3, #12
 800d03e:	6033      	str	r3, [r6, #0]
 800d040:	2000      	movs	r0, #0
 800d042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d11c <_malloc_r+0xfc>
 800d04a:	f000 f869 	bl	800d120 <__malloc_lock>
 800d04e:	f8d8 3000 	ldr.w	r3, [r8]
 800d052:	461c      	mov	r4, r3
 800d054:	bb44      	cbnz	r4, 800d0a8 <_malloc_r+0x88>
 800d056:	4629      	mov	r1, r5
 800d058:	4630      	mov	r0, r6
 800d05a:	f7ff ffbf 	bl	800cfdc <sbrk_aligned>
 800d05e:	1c43      	adds	r3, r0, #1
 800d060:	4604      	mov	r4, r0
 800d062:	d158      	bne.n	800d116 <_malloc_r+0xf6>
 800d064:	f8d8 4000 	ldr.w	r4, [r8]
 800d068:	4627      	mov	r7, r4
 800d06a:	2f00      	cmp	r7, #0
 800d06c:	d143      	bne.n	800d0f6 <_malloc_r+0xd6>
 800d06e:	2c00      	cmp	r4, #0
 800d070:	d04b      	beq.n	800d10a <_malloc_r+0xea>
 800d072:	6823      	ldr	r3, [r4, #0]
 800d074:	4639      	mov	r1, r7
 800d076:	4630      	mov	r0, r6
 800d078:	eb04 0903 	add.w	r9, r4, r3
 800d07c:	f000 fc82 	bl	800d984 <_sbrk_r>
 800d080:	4581      	cmp	r9, r0
 800d082:	d142      	bne.n	800d10a <_malloc_r+0xea>
 800d084:	6821      	ldr	r1, [r4, #0]
 800d086:	1a6d      	subs	r5, r5, r1
 800d088:	4629      	mov	r1, r5
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7ff ffa6 	bl	800cfdc <sbrk_aligned>
 800d090:	3001      	adds	r0, #1
 800d092:	d03a      	beq.n	800d10a <_malloc_r+0xea>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	442b      	add	r3, r5
 800d098:	6023      	str	r3, [r4, #0]
 800d09a:	f8d8 3000 	ldr.w	r3, [r8]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	bb62      	cbnz	r2, 800d0fc <_malloc_r+0xdc>
 800d0a2:	f8c8 7000 	str.w	r7, [r8]
 800d0a6:	e00f      	b.n	800d0c8 <_malloc_r+0xa8>
 800d0a8:	6822      	ldr	r2, [r4, #0]
 800d0aa:	1b52      	subs	r2, r2, r5
 800d0ac:	d420      	bmi.n	800d0f0 <_malloc_r+0xd0>
 800d0ae:	2a0b      	cmp	r2, #11
 800d0b0:	d917      	bls.n	800d0e2 <_malloc_r+0xc2>
 800d0b2:	1961      	adds	r1, r4, r5
 800d0b4:	42a3      	cmp	r3, r4
 800d0b6:	6025      	str	r5, [r4, #0]
 800d0b8:	bf18      	it	ne
 800d0ba:	6059      	strne	r1, [r3, #4]
 800d0bc:	6863      	ldr	r3, [r4, #4]
 800d0be:	bf08      	it	eq
 800d0c0:	f8c8 1000 	streq.w	r1, [r8]
 800d0c4:	5162      	str	r2, [r4, r5]
 800d0c6:	604b      	str	r3, [r1, #4]
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f000 f82f 	bl	800d12c <__malloc_unlock>
 800d0ce:	f104 000b 	add.w	r0, r4, #11
 800d0d2:	1d23      	adds	r3, r4, #4
 800d0d4:	f020 0007 	bic.w	r0, r0, #7
 800d0d8:	1ac2      	subs	r2, r0, r3
 800d0da:	bf1c      	itt	ne
 800d0dc:	1a1b      	subne	r3, r3, r0
 800d0de:	50a3      	strne	r3, [r4, r2]
 800d0e0:	e7af      	b.n	800d042 <_malloc_r+0x22>
 800d0e2:	6862      	ldr	r2, [r4, #4]
 800d0e4:	42a3      	cmp	r3, r4
 800d0e6:	bf0c      	ite	eq
 800d0e8:	f8c8 2000 	streq.w	r2, [r8]
 800d0ec:	605a      	strne	r2, [r3, #4]
 800d0ee:	e7eb      	b.n	800d0c8 <_malloc_r+0xa8>
 800d0f0:	4623      	mov	r3, r4
 800d0f2:	6864      	ldr	r4, [r4, #4]
 800d0f4:	e7ae      	b.n	800d054 <_malloc_r+0x34>
 800d0f6:	463c      	mov	r4, r7
 800d0f8:	687f      	ldr	r7, [r7, #4]
 800d0fa:	e7b6      	b.n	800d06a <_malloc_r+0x4a>
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	42a3      	cmp	r3, r4
 800d102:	d1fb      	bne.n	800d0fc <_malloc_r+0xdc>
 800d104:	2300      	movs	r3, #0
 800d106:	6053      	str	r3, [r2, #4]
 800d108:	e7de      	b.n	800d0c8 <_malloc_r+0xa8>
 800d10a:	230c      	movs	r3, #12
 800d10c:	6033      	str	r3, [r6, #0]
 800d10e:	4630      	mov	r0, r6
 800d110:	f000 f80c 	bl	800d12c <__malloc_unlock>
 800d114:	e794      	b.n	800d040 <_malloc_r+0x20>
 800d116:	6005      	str	r5, [r0, #0]
 800d118:	e7d6      	b.n	800d0c8 <_malloc_r+0xa8>
 800d11a:	bf00      	nop
 800d11c:	20002bc8 	.word	0x20002bc8

0800d120 <__malloc_lock>:
 800d120:	4801      	ldr	r0, [pc, #4]	@ (800d128 <__malloc_lock+0x8>)
 800d122:	f7ff b8a0 	b.w	800c266 <__retarget_lock_acquire_recursive>
 800d126:	bf00      	nop
 800d128:	20002bc0 	.word	0x20002bc0

0800d12c <__malloc_unlock>:
 800d12c:	4801      	ldr	r0, [pc, #4]	@ (800d134 <__malloc_unlock+0x8>)
 800d12e:	f7ff b89b 	b.w	800c268 <__retarget_lock_release_recursive>
 800d132:	bf00      	nop
 800d134:	20002bc0 	.word	0x20002bc0

0800d138 <_Balloc>:
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	69c6      	ldr	r6, [r0, #28]
 800d13c:	4604      	mov	r4, r0
 800d13e:	460d      	mov	r5, r1
 800d140:	b976      	cbnz	r6, 800d160 <_Balloc+0x28>
 800d142:	2010      	movs	r0, #16
 800d144:	f7ff ff42 	bl	800cfcc <malloc>
 800d148:	4602      	mov	r2, r0
 800d14a:	61e0      	str	r0, [r4, #28]
 800d14c:	b920      	cbnz	r0, 800d158 <_Balloc+0x20>
 800d14e:	4b18      	ldr	r3, [pc, #96]	@ (800d1b0 <_Balloc+0x78>)
 800d150:	4818      	ldr	r0, [pc, #96]	@ (800d1b4 <_Balloc+0x7c>)
 800d152:	216b      	movs	r1, #107	@ 0x6b
 800d154:	f000 fc26 	bl	800d9a4 <__assert_func>
 800d158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d15c:	6006      	str	r6, [r0, #0]
 800d15e:	60c6      	str	r6, [r0, #12]
 800d160:	69e6      	ldr	r6, [r4, #28]
 800d162:	68f3      	ldr	r3, [r6, #12]
 800d164:	b183      	cbz	r3, 800d188 <_Balloc+0x50>
 800d166:	69e3      	ldr	r3, [r4, #28]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d16e:	b9b8      	cbnz	r0, 800d1a0 <_Balloc+0x68>
 800d170:	2101      	movs	r1, #1
 800d172:	fa01 f605 	lsl.w	r6, r1, r5
 800d176:	1d72      	adds	r2, r6, #5
 800d178:	0092      	lsls	r2, r2, #2
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 fc30 	bl	800d9e0 <_calloc_r>
 800d180:	b160      	cbz	r0, 800d19c <_Balloc+0x64>
 800d182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d186:	e00e      	b.n	800d1a6 <_Balloc+0x6e>
 800d188:	2221      	movs	r2, #33	@ 0x21
 800d18a:	2104      	movs	r1, #4
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 fc27 	bl	800d9e0 <_calloc_r>
 800d192:	69e3      	ldr	r3, [r4, #28]
 800d194:	60f0      	str	r0, [r6, #12]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1e4      	bne.n	800d166 <_Balloc+0x2e>
 800d19c:	2000      	movs	r0, #0
 800d19e:	bd70      	pop	{r4, r5, r6, pc}
 800d1a0:	6802      	ldr	r2, [r0, #0]
 800d1a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1ac:	e7f7      	b.n	800d19e <_Balloc+0x66>
 800d1ae:	bf00      	nop
 800d1b0:	0800e13d 	.word	0x0800e13d
 800d1b4:	0800e1bd 	.word	0x0800e1bd

0800d1b8 <_Bfree>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	69c6      	ldr	r6, [r0, #28]
 800d1bc:	4605      	mov	r5, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	b976      	cbnz	r6, 800d1e0 <_Bfree+0x28>
 800d1c2:	2010      	movs	r0, #16
 800d1c4:	f7ff ff02 	bl	800cfcc <malloc>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	61e8      	str	r0, [r5, #28]
 800d1cc:	b920      	cbnz	r0, 800d1d8 <_Bfree+0x20>
 800d1ce:	4b09      	ldr	r3, [pc, #36]	@ (800d1f4 <_Bfree+0x3c>)
 800d1d0:	4809      	ldr	r0, [pc, #36]	@ (800d1f8 <_Bfree+0x40>)
 800d1d2:	218f      	movs	r1, #143	@ 0x8f
 800d1d4:	f000 fbe6 	bl	800d9a4 <__assert_func>
 800d1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1dc:	6006      	str	r6, [r0, #0]
 800d1de:	60c6      	str	r6, [r0, #12]
 800d1e0:	b13c      	cbz	r4, 800d1f2 <_Bfree+0x3a>
 800d1e2:	69eb      	ldr	r3, [r5, #28]
 800d1e4:	6862      	ldr	r2, [r4, #4]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1ec:	6021      	str	r1, [r4, #0]
 800d1ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	0800e13d 	.word	0x0800e13d
 800d1f8:	0800e1bd 	.word	0x0800e1bd

0800d1fc <__multadd>:
 800d1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d200:	690d      	ldr	r5, [r1, #16]
 800d202:	4607      	mov	r7, r0
 800d204:	460c      	mov	r4, r1
 800d206:	461e      	mov	r6, r3
 800d208:	f101 0c14 	add.w	ip, r1, #20
 800d20c:	2000      	movs	r0, #0
 800d20e:	f8dc 3000 	ldr.w	r3, [ip]
 800d212:	b299      	uxth	r1, r3
 800d214:	fb02 6101 	mla	r1, r2, r1, r6
 800d218:	0c1e      	lsrs	r6, r3, #16
 800d21a:	0c0b      	lsrs	r3, r1, #16
 800d21c:	fb02 3306 	mla	r3, r2, r6, r3
 800d220:	b289      	uxth	r1, r1
 800d222:	3001      	adds	r0, #1
 800d224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d228:	4285      	cmp	r5, r0
 800d22a:	f84c 1b04 	str.w	r1, [ip], #4
 800d22e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d232:	dcec      	bgt.n	800d20e <__multadd+0x12>
 800d234:	b30e      	cbz	r6, 800d27a <__multadd+0x7e>
 800d236:	68a3      	ldr	r3, [r4, #8]
 800d238:	42ab      	cmp	r3, r5
 800d23a:	dc19      	bgt.n	800d270 <__multadd+0x74>
 800d23c:	6861      	ldr	r1, [r4, #4]
 800d23e:	4638      	mov	r0, r7
 800d240:	3101      	adds	r1, #1
 800d242:	f7ff ff79 	bl	800d138 <_Balloc>
 800d246:	4680      	mov	r8, r0
 800d248:	b928      	cbnz	r0, 800d256 <__multadd+0x5a>
 800d24a:	4602      	mov	r2, r0
 800d24c:	4b0c      	ldr	r3, [pc, #48]	@ (800d280 <__multadd+0x84>)
 800d24e:	480d      	ldr	r0, [pc, #52]	@ (800d284 <__multadd+0x88>)
 800d250:	21ba      	movs	r1, #186	@ 0xba
 800d252:	f000 fba7 	bl	800d9a4 <__assert_func>
 800d256:	6922      	ldr	r2, [r4, #16]
 800d258:	3202      	adds	r2, #2
 800d25a:	f104 010c 	add.w	r1, r4, #12
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	300c      	adds	r0, #12
 800d262:	f7ff f802 	bl	800c26a <memcpy>
 800d266:	4621      	mov	r1, r4
 800d268:	4638      	mov	r0, r7
 800d26a:	f7ff ffa5 	bl	800d1b8 <_Bfree>
 800d26e:	4644      	mov	r4, r8
 800d270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d274:	3501      	adds	r5, #1
 800d276:	615e      	str	r6, [r3, #20]
 800d278:	6125      	str	r5, [r4, #16]
 800d27a:	4620      	mov	r0, r4
 800d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d280:	0800e1ac 	.word	0x0800e1ac
 800d284:	0800e1bd 	.word	0x0800e1bd

0800d288 <__hi0bits>:
 800d288:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d28c:	4603      	mov	r3, r0
 800d28e:	bf36      	itet	cc
 800d290:	0403      	lslcc	r3, r0, #16
 800d292:	2000      	movcs	r0, #0
 800d294:	2010      	movcc	r0, #16
 800d296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d29a:	bf3c      	itt	cc
 800d29c:	021b      	lslcc	r3, r3, #8
 800d29e:	3008      	addcc	r0, #8
 800d2a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2a4:	bf3c      	itt	cc
 800d2a6:	011b      	lslcc	r3, r3, #4
 800d2a8:	3004      	addcc	r0, #4
 800d2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2ae:	bf3c      	itt	cc
 800d2b0:	009b      	lslcc	r3, r3, #2
 800d2b2:	3002      	addcc	r0, #2
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	db05      	blt.n	800d2c4 <__hi0bits+0x3c>
 800d2b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d2bc:	f100 0001 	add.w	r0, r0, #1
 800d2c0:	bf08      	it	eq
 800d2c2:	2020      	moveq	r0, #32
 800d2c4:	4770      	bx	lr

0800d2c6 <__lo0bits>:
 800d2c6:	6803      	ldr	r3, [r0, #0]
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	f013 0007 	ands.w	r0, r3, #7
 800d2ce:	d00b      	beq.n	800d2e8 <__lo0bits+0x22>
 800d2d0:	07d9      	lsls	r1, r3, #31
 800d2d2:	d421      	bmi.n	800d318 <__lo0bits+0x52>
 800d2d4:	0798      	lsls	r0, r3, #30
 800d2d6:	bf49      	itett	mi
 800d2d8:	085b      	lsrmi	r3, r3, #1
 800d2da:	089b      	lsrpl	r3, r3, #2
 800d2dc:	2001      	movmi	r0, #1
 800d2de:	6013      	strmi	r3, [r2, #0]
 800d2e0:	bf5c      	itt	pl
 800d2e2:	6013      	strpl	r3, [r2, #0]
 800d2e4:	2002      	movpl	r0, #2
 800d2e6:	4770      	bx	lr
 800d2e8:	b299      	uxth	r1, r3
 800d2ea:	b909      	cbnz	r1, 800d2f0 <__lo0bits+0x2a>
 800d2ec:	0c1b      	lsrs	r3, r3, #16
 800d2ee:	2010      	movs	r0, #16
 800d2f0:	b2d9      	uxtb	r1, r3
 800d2f2:	b909      	cbnz	r1, 800d2f8 <__lo0bits+0x32>
 800d2f4:	3008      	adds	r0, #8
 800d2f6:	0a1b      	lsrs	r3, r3, #8
 800d2f8:	0719      	lsls	r1, r3, #28
 800d2fa:	bf04      	itt	eq
 800d2fc:	091b      	lsreq	r3, r3, #4
 800d2fe:	3004      	addeq	r0, #4
 800d300:	0799      	lsls	r1, r3, #30
 800d302:	bf04      	itt	eq
 800d304:	089b      	lsreq	r3, r3, #2
 800d306:	3002      	addeq	r0, #2
 800d308:	07d9      	lsls	r1, r3, #31
 800d30a:	d403      	bmi.n	800d314 <__lo0bits+0x4e>
 800d30c:	085b      	lsrs	r3, r3, #1
 800d30e:	f100 0001 	add.w	r0, r0, #1
 800d312:	d003      	beq.n	800d31c <__lo0bits+0x56>
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	4770      	bx	lr
 800d318:	2000      	movs	r0, #0
 800d31a:	4770      	bx	lr
 800d31c:	2020      	movs	r0, #32
 800d31e:	4770      	bx	lr

0800d320 <__i2b>:
 800d320:	b510      	push	{r4, lr}
 800d322:	460c      	mov	r4, r1
 800d324:	2101      	movs	r1, #1
 800d326:	f7ff ff07 	bl	800d138 <_Balloc>
 800d32a:	4602      	mov	r2, r0
 800d32c:	b928      	cbnz	r0, 800d33a <__i2b+0x1a>
 800d32e:	4b05      	ldr	r3, [pc, #20]	@ (800d344 <__i2b+0x24>)
 800d330:	4805      	ldr	r0, [pc, #20]	@ (800d348 <__i2b+0x28>)
 800d332:	f240 1145 	movw	r1, #325	@ 0x145
 800d336:	f000 fb35 	bl	800d9a4 <__assert_func>
 800d33a:	2301      	movs	r3, #1
 800d33c:	6144      	str	r4, [r0, #20]
 800d33e:	6103      	str	r3, [r0, #16]
 800d340:	bd10      	pop	{r4, pc}
 800d342:	bf00      	nop
 800d344:	0800e1ac 	.word	0x0800e1ac
 800d348:	0800e1bd 	.word	0x0800e1bd

0800d34c <__multiply>:
 800d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	4617      	mov	r7, r2
 800d352:	690a      	ldr	r2, [r1, #16]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	429a      	cmp	r2, r3
 800d358:	bfa8      	it	ge
 800d35a:	463b      	movge	r3, r7
 800d35c:	4689      	mov	r9, r1
 800d35e:	bfa4      	itt	ge
 800d360:	460f      	movge	r7, r1
 800d362:	4699      	movge	r9, r3
 800d364:	693d      	ldr	r5, [r7, #16]
 800d366:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	eb05 060a 	add.w	r6, r5, sl
 800d372:	42b3      	cmp	r3, r6
 800d374:	b085      	sub	sp, #20
 800d376:	bfb8      	it	lt
 800d378:	3101      	addlt	r1, #1
 800d37a:	f7ff fedd 	bl	800d138 <_Balloc>
 800d37e:	b930      	cbnz	r0, 800d38e <__multiply+0x42>
 800d380:	4602      	mov	r2, r0
 800d382:	4b41      	ldr	r3, [pc, #260]	@ (800d488 <__multiply+0x13c>)
 800d384:	4841      	ldr	r0, [pc, #260]	@ (800d48c <__multiply+0x140>)
 800d386:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d38a:	f000 fb0b 	bl	800d9a4 <__assert_func>
 800d38e:	f100 0414 	add.w	r4, r0, #20
 800d392:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d396:	4623      	mov	r3, r4
 800d398:	2200      	movs	r2, #0
 800d39a:	4573      	cmp	r3, lr
 800d39c:	d320      	bcc.n	800d3e0 <__multiply+0x94>
 800d39e:	f107 0814 	add.w	r8, r7, #20
 800d3a2:	f109 0114 	add.w	r1, r9, #20
 800d3a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d3aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d3ae:	9302      	str	r3, [sp, #8]
 800d3b0:	1beb      	subs	r3, r5, r7
 800d3b2:	3b15      	subs	r3, #21
 800d3b4:	f023 0303 	bic.w	r3, r3, #3
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	3715      	adds	r7, #21
 800d3bc:	42bd      	cmp	r5, r7
 800d3be:	bf38      	it	cc
 800d3c0:	2304      	movcc	r3, #4
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	9b02      	ldr	r3, [sp, #8]
 800d3c6:	9103      	str	r1, [sp, #12]
 800d3c8:	428b      	cmp	r3, r1
 800d3ca:	d80c      	bhi.n	800d3e6 <__multiply+0x9a>
 800d3cc:	2e00      	cmp	r6, #0
 800d3ce:	dd03      	ble.n	800d3d8 <__multiply+0x8c>
 800d3d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d055      	beq.n	800d484 <__multiply+0x138>
 800d3d8:	6106      	str	r6, [r0, #16]
 800d3da:	b005      	add	sp, #20
 800d3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e0:	f843 2b04 	str.w	r2, [r3], #4
 800d3e4:	e7d9      	b.n	800d39a <__multiply+0x4e>
 800d3e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d3ea:	f1ba 0f00 	cmp.w	sl, #0
 800d3ee:	d01f      	beq.n	800d430 <__multiply+0xe4>
 800d3f0:	46c4      	mov	ip, r8
 800d3f2:	46a1      	mov	r9, r4
 800d3f4:	2700      	movs	r7, #0
 800d3f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d3fa:	f8d9 3000 	ldr.w	r3, [r9]
 800d3fe:	fa1f fb82 	uxth.w	fp, r2
 800d402:	b29b      	uxth	r3, r3
 800d404:	fb0a 330b 	mla	r3, sl, fp, r3
 800d408:	443b      	add	r3, r7
 800d40a:	f8d9 7000 	ldr.w	r7, [r9]
 800d40e:	0c12      	lsrs	r2, r2, #16
 800d410:	0c3f      	lsrs	r7, r7, #16
 800d412:	fb0a 7202 	mla	r2, sl, r2, r7
 800d416:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d420:	4565      	cmp	r5, ip
 800d422:	f849 3b04 	str.w	r3, [r9], #4
 800d426:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d42a:	d8e4      	bhi.n	800d3f6 <__multiply+0xaa>
 800d42c:	9b01      	ldr	r3, [sp, #4]
 800d42e:	50e7      	str	r7, [r4, r3]
 800d430:	9b03      	ldr	r3, [sp, #12]
 800d432:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d436:	3104      	adds	r1, #4
 800d438:	f1b9 0f00 	cmp.w	r9, #0
 800d43c:	d020      	beq.n	800d480 <__multiply+0x134>
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	4647      	mov	r7, r8
 800d442:	46a4      	mov	ip, r4
 800d444:	f04f 0a00 	mov.w	sl, #0
 800d448:	f8b7 b000 	ldrh.w	fp, [r7]
 800d44c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d450:	fb09 220b 	mla	r2, r9, fp, r2
 800d454:	4452      	add	r2, sl
 800d456:	b29b      	uxth	r3, r3
 800d458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d45c:	f84c 3b04 	str.w	r3, [ip], #4
 800d460:	f857 3b04 	ldr.w	r3, [r7], #4
 800d464:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d468:	f8bc 3000 	ldrh.w	r3, [ip]
 800d46c:	fb09 330a 	mla	r3, r9, sl, r3
 800d470:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d474:	42bd      	cmp	r5, r7
 800d476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d47a:	d8e5      	bhi.n	800d448 <__multiply+0xfc>
 800d47c:	9a01      	ldr	r2, [sp, #4]
 800d47e:	50a3      	str	r3, [r4, r2]
 800d480:	3404      	adds	r4, #4
 800d482:	e79f      	b.n	800d3c4 <__multiply+0x78>
 800d484:	3e01      	subs	r6, #1
 800d486:	e7a1      	b.n	800d3cc <__multiply+0x80>
 800d488:	0800e1ac 	.word	0x0800e1ac
 800d48c:	0800e1bd 	.word	0x0800e1bd

0800d490 <__pow5mult>:
 800d490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d494:	4615      	mov	r5, r2
 800d496:	f012 0203 	ands.w	r2, r2, #3
 800d49a:	4607      	mov	r7, r0
 800d49c:	460e      	mov	r6, r1
 800d49e:	d007      	beq.n	800d4b0 <__pow5mult+0x20>
 800d4a0:	4c25      	ldr	r4, [pc, #148]	@ (800d538 <__pow5mult+0xa8>)
 800d4a2:	3a01      	subs	r2, #1
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4aa:	f7ff fea7 	bl	800d1fc <__multadd>
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	10ad      	asrs	r5, r5, #2
 800d4b2:	d03d      	beq.n	800d530 <__pow5mult+0xa0>
 800d4b4:	69fc      	ldr	r4, [r7, #28]
 800d4b6:	b97c      	cbnz	r4, 800d4d8 <__pow5mult+0x48>
 800d4b8:	2010      	movs	r0, #16
 800d4ba:	f7ff fd87 	bl	800cfcc <malloc>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	61f8      	str	r0, [r7, #28]
 800d4c2:	b928      	cbnz	r0, 800d4d0 <__pow5mult+0x40>
 800d4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800d53c <__pow5mult+0xac>)
 800d4c6:	481e      	ldr	r0, [pc, #120]	@ (800d540 <__pow5mult+0xb0>)
 800d4c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d4cc:	f000 fa6a 	bl	800d9a4 <__assert_func>
 800d4d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4d4:	6004      	str	r4, [r0, #0]
 800d4d6:	60c4      	str	r4, [r0, #12]
 800d4d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d4dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4e0:	b94c      	cbnz	r4, 800d4f6 <__pow5mult+0x66>
 800d4e2:	f240 2171 	movw	r1, #625	@ 0x271
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f7ff ff1a 	bl	800d320 <__i2b>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	6003      	str	r3, [r0, #0]
 800d4f6:	f04f 0900 	mov.w	r9, #0
 800d4fa:	07eb      	lsls	r3, r5, #31
 800d4fc:	d50a      	bpl.n	800d514 <__pow5mult+0x84>
 800d4fe:	4631      	mov	r1, r6
 800d500:	4622      	mov	r2, r4
 800d502:	4638      	mov	r0, r7
 800d504:	f7ff ff22 	bl	800d34c <__multiply>
 800d508:	4631      	mov	r1, r6
 800d50a:	4680      	mov	r8, r0
 800d50c:	4638      	mov	r0, r7
 800d50e:	f7ff fe53 	bl	800d1b8 <_Bfree>
 800d512:	4646      	mov	r6, r8
 800d514:	106d      	asrs	r5, r5, #1
 800d516:	d00b      	beq.n	800d530 <__pow5mult+0xa0>
 800d518:	6820      	ldr	r0, [r4, #0]
 800d51a:	b938      	cbnz	r0, 800d52c <__pow5mult+0x9c>
 800d51c:	4622      	mov	r2, r4
 800d51e:	4621      	mov	r1, r4
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff ff13 	bl	800d34c <__multiply>
 800d526:	6020      	str	r0, [r4, #0]
 800d528:	f8c0 9000 	str.w	r9, [r0]
 800d52c:	4604      	mov	r4, r0
 800d52e:	e7e4      	b.n	800d4fa <__pow5mult+0x6a>
 800d530:	4630      	mov	r0, r6
 800d532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d536:	bf00      	nop
 800d538:	0800e270 	.word	0x0800e270
 800d53c:	0800e13d 	.word	0x0800e13d
 800d540:	0800e1bd 	.word	0x0800e1bd

0800d544 <__lshift>:
 800d544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d548:	460c      	mov	r4, r1
 800d54a:	6849      	ldr	r1, [r1, #4]
 800d54c:	6923      	ldr	r3, [r4, #16]
 800d54e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d552:	68a3      	ldr	r3, [r4, #8]
 800d554:	4607      	mov	r7, r0
 800d556:	4691      	mov	r9, r2
 800d558:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d55c:	f108 0601 	add.w	r6, r8, #1
 800d560:	42b3      	cmp	r3, r6
 800d562:	db0b      	blt.n	800d57c <__lshift+0x38>
 800d564:	4638      	mov	r0, r7
 800d566:	f7ff fde7 	bl	800d138 <_Balloc>
 800d56a:	4605      	mov	r5, r0
 800d56c:	b948      	cbnz	r0, 800d582 <__lshift+0x3e>
 800d56e:	4602      	mov	r2, r0
 800d570:	4b28      	ldr	r3, [pc, #160]	@ (800d614 <__lshift+0xd0>)
 800d572:	4829      	ldr	r0, [pc, #164]	@ (800d618 <__lshift+0xd4>)
 800d574:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d578:	f000 fa14 	bl	800d9a4 <__assert_func>
 800d57c:	3101      	adds	r1, #1
 800d57e:	005b      	lsls	r3, r3, #1
 800d580:	e7ee      	b.n	800d560 <__lshift+0x1c>
 800d582:	2300      	movs	r3, #0
 800d584:	f100 0114 	add.w	r1, r0, #20
 800d588:	f100 0210 	add.w	r2, r0, #16
 800d58c:	4618      	mov	r0, r3
 800d58e:	4553      	cmp	r3, sl
 800d590:	db33      	blt.n	800d5fa <__lshift+0xb6>
 800d592:	6920      	ldr	r0, [r4, #16]
 800d594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d598:	f104 0314 	add.w	r3, r4, #20
 800d59c:	f019 091f 	ands.w	r9, r9, #31
 800d5a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5a8:	d02b      	beq.n	800d602 <__lshift+0xbe>
 800d5aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d5ae:	468a      	mov	sl, r1
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	6818      	ldr	r0, [r3, #0]
 800d5b4:	fa00 f009 	lsl.w	r0, r0, r9
 800d5b8:	4310      	orrs	r0, r2
 800d5ba:	f84a 0b04 	str.w	r0, [sl], #4
 800d5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5c2:	459c      	cmp	ip, r3
 800d5c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5c8:	d8f3      	bhi.n	800d5b2 <__lshift+0x6e>
 800d5ca:	ebac 0304 	sub.w	r3, ip, r4
 800d5ce:	3b15      	subs	r3, #21
 800d5d0:	f023 0303 	bic.w	r3, r3, #3
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	f104 0015 	add.w	r0, r4, #21
 800d5da:	4560      	cmp	r0, ip
 800d5dc:	bf88      	it	hi
 800d5de:	2304      	movhi	r3, #4
 800d5e0:	50ca      	str	r2, [r1, r3]
 800d5e2:	b10a      	cbz	r2, 800d5e8 <__lshift+0xa4>
 800d5e4:	f108 0602 	add.w	r6, r8, #2
 800d5e8:	3e01      	subs	r6, #1
 800d5ea:	4638      	mov	r0, r7
 800d5ec:	612e      	str	r6, [r5, #16]
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	f7ff fde2 	bl	800d1b8 <_Bfree>
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5fe:	3301      	adds	r3, #1
 800d600:	e7c5      	b.n	800d58e <__lshift+0x4a>
 800d602:	3904      	subs	r1, #4
 800d604:	f853 2b04 	ldr.w	r2, [r3], #4
 800d608:	f841 2f04 	str.w	r2, [r1, #4]!
 800d60c:	459c      	cmp	ip, r3
 800d60e:	d8f9      	bhi.n	800d604 <__lshift+0xc0>
 800d610:	e7ea      	b.n	800d5e8 <__lshift+0xa4>
 800d612:	bf00      	nop
 800d614:	0800e1ac 	.word	0x0800e1ac
 800d618:	0800e1bd 	.word	0x0800e1bd

0800d61c <__mcmp>:
 800d61c:	690a      	ldr	r2, [r1, #16]
 800d61e:	4603      	mov	r3, r0
 800d620:	6900      	ldr	r0, [r0, #16]
 800d622:	1a80      	subs	r0, r0, r2
 800d624:	b530      	push	{r4, r5, lr}
 800d626:	d10e      	bne.n	800d646 <__mcmp+0x2a>
 800d628:	3314      	adds	r3, #20
 800d62a:	3114      	adds	r1, #20
 800d62c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d630:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d63c:	4295      	cmp	r5, r2
 800d63e:	d003      	beq.n	800d648 <__mcmp+0x2c>
 800d640:	d205      	bcs.n	800d64e <__mcmp+0x32>
 800d642:	f04f 30ff 	mov.w	r0, #4294967295
 800d646:	bd30      	pop	{r4, r5, pc}
 800d648:	42a3      	cmp	r3, r4
 800d64a:	d3f3      	bcc.n	800d634 <__mcmp+0x18>
 800d64c:	e7fb      	b.n	800d646 <__mcmp+0x2a>
 800d64e:	2001      	movs	r0, #1
 800d650:	e7f9      	b.n	800d646 <__mcmp+0x2a>
	...

0800d654 <__mdiff>:
 800d654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d658:	4689      	mov	r9, r1
 800d65a:	4606      	mov	r6, r0
 800d65c:	4611      	mov	r1, r2
 800d65e:	4648      	mov	r0, r9
 800d660:	4614      	mov	r4, r2
 800d662:	f7ff ffdb 	bl	800d61c <__mcmp>
 800d666:	1e05      	subs	r5, r0, #0
 800d668:	d112      	bne.n	800d690 <__mdiff+0x3c>
 800d66a:	4629      	mov	r1, r5
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7ff fd63 	bl	800d138 <_Balloc>
 800d672:	4602      	mov	r2, r0
 800d674:	b928      	cbnz	r0, 800d682 <__mdiff+0x2e>
 800d676:	4b3f      	ldr	r3, [pc, #252]	@ (800d774 <__mdiff+0x120>)
 800d678:	f240 2137 	movw	r1, #567	@ 0x237
 800d67c:	483e      	ldr	r0, [pc, #248]	@ (800d778 <__mdiff+0x124>)
 800d67e:	f000 f991 	bl	800d9a4 <__assert_func>
 800d682:	2301      	movs	r3, #1
 800d684:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d688:	4610      	mov	r0, r2
 800d68a:	b003      	add	sp, #12
 800d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d690:	bfbc      	itt	lt
 800d692:	464b      	movlt	r3, r9
 800d694:	46a1      	movlt	r9, r4
 800d696:	4630      	mov	r0, r6
 800d698:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d69c:	bfba      	itte	lt
 800d69e:	461c      	movlt	r4, r3
 800d6a0:	2501      	movlt	r5, #1
 800d6a2:	2500      	movge	r5, #0
 800d6a4:	f7ff fd48 	bl	800d138 <_Balloc>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	b918      	cbnz	r0, 800d6b4 <__mdiff+0x60>
 800d6ac:	4b31      	ldr	r3, [pc, #196]	@ (800d774 <__mdiff+0x120>)
 800d6ae:	f240 2145 	movw	r1, #581	@ 0x245
 800d6b2:	e7e3      	b.n	800d67c <__mdiff+0x28>
 800d6b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d6b8:	6926      	ldr	r6, [r4, #16]
 800d6ba:	60c5      	str	r5, [r0, #12]
 800d6bc:	f109 0310 	add.w	r3, r9, #16
 800d6c0:	f109 0514 	add.w	r5, r9, #20
 800d6c4:	f104 0e14 	add.w	lr, r4, #20
 800d6c8:	f100 0b14 	add.w	fp, r0, #20
 800d6cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d6d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	46d9      	mov	r9, fp
 800d6d8:	f04f 0c00 	mov.w	ip, #0
 800d6dc:	9b01      	ldr	r3, [sp, #4]
 800d6de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d6e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d6e6:	9301      	str	r3, [sp, #4]
 800d6e8:	fa1f f38a 	uxth.w	r3, sl
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	b283      	uxth	r3, r0
 800d6f0:	1acb      	subs	r3, r1, r3
 800d6f2:	0c00      	lsrs	r0, r0, #16
 800d6f4:	4463      	add	r3, ip
 800d6f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d6fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d704:	4576      	cmp	r6, lr
 800d706:	f849 3b04 	str.w	r3, [r9], #4
 800d70a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d70e:	d8e5      	bhi.n	800d6dc <__mdiff+0x88>
 800d710:	1b33      	subs	r3, r6, r4
 800d712:	3b15      	subs	r3, #21
 800d714:	f023 0303 	bic.w	r3, r3, #3
 800d718:	3415      	adds	r4, #21
 800d71a:	3304      	adds	r3, #4
 800d71c:	42a6      	cmp	r6, r4
 800d71e:	bf38      	it	cc
 800d720:	2304      	movcc	r3, #4
 800d722:	441d      	add	r5, r3
 800d724:	445b      	add	r3, fp
 800d726:	461e      	mov	r6, r3
 800d728:	462c      	mov	r4, r5
 800d72a:	4544      	cmp	r4, r8
 800d72c:	d30e      	bcc.n	800d74c <__mdiff+0xf8>
 800d72e:	f108 0103 	add.w	r1, r8, #3
 800d732:	1b49      	subs	r1, r1, r5
 800d734:	f021 0103 	bic.w	r1, r1, #3
 800d738:	3d03      	subs	r5, #3
 800d73a:	45a8      	cmp	r8, r5
 800d73c:	bf38      	it	cc
 800d73e:	2100      	movcc	r1, #0
 800d740:	440b      	add	r3, r1
 800d742:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d746:	b191      	cbz	r1, 800d76e <__mdiff+0x11a>
 800d748:	6117      	str	r7, [r2, #16]
 800d74a:	e79d      	b.n	800d688 <__mdiff+0x34>
 800d74c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d750:	46e6      	mov	lr, ip
 800d752:	0c08      	lsrs	r0, r1, #16
 800d754:	fa1c fc81 	uxtah	ip, ip, r1
 800d758:	4471      	add	r1, lr
 800d75a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d75e:	b289      	uxth	r1, r1
 800d760:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d764:	f846 1b04 	str.w	r1, [r6], #4
 800d768:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d76c:	e7dd      	b.n	800d72a <__mdiff+0xd6>
 800d76e:	3f01      	subs	r7, #1
 800d770:	e7e7      	b.n	800d742 <__mdiff+0xee>
 800d772:	bf00      	nop
 800d774:	0800e1ac 	.word	0x0800e1ac
 800d778:	0800e1bd 	.word	0x0800e1bd

0800d77c <__d2b>:
 800d77c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d780:	460f      	mov	r7, r1
 800d782:	2101      	movs	r1, #1
 800d784:	ec59 8b10 	vmov	r8, r9, d0
 800d788:	4616      	mov	r6, r2
 800d78a:	f7ff fcd5 	bl	800d138 <_Balloc>
 800d78e:	4604      	mov	r4, r0
 800d790:	b930      	cbnz	r0, 800d7a0 <__d2b+0x24>
 800d792:	4602      	mov	r2, r0
 800d794:	4b23      	ldr	r3, [pc, #140]	@ (800d824 <__d2b+0xa8>)
 800d796:	4824      	ldr	r0, [pc, #144]	@ (800d828 <__d2b+0xac>)
 800d798:	f240 310f 	movw	r1, #783	@ 0x30f
 800d79c:	f000 f902 	bl	800d9a4 <__assert_func>
 800d7a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7a8:	b10d      	cbz	r5, 800d7ae <__d2b+0x32>
 800d7aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7ae:	9301      	str	r3, [sp, #4]
 800d7b0:	f1b8 0300 	subs.w	r3, r8, #0
 800d7b4:	d023      	beq.n	800d7fe <__d2b+0x82>
 800d7b6:	4668      	mov	r0, sp
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	f7ff fd84 	bl	800d2c6 <__lo0bits>
 800d7be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7c2:	b1d0      	cbz	r0, 800d7fa <__d2b+0x7e>
 800d7c4:	f1c0 0320 	rsb	r3, r0, #32
 800d7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7cc:	430b      	orrs	r3, r1
 800d7ce:	40c2      	lsrs	r2, r0
 800d7d0:	6163      	str	r3, [r4, #20]
 800d7d2:	9201      	str	r2, [sp, #4]
 800d7d4:	9b01      	ldr	r3, [sp, #4]
 800d7d6:	61a3      	str	r3, [r4, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	bf0c      	ite	eq
 800d7dc:	2201      	moveq	r2, #1
 800d7de:	2202      	movne	r2, #2
 800d7e0:	6122      	str	r2, [r4, #16]
 800d7e2:	b1a5      	cbz	r5, 800d80e <__d2b+0x92>
 800d7e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d7e8:	4405      	add	r5, r0
 800d7ea:	603d      	str	r5, [r7, #0]
 800d7ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7f0:	6030      	str	r0, [r6, #0]
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	b003      	add	sp, #12
 800d7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7fa:	6161      	str	r1, [r4, #20]
 800d7fc:	e7ea      	b.n	800d7d4 <__d2b+0x58>
 800d7fe:	a801      	add	r0, sp, #4
 800d800:	f7ff fd61 	bl	800d2c6 <__lo0bits>
 800d804:	9b01      	ldr	r3, [sp, #4]
 800d806:	6163      	str	r3, [r4, #20]
 800d808:	3020      	adds	r0, #32
 800d80a:	2201      	movs	r2, #1
 800d80c:	e7e8      	b.n	800d7e0 <__d2b+0x64>
 800d80e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d812:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d816:	6038      	str	r0, [r7, #0]
 800d818:	6918      	ldr	r0, [r3, #16]
 800d81a:	f7ff fd35 	bl	800d288 <__hi0bits>
 800d81e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d822:	e7e5      	b.n	800d7f0 <__d2b+0x74>
 800d824:	0800e1ac 	.word	0x0800e1ac
 800d828:	0800e1bd 	.word	0x0800e1bd

0800d82c <__sflush_r>:
 800d82c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d834:	0716      	lsls	r6, r2, #28
 800d836:	4605      	mov	r5, r0
 800d838:	460c      	mov	r4, r1
 800d83a:	d454      	bmi.n	800d8e6 <__sflush_r+0xba>
 800d83c:	684b      	ldr	r3, [r1, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dc02      	bgt.n	800d848 <__sflush_r+0x1c>
 800d842:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d844:	2b00      	cmp	r3, #0
 800d846:	dd48      	ble.n	800d8da <__sflush_r+0xae>
 800d848:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	d045      	beq.n	800d8da <__sflush_r+0xae>
 800d84e:	2300      	movs	r3, #0
 800d850:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d854:	682f      	ldr	r7, [r5, #0]
 800d856:	6a21      	ldr	r1, [r4, #32]
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	d030      	beq.n	800d8be <__sflush_r+0x92>
 800d85c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d85e:	89a3      	ldrh	r3, [r4, #12]
 800d860:	0759      	lsls	r1, r3, #29
 800d862:	d505      	bpl.n	800d870 <__sflush_r+0x44>
 800d864:	6863      	ldr	r3, [r4, #4]
 800d866:	1ad2      	subs	r2, r2, r3
 800d868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d86a:	b10b      	cbz	r3, 800d870 <__sflush_r+0x44>
 800d86c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d86e:	1ad2      	subs	r2, r2, r3
 800d870:	2300      	movs	r3, #0
 800d872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d874:	6a21      	ldr	r1, [r4, #32]
 800d876:	4628      	mov	r0, r5
 800d878:	47b0      	blx	r6
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	d106      	bne.n	800d88e <__sflush_r+0x62>
 800d880:	6829      	ldr	r1, [r5, #0]
 800d882:	291d      	cmp	r1, #29
 800d884:	d82b      	bhi.n	800d8de <__sflush_r+0xb2>
 800d886:	4a2a      	ldr	r2, [pc, #168]	@ (800d930 <__sflush_r+0x104>)
 800d888:	40ca      	lsrs	r2, r1
 800d88a:	07d6      	lsls	r6, r2, #31
 800d88c:	d527      	bpl.n	800d8de <__sflush_r+0xb2>
 800d88e:	2200      	movs	r2, #0
 800d890:	6062      	str	r2, [r4, #4]
 800d892:	04d9      	lsls	r1, r3, #19
 800d894:	6922      	ldr	r2, [r4, #16]
 800d896:	6022      	str	r2, [r4, #0]
 800d898:	d504      	bpl.n	800d8a4 <__sflush_r+0x78>
 800d89a:	1c42      	adds	r2, r0, #1
 800d89c:	d101      	bne.n	800d8a2 <__sflush_r+0x76>
 800d89e:	682b      	ldr	r3, [r5, #0]
 800d8a0:	b903      	cbnz	r3, 800d8a4 <__sflush_r+0x78>
 800d8a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8a6:	602f      	str	r7, [r5, #0]
 800d8a8:	b1b9      	cbz	r1, 800d8da <__sflush_r+0xae>
 800d8aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8ae:	4299      	cmp	r1, r3
 800d8b0:	d002      	beq.n	800d8b8 <__sflush_r+0x8c>
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	f7ff fb40 	bl	800cf38 <_free_r>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8bc:	e00d      	b.n	800d8da <__sflush_r+0xae>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	47b0      	blx	r6
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	1c50      	adds	r0, r2, #1
 800d8c8:	d1c9      	bne.n	800d85e <__sflush_r+0x32>
 800d8ca:	682b      	ldr	r3, [r5, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d0c6      	beq.n	800d85e <__sflush_r+0x32>
 800d8d0:	2b1d      	cmp	r3, #29
 800d8d2:	d001      	beq.n	800d8d8 <__sflush_r+0xac>
 800d8d4:	2b16      	cmp	r3, #22
 800d8d6:	d11e      	bne.n	800d916 <__sflush_r+0xea>
 800d8d8:	602f      	str	r7, [r5, #0]
 800d8da:	2000      	movs	r0, #0
 800d8dc:	e022      	b.n	800d924 <__sflush_r+0xf8>
 800d8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8e2:	b21b      	sxth	r3, r3
 800d8e4:	e01b      	b.n	800d91e <__sflush_r+0xf2>
 800d8e6:	690f      	ldr	r7, [r1, #16]
 800d8e8:	2f00      	cmp	r7, #0
 800d8ea:	d0f6      	beq.n	800d8da <__sflush_r+0xae>
 800d8ec:	0793      	lsls	r3, r2, #30
 800d8ee:	680e      	ldr	r6, [r1, #0]
 800d8f0:	bf08      	it	eq
 800d8f2:	694b      	ldreq	r3, [r1, #20]
 800d8f4:	600f      	str	r7, [r1, #0]
 800d8f6:	bf18      	it	ne
 800d8f8:	2300      	movne	r3, #0
 800d8fa:	eba6 0807 	sub.w	r8, r6, r7
 800d8fe:	608b      	str	r3, [r1, #8]
 800d900:	f1b8 0f00 	cmp.w	r8, #0
 800d904:	dde9      	ble.n	800d8da <__sflush_r+0xae>
 800d906:	6a21      	ldr	r1, [r4, #32]
 800d908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d90a:	4643      	mov	r3, r8
 800d90c:	463a      	mov	r2, r7
 800d90e:	4628      	mov	r0, r5
 800d910:	47b0      	blx	r6
 800d912:	2800      	cmp	r0, #0
 800d914:	dc08      	bgt.n	800d928 <__sflush_r+0xfc>
 800d916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	f04f 30ff 	mov.w	r0, #4294967295
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	4407      	add	r7, r0
 800d92a:	eba8 0800 	sub.w	r8, r8, r0
 800d92e:	e7e7      	b.n	800d900 <__sflush_r+0xd4>
 800d930:	20400001 	.word	0x20400001

0800d934 <_fflush_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	690b      	ldr	r3, [r1, #16]
 800d938:	4605      	mov	r5, r0
 800d93a:	460c      	mov	r4, r1
 800d93c:	b913      	cbnz	r3, 800d944 <_fflush_r+0x10>
 800d93e:	2500      	movs	r5, #0
 800d940:	4628      	mov	r0, r5
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	b118      	cbz	r0, 800d94e <_fflush_r+0x1a>
 800d946:	6a03      	ldr	r3, [r0, #32]
 800d948:	b90b      	cbnz	r3, 800d94e <_fflush_r+0x1a>
 800d94a:	f7fe fb95 	bl	800c078 <__sinit>
 800d94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0f3      	beq.n	800d93e <_fflush_r+0xa>
 800d956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d958:	07d0      	lsls	r0, r2, #31
 800d95a:	d404      	bmi.n	800d966 <_fflush_r+0x32>
 800d95c:	0599      	lsls	r1, r3, #22
 800d95e:	d402      	bmi.n	800d966 <_fflush_r+0x32>
 800d960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d962:	f7fe fc80 	bl	800c266 <__retarget_lock_acquire_recursive>
 800d966:	4628      	mov	r0, r5
 800d968:	4621      	mov	r1, r4
 800d96a:	f7ff ff5f 	bl	800d82c <__sflush_r>
 800d96e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d970:	07da      	lsls	r2, r3, #31
 800d972:	4605      	mov	r5, r0
 800d974:	d4e4      	bmi.n	800d940 <_fflush_r+0xc>
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	059b      	lsls	r3, r3, #22
 800d97a:	d4e1      	bmi.n	800d940 <_fflush_r+0xc>
 800d97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d97e:	f7fe fc73 	bl	800c268 <__retarget_lock_release_recursive>
 800d982:	e7dd      	b.n	800d940 <_fflush_r+0xc>

0800d984 <_sbrk_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4d06      	ldr	r5, [pc, #24]	@ (800d9a0 <_sbrk_r+0x1c>)
 800d988:	2300      	movs	r3, #0
 800d98a:	4604      	mov	r4, r0
 800d98c:	4608      	mov	r0, r1
 800d98e:	602b      	str	r3, [r5, #0]
 800d990:	f7f5 fc1c 	bl	80031cc <_sbrk>
 800d994:	1c43      	adds	r3, r0, #1
 800d996:	d102      	bne.n	800d99e <_sbrk_r+0x1a>
 800d998:	682b      	ldr	r3, [r5, #0]
 800d99a:	b103      	cbz	r3, 800d99e <_sbrk_r+0x1a>
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
 800d9a0:	20002bbc 	.word	0x20002bbc

0800d9a4 <__assert_func>:
 800d9a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9a6:	4614      	mov	r4, r2
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	4b09      	ldr	r3, [pc, #36]	@ (800d9d0 <__assert_func+0x2c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	68d8      	ldr	r0, [r3, #12]
 800d9b2:	b14c      	cbz	r4, 800d9c8 <__assert_func+0x24>
 800d9b4:	4b07      	ldr	r3, [pc, #28]	@ (800d9d4 <__assert_func+0x30>)
 800d9b6:	9100      	str	r1, [sp, #0]
 800d9b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9bc:	4906      	ldr	r1, [pc, #24]	@ (800d9d8 <__assert_func+0x34>)
 800d9be:	462b      	mov	r3, r5
 800d9c0:	f000 f842 	bl	800da48 <fiprintf>
 800d9c4:	f000 f852 	bl	800da6c <abort>
 800d9c8:	4b04      	ldr	r3, [pc, #16]	@ (800d9dc <__assert_func+0x38>)
 800d9ca:	461c      	mov	r4, r3
 800d9cc:	e7f3      	b.n	800d9b6 <__assert_func+0x12>
 800d9ce:	bf00      	nop
 800d9d0:	20000044 	.word	0x20000044
 800d9d4:	0800e220 	.word	0x0800e220
 800d9d8:	0800e22d 	.word	0x0800e22d
 800d9dc:	0800e25b 	.word	0x0800e25b

0800d9e0 <_calloc_r>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	fba1 5402 	umull	r5, r4, r1, r2
 800d9e6:	b934      	cbnz	r4, 800d9f6 <_calloc_r+0x16>
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	f7ff fb19 	bl	800d020 <_malloc_r>
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	b928      	cbnz	r0, 800d9fe <_calloc_r+0x1e>
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	bd70      	pop	{r4, r5, r6, pc}
 800d9f6:	220c      	movs	r2, #12
 800d9f8:	6002      	str	r2, [r0, #0]
 800d9fa:	2600      	movs	r6, #0
 800d9fc:	e7f9      	b.n	800d9f2 <_calloc_r+0x12>
 800d9fe:	462a      	mov	r2, r5
 800da00:	4621      	mov	r1, r4
 800da02:	f7fe fbb2 	bl	800c16a <memset>
 800da06:	e7f4      	b.n	800d9f2 <_calloc_r+0x12>

0800da08 <__ascii_mbtowc>:
 800da08:	b082      	sub	sp, #8
 800da0a:	b901      	cbnz	r1, 800da0e <__ascii_mbtowc+0x6>
 800da0c:	a901      	add	r1, sp, #4
 800da0e:	b142      	cbz	r2, 800da22 <__ascii_mbtowc+0x1a>
 800da10:	b14b      	cbz	r3, 800da26 <__ascii_mbtowc+0x1e>
 800da12:	7813      	ldrb	r3, [r2, #0]
 800da14:	600b      	str	r3, [r1, #0]
 800da16:	7812      	ldrb	r2, [r2, #0]
 800da18:	1e10      	subs	r0, r2, #0
 800da1a:	bf18      	it	ne
 800da1c:	2001      	movne	r0, #1
 800da1e:	b002      	add	sp, #8
 800da20:	4770      	bx	lr
 800da22:	4610      	mov	r0, r2
 800da24:	e7fb      	b.n	800da1e <__ascii_mbtowc+0x16>
 800da26:	f06f 0001 	mvn.w	r0, #1
 800da2a:	e7f8      	b.n	800da1e <__ascii_mbtowc+0x16>

0800da2c <__ascii_wctomb>:
 800da2c:	4603      	mov	r3, r0
 800da2e:	4608      	mov	r0, r1
 800da30:	b141      	cbz	r1, 800da44 <__ascii_wctomb+0x18>
 800da32:	2aff      	cmp	r2, #255	@ 0xff
 800da34:	d904      	bls.n	800da40 <__ascii_wctomb+0x14>
 800da36:	228a      	movs	r2, #138	@ 0x8a
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	f04f 30ff 	mov.w	r0, #4294967295
 800da3e:	4770      	bx	lr
 800da40:	700a      	strb	r2, [r1, #0]
 800da42:	2001      	movs	r0, #1
 800da44:	4770      	bx	lr
	...

0800da48 <fiprintf>:
 800da48:	b40e      	push	{r1, r2, r3}
 800da4a:	b503      	push	{r0, r1, lr}
 800da4c:	4601      	mov	r1, r0
 800da4e:	ab03      	add	r3, sp, #12
 800da50:	4805      	ldr	r0, [pc, #20]	@ (800da68 <fiprintf+0x20>)
 800da52:	f853 2b04 	ldr.w	r2, [r3], #4
 800da56:	6800      	ldr	r0, [r0, #0]
 800da58:	9301      	str	r3, [sp, #4]
 800da5a:	f000 f837 	bl	800dacc <_vfiprintf_r>
 800da5e:	b002      	add	sp, #8
 800da60:	f85d eb04 	ldr.w	lr, [sp], #4
 800da64:	b003      	add	sp, #12
 800da66:	4770      	bx	lr
 800da68:	20000044 	.word	0x20000044

0800da6c <abort>:
 800da6c:	b508      	push	{r3, lr}
 800da6e:	2006      	movs	r0, #6
 800da70:	f000 fa00 	bl	800de74 <raise>
 800da74:	2001      	movs	r0, #1
 800da76:	f7f5 fb31 	bl	80030dc <_exit>

0800da7a <__sfputc_r>:
 800da7a:	6893      	ldr	r3, [r2, #8]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	2b00      	cmp	r3, #0
 800da80:	b410      	push	{r4}
 800da82:	6093      	str	r3, [r2, #8]
 800da84:	da08      	bge.n	800da98 <__sfputc_r+0x1e>
 800da86:	6994      	ldr	r4, [r2, #24]
 800da88:	42a3      	cmp	r3, r4
 800da8a:	db01      	blt.n	800da90 <__sfputc_r+0x16>
 800da8c:	290a      	cmp	r1, #10
 800da8e:	d103      	bne.n	800da98 <__sfputc_r+0x1e>
 800da90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da94:	f000 b932 	b.w	800dcfc <__swbuf_r>
 800da98:	6813      	ldr	r3, [r2, #0]
 800da9a:	1c58      	adds	r0, r3, #1
 800da9c:	6010      	str	r0, [r2, #0]
 800da9e:	7019      	strb	r1, [r3, #0]
 800daa0:	4608      	mov	r0, r1
 800daa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <__sfputs_r>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	4606      	mov	r6, r0
 800daac:	460f      	mov	r7, r1
 800daae:	4614      	mov	r4, r2
 800dab0:	18d5      	adds	r5, r2, r3
 800dab2:	42ac      	cmp	r4, r5
 800dab4:	d101      	bne.n	800daba <__sfputs_r+0x12>
 800dab6:	2000      	movs	r0, #0
 800dab8:	e007      	b.n	800daca <__sfputs_r+0x22>
 800daba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dabe:	463a      	mov	r2, r7
 800dac0:	4630      	mov	r0, r6
 800dac2:	f7ff ffda 	bl	800da7a <__sfputc_r>
 800dac6:	1c43      	adds	r3, r0, #1
 800dac8:	d1f3      	bne.n	800dab2 <__sfputs_r+0xa>
 800daca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dacc <_vfiprintf_r>:
 800dacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad0:	460d      	mov	r5, r1
 800dad2:	b09d      	sub	sp, #116	@ 0x74
 800dad4:	4614      	mov	r4, r2
 800dad6:	4698      	mov	r8, r3
 800dad8:	4606      	mov	r6, r0
 800dada:	b118      	cbz	r0, 800dae4 <_vfiprintf_r+0x18>
 800dadc:	6a03      	ldr	r3, [r0, #32]
 800dade:	b90b      	cbnz	r3, 800dae4 <_vfiprintf_r+0x18>
 800dae0:	f7fe faca 	bl	800c078 <__sinit>
 800dae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dae6:	07d9      	lsls	r1, r3, #31
 800dae8:	d405      	bmi.n	800daf6 <_vfiprintf_r+0x2a>
 800daea:	89ab      	ldrh	r3, [r5, #12]
 800daec:	059a      	lsls	r2, r3, #22
 800daee:	d402      	bmi.n	800daf6 <_vfiprintf_r+0x2a>
 800daf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800daf2:	f7fe fbb8 	bl	800c266 <__retarget_lock_acquire_recursive>
 800daf6:	89ab      	ldrh	r3, [r5, #12]
 800daf8:	071b      	lsls	r3, r3, #28
 800dafa:	d501      	bpl.n	800db00 <_vfiprintf_r+0x34>
 800dafc:	692b      	ldr	r3, [r5, #16]
 800dafe:	b99b      	cbnz	r3, 800db28 <_vfiprintf_r+0x5c>
 800db00:	4629      	mov	r1, r5
 800db02:	4630      	mov	r0, r6
 800db04:	f000 f938 	bl	800dd78 <__swsetup_r>
 800db08:	b170      	cbz	r0, 800db28 <_vfiprintf_r+0x5c>
 800db0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db0c:	07dc      	lsls	r4, r3, #31
 800db0e:	d504      	bpl.n	800db1a <_vfiprintf_r+0x4e>
 800db10:	f04f 30ff 	mov.w	r0, #4294967295
 800db14:	b01d      	add	sp, #116	@ 0x74
 800db16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1a:	89ab      	ldrh	r3, [r5, #12]
 800db1c:	0598      	lsls	r0, r3, #22
 800db1e:	d4f7      	bmi.n	800db10 <_vfiprintf_r+0x44>
 800db20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db22:	f7fe fba1 	bl	800c268 <__retarget_lock_release_recursive>
 800db26:	e7f3      	b.n	800db10 <_vfiprintf_r+0x44>
 800db28:	2300      	movs	r3, #0
 800db2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800db2c:	2320      	movs	r3, #32
 800db2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db32:	f8cd 800c 	str.w	r8, [sp, #12]
 800db36:	2330      	movs	r3, #48	@ 0x30
 800db38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dce8 <_vfiprintf_r+0x21c>
 800db3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db40:	f04f 0901 	mov.w	r9, #1
 800db44:	4623      	mov	r3, r4
 800db46:	469a      	mov	sl, r3
 800db48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db4c:	b10a      	cbz	r2, 800db52 <_vfiprintf_r+0x86>
 800db4e:	2a25      	cmp	r2, #37	@ 0x25
 800db50:	d1f9      	bne.n	800db46 <_vfiprintf_r+0x7a>
 800db52:	ebba 0b04 	subs.w	fp, sl, r4
 800db56:	d00b      	beq.n	800db70 <_vfiprintf_r+0xa4>
 800db58:	465b      	mov	r3, fp
 800db5a:	4622      	mov	r2, r4
 800db5c:	4629      	mov	r1, r5
 800db5e:	4630      	mov	r0, r6
 800db60:	f7ff ffa2 	bl	800daa8 <__sfputs_r>
 800db64:	3001      	adds	r0, #1
 800db66:	f000 80a7 	beq.w	800dcb8 <_vfiprintf_r+0x1ec>
 800db6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db6c:	445a      	add	r2, fp
 800db6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800db70:	f89a 3000 	ldrb.w	r3, [sl]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 809f 	beq.w	800dcb8 <_vfiprintf_r+0x1ec>
 800db7a:	2300      	movs	r3, #0
 800db7c:	f04f 32ff 	mov.w	r2, #4294967295
 800db80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db84:	f10a 0a01 	add.w	sl, sl, #1
 800db88:	9304      	str	r3, [sp, #16]
 800db8a:	9307      	str	r3, [sp, #28]
 800db8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db90:	931a      	str	r3, [sp, #104]	@ 0x68
 800db92:	4654      	mov	r4, sl
 800db94:	2205      	movs	r2, #5
 800db96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9a:	4853      	ldr	r0, [pc, #332]	@ (800dce8 <_vfiprintf_r+0x21c>)
 800db9c:	f7f2 fb40 	bl	8000220 <memchr>
 800dba0:	9a04      	ldr	r2, [sp, #16]
 800dba2:	b9d8      	cbnz	r0, 800dbdc <_vfiprintf_r+0x110>
 800dba4:	06d1      	lsls	r1, r2, #27
 800dba6:	bf44      	itt	mi
 800dba8:	2320      	movmi	r3, #32
 800dbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbae:	0713      	lsls	r3, r2, #28
 800dbb0:	bf44      	itt	mi
 800dbb2:	232b      	movmi	r3, #43	@ 0x2b
 800dbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbbe:	d015      	beq.n	800dbec <_vfiprintf_r+0x120>
 800dbc0:	9a07      	ldr	r2, [sp, #28]
 800dbc2:	4654      	mov	r4, sl
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	f04f 0c0a 	mov.w	ip, #10
 800dbca:	4621      	mov	r1, r4
 800dbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbd0:	3b30      	subs	r3, #48	@ 0x30
 800dbd2:	2b09      	cmp	r3, #9
 800dbd4:	d94b      	bls.n	800dc6e <_vfiprintf_r+0x1a2>
 800dbd6:	b1b0      	cbz	r0, 800dc06 <_vfiprintf_r+0x13a>
 800dbd8:	9207      	str	r2, [sp, #28]
 800dbda:	e014      	b.n	800dc06 <_vfiprintf_r+0x13a>
 800dbdc:	eba0 0308 	sub.w	r3, r0, r8
 800dbe0:	fa09 f303 	lsl.w	r3, r9, r3
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	9304      	str	r3, [sp, #16]
 800dbe8:	46a2      	mov	sl, r4
 800dbea:	e7d2      	b.n	800db92 <_vfiprintf_r+0xc6>
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	1d19      	adds	r1, r3, #4
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	9103      	str	r1, [sp, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	bfbb      	ittet	lt
 800dbf8:	425b      	neglt	r3, r3
 800dbfa:	f042 0202 	orrlt.w	r2, r2, #2
 800dbfe:	9307      	strge	r3, [sp, #28]
 800dc00:	9307      	strlt	r3, [sp, #28]
 800dc02:	bfb8      	it	lt
 800dc04:	9204      	strlt	r2, [sp, #16]
 800dc06:	7823      	ldrb	r3, [r4, #0]
 800dc08:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc0a:	d10a      	bne.n	800dc22 <_vfiprintf_r+0x156>
 800dc0c:	7863      	ldrb	r3, [r4, #1]
 800dc0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc10:	d132      	bne.n	800dc78 <_vfiprintf_r+0x1ac>
 800dc12:	9b03      	ldr	r3, [sp, #12]
 800dc14:	1d1a      	adds	r2, r3, #4
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	9203      	str	r2, [sp, #12]
 800dc1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc1e:	3402      	adds	r4, #2
 800dc20:	9305      	str	r3, [sp, #20]
 800dc22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dcf8 <_vfiprintf_r+0x22c>
 800dc26:	7821      	ldrb	r1, [r4, #0]
 800dc28:	2203      	movs	r2, #3
 800dc2a:	4650      	mov	r0, sl
 800dc2c:	f7f2 faf8 	bl	8000220 <memchr>
 800dc30:	b138      	cbz	r0, 800dc42 <_vfiprintf_r+0x176>
 800dc32:	9b04      	ldr	r3, [sp, #16]
 800dc34:	eba0 000a 	sub.w	r0, r0, sl
 800dc38:	2240      	movs	r2, #64	@ 0x40
 800dc3a:	4082      	lsls	r2, r0
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	3401      	adds	r4, #1
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc46:	4829      	ldr	r0, [pc, #164]	@ (800dcec <_vfiprintf_r+0x220>)
 800dc48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc4c:	2206      	movs	r2, #6
 800dc4e:	f7f2 fae7 	bl	8000220 <memchr>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d03f      	beq.n	800dcd6 <_vfiprintf_r+0x20a>
 800dc56:	4b26      	ldr	r3, [pc, #152]	@ (800dcf0 <_vfiprintf_r+0x224>)
 800dc58:	bb1b      	cbnz	r3, 800dca2 <_vfiprintf_r+0x1d6>
 800dc5a:	9b03      	ldr	r3, [sp, #12]
 800dc5c:	3307      	adds	r3, #7
 800dc5e:	f023 0307 	bic.w	r3, r3, #7
 800dc62:	3308      	adds	r3, #8
 800dc64:	9303      	str	r3, [sp, #12]
 800dc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc68:	443b      	add	r3, r7
 800dc6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc6c:	e76a      	b.n	800db44 <_vfiprintf_r+0x78>
 800dc6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc72:	460c      	mov	r4, r1
 800dc74:	2001      	movs	r0, #1
 800dc76:	e7a8      	b.n	800dbca <_vfiprintf_r+0xfe>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	3401      	adds	r4, #1
 800dc7c:	9305      	str	r3, [sp, #20]
 800dc7e:	4619      	mov	r1, r3
 800dc80:	f04f 0c0a 	mov.w	ip, #10
 800dc84:	4620      	mov	r0, r4
 800dc86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc8a:	3a30      	subs	r2, #48	@ 0x30
 800dc8c:	2a09      	cmp	r2, #9
 800dc8e:	d903      	bls.n	800dc98 <_vfiprintf_r+0x1cc>
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d0c6      	beq.n	800dc22 <_vfiprintf_r+0x156>
 800dc94:	9105      	str	r1, [sp, #20]
 800dc96:	e7c4      	b.n	800dc22 <_vfiprintf_r+0x156>
 800dc98:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e7f0      	b.n	800dc84 <_vfiprintf_r+0x1b8>
 800dca2:	ab03      	add	r3, sp, #12
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	462a      	mov	r2, r5
 800dca8:	4b12      	ldr	r3, [pc, #72]	@ (800dcf4 <_vfiprintf_r+0x228>)
 800dcaa:	a904      	add	r1, sp, #16
 800dcac:	4630      	mov	r0, r6
 800dcae:	f7fd fda1 	bl	800b7f4 <_printf_float>
 800dcb2:	4607      	mov	r7, r0
 800dcb4:	1c78      	adds	r0, r7, #1
 800dcb6:	d1d6      	bne.n	800dc66 <_vfiprintf_r+0x19a>
 800dcb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcba:	07d9      	lsls	r1, r3, #31
 800dcbc:	d405      	bmi.n	800dcca <_vfiprintf_r+0x1fe>
 800dcbe:	89ab      	ldrh	r3, [r5, #12]
 800dcc0:	059a      	lsls	r2, r3, #22
 800dcc2:	d402      	bmi.n	800dcca <_vfiprintf_r+0x1fe>
 800dcc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcc6:	f7fe facf 	bl	800c268 <__retarget_lock_release_recursive>
 800dcca:	89ab      	ldrh	r3, [r5, #12]
 800dccc:	065b      	lsls	r3, r3, #25
 800dcce:	f53f af1f 	bmi.w	800db10 <_vfiprintf_r+0x44>
 800dcd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcd4:	e71e      	b.n	800db14 <_vfiprintf_r+0x48>
 800dcd6:	ab03      	add	r3, sp, #12
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	462a      	mov	r2, r5
 800dcdc:	4b05      	ldr	r3, [pc, #20]	@ (800dcf4 <_vfiprintf_r+0x228>)
 800dcde:	a904      	add	r1, sp, #16
 800dce0:	4630      	mov	r0, r6
 800dce2:	f7fe f81f 	bl	800bd24 <_printf_i>
 800dce6:	e7e4      	b.n	800dcb2 <_vfiprintf_r+0x1e6>
 800dce8:	0800e25c 	.word	0x0800e25c
 800dcec:	0800e266 	.word	0x0800e266
 800dcf0:	0800b7f5 	.word	0x0800b7f5
 800dcf4:	0800daa9 	.word	0x0800daa9
 800dcf8:	0800e262 	.word	0x0800e262

0800dcfc <__swbuf_r>:
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	460e      	mov	r6, r1
 800dd00:	4614      	mov	r4, r2
 800dd02:	4605      	mov	r5, r0
 800dd04:	b118      	cbz	r0, 800dd0e <__swbuf_r+0x12>
 800dd06:	6a03      	ldr	r3, [r0, #32]
 800dd08:	b90b      	cbnz	r3, 800dd0e <__swbuf_r+0x12>
 800dd0a:	f7fe f9b5 	bl	800c078 <__sinit>
 800dd0e:	69a3      	ldr	r3, [r4, #24]
 800dd10:	60a3      	str	r3, [r4, #8]
 800dd12:	89a3      	ldrh	r3, [r4, #12]
 800dd14:	071a      	lsls	r2, r3, #28
 800dd16:	d501      	bpl.n	800dd1c <__swbuf_r+0x20>
 800dd18:	6923      	ldr	r3, [r4, #16]
 800dd1a:	b943      	cbnz	r3, 800dd2e <__swbuf_r+0x32>
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f000 f82a 	bl	800dd78 <__swsetup_r>
 800dd24:	b118      	cbz	r0, 800dd2e <__swbuf_r+0x32>
 800dd26:	f04f 37ff 	mov.w	r7, #4294967295
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	6922      	ldr	r2, [r4, #16]
 800dd32:	1a98      	subs	r0, r3, r2
 800dd34:	6963      	ldr	r3, [r4, #20]
 800dd36:	b2f6      	uxtb	r6, r6
 800dd38:	4283      	cmp	r3, r0
 800dd3a:	4637      	mov	r7, r6
 800dd3c:	dc05      	bgt.n	800dd4a <__swbuf_r+0x4e>
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4628      	mov	r0, r5
 800dd42:	f7ff fdf7 	bl	800d934 <_fflush_r>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d1ed      	bne.n	800dd26 <__swbuf_r+0x2a>
 800dd4a:	68a3      	ldr	r3, [r4, #8]
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	60a3      	str	r3, [r4, #8]
 800dd50:	6823      	ldr	r3, [r4, #0]
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	6022      	str	r2, [r4, #0]
 800dd56:	701e      	strb	r6, [r3, #0]
 800dd58:	6962      	ldr	r2, [r4, #20]
 800dd5a:	1c43      	adds	r3, r0, #1
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d004      	beq.n	800dd6a <__swbuf_r+0x6e>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	07db      	lsls	r3, r3, #31
 800dd64:	d5e1      	bpl.n	800dd2a <__swbuf_r+0x2e>
 800dd66:	2e0a      	cmp	r6, #10
 800dd68:	d1df      	bne.n	800dd2a <__swbuf_r+0x2e>
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f7ff fde1 	bl	800d934 <_fflush_r>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d0d9      	beq.n	800dd2a <__swbuf_r+0x2e>
 800dd76:	e7d6      	b.n	800dd26 <__swbuf_r+0x2a>

0800dd78 <__swsetup_r>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	4b29      	ldr	r3, [pc, #164]	@ (800de20 <__swsetup_r+0xa8>)
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	6818      	ldr	r0, [r3, #0]
 800dd80:	460c      	mov	r4, r1
 800dd82:	b118      	cbz	r0, 800dd8c <__swsetup_r+0x14>
 800dd84:	6a03      	ldr	r3, [r0, #32]
 800dd86:	b90b      	cbnz	r3, 800dd8c <__swsetup_r+0x14>
 800dd88:	f7fe f976 	bl	800c078 <__sinit>
 800dd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd90:	0719      	lsls	r1, r3, #28
 800dd92:	d422      	bmi.n	800ddda <__swsetup_r+0x62>
 800dd94:	06da      	lsls	r2, r3, #27
 800dd96:	d407      	bmi.n	800dda8 <__swsetup_r+0x30>
 800dd98:	2209      	movs	r2, #9
 800dd9a:	602a      	str	r2, [r5, #0]
 800dd9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dda0:	81a3      	strh	r3, [r4, #12]
 800dda2:	f04f 30ff 	mov.w	r0, #4294967295
 800dda6:	e033      	b.n	800de10 <__swsetup_r+0x98>
 800dda8:	0758      	lsls	r0, r3, #29
 800ddaa:	d512      	bpl.n	800ddd2 <__swsetup_r+0x5a>
 800ddac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddae:	b141      	cbz	r1, 800ddc2 <__swsetup_r+0x4a>
 800ddb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddb4:	4299      	cmp	r1, r3
 800ddb6:	d002      	beq.n	800ddbe <__swsetup_r+0x46>
 800ddb8:	4628      	mov	r0, r5
 800ddba:	f7ff f8bd 	bl	800cf38 <_free_r>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ddc8:	81a3      	strh	r3, [r4, #12]
 800ddca:	2300      	movs	r3, #0
 800ddcc:	6063      	str	r3, [r4, #4]
 800ddce:	6923      	ldr	r3, [r4, #16]
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	f043 0308 	orr.w	r3, r3, #8
 800ddd8:	81a3      	strh	r3, [r4, #12]
 800ddda:	6923      	ldr	r3, [r4, #16]
 800dddc:	b94b      	cbnz	r3, 800ddf2 <__swsetup_r+0x7a>
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dde4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dde8:	d003      	beq.n	800ddf2 <__swsetup_r+0x7a>
 800ddea:	4621      	mov	r1, r4
 800ddec:	4628      	mov	r0, r5
 800ddee:	f000 f883 	bl	800def8 <__smakebuf_r>
 800ddf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf6:	f013 0201 	ands.w	r2, r3, #1
 800ddfa:	d00a      	beq.n	800de12 <__swsetup_r+0x9a>
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	60a2      	str	r2, [r4, #8]
 800de00:	6962      	ldr	r2, [r4, #20]
 800de02:	4252      	negs	r2, r2
 800de04:	61a2      	str	r2, [r4, #24]
 800de06:	6922      	ldr	r2, [r4, #16]
 800de08:	b942      	cbnz	r2, 800de1c <__swsetup_r+0xa4>
 800de0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de0e:	d1c5      	bne.n	800dd9c <__swsetup_r+0x24>
 800de10:	bd38      	pop	{r3, r4, r5, pc}
 800de12:	0799      	lsls	r1, r3, #30
 800de14:	bf58      	it	pl
 800de16:	6962      	ldrpl	r2, [r4, #20]
 800de18:	60a2      	str	r2, [r4, #8]
 800de1a:	e7f4      	b.n	800de06 <__swsetup_r+0x8e>
 800de1c:	2000      	movs	r0, #0
 800de1e:	e7f7      	b.n	800de10 <__swsetup_r+0x98>
 800de20:	20000044 	.word	0x20000044

0800de24 <_raise_r>:
 800de24:	291f      	cmp	r1, #31
 800de26:	b538      	push	{r3, r4, r5, lr}
 800de28:	4605      	mov	r5, r0
 800de2a:	460c      	mov	r4, r1
 800de2c:	d904      	bls.n	800de38 <_raise_r+0x14>
 800de2e:	2316      	movs	r3, #22
 800de30:	6003      	str	r3, [r0, #0]
 800de32:	f04f 30ff 	mov.w	r0, #4294967295
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de3a:	b112      	cbz	r2, 800de42 <_raise_r+0x1e>
 800de3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de40:	b94b      	cbnz	r3, 800de56 <_raise_r+0x32>
 800de42:	4628      	mov	r0, r5
 800de44:	f000 f830 	bl	800dea8 <_getpid_r>
 800de48:	4622      	mov	r2, r4
 800de4a:	4601      	mov	r1, r0
 800de4c:	4628      	mov	r0, r5
 800de4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de52:	f000 b817 	b.w	800de84 <_kill_r>
 800de56:	2b01      	cmp	r3, #1
 800de58:	d00a      	beq.n	800de70 <_raise_r+0x4c>
 800de5a:	1c59      	adds	r1, r3, #1
 800de5c:	d103      	bne.n	800de66 <_raise_r+0x42>
 800de5e:	2316      	movs	r3, #22
 800de60:	6003      	str	r3, [r0, #0]
 800de62:	2001      	movs	r0, #1
 800de64:	e7e7      	b.n	800de36 <_raise_r+0x12>
 800de66:	2100      	movs	r1, #0
 800de68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de6c:	4620      	mov	r0, r4
 800de6e:	4798      	blx	r3
 800de70:	2000      	movs	r0, #0
 800de72:	e7e0      	b.n	800de36 <_raise_r+0x12>

0800de74 <raise>:
 800de74:	4b02      	ldr	r3, [pc, #8]	@ (800de80 <raise+0xc>)
 800de76:	4601      	mov	r1, r0
 800de78:	6818      	ldr	r0, [r3, #0]
 800de7a:	f7ff bfd3 	b.w	800de24 <_raise_r>
 800de7e:	bf00      	nop
 800de80:	20000044 	.word	0x20000044

0800de84 <_kill_r>:
 800de84:	b538      	push	{r3, r4, r5, lr}
 800de86:	4d07      	ldr	r5, [pc, #28]	@ (800dea4 <_kill_r+0x20>)
 800de88:	2300      	movs	r3, #0
 800de8a:	4604      	mov	r4, r0
 800de8c:	4608      	mov	r0, r1
 800de8e:	4611      	mov	r1, r2
 800de90:	602b      	str	r3, [r5, #0]
 800de92:	f7f5 f913 	bl	80030bc <_kill>
 800de96:	1c43      	adds	r3, r0, #1
 800de98:	d102      	bne.n	800dea0 <_kill_r+0x1c>
 800de9a:	682b      	ldr	r3, [r5, #0]
 800de9c:	b103      	cbz	r3, 800dea0 <_kill_r+0x1c>
 800de9e:	6023      	str	r3, [r4, #0]
 800dea0:	bd38      	pop	{r3, r4, r5, pc}
 800dea2:	bf00      	nop
 800dea4:	20002bbc 	.word	0x20002bbc

0800dea8 <_getpid_r>:
 800dea8:	f7f5 b900 	b.w	80030ac <_getpid>

0800deac <__swhatbuf_r>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	460c      	mov	r4, r1
 800deb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb4:	2900      	cmp	r1, #0
 800deb6:	b096      	sub	sp, #88	@ 0x58
 800deb8:	4615      	mov	r5, r2
 800deba:	461e      	mov	r6, r3
 800debc:	da0d      	bge.n	800deda <__swhatbuf_r+0x2e>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dec4:	f04f 0100 	mov.w	r1, #0
 800dec8:	bf14      	ite	ne
 800deca:	2340      	movne	r3, #64	@ 0x40
 800decc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ded0:	2000      	movs	r0, #0
 800ded2:	6031      	str	r1, [r6, #0]
 800ded4:	602b      	str	r3, [r5, #0]
 800ded6:	b016      	add	sp, #88	@ 0x58
 800ded8:	bd70      	pop	{r4, r5, r6, pc}
 800deda:	466a      	mov	r2, sp
 800dedc:	f000 f848 	bl	800df70 <_fstat_r>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dbec      	blt.n	800debe <__swhatbuf_r+0x12>
 800dee4:	9901      	ldr	r1, [sp, #4]
 800dee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800deea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800deee:	4259      	negs	r1, r3
 800def0:	4159      	adcs	r1, r3
 800def2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800def6:	e7eb      	b.n	800ded0 <__swhatbuf_r+0x24>

0800def8 <__smakebuf_r>:
 800def8:	898b      	ldrh	r3, [r1, #12]
 800defa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800defc:	079d      	lsls	r5, r3, #30
 800defe:	4606      	mov	r6, r0
 800df00:	460c      	mov	r4, r1
 800df02:	d507      	bpl.n	800df14 <__smakebuf_r+0x1c>
 800df04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	6123      	str	r3, [r4, #16]
 800df0c:	2301      	movs	r3, #1
 800df0e:	6163      	str	r3, [r4, #20]
 800df10:	b003      	add	sp, #12
 800df12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df14:	ab01      	add	r3, sp, #4
 800df16:	466a      	mov	r2, sp
 800df18:	f7ff ffc8 	bl	800deac <__swhatbuf_r>
 800df1c:	9f00      	ldr	r7, [sp, #0]
 800df1e:	4605      	mov	r5, r0
 800df20:	4639      	mov	r1, r7
 800df22:	4630      	mov	r0, r6
 800df24:	f7ff f87c 	bl	800d020 <_malloc_r>
 800df28:	b948      	cbnz	r0, 800df3e <__smakebuf_r+0x46>
 800df2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df2e:	059a      	lsls	r2, r3, #22
 800df30:	d4ee      	bmi.n	800df10 <__smakebuf_r+0x18>
 800df32:	f023 0303 	bic.w	r3, r3, #3
 800df36:	f043 0302 	orr.w	r3, r3, #2
 800df3a:	81a3      	strh	r3, [r4, #12]
 800df3c:	e7e2      	b.n	800df04 <__smakebuf_r+0xc>
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	6020      	str	r0, [r4, #0]
 800df42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df46:	81a3      	strh	r3, [r4, #12]
 800df48:	9b01      	ldr	r3, [sp, #4]
 800df4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df4e:	b15b      	cbz	r3, 800df68 <__smakebuf_r+0x70>
 800df50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df54:	4630      	mov	r0, r6
 800df56:	f000 f81d 	bl	800df94 <_isatty_r>
 800df5a:	b128      	cbz	r0, 800df68 <__smakebuf_r+0x70>
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f023 0303 	bic.w	r3, r3, #3
 800df62:	f043 0301 	orr.w	r3, r3, #1
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	89a3      	ldrh	r3, [r4, #12]
 800df6a:	431d      	orrs	r5, r3
 800df6c:	81a5      	strh	r5, [r4, #12]
 800df6e:	e7cf      	b.n	800df10 <__smakebuf_r+0x18>

0800df70 <_fstat_r>:
 800df70:	b538      	push	{r3, r4, r5, lr}
 800df72:	4d07      	ldr	r5, [pc, #28]	@ (800df90 <_fstat_r+0x20>)
 800df74:	2300      	movs	r3, #0
 800df76:	4604      	mov	r4, r0
 800df78:	4608      	mov	r0, r1
 800df7a:	4611      	mov	r1, r2
 800df7c:	602b      	str	r3, [r5, #0]
 800df7e:	f7f5 f8fd 	bl	800317c <_fstat>
 800df82:	1c43      	adds	r3, r0, #1
 800df84:	d102      	bne.n	800df8c <_fstat_r+0x1c>
 800df86:	682b      	ldr	r3, [r5, #0]
 800df88:	b103      	cbz	r3, 800df8c <_fstat_r+0x1c>
 800df8a:	6023      	str	r3, [r4, #0]
 800df8c:	bd38      	pop	{r3, r4, r5, pc}
 800df8e:	bf00      	nop
 800df90:	20002bbc 	.word	0x20002bbc

0800df94 <_isatty_r>:
 800df94:	b538      	push	{r3, r4, r5, lr}
 800df96:	4d06      	ldr	r5, [pc, #24]	@ (800dfb0 <_isatty_r+0x1c>)
 800df98:	2300      	movs	r3, #0
 800df9a:	4604      	mov	r4, r0
 800df9c:	4608      	mov	r0, r1
 800df9e:	602b      	str	r3, [r5, #0]
 800dfa0:	f7f5 f8fc 	bl	800319c <_isatty>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d102      	bne.n	800dfae <_isatty_r+0x1a>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	b103      	cbz	r3, 800dfae <_isatty_r+0x1a>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	20002bbc 	.word	0x20002bbc

0800dfb4 <_init>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	bf00      	nop
 800dfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfba:	bc08      	pop	{r3}
 800dfbc:	469e      	mov	lr, r3
 800dfbe:	4770      	bx	lr

0800dfc0 <_fini>:
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc2:	bf00      	nop
 800dfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfc6:	bc08      	pop	{r3}
 800dfc8:	469e      	mov	lr, r3
 800dfca:	4770      	bx	lr
